
stm32_FSM_CPP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007974  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c4  08007a84  08007a84  00017a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008048  08008048  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08008048  08008048  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008048  08008048  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008048  08008048  00018048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08008050  08008050  00018050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08008058  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020b4  20000060  080080b8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002114  080080b8  00022114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026806  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fb7  00000000  00000000  000468d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ac0  00000000  00000000  0004a890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001469  00000000  00000000  0004c350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006f3b  00000000  00000000  0004d7b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015d67  00000000  00000000  000546f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ac8d4  00000000  00000000  0006a45b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007d3c  00000000  00000000  00116d30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0011ea6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08007a6c 	.word	0x08007a6c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08007a6c 	.word	0x08007a6c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <_ZSt17__size_to_integerj>:

  // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
  inline _GLIBCXX_CONSTEXPR int
  __size_to_integer(int __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR unsigned
  __size_to_integer(unsigned __n) { return __n; }
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr

08000a60 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr

08000a76 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a84:	d205      	bcs.n	8000a92 <_ZSt16__deque_buf_sizej+0x1c>
 8000a86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a90:	e000      	b.n	8000a94 <_ZSt16__deque_buf_sizej+0x1e>
 8000a92:	2301      	movs	r3, #1
 8000a94:	4618      	mov	r0, r3
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr

08000a9e <_ZNKSt4hashIaEclEa>:

  /// Explicit specialization for char.
  _Cxx_hashtable_define_trivial_hash(char)

  /// Explicit specialization for signed char.
  _Cxx_hashtable_define_trivial_hash(signed char)
 8000a9e:	b480      	push	{r7}
 8000aa0:	b083      	sub	sp, #12
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
 8000aa6:	460b      	mov	r3, r1
 8000aa8:	70fb      	strb	r3, [r7, #3]
 8000aaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <_ZNSt8__detail15_Hash_node_baseC1Ev>:
   */
  struct _Hash_node_base
  {
    _Hash_node_base* _M_nxt;

    _Hash_node_base() noexcept : _M_nxt() { }
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr

08000ad2 <_ZNKSt8__detail18_Mod_range_hashingclEjj>:
    typedef std::size_t first_argument_type;
    typedef std::size_t second_argument_type;
    typedef std::size_t result_type;

    result_type
    operator()(first_argument_type __num,
 8000ad2:	b480      	push	{r7}
 8000ad4:	b085      	sub	sp, #20
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	60f8      	str	r0, [r7, #12]
 8000ada:	60b9      	str	r1, [r7, #8]
 8000adc:	607a      	str	r2, [r7, #4]
	       second_argument_type __den) const noexcept
    { return __num % __den; }
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	fbb3 f2f2 	udiv	r2, r3, r2
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	fb01 f202 	mul.w	r2, r1, r2
 8000aec:	1a9b      	subs	r3, r3, r2
 8000aee:	4618      	mov	r0, r3
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <_ZNSt8__detail20_Prime_rehash_policyC1Ef>:
  /// smallest prime that keeps the load factor small enough.
  struct _Prime_rehash_policy
  {
    using __has_load_factor = true_type;

    _Prime_rehash_policy(float __z = 1.0) noexcept
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
    : _M_max_load_factor(__z), _M_next_resize(0) { }
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	683a      	ldr	r2, [r7, #0]
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4618      	mov	r0, r3
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr

08000b1a <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>:
		   std::size_t __n_ins) const;

    typedef std::size_t _State;

    _State
    _M_state() const
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
    { return _M_next_resize; }
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	4618      	mov	r0, r3
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr

08000b30 <_ZNSt5queueIaSt5dequeIaSaIaEEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 fa49 	bl	8000fd2 <_ZNSt5dequeIaSaIaEED1Ev>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <_ZN15TransitionTableC1Ev>:
//volatile Queue eventQueue[NUM_MACHINES];

#include "UML_FSM.hpp"

// TransitionTable constructor
TransitionTable::TransitionTable() : num_states(NUM_STATES), num_events(NUM_EVENTS) {
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b084      	sub	sp, #16
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	3350      	adds	r3, #80	; 0x50
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 fa27 	bl	8000faa <_ZNSt5queueIaSt5dequeIaSaIaEEEC1IS2_vEEv>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	220a      	movs	r2, #10
 8000b60:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	220a      	movs	r2, #10
 8000b68:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
    stateFunctions.fill(nullptr);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60fa      	str	r2, [r7, #12]
 8000b72:	f107 020c 	add.w	r2, r7, #12
 8000b76:	4611      	mov	r1, r2
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 fa4f 	bl	800101c <_ZNSt5arrayIPFvvELj10EE4fillERKS1_>
}
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4618      	mov	r0, r3
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <_ZNSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EEC1Ev>:
    protected:
      typedef std::size_t 				__hash_code;

      // We need the default constructor for the local iterators and _Hashtable
      // default constructor.
      _Hash_code_base() = default;
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f000 fa59 	bl	8001048 <_ZNSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIaELb1EEC1Ev>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <_ZNSt8__detail15_Hashtable_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>:
      _S_node_equals(const _Hash_node_code_cache<true>& __lhn,
		     const _Hash_node_code_cache<true>& __rhn)
      { return __lhn._M_hash_code == __rhn._M_hash_code; }

    protected:
      _Hashtable_base() = default;
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff ffed 	bl	8000b88 <_ZNSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EEC1Ev>
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f000 fa54 	bl	800105c <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIaELb1EEC1Ev>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEELb1EED1Ev>:
    struct _Hashtable_ebo_helper<_Nm, _Tp, true>
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f000 fa5e 	bl	8001088 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEED1Ev>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEEC1Ev>:
      using __buckets_alloc_type =
	__alloc_rebind<__node_alloc_type, __node_base_ptr>;
      using __buckets_alloc_traits = std::allocator_traits<__buckets_alloc_type>;
      using __buckets_ptr = __node_base_ptr*;

      _Hashtable_alloc() = default;
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f000 fa46 	bl	8001070 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEELb1EEC1Ev>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEED1Ev>:
    struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc>
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b082      	sub	sp, #8
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f7ff ffe1 	bl	8000bbe <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEELb1EED1Ev>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>:
		   const _Hash&, const _Equal&, const allocator_type&,
		   false_type __uks);

    public:
      // Constructor, destructor, assignment, swap
      _Hashtable() = default;
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f7ff ffc6 	bl	8000ba0 <_ZNSt8__detail15_Hashtable_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f7ff ffde 	bl	8000bd6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEEC1Ev>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	f103 0218 	add.w	r2, r3, #24
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2201      	movs	r2, #1
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	3308      	adds	r3, #8
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff ff42 	bl	8000ab8 <_ZNSt8__detail15_Hash_node_baseC1Ev>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	3310      	adds	r3, #16
 8000c3e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff ff58 	bl	8000af8 <_ZNSt8__detail20_Prime_rehash_policyC1Ef>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <_ZNSt13unordered_mapIaP9BaseStateSt4hashIaESt8equal_toIaESaISt4pairIKaS1_EEEC1Ev>:
#endif

      //construct/destroy/copy

      /// Default constructor.
      unordered_map() = default;
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff ffcf 	bl	8000c06 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <_ZNSt13unordered_mapIaP9BaseStateSt4hashIaESt8equal_toIaESaISt4pairIKaS1_EEED1Ev>:
    class unordered_map
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 fa0f 	bl	80010a0 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <_ZN15TransitionTableD1Ev>:

// Define StateFunction type
using StateFunction = void (*)();

// TransitionTable class definition
class TransitionTable {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3350      	adds	r3, #80	; 0x50
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff49 	bl	8000b30 <_ZNSt5queueIaSt5dequeIaSaIaEEED1Ev>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <_ZNSt5queueIaSt5dequeIaSaIaEEEaSEOS3_>:
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	4611      	mov	r1, r2
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 fa03 	bl	80010c4 <_ZNSt5dequeIaSaIaEEaSEOS1_>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <_ZN15TransitionTableaSEOS_>:
 8000cc8:	b5b0      	push	{r4, r5, r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	4614      	mov	r4, r2
 8000cd8:	461d      	mov	r5, r3
 8000cda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ce0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ce2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ce6:	e884 0003 	stmia.w	r4, {r0, r1}
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	f102 0428 	add.w	r4, r2, #40	; 0x28
 8000cf2:	f103 0528 	add.w	r5, r3, #40	; 0x28
 8000cf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cfe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d02:	e884 0003 	stmia.w	r4, {r0, r1}
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	3350      	adds	r3, #80	; 0x50
 8000d10:	4619      	mov	r1, r3
 8000d12:	4610      	mov	r0, r2
 8000d14:	f7ff ffc8 	bl	8000ca8 <_ZNSt5queueIaSt5dequeIaSaIaEEEaSEOS3_>
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	f993 2078 	ldrsb.w	r2, [r3, #120]	; 0x78
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	f993 2079 	ldrsb.w	r2, [r3, #121]	; 0x79
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bdb0      	pop	{r4, r5, r7, pc}

08000d3a <_ZN18FiniteStateMachineC1Ev>:

// FiniteStateMachine constructor
FiniteStateMachine::FiniteStateMachine() : thisState(-1), startState(-1) {
 8000d3a:	b590      	push	{r4, r7, lr}
 8000d3c:	b0a3      	sub	sp, #140	; 0x8c
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	3304      	adds	r3, #4
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff ff86 	bl	8000c58 <_ZNSt13unordered_mapIaP9BaseStateSt4hashIaESt8equal_toIaESaISt4pairIKaS1_EEEC1Ev>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	22ff      	movs	r2, #255	; 0xff
 8000d50:	f883 2020 	strb.w	r2, [r3, #32]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	22ff      	movs	r2, #255	; 0xff
 8000d58:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3324      	adds	r3, #36	; 0x24
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fef2 	bl	8000b4a <_ZN15TransitionTableC1Ev>
    transitionTable = TransitionTable();
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff feea 	bl	8000b4a <_ZN15TransitionTableC1Ev>
 8000d76:	f107 030c 	add.w	r3, r7, #12
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4620      	mov	r0, r4
 8000d7e:	f7ff ffa3 	bl	8000cc8 <_ZN15TransitionTableaSEOS_>
 8000d82:	f107 030c 	add.w	r3, r7, #12
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff ff80 	bl	8000c8c <_ZN15TransitionTableD1Ev>
}
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	378c      	adds	r7, #140	; 0x8c
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd90      	pop	{r4, r7, pc}

08000d96 <_ZN18FiniteStateMachineD1Ev>:

// FiniteStateMachine destructor
FiniteStateMachine::~FiniteStateMachine() {}
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3324      	adds	r3, #36	; 0x24
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff ff72 	bl	8000c8c <_ZN15TransitionTableD1Ev>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3304      	adds	r3, #4
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff60 	bl	8000c72 <_ZNSt13unordered_mapIaP9BaseStateSt4hashIaESt8equal_toIaESaISt4pairIKaS1_EEED1Ev>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <_ZN9BaseStateC1EaaP18FiniteStateMachinePFvvE>:

// BaseState constructor
BaseState::BaseState(stateType initial, stateType new_state, FiniteStateMachine* pFSM, StateFunction funct)
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b088      	sub	sp, #32
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	72fb      	strb	r3, [r7, #11]
 8000dca:	4613      	mov	r3, r2
 8000dcc:	72bb      	strb	r3, [r7, #10]
    : initial_state(initial), new_state(new_state), pFiniteStateMachine(pFSM), functPtr(funct) {
 8000dce:	4a11      	ldr	r2, [pc, #68]	; (8000e14 <_ZN9BaseStateC1EaaP18FiniteStateMachinePFvvE+0x58>)
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	711a      	strb	r2, [r3, #4]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	7aba      	ldrb	r2, [r7, #10]
 8000de0:	715a      	strb	r2, [r3, #5]
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000dec:	60da      	str	r2, [r3, #12]
	pFiniteStateMachine->stateDictionary.emplace(initial, this);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	1d19      	adds	r1, r3, #4
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	61fb      	str	r3, [r7, #28]
 8000df8:	f107 0014 	add.w	r0, r7, #20
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	f107 020b 	add.w	r2, r7, #11
 8000e04:	f000 f971 	bl	80010ea <_ZNSt13unordered_mapIaP9BaseStateSt4hashIaESt8equal_toIaESaISt4pairIKaS1_EEE7emplaceIJRaS1_EEES6_INSt8__detail14_Node_iteratorIS8_Lb0ELb0EEEbEDpOT_>
}
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3720      	adds	r7, #32
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	08007b38 	.word	0x08007b38

08000e18 <_ZN9BaseState4nextEv>:
void BaseState::next()
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]

}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr
	...

08000e2c <_ZN14StandardStatesC1EaaP18FiniteStateMachinePFvvE>:
void ChoiseStates::next()
{
	goChoise();
}
// StandardStates constructor
StandardStates::StandardStates(stateType initial_state, stateType new_state, FiniteStateMachine* pFiniteStateMachine, StateFunction functPtr)
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af02      	add	r7, sp, #8
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	460b      	mov	r3, r1
 8000e38:	72fb      	strb	r3, [r7, #11]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	72bb      	strb	r3, [r7, #10]
    : BaseState(initial_state, new_state, pFiniteStateMachine, functPtr) {
 8000e3e:	68f8      	ldr	r0, [r7, #12]
 8000e40:	f997 200a 	ldrsb.w	r2, [r7, #10]
 8000e44:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f7ff ffb5 	bl	8000dbc <_ZN9BaseStateC1EaaP18FiniteStateMachinePFvvE>
 8000e52:	4a09      	ldr	r2, [pc, #36]	; (8000e78 <_ZN14StandardStatesC1EaaP18FiniteStateMachinePFvvE+0x4c>)
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	601a      	str	r2, [r3, #0]
    pFiniteStateMachine->transitionTable.stateFunctions.at(initial_state) = functPtr;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3324      	adds	r3, #36	; 0x24
 8000e5c:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8000e60:	4611      	mov	r1, r2
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f95c 	bl	8001120 <_ZNSt5arrayIPFvvELj10EE2atEj>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	6013      	str	r3, [r2, #0]
}
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	4618      	mov	r0, r3
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	08007b2c 	.word	0x08007b2c

08000e7c <_ZN14StandardStates3endEv>:

// StandardStates method: end
void StandardStates::end() {
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]

    pFiniteStateMachine->thisState = new_state;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	f992 2005 	ldrsb.w	r2, [r2, #5]
 8000e8e:	f883 2020 	strb.w	r2, [r3, #32]
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr

08000e9c <_ZN14StandardStates4nextEv>:

void StandardStates::next ()
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
	end();
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ffe9 	bl	8000e7c <_ZN14StandardStates3endEv>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <_ZN18FiniteStateMachine19createStateStandartEaaPFvvE>:
    }
}


// FiniteStateMachine method: createStateStandart
StandardStates FiniteStateMachine::createStateStandart(stateType initial_state, stateType new_state, StateFunction functPtr) {
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b086      	sub	sp, #24
 8000eb6:	af02      	add	r7, sp, #8
 8000eb8:	60f8      	str	r0, [r7, #12]
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	4611      	mov	r1, r2
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	71fb      	strb	r3, [r7, #7]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	71bb      	strb	r3, [r7, #6]
    return StandardStates(initial_state, new_state, this, functPtr);
 8000ec8:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8000ecc:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	68f8      	ldr	r0, [r7, #12]
 8000ed8:	f7ff ffa8 	bl	8000e2c <_ZN14StandardStatesC1EaaP18FiniteStateMachinePFvvE>
}
 8000edc:	68f8      	ldr	r0, [r7, #12]
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <_ZN18FiniteStateMachine13setStartStateEa>:
void FiniteStateMachine::sendEvent(stateType event) {
    this->transitionTable.eventQueue.push(event);
}

// FiniteStateMachine method: setStartState
void FiniteStateMachine::setStartState(stateType state) {
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	70fb      	strb	r3, [r7, #3]
    startState = state;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	78fa      	ldrb	r2, [r7, #3]
 8000ef4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    //this->pState =
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr

08000f02 <_ZN18FiniteStateMachine12stateMachineEv>:

// FiniteStateMachine method: stateMashine
void FiniteStateMachine::stateMachine()
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
    this->thisState = startState;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f993 2022 	ldrsb.w	r2, [r3, #34]	; 0x22
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f883 2020 	strb.w	r2, [r3, #32]
    for(;;) {
    	this->pState = stateDictionary[thisState];
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	1d1a      	adds	r2, r3, #4
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	3320      	adds	r3, #32
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4610      	mov	r0, r2
 8000f22:	f000 f917 	bl	8001154 <_ZNSt13unordered_mapIaP9BaseStateSt4hashIaESt8equal_toIaESaISt4pairIKaS1_EEEixERS7_>
 8000f26:	4603      	mov	r3, r0
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	601a      	str	r2, [r3, #0]
    	this->transitionTable.stateFunctions[this->thisState]();
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	f000 f918 	bl	8001172 <_ZNSt5arrayIPFvvELj10EEixEj>
 8000f42:	4603      	mov	r3, r0
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4798      	blx	r3
    	this->pState = stateDictionary[thisState];
 8000f48:	e7e5      	b.n	8000f16 <_ZN18FiniteStateMachine12stateMachineEv+0x14>

08000f4a <_ZN18FiniteStateMachine4nextEv>:
    }
}
void FiniteStateMachine::next()
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
	pState->next();
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4610      	mov	r0, r2
 8000f60:	4798      	blx	r3
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d201      	bcs.n	8000f84 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	e000      	b.n	8000f86 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8000f84:	687b      	ldr	r3, [r7, #4]
    }
 8000f86:	4618      	mov	r0, r3
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr

08000f90 <_ZNSt5dequeIaSaIaEEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f90e 	bl	80011bc <_ZNSt11_Deque_baseIaSaIaEEC1Ev>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <_ZNSt5queueIaSt5dequeIaSaIaEEEC1IS2_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
	: c() { }
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	2328      	movs	r3, #40	; 0x28
 8000fb8:	461a      	mov	r2, r3
 8000fba:	2100      	movs	r1, #0
 8000fbc:	f006 fc78 	bl	80078b0 <memset>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff ffe4 	bl	8000f90 <_ZNSt5dequeIaSaIaEEC1Ev>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <_ZNSt5dequeIaSaIaEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b08a      	sub	sp, #40	; 0x28
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8000fda:	f107 0308 	add.w	r3, r7, #8
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 f91e 	bl	8001222 <_ZNSt5dequeIaSaIaEE5beginEv>
 8000fe6:	f107 0318 	add.w	r3, r7, #24
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 f927 	bl	8001240 <_ZNSt5dequeIaSaIaEE3endEv>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 f932 	bl	800125e <_ZNSt11_Deque_baseIaSaIaEE19_M_get_Tp_allocatorEv>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	f107 0218 	add.w	r2, r7, #24
 8001000:	f107 0108 	add.w	r1, r7, #8
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f000 f94f 	bl	80012a8 <_ZNSt5dequeIaSaIaEE15_M_destroy_dataESt15_Deque_iteratorIaRaPaES5_RKS0_>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4618      	mov	r0, r3
 800100e:	f000 f8e6 	bl	80011de <_ZNSt11_Deque_baseIaSaIaEED1Ev>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4618      	mov	r0, r3
 8001016:	3728      	adds	r7, #40	; 0x28
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <_ZNSt5arrayIPFvvELj10EE4fillERKS1_>:

      // No explicit construct/copy/destroy for aggregate type.

      // DR 776.
      _GLIBCXX20_CONSTEXPR void
      fill(const value_type& __u)
 800101c:	b590      	push	{r4, r7, lr}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
      { std::fill_n(begin(), size(), __u); }
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 f94a 	bl	80012c0 <_ZNSt5arrayIPFvvELj10EE5beginEv>
 800102c:	4604      	mov	r4, r0
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f000 f952 	bl	80012d8 <_ZNKSt5arrayIPFvvELj10EE4sizeEv>
 8001034:	4603      	mov	r3, r0
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	4619      	mov	r1, r3
 800103a:	4620      	mov	r0, r4
 800103c:	f000 f956 	bl	80012ec <_ZSt6fill_nIPPFvvEjS1_ET_S3_T0_RKT1_>
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bd90      	pop	{r4, r7, pc}

08001048 <_ZNSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIaELb1EEC1Ev>:
      _Hashtable_ebo_helper() noexcept(noexcept(_Tp())) : _Tp() { }
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4618      	mov	r0, r3
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr

0800105c <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIaELb1EEC1Ev>:
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr

08001070 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEELb1EEC1Ev>:
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f000 f952 	bl	8001322 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEC1Ev>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f000 f952 	bl	800133a <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEED1Ev>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>:

  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    ~_Hashtable() noexcept
    {
      clear();
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f000 f950 	bl	800134e <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>
      _M_deallocate_buckets();
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f000 f96d 	bl	800138e <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
    }
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff fd9a 	bl	8000bee <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEED1Ev>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <_ZNSt5dequeIaSaIaEEaSEOS1_>:
       *  The contents of @a __x are moved into this deque (without copying,
       *  if the allocators permit it).
       *  @a __x is a valid, but unspecified %deque.
       */
      deque&
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
      {
	using __always_equal = typename _Alloc_traits::is_always_equal;
	_M_move_assign1(std::move(__x), __always_equal{});
 80010ce:	6838      	ldr	r0, [r7, #0]
 80010d0:	f000 f96d 	bl	80013ae <_ZSt4moveIRSt5dequeIaSaIaEEEONSt16remove_referenceIT_E4typeEOS5_>
 80010d4:	4603      	mov	r3, r0
 80010d6:	4622      	mov	r2, r4
 80010d8:	4619      	mov	r1, r3
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 f971 	bl	80013c2 <_ZNSt5dequeIaSaIaEE15_M_move_assign1EOS1_St17integral_constantIbLb1EE>
	return *this;
 80010e0:	687b      	ldr	r3, [r7, #4]
      }
 80010e2:	4618      	mov	r0, r3
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd90      	pop	{r4, r7, pc}

080010ea <_ZNSt13unordered_mapIaP9BaseStateSt4hashIaESt8equal_toIaESaISt4pairIKaS1_EEE7emplaceIJRaS1_EEES6_INSt8__detail14_Node_iteratorIS8_Lb0ELb0EEEbEDpOT_>:
       *
       *  Insertion requires amortized constant time.
       */
      template<typename... _Args>
	std::pair<iterator, bool>
	emplace(_Args&&... __args)
 80010ea:	b5b0      	push	{r4, r5, r7, lr}
 80010ec:	b084      	sub	sp, #16
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	60f8      	str	r0, [r7, #12]
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
 80010f6:	603b      	str	r3, [r7, #0]
	{ return _M_h.emplace(std::forward<_Args>(__args)...); }
 80010f8:	68bc      	ldr	r4, [r7, #8]
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f000 f982 	bl	8001404 <_ZSt7forwardIRaEOT_RNSt16remove_referenceIS1_E4typeE>
 8001100:	4605      	mov	r5, r0
 8001102:	6838      	ldr	r0, [r7, #0]
 8001104:	f000 f988 	bl	8001418 <_ZSt7forwardIP9BaseStateEOT_RNSt16remove_referenceIS2_E4typeE>
 8001108:	4603      	mov	r3, r0
 800110a:	68f8      	ldr	r0, [r7, #12]
 800110c:	462a      	mov	r2, r5
 800110e:	4621      	mov	r1, r4
 8001110:	f000 f98c 	bl	800142c <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE7emplaceIJRaS3_EEES0_INS6_14_Node_iteratorIS4_Lb0ELb0EEEbEDpOT_>
 8001114:	bf00      	nop
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001120 <_ZNSt5arrayIPFvvELj10EE2atEj>:
#endif
	return _AT_Type::_S_ref(_M_elems, __n);
      }

      _GLIBCXX17_CONSTEXPR reference
      at(size_type __n)
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
      {
	if (__n >= _Nm)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	2b09      	cmp	r3, #9
 800112e:	d904      	bls.n	800113a <_ZNSt5arrayIPFvvELj10EE2atEj+0x1a>
	  std::__throw_out_of_range_fmt(__N("array::at: __n (which is %zu) "
 8001130:	220a      	movs	r2, #10
 8001132:	6839      	ldr	r1, [r7, #0]
 8001134:	4806      	ldr	r0, [pc, #24]	; (8001150 <_ZNSt5arrayIPFvvELj10EE2atEj+0x30>)
 8001136:	f006 f925 	bl	8007384 <_ZSt24__throw_out_of_range_fmtPKcz>
					    ">= _Nm (which is %zu)"),
					__n, _Nm);
	return _AT_Type::_S_ref(_M_elems, __n);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6839      	ldr	r1, [r7, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f000 f98f 	bl	8001462 <_ZNSt14__array_traitsIPFvvELj10EE6_S_refERA10_KS1_j>
 8001144:	4603      	mov	r3, r0
      }
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	08007a84 	.word	0x08007a84

08001154 <_ZNSt13unordered_mapIaP9BaseStateSt4hashIaESt8equal_toIaESaISt4pairIKaS1_EEEixERS7_>:
       *  is then returned.
       *
       *  Lookup requires constant time.
       */
      mapped_type&
      operator[](const key_type& __k)
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
      { return _M_h[__k]; }
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6839      	ldr	r1, [r7, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f000 f98c 	bl	8001480 <_ZNSt8__detail9_Map_baseIaSt4pairIKaP9BaseStateESaIS5_ENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS2_>
 8001168:	4603      	mov	r3, r0
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <_ZNSt5arrayIPFvvELj10EEixEj>:
      operator[](size_type __n) noexcept
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6839      	ldr	r1, [r7, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f000 f96e 	bl	8001462 <_ZNSt14__array_traitsIPFvvELj10EE6_S_refERA10_KS1_j>
 8001186:	4603      	mov	r3, r0
      }
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4618      	mov	r0, r3
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr

080011a4 <_ZNSt11_Deque_baseIaSaIaEE11_Deque_implD1Ev>:
      struct _Deque_impl
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f000 f9cd 	bl	800154c <_ZNSaIaED1Ev>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <_ZNSt11_Deque_baseIaSaIaEEC1Ev>:
      _Deque_base()
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
      : _M_impl()
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 f9b0 	bl	800152c <_ZNSt11_Deque_baseIaSaIaEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 80011cc:	2100      	movs	r1, #0
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f000 f9c8 	bl	8001564 <_ZNSt11_Deque_baseIaSaIaEE17_M_initialize_mapEj>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <_ZNSt11_Deque_baseIaSaIaEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d010      	beq.n	8001210 <_ZNSt11_Deque_baseIaSaIaEED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80011f6:	3304      	adds	r3, #4
 80011f8:	461a      	mov	r2, r3
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f000 fa14 	bl	8001628 <_ZNSt11_Deque_baseIaSaIaEE16_M_destroy_nodesEPPaS3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6819      	ldr	r1, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	461a      	mov	r2, r3
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 fa27 	bl	800165e <_ZNSt11_Deque_baseIaSaIaEE17_M_deallocate_mapEPPaj>
    }
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff ffc6 	bl	80011a4 <_ZNSt11_Deque_baseIaSaIaEE11_Deque_implD1Ev>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <_ZNSt5dequeIaSaIaEE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	3308      	adds	r3, #8
 8001230:	4619      	mov	r1, r3
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f000 f81d 	bl	8001272 <_ZNSt15_Deque_iteratorIaRaPaEC1ERKS2_>
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <_ZNSt5dequeIaSaIaEE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %deque.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	3318      	adds	r3, #24
 800124e:	4619      	mov	r1, r3
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f000 f80e 	bl	8001272 <_ZNSt15_Deque_iteratorIaRaPaEC1ERKS2_>
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <_ZNSt11_Deque_baseIaSaIaEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4618      	mov	r0, r3
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr

08001272 <_ZNSt15_Deque_iteratorIaRaPaEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
 800127a:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	605a      	str	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	68da      	ldr	r2, [r3, #12]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	60da      	str	r2, [r3, #12]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4618      	mov	r0, r3
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr

080012a8 <_ZNSt5dequeIaSaIaEE15_M_destroy_dataESt15_Deque_iteratorIaRaPaES5_RKS0_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 80012a8:	b480      	push	{r7}
 80012aa:	b08d      	sub	sp, #52	; 0x34
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
 80012b4:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 80012b6:	bf00      	nop
 80012b8:	3734      	adds	r7, #52	; 0x34
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr

080012c0 <_ZNSt5arrayIPFvvELj10EE5beginEv>:
      begin() noexcept
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f000 f9e3 	bl	8001694 <_ZNSt5arrayIPFvvELj10EE4dataEv>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4618      	mov	r0, r3
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <_ZNKSt5arrayIPFvvELj10EE4sizeEv>:
      size() const noexcept { return _Nm; }
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	230a      	movs	r3, #10
 80012e2:	4618      	mov	r0, r3
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <_ZSt6fill_nIPPFvvEjS1_ET_S3_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 80012ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 80012f8:	68fc      	ldr	r4, [r7, #12]
 80012fa:	68b8      	ldr	r0, [r7, #8]
 80012fc:	f7ff fba6 	bl	8000a4c <_ZSt17__size_to_integerj>
 8001300:	4605      	mov	r5, r0
			       std::__iterator_category(__first));
 8001302:	f107 030c 	add.w	r3, r7, #12
 8001306:	4618      	mov	r0, r3
 8001308:	f000 f9d1 	bl	80016ae <_ZSt19__iterator_categoryIPPFvvEENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 800130c:	4633      	mov	r3, r6
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	4629      	mov	r1, r5
 8001312:	4620      	mov	r0, r4
 8001314:	f000 f9d5 	bl	80016c2 <_ZSt10__fill_n_aIPPFvvEjS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>
 8001318:	4603      	mov	r3, r0
    }
 800131a:	4618      	mov	r0, r3
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001322 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f000 f9e6 	bl	80016fc <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEC1Ev>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4618      	mov	r0, r3
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr

0800134e <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    clear() noexcept
    {
      this->_M_deallocate_nodes(_M_begin());
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 f9da 	bl	8001710 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 800135c:	4603      	mov	r3, r0
 800135e:	4619      	mov	r1, r3
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 f9e0 	bl	8001726 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE19_M_deallocate_nodesEPS7_>
      __builtin_memset(_M_buckets, 0,
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681a      	ldr	r2, [r3, #0]
		       _M_bucket_count * sizeof(__node_base_ptr));
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
      __builtin_memset(_M_buckets, 0,
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	4610      	mov	r0, r2
 8001372:	461a      	mov	r2, r3
 8001374:	2100      	movs	r1, #0
 8001376:	f006 fa9b 	bl	80078b0 <memset>
      _M_element_count = 0;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	60da      	str	r2, [r3, #12]
      _M_before_begin._M_nxt = nullptr;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
    }
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>:
      _M_deallocate_buckets()
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6819      	ldr	r1, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	461a      	mov	r2, r3
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 f9d8 	bl	8001756 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS6_15_Hash_node_baseEj>
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <_ZSt4moveIRSt5dequeIaSaIaEEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4618      	mov	r0, r3
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr

080013c2 <_ZNSt5dequeIaSaIaEE15_M_move_assign1EOS1_St17integral_constantIbLb1EE>:

#if __cplusplus >= 201103L
      // Constant-time, nothrow move assignment when source object's memory
      // can be moved because the allocators are equal.
      void
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 80013c2:	b590      	push	{r4, r7, lr}
 80013c4:	b085      	sub	sp, #20
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	60f8      	str	r0, [r7, #12]
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	713a      	strb	r2, [r7, #4]
      {
	this->_M_impl._M_swap_data(__x._M_impl);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	68ba      	ldr	r2, [r7, #8]
 80013d2:	4611      	mov	r1, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 f9d5 	bl	8001784 <_ZNSt11_Deque_baseIaSaIaEE16_Deque_impl_data12_M_swap_dataERS2_>
	__x.clear();
 80013da:	68b8      	ldr	r0, [r7, #8]
 80013dc:	f000 f9df 	bl	800179e <_ZNSt5dequeIaSaIaEE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff ff3b 	bl	800125e <_ZNSt11_Deque_baseIaSaIaEE19_M_get_Tp_allocatorEv>
 80013e8:	4604      	mov	r4, r0
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff36 	bl	800125e <_ZNSt11_Deque_baseIaSaIaEE19_M_get_Tp_allocatorEv>
 80013f2:	4603      	mov	r3, r0
 80013f4:	4619      	mov	r1, r3
 80013f6:	4620      	mov	r0, r4
 80013f8:	f000 f9e5 	bl	80017c6 <_ZSt15__alloc_on_moveISaIaEEvRT_S2_>
      }
 80013fc:	bf00      	nop
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	bd90      	pop	{r4, r7, pc}

08001404 <_ZSt7forwardIRaEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4618      	mov	r0, r3
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr

08001418 <_ZSt7forwardIP9BaseStateEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4618      	mov	r0, r3
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE7emplaceIJRaS3_EEES0_INS6_14_Node_iteratorIS4_Lb0ELb0EEEbEDpOT_>:
	emplace(_Args&&... __args)
 800142c:	b5b0      	push	{r4, r5, r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af02      	add	r7, sp, #8
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
 8001438:	603b      	str	r3, [r7, #0]
	{ return _M_emplace(__unique_keys{}, std::forward<_Args>(__args)...); }
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff ffe2 	bl	8001404 <_ZSt7forwardIRaEOT_RNSt16remove_referenceIS1_E4typeE>
 8001440:	4604      	mov	r4, r0
 8001442:	6838      	ldr	r0, [r7, #0]
 8001444:	f7ff ffe8 	bl	8001418 <_ZSt7forwardIP9BaseStateEOT_RNSt16remove_referenceIS2_E4typeE>
 8001448:	4603      	mov	r3, r0
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	4623      	mov	r3, r4
 8001450:	462a      	mov	r2, r5
 8001452:	68b9      	ldr	r1, [r7, #8]
 8001454:	f000 f9c5 	bl	80017e2 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE10_M_emplaceIJRaS3_EEES0_INS6_14_Node_iteratorIS4_Lb0ELb0EEEbESt17integral_constantIbLb1EEDpOT_>
 8001458:	bf00      	nop
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bdb0      	pop	{r4, r5, r7, pc}

08001462 <_ZNSt14__array_traitsIPFvvELj10EE6_S_refERA10_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	4413      	add	r3, r2
 8001474:	4618      	mov	r0, r3
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr
	...

08001480 <_ZNSt8__detail9_Map_baseIaSt4pairIKaP9BaseStateESaIS5_ENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS2_>:
    _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
 8001480:	b590      	push	{r4, r7, lr}
 8001482:	b08f      	sub	sp, #60	; 0x3c
 8001484:	af02      	add	r7, sp, #8
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
      __hashtable* __h = static_cast<__hashtable*>(this);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	62fb      	str	r3, [r7, #44]	; 0x2c
      __hash_code __code = __h->_M_hash_code(__k);
 800148e:	6839      	ldr	r1, [r7, #0]
 8001490:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001492:	f000 fa0e 	bl	80018b2 <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS2_>
 8001496:	62b8      	str	r0, [r7, #40]	; 0x28
      std::size_t __bkt = __h->_M_bucket_index(__code);
 8001498:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800149a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800149c:	f000 fa1e 	bl	80018dc <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 80014a0:	6278      	str	r0, [r7, #36]	; 0x24
      if (auto __node = __h->_M_find_node(__bkt, __k, __code))
 80014a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80014aa:	f000 fa28 	bl	80018fe <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS1_j>
 80014ae:	6238      	str	r0, [r7, #32]
 80014b0:	6a3b      	ldr	r3, [r7, #32]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d007      	beq.n	80014c6 <_ZNSt8__detail9_Map_baseIaSt4pairIKaP9BaseStateESaIS5_ENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS2_+0x46>
	return __node->_M_v().second;
 80014b6:	6a3b      	ldr	r3, [r7, #32]
 80014b8:	3304      	adds	r3, #4
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 fa38 	bl	8001930 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE4_M_vEv>
 80014c0:	4603      	mov	r3, r0
 80014c2:	1d1c      	adds	r4, r3, #4
 80014c4:	e02a      	b.n	800151c <_ZNSt8__detail9_Map_baseIaSt4pairIKaP9BaseStateESaIS5_ENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS2_+0x9c>
      typename __hashtable::_Scoped_node __node {
 80014c6:	6afc      	ldr	r4, [r7, #44]	; 0x2c
	std::tuple<const key_type&>(__k),
 80014c8:	f107 0318 	add.w	r3, r7, #24
 80014cc:	6839      	ldr	r1, [r7, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f000 fa3a 	bl	8001948 <_ZNSt5tupleIJRKaEEC1ILb1ELb1EEES1_>
      typename __hashtable::_Scoped_node __node {
 80014d4:	f107 0218 	add.w	r2, r7, #24
 80014d8:	f107 0010 	add.w	r0, r7, #16
 80014dc:	f107 031c 	add.w	r3, r7, #28
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	4613      	mov	r3, r2
 80014e4:	4a10      	ldr	r2, [pc, #64]	; (8001528 <_ZNSt8__detail9_Map_baseIaSt4pairIKaP9BaseStateESaIS5_ENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS2_+0xa8>)
 80014e6:	4621      	mov	r1, r4
 80014e8:	f000 fa3d 	bl	8001966 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS1_EESN_IJEEEEEPNS6_16_Hashtable_allocISaINS6_10_Hash_nodeIS4_Lb0EEEEEEDpOT_>
	= __h->_M_insert_unique_node(__bkt, __code, __node._M_node);
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	2201      	movs	r2, #1
 80014f0:	9200      	str	r2, [sp, #0]
 80014f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80014f8:	f000 fa6e 	bl	80019d8 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS6_10_Hash_nodeIS4_Lb0EEEj>
 80014fc:	4603      	mov	r3, r0
 80014fe:	60fb      	str	r3, [r7, #12]
      __node._M_node = nullptr;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
      return __pos->second;
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	4618      	mov	r0, r3
 800150a:	f000 faae 	bl	8001a6a <_ZNKSt8__detail14_Node_iteratorISt4pairIKaP9BaseStateELb0ELb0EEptEv>
 800150e:	4603      	mov	r3, r0
 8001510:	1d1c      	adds	r4, r3, #4
    }
 8001512:	f107 0310 	add.w	r3, r7, #16
 8001516:	4618      	mov	r0, r3
 8001518:	f000 fa49 	bl	80019ae <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>
 800151c:	4623      	mov	r3, r4
 800151e:	4618      	mov	r0, r3
 8001520:	3734      	adds	r7, #52	; 0x34
 8001522:	46bd      	mov	sp, r7
 8001524:	bd90      	pop	{r4, r7, pc}
 8001526:	bf00      	nop
 8001528:	08007b20 	.word	0x08007b20

0800152c <_ZNSt11_Deque_baseIaSaIaEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f000 faa7 	bl	8001a88 <_ZNSaIaEC1Ev>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4618      	mov	r0, r3
 800153e:	f000 faaf 	bl	8001aa0 <_ZNSt11_Deque_baseIaSaIaEE16_Deque_impl_dataC1Ev>
	{ }
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <_ZNSaIaED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f000 fabc 	bl	8001ad2 <_ZN9__gnu_cxx13new_allocatorIaED1Ev>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4618      	mov	r0, r3
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <_ZNSt11_Deque_baseIaSaIaEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8001564:	b590      	push	{r4, r7, lr}
 8001566:	b089      	sub	sp, #36	; 0x24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 800156e:	2001      	movs	r0, #1
 8001570:	f7ff fa81 	bl	8000a76 <_ZSt16__deque_buf_sizej>
 8001574:	4602      	mov	r2, r0
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	fbb3 f3f2 	udiv	r3, r3, r2
 800157c:	3301      	adds	r3, #1
 800157e:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8001580:	2308      	movs	r3, #8
 8001582:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	3302      	adds	r3, #2
 8001588:	613b      	str	r3, [r7, #16]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800158a:	f107 0210 	add.w	r2, r7, #16
 800158e:	f107 030c 	add.w	r3, r7, #12
 8001592:	4611      	mov	r1, r2
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fce8 	bl	8000f6a <_ZSt3maxIjERKT_S2_S2_>
 800159a:	4603      	mov	r3, r0
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	4619      	mov	r1, r3
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f000 fa9c 	bl	8001ae6 <_ZNSt11_Deque_baseIaSaIaEE15_M_allocate_mapEj>
 80015ae:	4602      	mov	r2, r0
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6859      	ldr	r1, [r3, #4]
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	1acb      	subs	r3, r1, r3
 80015c0:	085b      	lsrs	r3, r3, #1
 80015c2:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 80015c4:	4413      	add	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4413      	add	r3, r2
 80015d0:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	69b9      	ldr	r1, [r7, #24]
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 faa2 	bl	8001b20 <_ZNSt11_Deque_baseIaSaIaEE15_M_create_nodesEPPaS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3308      	adds	r3, #8
 80015e0:	69b9      	ldr	r1, [r7, #24]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 fab7 	bl	8001b56 <_ZNSt15_Deque_iteratorIaRaPaE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f103 0218 	add.w	r2, r3, #24
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	3b04      	subs	r3, #4
 80015f2:	4619      	mov	r1, r3
 80015f4:	4610      	mov	r0, r2
 80015f6:	f000 faae 	bl	8001b56 <_ZNSt15_Deque_iteratorIaRaPaE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	68da      	ldr	r2, [r3, #12]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8001606:	2001      	movs	r0, #1
 8001608:	f7ff fa35 	bl	8000a76 <_ZSt16__deque_buf_sizej>
 800160c:	4602      	mov	r2, r0
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	fbb3 f1f2 	udiv	r1, r3, r2
 8001614:	fb01 f202 	mul.w	r2, r1, r2
 8001618:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 800161a:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	619a      	str	r2, [r3, #24]
    }
 8001620:	bf00      	nop
 8001622:	3724      	adds	r7, #36	; 0x24
 8001624:	46bd      	mov	sp, r7
 8001626:	bd90      	pop	{r4, r7, pc}

08001628 <_ZNSt11_Deque_baseIaSaIaEE16_M_destroy_nodesEPPaS3_>:
    _Deque_base<_Tp, _Alloc>::
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	e008      	b.n	800164c <_ZNSt11_Deque_baseIaSaIaEE16_M_destroy_nodesEPPaS3_+0x24>
	_M_deallocate_node(*__n);
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4619      	mov	r1, r3
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	f000 faa0 	bl	8001b86 <_ZNSt11_Deque_baseIaSaIaEE18_M_deallocate_nodeEPa>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	3304      	adds	r3, #4
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	429a      	cmp	r2, r3
 8001652:	d3f2      	bcc.n	800163a <_ZNSt11_Deque_baseIaSaIaEE16_M_destroy_nodesEPPaS3_+0x12>
    }
 8001654:	bf00      	nop
 8001656:	bf00      	nop
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <_ZNSt11_Deque_baseIaSaIaEE17_M_deallocate_mapEPPaj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 800165e:	b580      	push	{r7, lr}
 8001660:	b086      	sub	sp, #24
 8001662:	af00      	add	r7, sp, #0
 8001664:	60f8      	str	r0, [r7, #12]
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	68f9      	ldr	r1, [r7, #12]
 8001670:	4618      	mov	r0, r3
 8001672:	f000 fa9b 	bl	8001bac <_ZNKSt11_Deque_baseIaSaIaEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	68b9      	ldr	r1, [r7, #8]
 800167e:	4618      	mov	r0, r3
 8001680:	f000 fab1 	bl	8001be6 <_ZNSt16allocator_traitsISaIPaEE10deallocateERS1_PS0_j>
      }
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	4618      	mov	r0, r3
 800168a:	f000 faa0 	bl	8001bce <_ZNSaIPaED1Ev>
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <_ZNSt5arrayIPFvvELj10EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4618      	mov	r0, r3
 80016a0:	f000 fab0 	bl	8001c04 <_ZNSt14__array_traitsIPFvvELj10EE6_S_ptrERA10_KS1_>
 80016a4:	4603      	mov	r3, r0
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <_ZSt19__iterator_categoryIPPFvvEENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80016b6:	bf00      	nop
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr

080016c2 <_ZSt10__fill_n_aIPPFvvEjS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b084      	sub	sp, #16
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	60f8      	str	r0, [r7, #12]
 80016ca:	60b9      	str	r1, [r7, #8]
 80016cc:	607a      	str	r2, [r7, #4]
 80016ce:	703b      	strb	r3, [r7, #0]
      if (__n <= 0)
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d101      	bne.n	80016da <_ZSt10__fill_n_aIPPFvvEjS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x18>
	return __first;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	e00c      	b.n	80016f4 <_ZSt10__fill_n_aIPPFvvEjS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x32>
      std::__fill_a(__first, __first + __n, __value);
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	4413      	add	r3, r2
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	4619      	mov	r1, r3
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	f000 fa96 	bl	8001c18 <_ZSt8__fill_aIPPFvvES1_EvT_S3_RKT0_>
      return __first + __n;
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	4413      	add	r3, r2
    }
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>:
      _M_begin() const
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	4618      	mov	r0, r3
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr

08001726 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE19_M_deallocate_nodesEPS7_>:
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
    }

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_ptr __n)
 8001726:	b580      	push	{r7, lr}
 8001728:	b084      	sub	sp, #16
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
 800172e:	6039      	str	r1, [r7, #0]
    {
      while (__n)
 8001730:	e009      	b.n	8001746 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE19_M_deallocate_nodesEPS7_+0x20>
	{
	  __node_ptr __tmp = __n;
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	60fb      	str	r3, [r7, #12]
	  __n = __n->_M_next();
 8001736:	6838      	ldr	r0, [r7, #0]
 8001738:	f000 fa7d 	bl	8001c36 <_ZNKSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EE7_M_nextEv>
 800173c:	6038      	str	r0, [r7, #0]
	  _M_deallocate_node(__tmp);
 800173e:	68f9      	ldr	r1, [r7, #12]
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 fa83 	bl	8001c4c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE18_M_deallocate_nodeEPS7_>
      while (__n)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1f2      	bne.n	8001732 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE19_M_deallocate_nodesEPS7_+0xc>
	}
    }
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS6_15_Hash_node_baseEj>:
      _M_deallocate_buckets(__buckets_ptr __bkts, size_type __bkt_count)
 8001756:	b580      	push	{r7, lr}
 8001758:	b084      	sub	sp, #16
 800175a:	af00      	add	r7, sp, #0
 800175c:	60f8      	str	r0, [r7, #12]
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
	if (_M_uses_single_bucket(__bkts))
 8001762:	68b9      	ldr	r1, [r7, #8]
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	f000 fa8c 	bl	8001c82 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS6_15_Hash_node_baseE>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d105      	bne.n	800177c <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS6_15_Hash_node_baseEj+0x26>
	__hashtable_alloc::_M_deallocate_buckets(__bkts, __bkt_count);
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	68b9      	ldr	r1, [r7, #8]
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	f000 fa9b 	bl	8001cb0 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>
 800177a:	e000      	b.n	800177e <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS6_15_Hash_node_baseEj+0x28>
	  return;
 800177c:	bf00      	nop
      }
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <_ZNSt11_Deque_baseIaSaIaEE16_Deque_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 800178e:	6839      	ldr	r1, [r7, #0]
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 fab0 	bl	8001cf6 <_ZSt4swapINSt11_Deque_baseIaSaIaEE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>
	}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <_ZNSt5dequeIaSaIaEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 800179e:	b580      	push	{r7, lr}
 80017a0:	b086      	sub	sp, #24
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 80017a6:	f107 0308 	add.w	r3, r7, #8
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fd38 	bl	8001222 <_ZNSt5dequeIaSaIaEE5beginEv>
 80017b2:	f107 0308 	add.w	r3, r7, #8
 80017b6:	4619      	mov	r1, r3
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f000 facf 	bl	8001d5c <_ZNSt5dequeIaSaIaEE15_M_erase_at_endESt15_Deque_iteratorIaRaPaE>
 80017be:	bf00      	nop
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <_ZSt15__alloc_on_moveISaIaEEvRT_S2_>:
    { }
#endif

  template<typename _Alloc>
    _GLIBCXX14_CONSTEXPR inline void
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	6039      	str	r1, [r7, #0]
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
#if __cplusplus >= 201703L
      if constexpr (__pocma::value)
	__one = std::move(__two);
#else
      __do_alloc_on_move(__one, __two, __pocma());
 80017d0:	461a      	mov	r2, r3
 80017d2:	6839      	ldr	r1, [r7, #0]
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f000 faf4 	bl	8001dc2 <_ZSt18__do_alloc_on_moveISaIaEEvRT_S2_St17integral_constantIbLb1EE>
#endif
    }
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE10_M_emplaceIJRaS3_EEES0_INS6_14_Node_iteratorIS4_Lb0ELb0EEEbESt17integral_constantIbLb1EEDpOT_>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80017e2:	b590      	push	{r4, r7, lr}
 80017e4:	b091      	sub	sp, #68	; 0x44
 80017e6:	af02      	add	r7, sp, #8
 80017e8:	60f8      	str	r0, [r7, #12]
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	713a      	strb	r2, [r7, #4]
 80017ee:	603b      	str	r3, [r7, #0]
	_Scoped_node __node { this, std::forward<_Args>(__args)...  };
 80017f0:	6838      	ldr	r0, [r7, #0]
 80017f2:	f7ff fe07 	bl	8001404 <_ZSt7forwardIRaEOT_RNSt16remove_referenceIS1_E4typeE>
 80017f6:	4604      	mov	r4, r0
 80017f8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80017fa:	f7ff fe0d 	bl	8001418 <_ZSt7forwardIP9BaseStateEOT_RNSt16remove_referenceIS2_E4typeE>
 80017fe:	4603      	mov	r3, r0
 8001800:	f107 0014 	add.w	r0, r7, #20
 8001804:	4622      	mov	r2, r4
 8001806:	68b9      	ldr	r1, [r7, #8]
 8001808:	f000 fae8 	bl	8001ddc <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1IJRaS3_EEEPNS6_16_Hashtable_allocISaINS6_10_Hash_nodeIS4_Lb0EEEEEEDpOT_>
	const key_type& __k = _ExtractKey{}(__node._M_node->_M_v());
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	3304      	adds	r3, #4
 8001810:	4618      	mov	r0, r3
 8001812:	f000 f88d 	bl	8001930 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE4_M_vEv>
 8001816:	4602      	mov	r2, r0
 8001818:	f107 031c 	add.w	r3, r7, #28
 800181c:	4611      	mov	r1, r2
 800181e:	4618      	mov	r0, r3
 8001820:	f000 fafc 	bl	8001e1c <_ZNKSt8__detail10_Select1stclIRSt4pairIKaP9BaseStateEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS8_>
 8001824:	6378      	str	r0, [r7, #52]	; 0x34
	__hash_code __code = this->_M_hash_code(__k);
 8001826:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001828:	68b8      	ldr	r0, [r7, #8]
 800182a:	f000 f842 	bl	80018b2 <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS2_>
 800182e:	6338      	str	r0, [r7, #48]	; 0x30
	size_type __bkt = _M_bucket_index(__code);
 8001830:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001832:	68b8      	ldr	r0, [r7, #8]
 8001834:	f000 f852 	bl	80018dc <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 8001838:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (__node_ptr __p = _M_find_node(__bkt, __k, __code))
 800183a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800183c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800183e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001840:	68b8      	ldr	r0, [r7, #8]
 8001842:	f000 f85c 	bl	80018fe <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS1_j>
 8001846:	62b8      	str	r0, [r7, #40]	; 0x28
 8001848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800184a:	2b00      	cmp	r3, #0
 800184c:	d011      	beq.n	8001872 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE10_M_emplaceIJRaS3_EEES0_INS6_14_Node_iteratorIS4_Lb0ELb0EEEbESt17integral_constantIbLb1EEDpOT_+0x90>
	  return std::make_pair(iterator(__p), false);
 800184e:	f107 0320 	add.w	r3, r7, #32
 8001852:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001854:	4618      	mov	r0, r3
 8001856:	f000 faf2 	bl	8001e3e <_ZNSt8__detail14_Node_iteratorISt4pairIKaP9BaseStateELb0ELb0EEC1EPNS_10_Hash_nodeIS5_Lb0EEE>
 800185a:	2300      	movs	r3, #0
 800185c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8001866:	f107 0120 	add.w	r1, r7, #32
 800186a:	4618      	mov	r0, r3
 800186c:	f000 faf6 	bl	8001e5c <_ZSt9make_pairINSt8__detail14_Node_iteratorISt4pairIKaP9BaseStateELb0ELb0EEEbES2_INSt25__strip_reference_wrapperINSt5decayIT_E4typeEE6__typeENS8_INS9_IT0_E4typeEE6__typeEEOSA_OSF_>
 8001870:	e016      	b.n	80018a0 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE10_M_emplaceIJRaS3_EEES0_INS6_14_Node_iteratorIS4_Lb0ELb0EEEbESt17integral_constantIbLb1EEDpOT_+0xbe>
	auto __pos = _M_insert_unique_node(__bkt, __code, __node._M_node);
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	2201      	movs	r2, #1
 8001876:	9200      	str	r2, [sp, #0]
 8001878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800187a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800187c:	68b8      	ldr	r0, [r7, #8]
 800187e:	f000 f8ab 	bl	80019d8 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS6_10_Hash_nodeIS4_Lb0EEEj>
 8001882:	4603      	mov	r3, r0
 8001884:	613b      	str	r3, [r7, #16]
	__node._M_node = nullptr;
 8001886:	2300      	movs	r3, #0
 8001888:	61bb      	str	r3, [r7, #24]
	return { __pos, true };
 800188a:	2301      	movs	r3, #1
 800188c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001890:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8001894:	f107 0310 	add.w	r3, r7, #16
 8001898:	4619      	mov	r1, r3
 800189a:	68f8      	ldr	r0, [r7, #12]
 800189c:	f000 faf5 	bl	8001e8a <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKaP9BaseStateELb0ELb0EEEbEC1IRS6_bLb1EEEOT_OT0_>
      }
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4618      	mov	r0, r3
 80018a6:	f000 f882 	bl	80019ae <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	373c      	adds	r7, #60	; 0x3c
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd90      	pop	{r4, r7, pc}

080018b2 <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS2_>:
      _M_hash_code(const _Key& __k) const
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	6039      	str	r1, [r7, #0]
	return _M_hash()(__k);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 fb19 	bl	8001ef4 <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv>
 80018c2:	4602      	mov	r2, r0
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	f993 3000 	ldrsb.w	r3, [r3]
 80018ca:	4619      	mov	r1, r3
 80018cc:	4610      	mov	r0, r2
 80018ce:	f7ff f8e6 	bl	8000a9e <_ZNKSt4hashIaEclEa>
 80018d2:	4603      	mov	r3, r0
      }
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>:
      _M_bucket_index(__hash_code __c) const
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__c, _M_bucket_count); }
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	461a      	mov	r2, r3
 80018ec:	6839      	ldr	r1, [r7, #0]
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 fb0c 	bl	8001f0c <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEjj>
 80018f4:	4603      	mov	r3, r0
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS1_j>:
      _M_find_node(size_type __bkt, const key_type& __key,
 80018fe:	b580      	push	{r7, lr}
 8001900:	b086      	sub	sp, #24
 8001902:	af00      	add	r7, sp, #0
 8001904:	60f8      	str	r0, [r7, #12]
 8001906:	60b9      	str	r1, [r7, #8]
 8001908:	607a      	str	r2, [r7, #4]
 800190a:	603b      	str	r3, [r7, #0]
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	68b9      	ldr	r1, [r7, #8]
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f000 fb0c 	bl	8001f30 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j>
 8001918:	6178      	str	r0, [r7, #20]
	if (__before_n)
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d002      	beq.n	8001926 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS1_j+0x28>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	e000      	b.n	8001928 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS1_j+0x2a>
	return nullptr;
 8001926:	2300      	movs	r3, #0
      }
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE4_M_vEv>:
      _M_v() noexcept
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 fb3e 	bl	8001fba <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE9_M_valptrEv>
 800193e:	4603      	mov	r3, r0
 8001940:	4618      	mov	r0, r3
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <_ZNSt5tupleIJRKaEEC1ILb1ELb1EEES1_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6839      	ldr	r1, [r7, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f000 fb3c 	bl	8001fd4 <_ZNSt11_Tuple_implILj0EJRKaEEC1ES1_>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS1_EESN_IJEEEEEPNS6_16_Hashtable_allocISaINS6_10_Hash_nodeIS4_Lb0EEEEEEDpOT_>:
	  _Scoped_node(__hashtable_alloc* __h, _Args&&... __args)
 8001966:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001968:	b085      	sub	sp, #20
 800196a:	af00      	add	r7, sp, #0
 800196c:	60f8      	str	r0, [r7, #12]
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
 8001972:	603b      	str	r3, [r7, #0]
	  : _M_h(__h),
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	601a      	str	r2, [r3, #0]
	    _M_node(__h->_M_allocate_node(std::forward<_Args>(__args)...))
 800197a:	68bc      	ldr	r4, [r7, #8]
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 fb38 	bl	8001ff2 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8001982:	4605      	mov	r5, r0
 8001984:	6838      	ldr	r0, [r7, #0]
 8001986:	f000 fb3e 	bl	8002006 <_ZSt7forwardISt5tupleIJRKaEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800198a:	4606      	mov	r6, r0
 800198c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800198e:	f000 fb44 	bl	800201a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001992:	4603      	mov	r3, r0
 8001994:	4632      	mov	r2, r6
 8001996:	4629      	mov	r1, r5
 8001998:	4620      	mov	r0, r4
 800199a:	f000 fb55 	bl	8002048 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE16_M_allocate_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESE_IJEEEEEPS7_DpOT_>
 800199e:	4602      	mov	r2, r0
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	605a      	str	r2, [r3, #4]
	  { }
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4618      	mov	r0, r3
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019ae <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>:
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d007      	beq.n	80019ce <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev+0x20>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	4619      	mov	r1, r3
 80019c8:	4610      	mov	r0, r2
 80019ca:	f000 f93f 	bl	8001c4c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE18_M_deallocate_nodeEPS7_>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4618      	mov	r0, r3
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS6_10_Hash_nodeIS4_Lb0EEEj>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80019d8:	b590      	push	{r4, r7, lr}
 80019da:	b08d      	sub	sp, #52	; 0x34
 80019dc:	af02      	add	r7, sp, #8
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
 80019e4:	603b      	str	r3, [r7, #0]
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	3310      	adds	r3, #16
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff f895 	bl	8000b1a <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>
 80019f0:	4603      	mov	r3, r0
 80019f2:	61fb      	str	r3, [r7, #28]
 80019f4:	f107 031c 	add.w	r3, r7, #28
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f103 0110 	add.w	r1, r3, #16
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	68dc      	ldr	r4, [r3, #12]
 8001a08:	f107 0014 	add.w	r0, r7, #20
 8001a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	4623      	mov	r3, r4
 8001a12:	f005 fd13 	bl	800743c <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>
      if (__do_rehash.first)
 8001a16:	7d3b      	ldrb	r3, [r7, #20]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00a      	beq.n	8001a32 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS6_10_Hash_nodeIS4_Lb0EEEj+0x5a>
	  _M_rehash(__do_rehash.second, __saved_state);
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a20:	4619      	mov	r1, r3
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f000 fb51 	bl	80020ca <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>
	  __bkt = _M_bucket_index(__code);
 8001a28:	6879      	ldr	r1, [r7, #4]
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f7ff ff56 	bl	80018dc <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 8001a30:	60b8      	str	r0, [r7, #8]
      this->_M_store_code(*__node, __code);
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	3304      	adds	r3, #4
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f000 fb54 	bl	80020e8 <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeERNS_21_Hash_node_code_cacheILb0EEEj>
      _M_insert_bucket_begin(__bkt, __node);
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	68b9      	ldr	r1, [r7, #8]
 8001a44:	68f8      	ldr	r0, [r7, #12]
 8001a46:	f000 fb5a 	bl	80020fe <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS6_10_Hash_nodeIS4_Lb0EEE>
      ++_M_element_count;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	60da      	str	r2, [r3, #12]
      return iterator(__node);
 8001a54:	f107 0320 	add.w	r3, r7, #32
 8001a58:	6839      	ldr	r1, [r7, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 f9ef 	bl	8001e3e <_ZNSt8__detail14_Node_iteratorISt4pairIKaP9BaseStateELb0ELb0EEC1EPNS_10_Hash_nodeIS5_Lb0EEE>
 8001a60:	6a3b      	ldr	r3, [r7, #32]
    }
 8001a62:	4618      	mov	r0, r3
 8001a64:	372c      	adds	r7, #44	; 0x2c
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd90      	pop	{r4, r7, pc}

08001a6a <_ZNKSt8__detail14_Node_iteratorISt4pairIKaP9BaseStateELb0ELb0EEptEv>:
      operator->() const noexcept
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
      { return this->_M_cur->_M_valptr(); }
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	3304      	adds	r3, #4
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 fa9e 	bl	8001fba <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE9_M_valptrEv>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <_ZNSaIaEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 fb7b 	bl	800218c <_ZN9__gnu_cxx13new_allocatorIaEC1Ev>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <_ZNSt11_Deque_baseIaSaIaEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3308      	adds	r3, #8
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f000 fb71 	bl	80021a0 <_ZNSt15_Deque_iteratorIaRaPaEC1Ev>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3318      	adds	r3, #24
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 fb6c 	bl	80021a0 <_ZNSt15_Deque_iteratorIaRaPaEC1Ev>
	{ }
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <_ZN9__gnu_cxx13new_allocatorIaED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr

08001ae6 <_ZNSt11_Deque_baseIaSaIaEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8001ae6:	b590      	push	{r4, r7, lr}
 8001ae8:	b085      	sub	sp, #20
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
 8001aee:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8001af0:	f107 030c 	add.w	r3, r7, #12
 8001af4:	6879      	ldr	r1, [r7, #4]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f000 f858 	bl	8001bac <_ZNKSt11_Deque_baseIaSaIaEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8001afc:	f107 030c 	add.w	r3, r7, #12
 8001b00:	6839      	ldr	r1, [r7, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 fb62 	bl	80021cc <_ZNSt16allocator_traitsISaIPaEE8allocateERS1_j>
 8001b08:	4604      	mov	r4, r0
 8001b0a:	bf00      	nop
      }
 8001b0c:	f107 030c 	add.w	r3, r7, #12
 8001b10:	4618      	mov	r0, r3
 8001b12:	f000 f85c 	bl	8001bce <_ZNSaIPaED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8001b16:	4623      	mov	r3, r4
      }
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd90      	pop	{r4, r7, pc}

08001b20 <_ZNSt11_Deque_baseIaSaIaEE15_M_create_nodesEPPaS3_>:
    _Deque_base<_Tp, _Alloc>::
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	e008      	b.n	8001b44 <_ZNSt11_Deque_baseIaSaIaEE15_M_create_nodesEPPaS3_+0x24>
	    *__cur = this->_M_allocate_node();
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f000 f9cc 	bl	8001ed0 <_ZNSt11_Deque_baseIaSaIaEE16_M_allocate_nodeEv>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	3304      	adds	r3, #4
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d3f2      	bcc.n	8001b32 <_ZNSt11_Deque_baseIaSaIaEE15_M_create_nodesEPPaS3_+0x12>
    }
 8001b4c:	bf00      	nop
 8001b4e:	bf00      	nop
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <_ZNSt15_Deque_iteratorIaRaPaE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8001b56:	b590      	push	{r4, r7, lr}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685c      	ldr	r4, [r3, #4]
 8001b72:	f000 fb3a 	bl	80021ea <_ZNSt15_Deque_iteratorIaRaPaE14_S_buffer_sizeEv>
 8001b76:	4603      	mov	r3, r0
 8001b78:	18e2      	adds	r2, r4, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
      }
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd90      	pop	{r4, r7, pc}

08001b86 <_ZNSt11_Deque_baseIaSaIaEE18_M_deallocate_nodeEPa>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8001b86:	b590      	push	{r4, r7, lr}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8001b90:	687c      	ldr	r4, [r7, #4]
 8001b92:	2001      	movs	r0, #1
 8001b94:	f7fe ff6f 	bl	8000a76 <_ZSt16__deque_buf_sizej>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	6839      	ldr	r1, [r7, #0]
 8001b9e:	4620      	mov	r0, r4
 8001ba0:	f000 fb2b 	bl	80021fa <_ZNSt16allocator_traitsISaIaEE10deallocateERS0_Paj>
      }
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd90      	pop	{r4, r7, pc}

08001bac <_ZNKSt11_Deque_baseIaSaIaEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8001bb6:	6838      	ldr	r0, [r7, #0]
 8001bb8:	f000 fb2e 	bl	8002218 <_ZNKSt11_Deque_baseIaSaIaEE19_M_get_Tp_allocatorEv>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 fb33 	bl	800222c <_ZNSaIPaEC1IaEERKSaIT_E>
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <_ZNSaIPaED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 fb35 	bl	8002246 <_ZN9__gnu_cxx13new_allocatorIPaED1Ev>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <_ZNSt16allocator_traitsISaIPaEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b084      	sub	sp, #16
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	60f8      	str	r0, [r7, #12]
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	68b9      	ldr	r1, [r7, #8]
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f000 fb2f 	bl	800225a <_ZN9__gnu_cxx13new_allocatorIPaE10deallocateEPS1_j>
 8001bfc:	bf00      	nop
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <_ZNSt14__array_traitsIPFvvELj10EE6_S_ptrERA10_KS1_>:
      _S_ptr(const _Type& __t) noexcept
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr

08001c18 <_ZSt8__fill_aIPPFvvES1_EvT_S3_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	68b9      	ldr	r1, [r7, #8]
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f000 fb26 	bl	800227a <_ZSt9__fill_a1IPPFvvES1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>
 8001c2e:	bf00      	nop
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <_ZNKSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EE7_M_nextEv>:
      _M_next() const noexcept
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Hash_node*>(this->_M_nxt); }
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr

08001c4c <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE18_M_deallocate_nodeEPS7_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_ptr __n)
 8001c4c:	b590      	push	{r4, r7, lr}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
      __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 fb29 	bl	80022ae <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE17_M_node_allocatorEv>
 8001c5c:	4604      	mov	r4, r0
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	3304      	adds	r3, #4
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 f9a9 	bl	8001fba <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE9_M_valptrEv>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	f000 fb2a 	bl	80022c6 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE7destroyIS6_EEvRS8_PT_>
      _M_deallocate_node_ptr(__n);
 8001c72:	6839      	ldr	r1, [r7, #0]
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 fb33 	bl	80022e0 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE22_M_deallocate_node_ptrEPS7_>
    }
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd90      	pop	{r4, r7, pc}

08001c82 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS6_15_Hash_node_baseE>:
      _M_uses_single_bucket(__buckets_ptr __bkts) const
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
 8001c8a:	6039      	str	r1, [r7, #0]
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3318      	adds	r3, #24
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	bf0c      	ite	eq
 8001c96:	2301      	moveq	r3, #1
 8001c98:	2300      	movne	r3, #0
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	bf14      	ite	ne
 8001ca0:	2301      	movne	r3, #1
 8001ca2:	2300      	moveq	r3, #0
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr

08001cb0 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>:
      return __p;
    }

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
    _M_deallocate_buckets(__buckets_ptr __bkts,
			  std::size_t __bkt_count)
    {
      typedef typename __buckets_alloc_traits::pointer _Ptr;
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
 8001cbc:	68b8      	ldr	r0, [r7, #8]
 8001cbe:	f000 fb25 	bl	800230c <_ZNSt14pointer_traitsIPPNSt8__detail15_Hash_node_baseEE10pointer_toERS2_>
 8001cc2:	6178      	str	r0, [r7, #20]
      __buckets_alloc_type __alloc(_M_node_allocator());
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f000 faf2 	bl	80022ae <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE17_M_node_allocatorEv>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	f107 0310 	add.w	r3, r7, #16
 8001cd0:	4611      	mov	r1, r2
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f000 fb26 	bl	8002324 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEERKSaIT_E>
      __buckets_alloc_traits::deallocate(__alloc, __ptr, __bkt_count);
 8001cd8:	f107 0310 	add.w	r3, r7, #16
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6979      	ldr	r1, [r7, #20]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f000 fb38 	bl	8002356 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>
    }
 8001ce6:	f107 0310 	add.w	r3, r7, #16
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 fb27 	bl	800233e <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <_ZSt4swapINSt11_Deque_baseIaSaIaEE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8001cf6:	b5b0      	push	{r4, r5, r7, lr}
 8001cf8:	b08c      	sub	sp, #48	; 0x30
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 fb37 	bl	8002374 <_ZSt4moveIRNSt11_Deque_baseIaSaIaEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 8001d06:	4602      	mov	r2, r0
 8001d08:	f107 0308 	add.w	r3, r7, #8
 8001d0c:	4611      	mov	r1, r2
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f000 fb5e 	bl	80023d0 <_ZNSt11_Deque_baseIaSaIaEE16_Deque_impl_dataC1EOS2_>
      __a = _GLIBCXX_MOVE(__b);
 8001d14:	6838      	ldr	r0, [r7, #0]
 8001d16:	f000 fb2d 	bl	8002374 <_ZSt4moveIRNSt11_Deque_baseIaSaIaEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	461c      	mov	r4, r3
 8001d20:	4615      	mov	r5, r2
 8001d22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d2a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001d2e:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8001d32:	f107 0308 	add.w	r3, r7, #8
 8001d36:	4618      	mov	r0, r3
 8001d38:	f000 fb1c 	bl	8002374 <_ZSt4moveIRNSt11_Deque_baseIaSaIaEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	461c      	mov	r4, r3
 8001d42:	4615      	mov	r5, r2
 8001d44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d4c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001d50:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 8001d54:	bf00      	nop
 8001d56:	3730      	adds	r7, #48	; 0x30
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bdb0      	pop	{r4, r5, r7, pc}

08001d5c <_ZNSt5dequeIaSaIaEE15_M_erase_at_endESt15_Deque_iteratorIaRaPaE>:
      _M_erase_at_end(iterator __pos)
 8001d5c:	b590      	push	{r4, r7, lr}
 8001d5e:	b08b      	sub	sp, #44	; 0x2c
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 8001d66:	f107 0308 	add.w	r3, r7, #8
 8001d6a:	6839      	ldr	r1, [r7, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fa80 	bl	8001272 <_ZNSt15_Deque_iteratorIaRaPaEC1ERKS2_>
 8001d72:	f107 0318 	add.w	r3, r7, #24
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fa61 	bl	8001240 <_ZNSt5dequeIaSaIaEE3endEv>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff fa6c 	bl	800125e <_ZNSt11_Deque_baseIaSaIaEE19_M_get_Tp_allocatorEv>
 8001d86:	4603      	mov	r3, r0
 8001d88:	f107 0218 	add.w	r2, r7, #24
 8001d8c:	f107 0108 	add.w	r1, r7, #8
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff fa89 	bl	80012a8 <_ZNSt5dequeIaSaIaEE15_M_destroy_dataESt15_Deque_iteratorIaRaPaES5_RKS0_>
	_M_destroy_nodes(__pos._M_node + 1,
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 8001da2:	3304      	adds	r3, #4
 8001da4:	461a      	mov	r2, r3
 8001da6:	f7ff fc3f 	bl	8001628 <_ZNSt11_Deque_baseIaSaIaEE16_M_destroy_nodesEPPaS3_>
	this->_M_impl._M_finish = __pos;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	f103 0418 	add.w	r4, r3, #24
 8001db2:	4613      	mov	r3, r2
 8001db4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001db6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8001dba:	bf00      	nop
 8001dbc:	372c      	adds	r7, #44	; 0x2c
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd90      	pop	{r4, r7, pc}

08001dc2 <_ZSt18__do_alloc_on_moveISaIaEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b084      	sub	sp, #16
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	60f8      	str	r0, [r7, #12]
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8001dce:	68b8      	ldr	r0, [r7, #8]
 8001dd0:	f000 fb1d 	bl	800240e <_ZSt4moveIRSaIaEEONSt16remove_referenceIT_E4typeEOS3_>
 8001dd4:	bf00      	nop
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1IJRaS3_EEEPNS6_16_Hashtable_allocISaINS6_10_Hash_nodeIS4_Lb0EEEEEEDpOT_>:
	  _Scoped_node(__hashtable_alloc* __h, _Args&&... __args)
 8001ddc:	b5b0      	push	{r4, r5, r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
 8001de8:	603b      	str	r3, [r7, #0]
	  : _M_h(__h),
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	68ba      	ldr	r2, [r7, #8]
 8001dee:	601a      	str	r2, [r3, #0]
	    _M_node(__h->_M_allocate_node(std::forward<_Args>(__args)...))
 8001df0:	68bc      	ldr	r4, [r7, #8]
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff fb06 	bl	8001404 <_ZSt7forwardIRaEOT_RNSt16remove_referenceIS1_E4typeE>
 8001df8:	4605      	mov	r5, r0
 8001dfa:	6838      	ldr	r0, [r7, #0]
 8001dfc:	f7ff fb0c 	bl	8001418 <_ZSt7forwardIP9BaseStateEOT_RNSt16remove_referenceIS2_E4typeE>
 8001e00:	4603      	mov	r3, r0
 8001e02:	461a      	mov	r2, r3
 8001e04:	4629      	mov	r1, r5
 8001e06:	4620      	mov	r0, r4
 8001e08:	f000 fb0b 	bl	8002422 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE16_M_allocate_nodeIJRaS5_EEEPS7_DpOT_>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	605a      	str	r2, [r3, #4]
	  { }
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bdb0      	pop	{r4, r5, r7, pc}

08001e1c <_ZNKSt8__detail10_Select1stclIRSt4pairIKaP9BaseStateEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS8_>:
      operator()(_Tp&& __x) const noexcept
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
      { return std::get<0>(std::forward<_Tp>(__x)); }
 8001e26:	6838      	ldr	r0, [r7, #0]
 8001e28:	f000 fb33 	bl	8002492 <_ZSt7forwardIRSt4pairIKaP9BaseStateEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 fb39 	bl	80024a6 <_ZSt3getILj0EKaP9BaseStateERNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERS7_>
 8001e34:	4603      	mov	r3, r0
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <_ZNSt8__detail14_Node_iteratorISt4pairIKaP9BaseStateELb0ELb0EEC1EPNS_10_Hash_nodeIS5_Lb0EEE>:
      _Node_iterator(__node_type* __p) noexcept
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
 8001e46:	6039      	str	r1, [r7, #0]
      : __base_type(__p) { }
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6839      	ldr	r1, [r7, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f000 fb36 	bl	80024be <_ZNSt8__detail19_Node_iterator_baseISt4pairIKaP9BaseStateELb0EEC1EPNS_10_Hash_nodeIS5_Lb0EEE>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4618      	mov	r0, r3
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <_ZSt9make_pairINSt8__detail14_Node_iteratorISt4pairIKaP9BaseStateELb0ELb0EEEbES2_INSt25__strip_reference_wrapperINSt5decayIT_E4typeEE6__typeENS8_INS9_IT0_E4typeEE6__typeEEOSA_OSF_>:
#if __cplusplus >= 201103L
  // NB: DR 706.
  template<typename _T1, typename _T2>
    constexpr pair<typename __decay_and_strip<_T1>::__type,
                   typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
 8001e5c:	b590      	push	{r4, r7, lr}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> 	      __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
 8001e68:	68b8      	ldr	r0, [r7, #8]
 8001e6a:	f000 fb36 	bl	80024da <_ZSt7forwardINSt8__detail14_Node_iteratorISt4pairIKaP9BaseStateELb0ELb0EEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8001e6e:	4604      	mov	r4, r0
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f7ff f98d 	bl	8001190 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8001e76:	4603      	mov	r3, r0
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4621      	mov	r1, r4
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	f000 fb36 	bl	80024ee <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKaP9BaseStateELb0ELb0EEEbEC1IS6_bLb1EEEOT_OT0_>
    }
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd90      	pop	{r4, r7, pc}

08001e8a <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKaP9BaseStateELb0ELb0EEEbEC1IRS6_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b084      	sub	sp, #16
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8001e96:	68b8      	ldr	r0, [r7, #8]
 8001e98:	f000 fb42 	bl	8002520 <_ZSt7forwardIRNSt8__detail14_Node_iteratorISt4pairIKaP9BaseStateELb0ELb0EEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6812      	ldr	r2, [r2, #0]
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff f973 	bl	8001190 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	781a      	ldrb	r2, [r3, #0]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	711a      	strb	r2, [r3, #4]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <_ZSt7forwardIRKaEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr

08001ed0 <_ZNSt11_Deque_baseIaSaIaEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8001ed0:	b590      	push	{r4, r7, lr}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8001ed8:	687c      	ldr	r4, [r7, #4]
 8001eda:	2001      	movs	r0, #1
 8001edc:	f7fe fdcb 	bl	8000a76 <_ZSt16__deque_buf_sizej>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	f000 fb25 	bl	8002534 <_ZNSt16allocator_traitsISaIaEE8allocateERS0_j>
 8001eea:	4603      	mov	r3, r0
      }
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd90      	pop	{r4, r7, pc}

08001ef4 <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv>:
      _M_hash() const { return __ebo_hash::_M_cget(); }
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 fb28 	bl	8002552 <_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIaELb1EE7_M_cgetEv>
 8001f02:	4603      	mov	r3, r0
 8001f04:	4618      	mov	r0, r3
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEjj>:
      _M_bucket_index(__hash_code __c, std::size_t __bkt_count) const
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
      { return _RangeHash{}(__c, __bkt_count); }
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	68b9      	ldr	r1, [r7, #8]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe fdd6 	bl	8000ad2 <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 8001f26:	4603      	mov	r3, r0
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	603b      	str	r3, [r7, #0]
      __node_base_ptr __prev_p = _M_buckets[__bkt];
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	617b      	str	r3, [r7, #20]
      if (!__prev_p)
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x26>
	return nullptr;
 8001f52:	2300      	movs	r3, #0
 8001f54:	e02d      	b.n	8001fb2 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x82>
      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	613b      	str	r3, [r7, #16]
	  if (this->_M_equals(__k, __code, *__p))
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	3304      	adds	r3, #4
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f000 fafe 	bl	8002566 <_ZNKSt8__detail15_Hashtable_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS5_Lb0EEE>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x44>
	    return __prev_p;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	e01e      	b.n	8001fb2 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x82>
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00c      	beq.n	8001f96 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x66>
 8001f7c:	6938      	ldr	r0, [r7, #16]
 8001f7e:	f7ff fe5a 	bl	8001c36 <_ZNKSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EE7_M_nextEv>
 8001f82:	4603      	mov	r3, r0
 8001f84:	3304      	adds	r3, #4
 8001f86:	4619      	mov	r1, r3
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f000 fb19 	bl	80025c0 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS6_16_Hash_node_valueIS4_Lb0EEE>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d001      	beq.n	8001f9a <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x6a>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x6c>
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d106      	bne.n	8001fae <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x7e>
	  __prev_p = __p;
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	617b      	str	r3, [r7, #20]
	   __p = __p->_M_next())
 8001fa4:	6938      	ldr	r0, [r7, #16]
 8001fa6:	f7ff fe46 	bl	8001c36 <_ZNKSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EE7_M_nextEv>
 8001faa:	6138      	str	r0, [r7, #16]
	  if (this->_M_equals(__k, __code, *__p))
 8001fac:	e7d6      	b.n	8001f5c <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x2c>
	    break;
 8001fae:	bf00      	nop
      return nullptr;
 8001fb0:	2300      	movs	r3, #0
    }
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE9_M_valptrEv>:
      _M_valptr() noexcept
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f000 fb0c 	bl	80025e2 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKaP9BaseStateEE6_M_ptrEv>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <_ZNSt11_Tuple_implILj0EJRKaEEC1ES1_>:
      _Tuple_impl(const _Head& __head)
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
      : _Base(__head)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6839      	ldr	r1, [r7, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 fb09 	bl	80025fa <_ZNSt10_Head_baseILj0ERKaLb0EEC1ES1_>
      { }
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr

08002006 <_ZSt7forwardISt5tupleIJRKaEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4618      	mov	r0, r3
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr

0800201a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4618      	mov	r0, r3
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr

0800202e <_ZNSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEC1Ev>:
    struct _Hash_node
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4618      	mov	r0, r3
 800203a:	f7fe fd3d 	bl	8000ab8 <_ZNSt8__detail15_Hash_node_baseC1Ev>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE16_M_allocate_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESE_IJEEEEEPS7_DpOT_>:
      _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
 8002048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800204c:	b088      	sub	sp, #32
 800204e:	af02      	add	r7, sp, #8
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
 8002056:	603b      	str	r3, [r7, #0]
	auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f000 f928 	bl	80022ae <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE17_M_node_allocatorEv>
 800205e:	4603      	mov	r3, r0
 8002060:	2101      	movs	r1, #1
 8002062:	4618      	mov	r0, r3
 8002064:	f000 fad7 	bl	8002616 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE8allocateERS8_j>
 8002068:	6178      	str	r0, [r7, #20]
	__node_ptr __n = std::__to_address(__nptr);
 800206a:	6978      	ldr	r0, [r7, #20]
 800206c:	f000 fae2 	bl	8002634 <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEPT_S9_>
 8002070:	6138      	str	r0, [r7, #16]
	    ::new ((void*)__n) __node_type;
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	4619      	mov	r1, r3
 8002076:	200c      	movs	r0, #12
 8002078:	f7fe fcf2 	bl	8000a60 <_ZnwjPv>
 800207c:	4603      	mov	r3, r0
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff ffd5 	bl	800202e <_ZNSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEC1Ev>
	    __node_alloc_traits::construct(_M_node_allocator(),
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f000 f912 	bl	80022ae <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE17_M_node_allocatorEv>
 800208a:	4604      	mov	r4, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	3304      	adds	r3, #4
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff ff92 	bl	8001fba <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE9_M_valptrEv>
 8002096:	4605      	mov	r5, r0
 8002098:	68b8      	ldr	r0, [r7, #8]
 800209a:	f7ff ffaa 	bl	8001ff2 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800209e:	4606      	mov	r6, r0
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f7ff ffb0 	bl	8002006 <_ZSt7forwardISt5tupleIJRKaEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80020a6:	4680      	mov	r8, r0
 80020a8:	6838      	ldr	r0, [r7, #0]
 80020aa:	f7ff ffb6 	bl	800201a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80020ae:	4603      	mov	r3, r0
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	4643      	mov	r3, r8
 80020b4:	4632      	mov	r2, r6
 80020b6:	4629      	mov	r1, r5
 80020b8:	4620      	mov	r0, r4
 80020ba:	f000 fac5 	bl	8002648 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJRS3_EESE_IJEEEEEvRS8_PT_DpOT0_>
	    return __n;
 80020be:	693b      	ldr	r3, [r7, #16]
      }
 80020c0:	4618      	mov	r0, r3
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080020ca <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b084      	sub	sp, #16
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	60f8      	str	r0, [r7, #12]
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	607a      	str	r2, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash(size_type __bkt_count, const __rehash_state& __state)
    {
      __try
	{
	  _M_rehash_aux(__bkt_count, __unique_keys{});
 80020d6:	461a      	mov	r2, r3
 80020d8:	68b9      	ldr	r1, [r7, #8]
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 fae1 	bl	80026a2 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>
	  // A failure here means that buckets allocation failed.  We only
	  // have to restore hash policy previous state.
	  _M_rehash_policy._M_reset(__state);
	  __throw_exception_again;
	}
    }
 80020e0:	bf00      	nop
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeERNS_21_Hash_node_code_cacheILb0EEEj>:
      _M_store_code(_Hash_node_code_cache<false>&, __hash_code) const
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
      { }
 80020f4:	bf00      	nop
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr

080020fe <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS6_10_Hash_nodeIS4_Lb0EEE>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80020fe:	b590      	push	{r4, r7, lr}
 8002100:	b085      	sub	sp, #20
 8002102:	af00      	add	r7, sp, #0
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	60b9      	str	r1, [r7, #8]
 8002108:	607a      	str	r2, [r7, #4]
      if (_M_buckets[__bkt])
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d011      	beq.n	800213e <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS6_10_Hash_nodeIS4_Lb0EEE+0x40>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt]->_M_nxt = __node;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	601a      	str	r2, [r3, #0]
    }
 800213c:	e022      	b.n	8002184 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS6_10_Hash_nodeIS4_Lb0EEE+0x86>
	  __node->_M_nxt = _M_before_begin._M_nxt;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	689a      	ldr	r2, [r3, #8]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	601a      	str	r2, [r3, #0]
	  _M_before_begin._M_nxt = __node;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	609a      	str	r2, [r3, #8]
	  if (__node->_M_nxt)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00f      	beq.n	8002174 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS6_10_Hash_nodeIS4_Lb0EEE+0x76>
	    _M_buckets[_M_bucket_index(*__node->_M_next())] = __node;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681c      	ldr	r4, [r3, #0]
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7ff fd6c 	bl	8001c36 <_ZNKSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EE7_M_nextEv>
 800215e:	4603      	mov	r3, r0
 8002160:	3304      	adds	r3, #4
 8002162:	4619      	mov	r1, r3
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f000 fa2b 	bl	80025c0 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS6_16_Hash_node_valueIS4_Lb0EEE>
 800216a:	4603      	mov	r3, r0
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4423      	add	r3, r4
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt] = &_M_before_begin;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	3208      	adds	r2, #8
 8002182:	601a      	str	r2, [r3, #0]
    }
 8002184:	bf00      	nop
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	bd90      	pop	{r4, r7, pc}

0800218c <_ZN9__gnu_cxx13new_allocatorIaEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4618      	mov	r0, r3
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr

080021a0 <_ZNSt15_Deque_iteratorIaRaPaEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	605a      	str	r2, [r3, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	609a      	str	r2, [r3, #8]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	60da      	str	r2, [r3, #12]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr

080021cc <_ZNSt16allocator_traitsISaIPaEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80021d6:	2200      	movs	r2, #0
 80021d8:	6839      	ldr	r1, [r7, #0]
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 fad0 	bl	8002780 <_ZN9__gnu_cxx13new_allocatorIPaE8allocateEjPKv>
 80021e0:	4603      	mov	r3, r0
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <_ZNSt15_Deque_iteratorIaRaPaE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80021ea:	b580      	push	{r7, lr}
 80021ec:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80021ee:	2001      	movs	r0, #1
 80021f0:	f7fe fc41 	bl	8000a76 <_ZSt16__deque_buf_sizej>
 80021f4:	4603      	mov	r3, r0
 80021f6:	4618      	mov	r0, r3
 80021f8:	bd80      	pop	{r7, pc}

080021fa <_ZNSt16allocator_traitsISaIaEE10deallocateERS0_Paj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b084      	sub	sp, #16
 80021fe:	af00      	add	r7, sp, #0
 8002200:	60f8      	str	r0, [r7, #12]
 8002202:	60b9      	str	r1, [r7, #8]
 8002204:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68b9      	ldr	r1, [r7, #8]
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 fae1 	bl	80027d2 <_ZN9__gnu_cxx13new_allocatorIaE10deallocateEPaj>
 8002210:	bf00      	nop
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <_ZNKSt11_Deque_baseIaSaIaEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4618      	mov	r0, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr

0800222c <_ZNSaIPaEC1IaEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 fad9 	bl	80027ee <_ZN9__gnu_cxx13new_allocatorIPaEC1Ev>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <_ZN9__gnu_cxx13new_allocatorIPaED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4618      	mov	r0, r3
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr

0800225a <_ZN9__gnu_cxx13new_allocatorIPaE10deallocateEPS1_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800225a:	b580      	push	{r7, lr}
 800225c:	b084      	sub	sp, #16
 800225e:	af00      	add	r7, sp, #0
 8002260:	60f8      	str	r0, [r7, #12]
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4619      	mov	r1, r3
 800226c:	68b8      	ldr	r0, [r7, #8]
 800226e:	f005 f86d 	bl	800734c <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 8002272:	bf00      	nop
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <_ZSt9__fill_a1IPPFvvES1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 800227a:	b480      	push	{r7}
 800227c:	b087      	sub	sp, #28
 800227e:	af00      	add	r7, sp, #0
 8002280:	60f8      	str	r0, [r7, #12]
 8002282:	60b9      	str	r1, [r7, #8]
 8002284:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 800228c:	e005      	b.n	800229a <_ZSt9__fill_a1IPPFvvES1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x20>
	*__first = __tmp;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	601a      	str	r2, [r3, #0]
      for (; __first != __last; ++__first)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	3304      	adds	r3, #4
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d1f5      	bne.n	800228e <_ZSt9__fill_a1IPPFvvES1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x14>
    }
 80022a2:	bf00      	nop
 80022a4:	bf00      	nop
 80022a6:	371c      	adds	r7, #28
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bc80      	pop	{r7}
 80022ac:	4770      	bx	lr

080022ae <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE17_M_node_allocatorEv>:
      _M_node_allocator()
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
      { return __ebo_node_alloc::_M_get(); }
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 faa3 	bl	8002802 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEELb1EE6_M_getEv>
 80022bc:	4603      	mov	r3, r0
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE7destroyIS6_EEvRS8_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
 80022ce:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 80022d0:	6839      	ldr	r1, [r7, #0]
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 fa9f 	bl	8002816 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE7destroyIS7_EEvPT_>
	}
 80022d8:	bf00      	nop
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE22_M_deallocate_node_ptrEPS7_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_ptr __n)
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
 80022ea:	6838      	ldr	r0, [r7, #0]
 80022ec:	f000 fa9d 	bl	800282a <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE10pointer_toERS7_>
 80022f0:	60f8      	str	r0, [r7, #12]
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7ff ffdb 	bl	80022ae <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE17_M_node_allocatorEv>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2201      	movs	r2, #1
 80022fc:	68f9      	ldr	r1, [r7, #12]
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 f9c0 	bl	8002684 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE10deallocateERS8_PS7_j>
    }
 8002304:	bf00      	nop
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <_ZNSt14pointer_traitsIPPNSt8__detail15_Hash_node_baseEE10pointer_toERS2_>:
       *  @brief  Obtain a pointer to an object
       *  @param  __r  A reference to an object of type @c element_type
       *  @return @c addressof(__r)
      */
      static _GLIBCXX20_CONSTEXPR pointer
      pointer_to(__make_not_void<element_type>& __r) noexcept
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 fa94 	bl	8002842 <_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 800231a:	4603      	mov	r3, r0
 800231c:	4618      	mov	r0, r3
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEERKSaIT_E>:
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 fa93 	bl	800285a <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 fa91 	bl	800286e <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEED1Ev>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002356:	b580      	push	{r7, lr}
 8002358:	b084      	sub	sp, #16
 800235a:	af00      	add	r7, sp, #0
 800235c:	60f8      	str	r0, [r7, #12]
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	68b9      	ldr	r1, [r7, #8]
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f000 fa8b 	bl	8002882 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS3_j>
 800236c:	bf00      	nop
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <_ZSt4moveIRNSt11_Deque_baseIaSaIaEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4618      	mov	r0, r3
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr

08002388 <_ZNSt11_Deque_baseIaSaIaEE16_Deque_impl_dataC1ERKS2_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f103 0208 	add.w	r2, r3, #8
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	3308      	adds	r3, #8
 80023ac:	4619      	mov	r1, r3
 80023ae:	4610      	mov	r0, r2
 80023b0:	f7fe ff5f 	bl	8001272 <_ZNSt15_Deque_iteratorIaRaPaEC1ERKS2_>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f103 0218 	add.w	r2, r3, #24
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	3318      	adds	r3, #24
 80023be:	4619      	mov	r1, r3
 80023c0:	4610      	mov	r0, r2
 80023c2:	f7fe ff56 	bl	8001272 <_ZNSt15_Deque_iteratorIaRaPaEC1ERKS2_>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4618      	mov	r0, r3
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <_ZNSt11_Deque_baseIaSaIaEE16_Deque_impl_dataC1EOS2_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 80023d0:	b5b0      	push	{r4, r5, r7, lr}
 80023d2:	b08c      	sub	sp, #48	; 0x30
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 80023da:	6839      	ldr	r1, [r7, #0]
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7ff ffd3 	bl	8002388 <_ZNSt11_Deque_baseIaSaIaEE16_Deque_impl_dataC1ERKS2_>
	{ __x = _Deque_impl_data(); }
 80023e2:	f107 0308 	add.w	r3, r7, #8
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff fb5a 	bl	8001aa0 <_ZNSt11_Deque_baseIaSaIaEE16_Deque_impl_dataC1Ev>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	461d      	mov	r5, r3
 80023f0:	f107 0408 	add.w	r4, r7, #8
 80023f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002400:	e885 0003 	stmia.w	r5, {r0, r1}
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4618      	mov	r0, r3
 8002408:	3730      	adds	r7, #48	; 0x30
 800240a:	46bd      	mov	sp, r7
 800240c:	bdb0      	pop	{r4, r5, r7, pc}

0800240e <_ZSt4moveIRSaIaEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4618      	mov	r0, r3
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr

08002422 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE16_M_allocate_nodeIJRaS5_EEEPS7_DpOT_>:
      _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
 8002422:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002424:	b087      	sub	sp, #28
 8002426:	af00      	add	r7, sp, #0
 8002428:	60f8      	str	r0, [r7, #12]
 800242a:	60b9      	str	r1, [r7, #8]
 800242c:	607a      	str	r2, [r7, #4]
	auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f7ff ff3d 	bl	80022ae <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE17_M_node_allocatorEv>
 8002434:	4603      	mov	r3, r0
 8002436:	2101      	movs	r1, #1
 8002438:	4618      	mov	r0, r3
 800243a:	f000 f8ec 	bl	8002616 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE8allocateERS8_j>
 800243e:	6178      	str	r0, [r7, #20]
	__node_ptr __n = std::__to_address(__nptr);
 8002440:	6978      	ldr	r0, [r7, #20]
 8002442:	f000 f8f7 	bl	8002634 <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEPT_S9_>
 8002446:	6138      	str	r0, [r7, #16]
	    ::new ((void*)__n) __node_type;
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	4619      	mov	r1, r3
 800244c:	200c      	movs	r0, #12
 800244e:	f7fe fb07 	bl	8000a60 <_ZnwjPv>
 8002452:	4603      	mov	r3, r0
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff fdea 	bl	800202e <_ZNSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEC1Ev>
	    __node_alloc_traits::construct(_M_node_allocator(),
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f7ff ff27 	bl	80022ae <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE17_M_node_allocatorEv>
 8002460:	4604      	mov	r4, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	3304      	adds	r3, #4
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff fda7 	bl	8001fba <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE9_M_valptrEv>
 800246c:	4605      	mov	r5, r0
 800246e:	68b8      	ldr	r0, [r7, #8]
 8002470:	f7fe ffc8 	bl	8001404 <_ZSt7forwardIRaEOT_RNSt16remove_referenceIS1_E4typeE>
 8002474:	4606      	mov	r6, r0
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7fe ffce 	bl	8001418 <_ZSt7forwardIP9BaseStateEOT_RNSt16remove_referenceIS2_E4typeE>
 800247c:	4603      	mov	r3, r0
 800247e:	4632      	mov	r2, r6
 8002480:	4629      	mov	r1, r5
 8002482:	4620      	mov	r0, r4
 8002484:	f000 fa0d 	bl	80028a2 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE9constructIS6_JRaS5_EEEvRS8_PT_DpOT0_>
	    return __n;
 8002488:	693b      	ldr	r3, [r7, #16]
      }
 800248a:	4618      	mov	r0, r3
 800248c:	371c      	adds	r7, #28
 800248e:	46bd      	mov	sp, r7
 8002490:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002492 <_ZSt7forwardIRSt4pairIKaP9BaseStateEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4618      	mov	r0, r3
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr

080024a6 <_ZSt3getILj0EKaP9BaseStateERNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERS7_>:
	{ return std::forward<const _Tp2>(__pair.second); }
    };

  template<size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&
    get(pair<_Tp1, _Tp2>& __in) noexcept
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b082      	sub	sp, #8
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
    { return __pair_get<_Int>::__get(__in); }
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 fa0f 	bl	80028d2 <_ZNSt10__pair_getILj0EE5__getIKaP9BaseStateEERT_RSt4pairIS5_T0_E>
 80024b4:	4603      	mov	r3, r0
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <_ZNSt8__detail19_Node_iterator_baseISt4pairIKaP9BaseStateELb0EEC1EPNS_10_Hash_nodeIS5_Lb0EEE>:
      _Node_iterator_base(__node_type* __p) noexcept
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
 80024c6:	6039      	str	r1, [r7, #0]
      : _M_cur(__p) { }
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4618      	mov	r0, r3
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr

080024da <_ZSt7forwardINSt8__detail14_Node_iteratorISt4pairIKaP9BaseStateELb0ELb0EEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4618      	mov	r0, r3
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr

080024ee <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKaP9BaseStateELb0ELb0EEEbEC1IS6_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b084      	sub	sp, #16
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	60f8      	str	r0, [r7, #12]
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80024fa:	68b8      	ldr	r0, [r7, #8]
 80024fc:	f7ff ffed 	bl	80024da <_ZSt7forwardINSt8__detail14_Node_iteratorISt4pairIKaP9BaseStateELb0ELb0EEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8002500:	4602      	mov	r2, r0
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6812      	ldr	r2, [r2, #0]
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f7fe fe41 	bl	8001190 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 800250e:	4603      	mov	r3, r0
 8002510:	781a      	ldrb	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	711a      	strb	r2, [r3, #4]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	4618      	mov	r0, r3
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <_ZSt7forwardIRNSt8__detail14_Node_iteratorISt4pairIKaP9BaseStateELb0ELb0EEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4618      	mov	r0, r3
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr

08002534 <_ZNSt16allocator_traitsISaIaEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800253e:	2200      	movs	r2, #0
 8002540:	6839      	ldr	r1, [r7, #0]
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 f9da 	bl	80028fc <_ZN9__gnu_cxx13new_allocatorIaE8allocateEjPKv>
 8002548:	4603      	mov	r3, r0
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIaELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr

08002566 <_ZNKSt8__detail15_Hashtable_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS5_Lb0EEE>:
      _M_equals(const _Key& __k, __hash_code __c,
 8002566:	b590      	push	{r4, r7, lr}
 8002568:	b087      	sub	sp, #28
 800256a:	af00      	add	r7, sp, #0
 800256c:	60f8      	str	r0, [r7, #12]
 800256e:	60b9      	str	r1, [r7, #8]
 8002570:	607a      	str	r2, [r7, #4]
 8002572:	603b      	str	r3, [r7, #0]
	return _S_equals(__c, __n) && _M_eq()(__k, _ExtractKey{}(__n._M_v()));
 8002574:	6839      	ldr	r1, [r7, #0]
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f9e1 	bl	800293e <_ZNSt8__detail15_Hashtable_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb0EEE>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d019      	beq.n	80025b6 <_ZNKSt8__detail15_Hashtable_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS5_Lb0EEE+0x50>
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f000 f9e6 	bl	8002954 <_ZNKSt8__detail15_Hashtable_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>
 8002588:	4604      	mov	r4, r0
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f000 f9ed 	bl	800296c <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE4_M_vEv>
 8002592:	4602      	mov	r2, r0
 8002594:	f107 0314 	add.w	r3, r7, #20
 8002598:	4611      	mov	r1, r2
 800259a:	4618      	mov	r0, r3
 800259c:	f000 f9f2 	bl	8002984 <_ZNKSt8__detail10_Select1stclIRKSt4pairIKaP9BaseStateEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS9_>
 80025a0:	4603      	mov	r3, r0
 80025a2:	461a      	mov	r2, r3
 80025a4:	68b9      	ldr	r1, [r7, #8]
 80025a6:	4620      	mov	r0, r4
 80025a8:	f000 f9fd 	bl	80029a6 <_ZNKSt8equal_toIaEclERKaS2_>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <_ZNKSt8__detail15_Hashtable_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS5_Lb0EEE+0x50>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <_ZNKSt8__detail15_Hashtable_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS5_Lb0EEE+0x52>
 80025b6:	2300      	movs	r3, #0
      }
 80025b8:	4618      	mov	r0, r3
 80025ba:	371c      	adds	r7, #28
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd90      	pop	{r4, r7, pc}

080025c0 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS6_16_Hash_node_valueIS4_Lb0EEE>:
      _M_bucket_index(const __node_value_type& __n) const noexcept
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__n, _M_bucket_count); }
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	461a      	mov	r2, r3
 80025d0:	6839      	ldr	r1, [r7, #0]
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f9fd 	bl	80029d2 <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIS5_Lb0EEEj>
 80025d8:	4603      	mov	r3, r0
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKaP9BaseStateEE6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 fa13 	bl	8002a16 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKaP9BaseStateEE7_M_addrEv>
 80025f0:	4603      	mov	r3, r0
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <_ZNSt10_Head_baseILj0ERKaLb0EEC1ES1_>:
      constexpr _Head_base(const _Head& __h)
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
 8002602:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4618      	mov	r0, r3
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr

08002616 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE8allocateERS8_j>:
      allocate(allocator_type& __a, size_type __n)
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002620:	2200      	movs	r2, #0
 8002622:	6839      	ldr	r1, [r7, #0]
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 fa0d 	bl	8002a44 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE8allocateEjPKv>
 800262a:	4603      	mov	r3, r0
 800262c:	4618      	mov	r0, r3
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEPT_S9_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 800263c:	687b      	ldr	r3, [r7, #4]
    }
 800263e:	4618      	mov	r0, r3
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr

08002648 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJRS3_EESE_IJEEEEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8002648:	b5b0      	push	{r4, r5, r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af02      	add	r7, sp, #8
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
 8002654:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff fccb 	bl	8001ff2 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800265c:	4604      	mov	r4, r0
 800265e:	6838      	ldr	r0, [r7, #0]
 8002660:	f7ff fcd1 	bl	8002006 <_ZSt7forwardISt5tupleIJRKaEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8002664:	4605      	mov	r5, r0
 8002666:	6a38      	ldr	r0, [r7, #32]
 8002668:	f7ff fcd7 	bl	800201a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800266c:	4603      	mov	r3, r0
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	462b      	mov	r3, r5
 8002672:	4622      	mov	r2, r4
 8002674:	68b9      	ldr	r1, [r7, #8]
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 fa22 	bl	8002ac0 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvPT_DpOT0_>
	}
 800267c:	bf00      	nop
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bdb0      	pop	{r4, r5, r7, pc}

08002684 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE10deallocateERS8_PS7_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	68b9      	ldr	r1, [r7, #8]
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 fa3a 	bl	8002b0e <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE10deallocateEPS8_j>
 800269a:	bf00      	nop
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b08a      	sub	sp, #40	; 0x28
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	60f8      	str	r0, [r7, #12]
 80026aa:	60b9      	str	r1, [r7, #8]
 80026ac:	713a      	strb	r2, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash_aux(size_type __bkt_count, true_type /* __uks */)
    {
      __buckets_ptr __new_buckets = _M_allocate_buckets(__bkt_count);
 80026ae:	68b9      	ldr	r1, [r7, #8]
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 fa3f 	bl	8002b34 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>
 80026b6:	61f8      	str	r0, [r7, #28]
      __node_ptr __p = _M_begin();
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f7ff f829 	bl	8001710 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 80026be:	6278      	str	r0, [r7, #36]	; 0x24
      _M_before_begin._M_nxt = nullptr;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	609a      	str	r2, [r3, #8]
      std::size_t __bbegin_bkt = 0;
 80026c6:	2300      	movs	r3, #0
 80026c8:	623b      	str	r3, [r7, #32]
      while (__p)
 80026ca:	e03e      	b.n	800274a <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xa8>
	{
	  __node_ptr __next = __p->_M_next();
 80026cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026ce:	f7ff fab2 	bl	8001c36 <_ZNKSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EE7_M_nextEv>
 80026d2:	61b8      	str	r0, [r7, #24]
	  std::size_t __bkt
	    = __hash_code_base::_M_bucket_index(*__p, __bkt_count);
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	3304      	adds	r3, #4
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	4619      	mov	r1, r3
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f000 f978 	bl	80029d2 <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIS5_Lb0EEEj>
 80026e2:	6178      	str	r0, [r7, #20]
	  if (!__new_buckets[__bkt])
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	69fa      	ldr	r2, [r7, #28]
 80026ea:	4413      	add	r3, r2
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d11a      	bne.n	8002728 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x86>
	    {
	      __p->_M_nxt = _M_before_begin._M_nxt;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	601a      	str	r2, [r3, #0]
	      _M_before_begin._M_nxt = __p;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026fe:	609a      	str	r2, [r3, #8]
	      __new_buckets[__bkt] = &_M_before_begin;
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	69fa      	ldr	r2, [r7, #28]
 8002706:	4413      	add	r3, r2
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	3208      	adds	r2, #8
 800270c:	601a      	str	r2, [r3, #0]
	      if (__p->_M_nxt)
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d005      	beq.n	8002722 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x80>
		__new_buckets[__bbegin_bkt] = __p;
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	69fa      	ldr	r2, [r7, #28]
 800271c:	4413      	add	r3, r2
 800271e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002720:	601a      	str	r2, [r3, #0]
	      __bbegin_bkt = __bkt;
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	623b      	str	r3, [r7, #32]
 8002726:	e00e      	b.n	8002746 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xa4>
	    }
	  else
	    {
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	69fa      	ldr	r2, [r7, #28]
 800272e:	4413      	add	r3, r2
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	601a      	str	r2, [r3, #0]
	      __new_buckets[__bkt]->_M_nxt = __p;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	69fa      	ldr	r2, [r7, #28]
 800273e:	4413      	add	r3, r2
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002744:	601a      	str	r2, [r3, #0]
	    }

	  __p = __next;
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	627b      	str	r3, [r7, #36]	; 0x24
      while (__p)
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1bd      	bne.n	80026cc <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x2a>
	}

      _M_deallocate_buckets();
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f7fe fe1c 	bl	800138e <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
      _M_bucket_count = __bkt_count;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	605a      	str	r2, [r3, #4]
      _M_buckets = __new_buckets;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	69fa      	ldr	r2, [r7, #28]
 8002760:	601a      	str	r2, [r3, #0]
    }
 8002762:	bf00      	nop
 8002764:	3728      	adds	r7, #40	; 0x28
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <_ZNK9__gnu_cxx13new_allocatorIPaE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002772:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8002776:	4618      	mov	r0, r3
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr

08002780 <_ZN9__gnu_cxx13new_allocatorIPaE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f7ff ffec 	bl	800276a <_ZNK9__gnu_cxx13new_allocatorIPaE11_M_max_sizeEv>
 8002792:	4602      	mov	r2, r0
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	4293      	cmp	r3, r2
 8002798:	bf8c      	ite	hi
 800279a:	2301      	movhi	r3, #1
 800279c:	2300      	movls	r3, #0
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	bf14      	ite	ne
 80027a4:	2301      	movne	r3, #1
 80027a6:	2300      	moveq	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d007      	beq.n	80027be <_ZN9__gnu_cxx13new_allocatorIPaE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027b4:	d301      	bcc.n	80027ba <_ZN9__gnu_cxx13new_allocatorIPaE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80027b6:	f004 fddf 	bl	8007378 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80027ba:	f004 fdda 	bl	8007372 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f004 fdc4 	bl	8007350 <_Znwj>
 80027c8:	4603      	mov	r3, r0
      }
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <_ZN9__gnu_cxx13new_allocatorIaE10deallocateEPaj>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b084      	sub	sp, #16
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	60f8      	str	r0, [r7, #12]
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	68b8      	ldr	r0, [r7, #8]
 80027e2:	f004 fdb3 	bl	800734c <_ZdlPvj>
      }
 80027e6:	bf00      	nop
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <_ZN9__gnu_cxx13new_allocatorIPaEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4618      	mov	r0, r3
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr

08002802 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEELb1EE6_M_getEv>:
      _Tp& _M_get() { return static_cast<_Tp&>(*this); }
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4618      	mov	r0, r3
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	bc80      	pop	{r7}
 8002814:	4770      	bx	lr

08002816 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE7destroyIS7_EEvPT_>:
	destroy(_Up* __p)
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
 800281e:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	bc80      	pop	{r7}
 8002828:	4770      	bx	lr

0800282a <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE10pointer_toERS7_>:
      pointer_to(__make_not_void<element_type>& __r) noexcept
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f99b 	bl	8002b6e <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEPT_RS8_>
 8002838:	4603      	mov	r3, r0
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>:
    addressof(_Tp& __r) noexcept
 8002842:	b580      	push	{r7, lr}
 8002844:	b082      	sub	sp, #8
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f99b 	bl	8002b86 <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 8002850:	4603      	mov	r3, r0
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4618      	mov	r0, r3
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr

0800286e <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4618      	mov	r0, r3
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr

08002882 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8002882:	b580      	push	{r7, lr}
 8002884:	b084      	sub	sp, #16
 8002886:	af00      	add	r7, sp, #0
 8002888:	60f8      	str	r0, [r7, #12]
 800288a:	60b9      	str	r1, [r7, #8]
 800288c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4619      	mov	r1, r3
 8002894:	68b8      	ldr	r0, [r7, #8]
 8002896:	f004 fd59 	bl	800734c <_ZdlPvj>
      }
 800289a:	bf00      	nop
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE9constructIS6_JRaS5_EEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80028a2:	b590      	push	{r4, r7, lr}
 80028a4:	b085      	sub	sp, #20
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	60f8      	str	r0, [r7, #12]
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
 80028ae:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7fe fda7 	bl	8001404 <_ZSt7forwardIRaEOT_RNSt16remove_referenceIS1_E4typeE>
 80028b6:	4604      	mov	r4, r0
 80028b8:	6838      	ldr	r0, [r7, #0]
 80028ba:	f7fe fdad 	bl	8001418 <_ZSt7forwardIP9BaseStateEOT_RNSt16remove_referenceIS2_E4typeE>
 80028be:	4603      	mov	r3, r0
 80028c0:	4622      	mov	r2, r4
 80028c2:	68b9      	ldr	r1, [r7, #8]
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 f968 	bl	8002b9a <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE9constructIS7_JRaS6_EEEvPT_DpOT0_>
	}
 80028ca:	bf00      	nop
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd90      	pop	{r4, r7, pc}

080028d2 <_ZNSt10__pair_getILj0EE5__getIKaP9BaseStateEERT_RSt4pairIS5_T0_E>:
	__get(pair<_Tp1, _Tp2>& __pair) noexcept
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
	{ return __pair.first; }
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4618      	mov	r0, r3
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr

080028e6 <_ZNK9__gnu_cxx13new_allocatorIaE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80028ee:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
      }
 80028f2:	4618      	mov	r0, r3
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr

080028fc <_ZN9__gnu_cxx13new_allocatorIaE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f7ff ffec 	bl	80028e6 <_ZNK9__gnu_cxx13new_allocatorIaE11_M_max_sizeEv>
 800290e:	4602      	mov	r2, r0
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	4293      	cmp	r3, r2
 8002914:	bf8c      	ite	hi
 8002916:	2301      	movhi	r3, #1
 8002918:	2300      	movls	r3, #0
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	bf14      	ite	ne
 8002920:	2301      	movne	r3, #1
 8002922:	2300      	moveq	r3, #0
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <_ZN9__gnu_cxx13new_allocatorIaE8allocateEjPKv+0x32>
	    std::__throw_bad_alloc();
 800292a:	f004 fd22 	bl	8007372 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800292e:	68b8      	ldr	r0, [r7, #8]
 8002930:	f004 fd0e 	bl	8007350 <_Znwj>
 8002934:	4603      	mov	r3, r0
      }
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <_ZNSt8__detail15_Hashtable_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb0EEE>:
      _S_equals(__hash_code, const _Hash_node_code_cache<false>&)
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
 8002946:	6039      	str	r1, [r7, #0]
      { return true; }
 8002948:	2301      	movs	r3, #1
 800294a:	4618      	mov	r0, r3
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr

08002954 <_ZNKSt8__detail15_Hashtable_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>:
      _M_eq() const { return _EqualEBO::_M_cget(); }
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f93a 	bl	8002bd6 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIaELb1EE7_M_cgetEv>
 8002962:	4603      	mov	r3, r0
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE4_M_vEv>:
      _M_v() const noexcept
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f938 	bl	8002bea <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE9_M_valptrEv>
 800297a:	4603      	mov	r3, r0
 800297c:	4618      	mov	r0, r3
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <_ZNKSt8__detail10_Select1stclIRKSt4pairIKaP9BaseStateEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS9_>:
      operator()(_Tp&& __x) const noexcept
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
      { return std::get<0>(std::forward<_Tp>(__x)); }
 800298e:	6838      	ldr	r0, [r7, #0]
 8002990:	f000 f938 	bl	8002c04 <_ZSt7forwardIRKSt4pairIKaP9BaseStateEEOT_RNSt16remove_referenceIS7_E4typeE>
 8002994:	4603      	mov	r3, r0
 8002996:	4618      	mov	r0, r3
 8002998:	f000 f93e 	bl	8002c18 <_ZSt3getILj0EKaP9BaseStateERKNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERKS7_>
 800299c:	4603      	mov	r3, r0
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <_ZNKSt8equal_toIaEclERKaS2_>:
  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 80029a6:	b480      	push	{r7}
 80029a8:	b085      	sub	sp, #20
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	60f8      	str	r0, [r7, #12]
 80029ae:	60b9      	str	r1, [r7, #8]
 80029b0:	607a      	str	r2, [r7, #4]
      { return __x == __y; }
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	f993 2000 	ldrsb.w	r2, [r3]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f993 3000 	ldrsb.w	r3, [r3]
 80029be:	429a      	cmp	r2, r3
 80029c0:	bf0c      	ite	eq
 80029c2:	2301      	moveq	r3, #1
 80029c4:	2300      	movne	r3, #0
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	4618      	mov	r0, r3
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr

080029d2 <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIS5_Lb0EEEj>:
      _M_bucket_index(const _Hash_node_value<_Value, false>& __n,
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b086      	sub	sp, #24
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	60f8      	str	r0, [r7, #12]
 80029da:	60b9      	str	r1, [r7, #8]
 80029dc:	607a      	str	r2, [r7, #4]
	return _RangeHash{}(_M_hash_code(_ExtractKey{}(__n._M_v())),
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff ffc3 	bl	800296c <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE4_M_vEv>
 80029e6:	4602      	mov	r2, r0
 80029e8:	f107 0314 	add.w	r3, r7, #20
 80029ec:	4611      	mov	r1, r2
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff ffc8 	bl	8002984 <_ZNKSt8__detail10_Select1stclIRKSt4pairIKaP9BaseStateEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS9_>
 80029f4:	4603      	mov	r3, r0
 80029f6:	4619      	mov	r1, r3
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f7fe ff5a 	bl	80018b2 <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS2_>
 80029fe:	4601      	mov	r1, r0
 8002a00:	f107 0310 	add.w	r3, r7, #16
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fe f863 	bl	8000ad2 <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 8002a0c:	4603      	mov	r3, r0
      }
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKaP9BaseStateEE7_M_addrEv>:
      _M_addr() noexcept
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 8002a1e:	687b      	ldr	r3, [r7, #4]
      }
 8002a20:	4618      	mov	r0, r3
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bc80      	pop	{r7}
 8002a28:	4770      	bx	lr
	...

08002a2c <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002a34:	4b02      	ldr	r3, [pc, #8]	; (8002a40 <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE11_M_max_sizeEv+0x14>)
      }
 8002a36:	4618      	mov	r0, r3
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr
 8002a40:	0aaaaaaa 	.word	0x0aaaaaaa

08002a44 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f7ff ffeb 	bl	8002a2c <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE11_M_max_sizeEv>
 8002a56:	4602      	mov	r2, r0
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	bf8c      	ite	hi
 8002a5e:	2301      	movhi	r3, #1
 8002a60:	2300      	movls	r3, #0
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	bf14      	ite	ne
 8002a68:	2301      	movne	r3, #1
 8002a6a:	2300      	moveq	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d007      	beq.n	8002a82 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	4a09      	ldr	r2, [pc, #36]	; (8002a9c <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE8allocateEjPKv+0x58>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d901      	bls.n	8002a7e <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8002a7a:	f004 fc7d 	bl	8007378 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8002a7e:	f004 fc78 	bl	8007372 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	4613      	mov	r3, r2
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	4413      	add	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f004 fc5f 	bl	8007350 <_Znwj>
 8002a92:	4603      	mov	r3, r0
      }
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	15555555 	.word	0x15555555

08002aa0 <_ZNSt5tupleIJRKaEEC1EOS2_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	4611      	mov	r1, r2
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 f8bd 	bl	8002c30 <_ZNSt11_Tuple_implILj0EJRKaEEC1EOS2_>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8002ac0:	b590      	push	{r4, r7, lr}
 8002ac2:	b089      	sub	sp, #36	; 0x24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
 8002acc:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7ff fa8f 	bl	8001ff2 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8002ad4:	6838      	ldr	r0, [r7, #0]
 8002ad6:	f7ff fa96 	bl	8002006 <_ZSt7forwardISt5tupleIJRKaEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8002ada:	4602      	mov	r2, r0
 8002adc:	f107 0318 	add.w	r3, r7, #24
 8002ae0:	4611      	mov	r1, r2
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff ffdc 	bl	8002aa0 <_ZNSt5tupleIJRKaEEC1EOS2_>
 8002ae8:	f107 0418 	add.w	r4, r7, #24
 8002aec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002aee:	f7ff fa94 	bl	800201a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	4619      	mov	r1, r3
 8002af6:	2008      	movs	r0, #8
 8002af8:	f7fd ffb2 	bl	8000a60 <_ZnwjPv>
 8002afc:	7f3b      	ldrb	r3, [r7, #28]
 8002afe:	4622      	mov	r2, r4
 8002b00:	7d39      	ldrb	r1, [r7, #20]
 8002b02:	f000 f8a4 	bl	8002c4e <_ZNSt4pairIKaP9BaseStateEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>
 8002b06:	bf00      	nop
 8002b08:	3724      	adds	r7, #36	; 0x24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd90      	pop	{r4, r7, pc}

08002b0e <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b084      	sub	sp, #16
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	60f8      	str	r0, [r7, #12]
 8002b16:	60b9      	str	r1, [r7, #8]
 8002b18:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	4413      	add	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4619      	mov	r1, r3
 8002b26:	68b8      	ldr	r0, [r7, #8]
 8002b28:	f004 fc10 	bl	800734c <_ZdlPvj>
      }
 8002b2c:	bf00      	nop
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>:
      _M_allocate_buckets(size_type __bkt_count)
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
	if (__builtin_expect(__bkt_count == 1, false))
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	bf0c      	ite	eq
 8002b44:	2301      	moveq	r3, #1
 8002b46:	2300      	movne	r3, #0
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d005      	beq.n	8002b5a <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x26>
	    _M_single_bucket = nullptr;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	619a      	str	r2, [r3, #24]
	    return &_M_single_bucket;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3318      	adds	r3, #24
 8002b58:	e005      	b.n	8002b66 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x32>
	return __hashtable_alloc::_M_allocate_buckets(__bkt_count);
 8002b5a:	6839      	ldr	r1, [r7, #0]
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f88a 	bl	8002c76 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE19_M_allocate_bucketsEj>
 8002b62:	4603      	mov	r3, r0
 8002b64:	bf00      	nop
      }
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEPT_RS8_>:
    addressof(_Tp& __r) noexcept
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f8aa 	bl	8002cd0 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEPT_RS8_>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4618      	mov	r0, r3
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr

08002b9a <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE9constructIS7_JRaS6_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8002b9a:	b5b0      	push	{r4, r5, r7, lr}
 8002b9c:	b084      	sub	sp, #16
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	60f8      	str	r0, [r7, #12]
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	607a      	str	r2, [r7, #4]
 8002ba6:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f7fe fc2b 	bl	8001404 <_ZSt7forwardIRaEOT_RNSt16remove_referenceIS1_E4typeE>
 8002bae:	4604      	mov	r4, r0
 8002bb0:	6838      	ldr	r0, [r7, #0]
 8002bb2:	f7fe fc31 	bl	8001418 <_ZSt7forwardIP9BaseStateEOT_RNSt16remove_referenceIS2_E4typeE>
 8002bb6:	4605      	mov	r5, r0
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	4619      	mov	r1, r3
 8002bbc:	2008      	movs	r0, #8
 8002bbe:	f7fd ff4f 	bl	8000a60 <_ZnwjPv>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	462a      	mov	r2, r5
 8002bc6:	4621      	mov	r1, r4
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f000 f88b 	bl	8002ce4 <_ZNSt4pairIKaP9BaseStateEC1IRaS2_Lb1EEEOT_OT0_>
 8002bce:	bf00      	nop
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bdb0      	pop	{r4, r5, r7, pc}

08002bd6 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIaELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4618      	mov	r0, r3
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr

08002bea <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE9_M_valptrEv>:
      _M_valptr() const noexcept
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f000 f88f 	bl	8002d18 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKaP9BaseStateEE6_M_ptrEv>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <_ZSt7forwardIRKSt4pairIKaP9BaseStateEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr

08002c18 <_ZSt3getILj0EKaP9BaseStateERKNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERKS7_>:
    get(pair<_Tp1, _Tp2>&& __in) noexcept
    { return __pair_get<_Int>::__move_get(std::move(__in)); }

  template<size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&
    get(const pair<_Tp1, _Tp2>& __in) noexcept
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
    { return __pair_get<_Int>::__const_get(__in); }
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 f885 	bl	8002d30 <_ZNSt10__pair_getILj0EE11__const_getIKaP9BaseStateEERKT_RKSt4pairIS5_T0_E>
 8002c26:	4603      	mov	r3, r0
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <_ZNSt11_Tuple_implILj0EJRKaEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	6812      	ldr	r2, [r2, #0]
 8002c40:	601a      	str	r2, [r3, #0]
      { }
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4618      	mov	r0, r3
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bc80      	pop	{r7}
 8002c4c:	4770      	bx	lr

08002c4e <_ZNSt4pairIKaP9BaseStateEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>:
  */
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      _GLIBCXX20_CONSTEXPR
      inline
      pair<_T1, _T2>::
 8002c4e:	b5b0      	push	{r4, r5, r7, lr}
 8002c50:	b086      	sub	sp, #24
 8002c52:	af02      	add	r7, sp, #8
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	7239      	strb	r1, [r7, #8]
 8002c58:	607a      	str	r2, [r7, #4]
 8002c5a:	703b      	strb	r3, [r7, #0]
      pair(piecewise_construct_t,
	   tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8002c5c:	463a      	mov	r2, r7
 8002c5e:	f88d 4000 	strb.w	r4, [sp]
 8002c62:	462b      	mov	r3, r5
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 f86c 	bl	8002d44 <_ZNSt4pairIKaP9BaseStateEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>
      { }
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bdb0      	pop	{r4, r5, r7, pc}

08002c76 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE19_M_allocate_bucketsEj>:
    _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __bkt_count)
 8002c76:	b590      	push	{r4, r7, lr}
 8002c78:	b087      	sub	sp, #28
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
 8002c7e:	6039      	str	r1, [r7, #0]
      __buckets_alloc_type __alloc(_M_node_allocator());
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff fb14 	bl	80022ae <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE17_M_node_allocatorEv>
 8002c86:	4602      	mov	r2, r0
 8002c88:	f107 030c 	add.w	r3, r7, #12
 8002c8c:	4611      	mov	r1, r2
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff fb48 	bl	8002324 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEERKSaIT_E>
      auto __ptr = __buckets_alloc_traits::allocate(__alloc, __bkt_count);
 8002c94:	f107 030c 	add.w	r3, r7, #12
 8002c98:	6839      	ldr	r1, [r7, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 f86d 	bl	8002d7a <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>
 8002ca0:	6178      	str	r0, [r7, #20]
      __buckets_ptr __p = std::__to_address(__ptr);
 8002ca2:	6978      	ldr	r0, [r7, #20]
 8002ca4:	f000 f878 	bl	8002d98 <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>
 8002ca8:	6138      	str	r0, [r7, #16]
      __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	f004 fdfb 	bl	80078b0 <memset>
      return __p;
 8002cba:	693c      	ldr	r4, [r7, #16]
    }
 8002cbc:	f107 030c 	add.w	r3, r7, #12
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff fb3c 	bl	800233e <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
      return __p;
 8002cc6:	4623      	mov	r3, r4
    }
 8002cc8:	4618      	mov	r0, r3
 8002cca:	371c      	adds	r7, #28
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd90      	pop	{r4, r7, pc}

08002cd0 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEPT_RS8_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr

08002ce4 <_ZNSt4pairIKaP9BaseStateEC1IRaS2_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8002cf0:	68b8      	ldr	r0, [r7, #8]
 8002cf2:	f7fe fb87 	bl	8001404 <_ZSt7forwardIRaEOT_RNSt16remove_referenceIS1_E4typeE>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	f993 2000 	ldrsb.w	r2, [r3]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	701a      	strb	r2, [r3, #0]
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7fe fb89 	bl	8001418 <_ZSt7forwardIP9BaseStateEOT_RNSt16remove_referenceIS2_E4typeE>
 8002d06:	4603      	mov	r3, r0
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	605a      	str	r2, [r3, #4]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKaP9BaseStateEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f843 	bl	8002dac <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKaP9BaseStateEE7_M_addrEv>
 8002d26:	4603      	mov	r3, r0
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <_ZNSt10__pair_getILj0EE11__const_getIKaP9BaseStateEERKT_RKSt4pairIS5_T0_E>:
	__const_get(const pair<_Tp1, _Tp2>& __pair) noexcept
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
	{ return __pair.first; }
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr

08002d44 <_ZNSt4pairIKaP9BaseStateEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, size_t... _Indexes1,
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
 8002d50:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8002d52:	68b8      	ldr	r0, [r7, #8]
 8002d54:	f000 f834 	bl	8002dc0 <_ZSt3getILj0EJRKaEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff f8ae 	bl	8001ebc <_ZSt7forwardIRKaEOT_RNSt16remove_referenceIS2_E4typeE>
 8002d60:	4603      	mov	r3, r0
 8002d62:	f993 2000 	ldrsb.w	r2, [r3]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	701a      	strb	r2, [r3, #0]
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	605a      	str	r2, [r3, #4]
      { }
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4618      	mov	r0, r3
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b082      	sub	sp, #8
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
 8002d82:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002d84:	2200      	movs	r2, #0
 8002d86:	6839      	ldr	r1, [r7, #0]
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f831 	bl	8002df0 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	4618      	mov	r0, r3
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>:
    __to_address(_Tp* __ptr) noexcept
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
      return __ptr;
 8002da0:	687b      	ldr	r3, [r7, #4]
    }
 8002da2:	4618      	mov	r0, r3
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr

08002dac <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKaP9BaseStateEE7_M_addrEv>:
      _M_addr() const noexcept
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
        return static_cast<const void*>(&_M_storage);
 8002db4:	687b      	ldr	r3, [r7, #4]
      }
 8002db6:	4618      	mov	r0, r3
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr

08002dc0 <_ZSt3getILj0EJRKaEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 f839 	bl	8002e42 <_ZSt12__get_helperILj0ERKaJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <_ZNK9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002de2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8002de6:	4618      	mov	r0, r3
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr

08002df0 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f7ff ffec 	bl	8002dda <_ZNK9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE11_M_max_sizeEv>
 8002e02:	4602      	mov	r2, r0
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	4293      	cmp	r3, r2
 8002e08:	bf8c      	ite	hi
 8002e0a:	2301      	movhi	r3, #1
 8002e0c:	2300      	movls	r3, #0
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	bf14      	ite	ne
 8002e14:	2301      	movne	r3, #1
 8002e16:	2300      	moveq	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d007      	beq.n	8002e2e <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e24:	d301      	bcc.n	8002e2a <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8002e26:	f004 faa7 	bl	8007378 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8002e2a:	f004 faa2 	bl	8007372 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4618      	mov	r0, r3
 8002e34:	f004 fa8c 	bl	8007350 <_Znwj>
 8002e38:	4603      	mov	r3, r0
      }
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <_ZSt12__get_helperILj0ERKaJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b082      	sub	sp, #8
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f805 	bl	8002e5a <_ZNSt11_Tuple_implILj0EJRKaEE7_M_headERS2_>
 8002e50:	4603      	mov	r3, r0
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <_ZNSt11_Tuple_implILj0EJRKaEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b082      	sub	sp, #8
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f000 f805 	bl	8002e74 <_ZNSt10_Head_baseILj0ERKaLb0EE7_M_headERS2_>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <_ZNSt10_Head_baseILj0ERKaLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr
	...

08002e8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	fsm1.setStartState(STATE_BLINK_SHORT);
 8002e90:	2102      	movs	r1, #2
 8002e92:	4813      	ldr	r0, [pc, #76]	; (8002ee0 <main+0x54>)
 8002e94:	f7fe f826 	bl	8000ee4 <_ZN18FiniteStateMachine13setStartStateEa>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e98:	f000 faf8 	bl	800348c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e9c:	f000 f834 	bl	8002f08 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ea0:	f000 f878 	bl	8002f94 <_ZL12MX_GPIO_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002ea4:	f001 fc30 	bl	8004708 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of myTimer */
  myTimerHandle = osTimerNew(TimerCallback, osTimerPeriodic, NULL, &myTimer_attributes);
 8002ea8:	4b0e      	ldr	r3, [pc, #56]	; (8002ee4 <main+0x58>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	2101      	movs	r1, #1
 8002eae:	480e      	ldr	r0, [pc, #56]	; (8002ee8 <main+0x5c>)
 8002eb0:	f001 fd7e 	bl	80049b0 <osTimerNew>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	4a0d      	ldr	r2, [pc, #52]	; (8002eec <main+0x60>)
 8002eb8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskFSM1 */
  TaskFSM1Handle = osThreadNew(fTaskFSM1, NULL, &TaskFSM1_attributes);
 8002eba:	4a0d      	ldr	r2, [pc, #52]	; (8002ef0 <main+0x64>)
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	480d      	ldr	r0, [pc, #52]	; (8002ef4 <main+0x68>)
 8002ec0:	f001 fc88 	bl	80047d4 <osThreadNew>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	4a0c      	ldr	r2, [pc, #48]	; (8002ef8 <main+0x6c>)
 8002ec8:	6013      	str	r3, [r2, #0]

  /* creation of TaskFSM2 */
  TaskFSM2Handle = osThreadNew(fTaskFSM2, NULL, &TaskFSM2_attributes);
 8002eca:	4a0c      	ldr	r2, [pc, #48]	; (8002efc <main+0x70>)
 8002ecc:	2100      	movs	r1, #0
 8002ece:	480c      	ldr	r0, [pc, #48]	; (8002f00 <main+0x74>)
 8002ed0:	f001 fc80 	bl	80047d4 <osThreadNew>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	4a0b      	ldr	r2, [pc, #44]	; (8002f04 <main+0x78>)
 8002ed8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002eda:	f001 fc47 	bl	800476c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002ede:	e7fe      	b.n	8002ede <main+0x52>
 8002ee0:	20000570 	.word	0x20000570
 8002ee4:	08007b84 	.word	0x08007b84
 8002ee8:	08003103 	.word	0x08003103
 8002eec:	2000053c 	.word	0x2000053c
 8002ef0:	08007b3c 	.word	0x08007b3c
 8002ef4:	080030d5 	.word	0x080030d5
 8002ef8:	2000007c 	.word	0x2000007c
 8002efc:	08007b60 	.word	0x08007b60
 8002f00:	080030f1 	.word	0x080030f1
 8002f04:	200002dc 	.word	0x200002dc

08002f08 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b090      	sub	sp, #64	; 0x40
 8002f0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f0e:	f107 0318 	add.w	r3, r7, #24
 8002f12:	2228      	movs	r2, #40	; 0x28
 8002f14:	2100      	movs	r1, #0
 8002f16:	4618      	mov	r0, r3
 8002f18:	f004 fcca 	bl	80078b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f1c:	1d3b      	adds	r3, r7, #4
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	605a      	str	r2, [r3, #4]
 8002f24:	609a      	str	r2, [r3, #8]
 8002f26:	60da      	str	r2, [r3, #12]
 8002f28:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f32:	2310      	movs	r3, #16
 8002f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002f36:	2300      	movs	r3, #0
 8002f38:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f3a:	f107 0318 	add.w	r3, r7, #24
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 fd6c 	bl	8003a1c <HAL_RCC_OscConfig>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	bf14      	ite	ne
 8002f4a:	2301      	movne	r3, #1
 8002f4c:	2300      	moveq	r3, #0
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <_Z18SystemClock_Configv+0x50>
  {
    Error_Handler();
 8002f54:	f000 f8f0 	bl	8003138 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f58:	230f      	movs	r3, #15
 8002f5a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f60:	2300      	movs	r3, #0
 8002f62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f64:	2300      	movs	r3, #0
 8002f66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002f6c:	1d3b      	adds	r3, r7, #4
 8002f6e:	2100      	movs	r1, #0
 8002f70:	4618      	mov	r0, r3
 8002f72:	f000 ffd5 	bl	8003f20 <HAL_RCC_ClockConfig>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	bf14      	ite	ne
 8002f7c:	2301      	movne	r3, #1
 8002f7e:	2300      	moveq	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <_Z18SystemClock_Configv+0x82>
  {
    Error_Handler();
 8002f86:	f000 f8d7 	bl	8003138 <Error_Handler>
  }
}
 8002f8a:	bf00      	nop
 8002f8c:	3740      	adds	r7, #64	; 0x40
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
	...

08002f94 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f9a:	f107 0308 	add.w	r3, r7, #8
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	605a      	str	r2, [r3, #4]
 8002fa4:	609a      	str	r2, [r3, #8]
 8002fa6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fa8:	4b18      	ldr	r3, [pc, #96]	; (800300c <_ZL12MX_GPIO_Initv+0x78>)
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	4a17      	ldr	r2, [pc, #92]	; (800300c <_ZL12MX_GPIO_Initv+0x78>)
 8002fae:	f043 0310 	orr.w	r3, r3, #16
 8002fb2:	6193      	str	r3, [r2, #24]
 8002fb4:	4b15      	ldr	r3, [pc, #84]	; (800300c <_ZL12MX_GPIO_Initv+0x78>)
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	f003 0310 	and.w	r3, r3, #16
 8002fbc:	607b      	str	r3, [r7, #4]
 8002fbe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc0:	4b12      	ldr	r3, [pc, #72]	; (800300c <_ZL12MX_GPIO_Initv+0x78>)
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	4a11      	ldr	r2, [pc, #68]	; (800300c <_ZL12MX_GPIO_Initv+0x78>)
 8002fc6:	f043 0304 	orr.w	r3, r3, #4
 8002fca:	6193      	str	r3, [r2, #24]
 8002fcc:	4b0f      	ldr	r3, [pc, #60]	; (800300c <_ZL12MX_GPIO_Initv+0x78>)
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	603b      	str	r3, [r7, #0]
 8002fd6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fde:	480c      	ldr	r0, [pc, #48]	; (8003010 <_ZL12MX_GPIO_Initv+0x7c>)
 8002fe0:	f000 fcea 	bl	80039b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002fe4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fe8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fea:	2301      	movs	r3, #1
 8002fec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ff6:	f107 0308 	add.w	r3, r7, #8
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	4804      	ldr	r0, [pc, #16]	; (8003010 <_ZL12MX_GPIO_Initv+0x7c>)
 8002ffe:	f000 fb57 	bl	80036b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003002:	bf00      	nop
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40021000 	.word	0x40021000
 8003010:	40011000 	.word	0x40011000

08003014 <_Z17f_stateBlinkShortv>:

/* USER CODE BEGIN 4 */
void f_stateBlinkShort()
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
	const uint32_t xFrequency = 500; // 500 миллисекунд
 800301a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800301e:	60fb      	str	r3, [r7, #12]
	const TickType_t xTransitionTime = pdMS_TO_TICKS(6000); // 6 секунд
 8003020:	f241 7370 	movw	r3, #6000	; 0x1770
 8003024:	60bb      	str	r3, [r7, #8]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8003026:	f002 fdeb 	bl	8005c00 <xTaskGetTickCount>
 800302a:	6078      	str	r0, [r7, #4]
	while((xTaskGetTickCount() - xLastWakeTime) < xTransitionTime)
 800302c:	e008      	b.n	8003040 <_Z17f_stateBlinkShortv+0x2c>
	{
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Выполнение действий для состояния 1
 800302e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003032:	480e      	ldr	r0, [pc, #56]	; (800306c <_Z17f_stateBlinkShortv+0x58>)
 8003034:	f000 fcd8 	bl	80039e8 <HAL_GPIO_TogglePin>
	osDelay(xFrequency); // Задержка в тиках времени FreeRTOS
 8003038:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800303c:	f001 fc74 	bl	8004928 <osDelay>
	while((xTaskGetTickCount() - xLastWakeTime) < xTransitionTime)
 8003040:	f002 fdde 	bl	8005c00 <xTaskGetTickCount>
 8003044:	4602      	mov	r2, r0
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	f241 726f 	movw	r2, #5999	; 0x176f
 800304e:	4293      	cmp	r3, r2
 8003050:	bf94      	ite	ls
 8003052:	2301      	movls	r3, #1
 8003054:	2300      	movhi	r3, #0
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1e8      	bne.n	800302e <_Z17f_stateBlinkShortv+0x1a>
	}
	fsm1.next();
 800305c:	4804      	ldr	r0, [pc, #16]	; (8003070 <_Z17f_stateBlinkShortv+0x5c>)
 800305e:	f7fd ff74 	bl	8000f4a <_ZN18FiniteStateMachine4nextEv>
	//fsm1.pState->end();
}
 8003062:	bf00      	nop
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40011000 	.word	0x40011000
 8003070:	20000570 	.word	0x20000570

08003074 <_Z16f_stateBlinkLongv>:

void f_stateBlinkLong()
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
	const uint32_t xFrequency = 1000; // 500 миллисекунд
 800307a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800307e:	60fb      	str	r3, [r7, #12]
	const TickType_t xTransitionTime = pdMS_TO_TICKS(6000); // 6 секунд
 8003080:	f241 7370 	movw	r3, #6000	; 0x1770
 8003084:	60bb      	str	r3, [r7, #8]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8003086:	f002 fdbb 	bl	8005c00 <xTaskGetTickCount>
 800308a:	6078      	str	r0, [r7, #4]
	while((xTaskGetTickCount() - xLastWakeTime) < xTransitionTime)
 800308c:	e008      	b.n	80030a0 <_Z16f_stateBlinkLongv+0x2c>
	{
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Выполнение действий для состояния 1
 800308e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003092:	480e      	ldr	r0, [pc, #56]	; (80030cc <_Z16f_stateBlinkLongv+0x58>)
 8003094:	f000 fca8 	bl	80039e8 <HAL_GPIO_TogglePin>
	osDelay(xFrequency); // Задержка в тиках времени FreeRTOS
 8003098:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800309c:	f001 fc44 	bl	8004928 <osDelay>
	while((xTaskGetTickCount() - xLastWakeTime) < xTransitionTime)
 80030a0:	f002 fdae 	bl	8005c00 <xTaskGetTickCount>
 80030a4:	4602      	mov	r2, r0
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	f241 726f 	movw	r2, #5999	; 0x176f
 80030ae:	4293      	cmp	r3, r2
 80030b0:	bf94      	ite	ls
 80030b2:	2301      	movls	r3, #1
 80030b4:	2300      	movhi	r3, #0
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1e8      	bne.n	800308e <_Z16f_stateBlinkLongv+0x1a>
	}
	fsm1.next();
 80030bc:	4804      	ldr	r0, [pc, #16]	; (80030d0 <_Z16f_stateBlinkLongv+0x5c>)
 80030be:	f7fd ff44 	bl	8000f4a <_ZN18FiniteStateMachine4nextEv>
}
 80030c2:	bf00      	nop
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40011000 	.word	0x40011000
 80030d0:	20000570 	.word	0x20000570

080030d4 <_Z9fTaskFSM1Pv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_fTaskFSM1 */
void fTaskFSM1(void *argument)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
fsm1.stateMachine();
 80030dc:	4803      	ldr	r0, [pc, #12]	; (80030ec <_Z9fTaskFSM1Pv+0x18>)
 80030de:	f7fd ff10 	bl	8000f02 <_ZN18FiniteStateMachine12stateMachineEv>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80030e2:	2001      	movs	r0, #1
 80030e4:	f001 fc20 	bl	8004928 <osDelay>
 80030e8:	e7fb      	b.n	80030e2 <_Z9fTaskFSM1Pv+0xe>
 80030ea:	bf00      	nop
 80030ec:	20000570 	.word	0x20000570

080030f0 <_Z9fTaskFSM2Pv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTaskFSM2 */
void fTaskFSM2(void *argument)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTaskFSM2 */

  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 80030f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030fc:	f001 fc14 	bl	8004928 <osDelay>
 8003100:	e7fa      	b.n	80030f8 <_Z9fTaskFSM2Pv+0x8>

08003102 <_Z13TimerCallbackPv>:
  /* USER CODE END fTaskFSM2 */
}

/* TimerCallback function */
void TimerCallback(void *argument)
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TimerCallback */

  /* USER CODE END TimerCallback */
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	bc80      	pop	{r7}
 8003112:	4770      	bx	lr

08003114 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a04      	ldr	r2, [pc, #16]	; (8003134 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d101      	bne.n	800312a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003126:	f000 f9c7 	bl	80034b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40000800 	.word	0x40000800

08003138 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800313c:	b672      	cpsid	i
}
 800313e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003140:	e7fe      	b.n	8003140 <Error_Handler+0x8>
	...

08003144 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af02      	add	r7, sp, #8
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d117      	bne.n	8003184 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800315a:	4293      	cmp	r3, r2
 800315c:	d112      	bne.n	8003184 <_Z41__static_initialization_and_destruction_0ii+0x40>
FiniteStateMachine fsm1;
 800315e:	4811      	ldr	r0, [pc, #68]	; (80031a4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003160:	f7fd fdeb 	bl	8000d3a <_ZN18FiniteStateMachineC1Ev>
StandardStates stateBlinkShort= fsm1.createStateStandart(STATE_BLINK_SHORT, STATE_BLINK_LONG, f_stateBlinkShort);
 8003164:	4810      	ldr	r0, [pc, #64]	; (80031a8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8003166:	4b11      	ldr	r3, [pc, #68]	; (80031ac <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	2303      	movs	r3, #3
 800316c:	2202      	movs	r2, #2
 800316e:	490d      	ldr	r1, [pc, #52]	; (80031a4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003170:	f7fd fe9f 	bl	8000eb2 <_ZN18FiniteStateMachine19createStateStandartEaaPFvvE>
StandardStates stateBlinkLong = fsm1.createStateStandart(STATE_BLINK_LONG, STATE_BLINK_SHORT, f_stateBlinkLong);
 8003174:	480e      	ldr	r0, [pc, #56]	; (80031b0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003176:	4b0f      	ldr	r3, [pc, #60]	; (80031b4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	2302      	movs	r3, #2
 800317c:	2203      	movs	r2, #3
 800317e:	4909      	ldr	r1, [pc, #36]	; (80031a4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003180:	f7fd fe97 	bl	8000eb2 <_ZN18FiniteStateMachine19createStateStandartEaaPFvvE>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d107      	bne.n	800319a <_Z41__static_initialization_and_destruction_0ii+0x56>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003190:	4293      	cmp	r3, r2
 8003192:	d102      	bne.n	800319a <_Z41__static_initialization_and_destruction_0ii+0x56>
FiniteStateMachine fsm1;
 8003194:	4803      	ldr	r0, [pc, #12]	; (80031a4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003196:	f7fd fdfe 	bl	8000d96 <_ZN18FiniteStateMachineD1Ev>
}
 800319a:	bf00      	nop
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	20000570 	.word	0x20000570
 80031a8:	20000610 	.word	0x20000610
 80031ac:	08003015 	.word	0x08003015
 80031b0:	20000620 	.word	0x20000620
 80031b4:	08003075 	.word	0x08003075

080031b8 <_GLOBAL__sub_I_TaskFSM1Handle>:
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80031c0:	2001      	movs	r0, #1
 80031c2:	f7ff ffbf 	bl	8003144 <_Z41__static_initialization_and_destruction_0ii>
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <_GLOBAL__sub_D_TaskFSM1Handle>:
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80031d0:	2000      	movs	r0, #0
 80031d2:	f7ff ffb7 	bl	8003144 <_Z41__static_initialization_and_destruction_0ii>
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80031de:	4b18      	ldr	r3, [pc, #96]	; (8003240 <HAL_MspInit+0x68>)
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	4a17      	ldr	r2, [pc, #92]	; (8003240 <HAL_MspInit+0x68>)
 80031e4:	f043 0301 	orr.w	r3, r3, #1
 80031e8:	6193      	str	r3, [r2, #24]
 80031ea:	4b15      	ldr	r3, [pc, #84]	; (8003240 <HAL_MspInit+0x68>)
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	60bb      	str	r3, [r7, #8]
 80031f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031f6:	4b12      	ldr	r3, [pc, #72]	; (8003240 <HAL_MspInit+0x68>)
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	4a11      	ldr	r2, [pc, #68]	; (8003240 <HAL_MspInit+0x68>)
 80031fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003200:	61d3      	str	r3, [r2, #28]
 8003202:	4b0f      	ldr	r3, [pc, #60]	; (8003240 <HAL_MspInit+0x68>)
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320a:	607b      	str	r3, [r7, #4]
 800320c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800320e:	2200      	movs	r2, #0
 8003210:	210f      	movs	r1, #15
 8003212:	f06f 0001 	mvn.w	r0, #1
 8003216:	f000 fa20 	bl	800365a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800321a:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <HAL_MspInit+0x6c>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	60fb      	str	r3, [r7, #12]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	4a04      	ldr	r2, [pc, #16]	; (8003244 <HAL_MspInit+0x6c>)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003236:	bf00      	nop
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40021000 	.word	0x40021000
 8003244:	40010000 	.word	0x40010000

08003248 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08e      	sub	sp, #56	; 0x38
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003258:	2300      	movs	r3, #0
 800325a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800325e:	4b34      	ldr	r3, [pc, #208]	; (8003330 <HAL_InitTick+0xe8>)
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	4a33      	ldr	r2, [pc, #204]	; (8003330 <HAL_InitTick+0xe8>)
 8003264:	f043 0304 	orr.w	r3, r3, #4
 8003268:	61d3      	str	r3, [r2, #28]
 800326a:	4b31      	ldr	r3, [pc, #196]	; (8003330 <HAL_InitTick+0xe8>)
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	f003 0304 	and.w	r3, r3, #4
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003276:	f107 0210 	add.w	r2, r7, #16
 800327a:	f107 0314 	add.w	r3, r7, #20
 800327e:	4611      	mov	r1, r2
 8003280:	4618      	mov	r0, r3
 8003282:	f000 ffa9 	bl	80041d8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800328a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328c:	2b00      	cmp	r3, #0
 800328e:	d103      	bne.n	8003298 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003290:	f000 ff8e 	bl	80041b0 <HAL_RCC_GetPCLK1Freq>
 8003294:	6378      	str	r0, [r7, #52]	; 0x34
 8003296:	e004      	b.n	80032a2 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003298:	f000 ff8a 	bl	80041b0 <HAL_RCC_GetPCLK1Freq>
 800329c:	4603      	mov	r3, r0
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80032a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032a4:	4a23      	ldr	r2, [pc, #140]	; (8003334 <HAL_InitTick+0xec>)
 80032a6:	fba2 2303 	umull	r2, r3, r2, r3
 80032aa:	0c9b      	lsrs	r3, r3, #18
 80032ac:	3b01      	subs	r3, #1
 80032ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80032b0:	4b21      	ldr	r3, [pc, #132]	; (8003338 <HAL_InitTick+0xf0>)
 80032b2:	4a22      	ldr	r2, [pc, #136]	; (800333c <HAL_InitTick+0xf4>)
 80032b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80032b6:	4b20      	ldr	r3, [pc, #128]	; (8003338 <HAL_InitTick+0xf0>)
 80032b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80032bc:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80032be:	4a1e      	ldr	r2, [pc, #120]	; (8003338 <HAL_InitTick+0xf0>)
 80032c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80032c4:	4b1c      	ldr	r3, [pc, #112]	; (8003338 <HAL_InitTick+0xf0>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032ca:	4b1b      	ldr	r3, [pc, #108]	; (8003338 <HAL_InitTick+0xf0>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032d0:	4b19      	ldr	r3, [pc, #100]	; (8003338 <HAL_InitTick+0xf0>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80032d6:	4818      	ldr	r0, [pc, #96]	; (8003338 <HAL_InitTick+0xf0>)
 80032d8:	f000 ffcc 	bl	8004274 <HAL_TIM_Base_Init>
 80032dc:	4603      	mov	r3, r0
 80032de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80032e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d11b      	bne.n	8003322 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80032ea:	4813      	ldr	r0, [pc, #76]	; (8003338 <HAL_InitTick+0xf0>)
 80032ec:	f001 f81a 	bl	8004324 <HAL_TIM_Base_Start_IT>
 80032f0:	4603      	mov	r3, r0
 80032f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80032f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d111      	bne.n	8003322 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80032fe:	201e      	movs	r0, #30
 8003300:	f000 f9c7 	bl	8003692 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b0f      	cmp	r3, #15
 8003308:	d808      	bhi.n	800331c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800330a:	2200      	movs	r2, #0
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	201e      	movs	r0, #30
 8003310:	f000 f9a3 	bl	800365a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003314:	4a0a      	ldr	r2, [pc, #40]	; (8003340 <HAL_InitTick+0xf8>)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	e002      	b.n	8003322 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003322:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003326:	4618      	mov	r0, r3
 8003328:	3738      	adds	r7, #56	; 0x38
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40021000 	.word	0x40021000
 8003334:	431bde83 	.word	0x431bde83
 8003338:	20000630 	.word	0x20000630
 800333c:	40000800 	.word	0x40000800
 8003340:	20000004 	.word	0x20000004

08003344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003348:	e7fe      	b.n	8003348 <NMI_Handler+0x4>

0800334a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800334a:	b480      	push	{r7}
 800334c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800334e:	e7fe      	b.n	800334e <HardFault_Handler+0x4>

08003350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003354:	e7fe      	b.n	8003354 <MemManage_Handler+0x4>

08003356 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003356:	b480      	push	{r7}
 8003358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800335a:	e7fe      	b.n	800335a <BusFault_Handler+0x4>

0800335c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003360:	e7fe      	b.n	8003360 <UsageFault_Handler+0x4>

08003362 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003362:	b480      	push	{r7}
 8003364:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003366:	bf00      	nop
 8003368:	46bd      	mov	sp, r7
 800336a:	bc80      	pop	{r7}
 800336c:	4770      	bx	lr
	...

08003370 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003374:	4802      	ldr	r0, [pc, #8]	; (8003380 <TIM4_IRQHandler+0x10>)
 8003376:	f001 f827 	bl	80043c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800337a:	bf00      	nop
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	20000630 	.word	0x20000630

08003384 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  return 1;
 8003388:	2301      	movs	r3, #1
}
 800338a:	4618      	mov	r0, r3
 800338c:	46bd      	mov	sp, r7
 800338e:	bc80      	pop	{r7}
 8003390:	4770      	bx	lr

08003392 <_kill>:

int _kill(int pid, int sig)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b082      	sub	sp, #8
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
 800339a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800339c:	f004 fae4 	bl	8007968 <__errno>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2216      	movs	r2, #22
 80033a4:	601a      	str	r2, [r3, #0]
  return -1;
 80033a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <_exit>:

void _exit (int status)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b082      	sub	sp, #8
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80033ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7ff ffe7 	bl	8003392 <_kill>
  while (1) {}    /* Make sure we hang here */
 80033c4:	e7fe      	b.n	80033c4 <_exit+0x12>
	...

080033c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033d0:	4a14      	ldr	r2, [pc, #80]	; (8003424 <_sbrk+0x5c>)
 80033d2:	4b15      	ldr	r3, [pc, #84]	; (8003428 <_sbrk+0x60>)
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033dc:	4b13      	ldr	r3, [pc, #76]	; (800342c <_sbrk+0x64>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d102      	bne.n	80033ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033e4:	4b11      	ldr	r3, [pc, #68]	; (800342c <_sbrk+0x64>)
 80033e6:	4a12      	ldr	r2, [pc, #72]	; (8003430 <_sbrk+0x68>)
 80033e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033ea:	4b10      	ldr	r3, [pc, #64]	; (800342c <_sbrk+0x64>)
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4413      	add	r3, r2
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d207      	bcs.n	8003408 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033f8:	f004 fab6 	bl	8007968 <__errno>
 80033fc:	4603      	mov	r3, r0
 80033fe:	220c      	movs	r2, #12
 8003400:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003402:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003406:	e009      	b.n	800341c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003408:	4b08      	ldr	r3, [pc, #32]	; (800342c <_sbrk+0x64>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800340e:	4b07      	ldr	r3, [pc, #28]	; (800342c <_sbrk+0x64>)
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4413      	add	r3, r2
 8003416:	4a05      	ldr	r2, [pc, #20]	; (800342c <_sbrk+0x64>)
 8003418:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800341a:	68fb      	ldr	r3, [r7, #12]
}
 800341c:	4618      	mov	r0, r3
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	20005000 	.word	0x20005000
 8003428:	00000400 	.word	0x00000400
 800342c:	20000678 	.word	0x20000678
 8003430:	20002118 	.word	0x20002118

08003434 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003438:	bf00      	nop
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr

08003440 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003440:	f7ff fff8 	bl	8003434 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003444:	480b      	ldr	r0, [pc, #44]	; (8003474 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003446:	490c      	ldr	r1, [pc, #48]	; (8003478 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003448:	4a0c      	ldr	r2, [pc, #48]	; (800347c <LoopFillZerobss+0x16>)
  movs r3, #0
 800344a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800344c:	e002      	b.n	8003454 <LoopCopyDataInit>

0800344e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800344e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003452:	3304      	adds	r3, #4

08003454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003458:	d3f9      	bcc.n	800344e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800345a:	4a09      	ldr	r2, [pc, #36]	; (8003480 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800345c:	4c09      	ldr	r4, [pc, #36]	; (8003484 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800345e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003460:	e001      	b.n	8003466 <LoopFillZerobss>

08003462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003464:	3204      	adds	r2, #4

08003466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003468:	d3fb      	bcc.n	8003462 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800346a:	f004 fa83 	bl	8007974 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800346e:	f7ff fd0d 	bl	8002e8c <main>
  bx lr
 8003472:	4770      	bx	lr
  ldr r0, =_sdata
 8003474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003478:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800347c:	08008058 	.word	0x08008058
  ldr r2, =_sbss
 8003480:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8003484:	20002114 	.word	0x20002114

08003488 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003488:	e7fe      	b.n	8003488 <ADC1_2_IRQHandler>
	...

0800348c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003490:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <HAL_Init+0x28>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a07      	ldr	r2, [pc, #28]	; (80034b4 <HAL_Init+0x28>)
 8003496:	f043 0310 	orr.w	r3, r3, #16
 800349a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800349c:	2003      	movs	r0, #3
 800349e:	f000 f8d1 	bl	8003644 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034a2:	200f      	movs	r0, #15
 80034a4:	f7ff fed0 	bl	8003248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034a8:	f7ff fe96 	bl	80031d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40022000 	.word	0x40022000

080034b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034bc:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <HAL_IncTick+0x1c>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	461a      	mov	r2, r3
 80034c2:	4b05      	ldr	r3, [pc, #20]	; (80034d8 <HAL_IncTick+0x20>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4413      	add	r3, r2
 80034c8:	4a03      	ldr	r2, [pc, #12]	; (80034d8 <HAL_IncTick+0x20>)
 80034ca:	6013      	str	r3, [r2, #0]
}
 80034cc:	bf00      	nop
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bc80      	pop	{r7}
 80034d2:	4770      	bx	lr
 80034d4:	20000008 	.word	0x20000008
 80034d8:	2000067c 	.word	0x2000067c

080034dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  return uwTick;
 80034e0:	4b02      	ldr	r3, [pc, #8]	; (80034ec <HAL_GetTick+0x10>)
 80034e2:	681b      	ldr	r3, [r3, #0]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bc80      	pop	{r7}
 80034ea:	4770      	bx	lr
 80034ec:	2000067c 	.word	0x2000067c

080034f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003500:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <__NVIC_SetPriorityGrouping+0x44>)
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800350c:	4013      	ands	r3, r2
 800350e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003518:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800351c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003522:	4a04      	ldr	r2, [pc, #16]	; (8003534 <__NVIC_SetPriorityGrouping+0x44>)
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	60d3      	str	r3, [r2, #12]
}
 8003528:	bf00      	nop
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	e000ed00 	.word	0xe000ed00

08003538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800353c:	4b04      	ldr	r3, [pc, #16]	; (8003550 <__NVIC_GetPriorityGrouping+0x18>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	0a1b      	lsrs	r3, r3, #8
 8003542:	f003 0307 	and.w	r3, r3, #7
}
 8003546:	4618      	mov	r0, r3
 8003548:	46bd      	mov	sp, r7
 800354a:	bc80      	pop	{r7}
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	e000ed00 	.word	0xe000ed00

08003554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	4603      	mov	r3, r0
 800355c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800355e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003562:	2b00      	cmp	r3, #0
 8003564:	db0b      	blt.n	800357e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003566:	79fb      	ldrb	r3, [r7, #7]
 8003568:	f003 021f 	and.w	r2, r3, #31
 800356c:	4906      	ldr	r1, [pc, #24]	; (8003588 <__NVIC_EnableIRQ+0x34>)
 800356e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003572:	095b      	lsrs	r3, r3, #5
 8003574:	2001      	movs	r0, #1
 8003576:	fa00 f202 	lsl.w	r2, r0, r2
 800357a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr
 8003588:	e000e100 	.word	0xe000e100

0800358c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	6039      	str	r1, [r7, #0]
 8003596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359c:	2b00      	cmp	r3, #0
 800359e:	db0a      	blt.n	80035b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	490c      	ldr	r1, [pc, #48]	; (80035d8 <__NVIC_SetPriority+0x4c>)
 80035a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035aa:	0112      	lsls	r2, r2, #4
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	440b      	add	r3, r1
 80035b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035b4:	e00a      	b.n	80035cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	4908      	ldr	r1, [pc, #32]	; (80035dc <__NVIC_SetPriority+0x50>)
 80035bc:	79fb      	ldrb	r3, [r7, #7]
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	3b04      	subs	r3, #4
 80035c4:	0112      	lsls	r2, r2, #4
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	440b      	add	r3, r1
 80035ca:	761a      	strb	r2, [r3, #24]
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bc80      	pop	{r7}
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	e000e100 	.word	0xe000e100
 80035dc:	e000ed00 	.word	0xe000ed00

080035e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b089      	sub	sp, #36	; 0x24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f1c3 0307 	rsb	r3, r3, #7
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	bf28      	it	cs
 80035fe:	2304      	movcs	r3, #4
 8003600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	3304      	adds	r3, #4
 8003606:	2b06      	cmp	r3, #6
 8003608:	d902      	bls.n	8003610 <NVIC_EncodePriority+0x30>
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	3b03      	subs	r3, #3
 800360e:	e000      	b.n	8003612 <NVIC_EncodePriority+0x32>
 8003610:	2300      	movs	r3, #0
 8003612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003614:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	43da      	mvns	r2, r3
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	401a      	ands	r2, r3
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003628:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	fa01 f303 	lsl.w	r3, r1, r3
 8003632:	43d9      	mvns	r1, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003638:	4313      	orrs	r3, r2
         );
}
 800363a:	4618      	mov	r0, r3
 800363c:	3724      	adds	r7, #36	; 0x24
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr

08003644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7ff ff4f 	bl	80034f0 <__NVIC_SetPriorityGrouping>
}
 8003652:	bf00      	nop
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800365a:	b580      	push	{r7, lr}
 800365c:	b086      	sub	sp, #24
 800365e:	af00      	add	r7, sp, #0
 8003660:	4603      	mov	r3, r0
 8003662:	60b9      	str	r1, [r7, #8]
 8003664:	607a      	str	r2, [r7, #4]
 8003666:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003668:	2300      	movs	r3, #0
 800366a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800366c:	f7ff ff64 	bl	8003538 <__NVIC_GetPriorityGrouping>
 8003670:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	68b9      	ldr	r1, [r7, #8]
 8003676:	6978      	ldr	r0, [r7, #20]
 8003678:	f7ff ffb2 	bl	80035e0 <NVIC_EncodePriority>
 800367c:	4602      	mov	r2, r0
 800367e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003682:	4611      	mov	r1, r2
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff ff81 	bl	800358c <__NVIC_SetPriority>
}
 800368a:	bf00      	nop
 800368c:	3718      	adds	r7, #24
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	4603      	mov	r3, r0
 800369a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800369c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff ff57 	bl	8003554 <__NVIC_EnableIRQ>
}
 80036a6:	bf00      	nop
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b08b      	sub	sp, #44	; 0x2c
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036ba:	2300      	movs	r3, #0
 80036bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80036be:	2300      	movs	r3, #0
 80036c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036c2:	e169      	b.n	8003998 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80036c4:	2201      	movs	r2, #1
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	69fa      	ldr	r2, [r7, #28]
 80036d4:	4013      	ands	r3, r2
 80036d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	429a      	cmp	r2, r3
 80036de:	f040 8158 	bne.w	8003992 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	4a9a      	ldr	r2, [pc, #616]	; (8003950 <HAL_GPIO_Init+0x2a0>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d05e      	beq.n	80037aa <HAL_GPIO_Init+0xfa>
 80036ec:	4a98      	ldr	r2, [pc, #608]	; (8003950 <HAL_GPIO_Init+0x2a0>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d875      	bhi.n	80037de <HAL_GPIO_Init+0x12e>
 80036f2:	4a98      	ldr	r2, [pc, #608]	; (8003954 <HAL_GPIO_Init+0x2a4>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d058      	beq.n	80037aa <HAL_GPIO_Init+0xfa>
 80036f8:	4a96      	ldr	r2, [pc, #600]	; (8003954 <HAL_GPIO_Init+0x2a4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d86f      	bhi.n	80037de <HAL_GPIO_Init+0x12e>
 80036fe:	4a96      	ldr	r2, [pc, #600]	; (8003958 <HAL_GPIO_Init+0x2a8>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d052      	beq.n	80037aa <HAL_GPIO_Init+0xfa>
 8003704:	4a94      	ldr	r2, [pc, #592]	; (8003958 <HAL_GPIO_Init+0x2a8>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d869      	bhi.n	80037de <HAL_GPIO_Init+0x12e>
 800370a:	4a94      	ldr	r2, [pc, #592]	; (800395c <HAL_GPIO_Init+0x2ac>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d04c      	beq.n	80037aa <HAL_GPIO_Init+0xfa>
 8003710:	4a92      	ldr	r2, [pc, #584]	; (800395c <HAL_GPIO_Init+0x2ac>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d863      	bhi.n	80037de <HAL_GPIO_Init+0x12e>
 8003716:	4a92      	ldr	r2, [pc, #584]	; (8003960 <HAL_GPIO_Init+0x2b0>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d046      	beq.n	80037aa <HAL_GPIO_Init+0xfa>
 800371c:	4a90      	ldr	r2, [pc, #576]	; (8003960 <HAL_GPIO_Init+0x2b0>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d85d      	bhi.n	80037de <HAL_GPIO_Init+0x12e>
 8003722:	2b12      	cmp	r3, #18
 8003724:	d82a      	bhi.n	800377c <HAL_GPIO_Init+0xcc>
 8003726:	2b12      	cmp	r3, #18
 8003728:	d859      	bhi.n	80037de <HAL_GPIO_Init+0x12e>
 800372a:	a201      	add	r2, pc, #4	; (adr r2, 8003730 <HAL_GPIO_Init+0x80>)
 800372c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003730:	080037ab 	.word	0x080037ab
 8003734:	08003785 	.word	0x08003785
 8003738:	08003797 	.word	0x08003797
 800373c:	080037d9 	.word	0x080037d9
 8003740:	080037df 	.word	0x080037df
 8003744:	080037df 	.word	0x080037df
 8003748:	080037df 	.word	0x080037df
 800374c:	080037df 	.word	0x080037df
 8003750:	080037df 	.word	0x080037df
 8003754:	080037df 	.word	0x080037df
 8003758:	080037df 	.word	0x080037df
 800375c:	080037df 	.word	0x080037df
 8003760:	080037df 	.word	0x080037df
 8003764:	080037df 	.word	0x080037df
 8003768:	080037df 	.word	0x080037df
 800376c:	080037df 	.word	0x080037df
 8003770:	080037df 	.word	0x080037df
 8003774:	0800378d 	.word	0x0800378d
 8003778:	080037a1 	.word	0x080037a1
 800377c:	4a79      	ldr	r2, [pc, #484]	; (8003964 <HAL_GPIO_Init+0x2b4>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d013      	beq.n	80037aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003782:	e02c      	b.n	80037de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	623b      	str	r3, [r7, #32]
          break;
 800378a:	e029      	b.n	80037e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	3304      	adds	r3, #4
 8003792:	623b      	str	r3, [r7, #32]
          break;
 8003794:	e024      	b.n	80037e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	3308      	adds	r3, #8
 800379c:	623b      	str	r3, [r7, #32]
          break;
 800379e:	e01f      	b.n	80037e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	330c      	adds	r3, #12
 80037a6:	623b      	str	r3, [r7, #32]
          break;
 80037a8:	e01a      	b.n	80037e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d102      	bne.n	80037b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80037b2:	2304      	movs	r3, #4
 80037b4:	623b      	str	r3, [r7, #32]
          break;
 80037b6:	e013      	b.n	80037e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d105      	bne.n	80037cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037c0:	2308      	movs	r3, #8
 80037c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	69fa      	ldr	r2, [r7, #28]
 80037c8:	611a      	str	r2, [r3, #16]
          break;
 80037ca:	e009      	b.n	80037e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037cc:	2308      	movs	r3, #8
 80037ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	69fa      	ldr	r2, [r7, #28]
 80037d4:	615a      	str	r2, [r3, #20]
          break;
 80037d6:	e003      	b.n	80037e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80037d8:	2300      	movs	r3, #0
 80037da:	623b      	str	r3, [r7, #32]
          break;
 80037dc:	e000      	b.n	80037e0 <HAL_GPIO_Init+0x130>
          break;
 80037de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	2bff      	cmp	r3, #255	; 0xff
 80037e4:	d801      	bhi.n	80037ea <HAL_GPIO_Init+0x13a>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	e001      	b.n	80037ee <HAL_GPIO_Init+0x13e>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3304      	adds	r3, #4
 80037ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	2bff      	cmp	r3, #255	; 0xff
 80037f4:	d802      	bhi.n	80037fc <HAL_GPIO_Init+0x14c>
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	e002      	b.n	8003802 <HAL_GPIO_Init+0x152>
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	3b08      	subs	r3, #8
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	210f      	movs	r1, #15
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	fa01 f303 	lsl.w	r3, r1, r3
 8003810:	43db      	mvns	r3, r3
 8003812:	401a      	ands	r2, r3
 8003814:	6a39      	ldr	r1, [r7, #32]
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	fa01 f303 	lsl.w	r3, r1, r3
 800381c:	431a      	orrs	r2, r3
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 80b1 	beq.w	8003992 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003830:	4b4d      	ldr	r3, [pc, #308]	; (8003968 <HAL_GPIO_Init+0x2b8>)
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	4a4c      	ldr	r2, [pc, #304]	; (8003968 <HAL_GPIO_Init+0x2b8>)
 8003836:	f043 0301 	orr.w	r3, r3, #1
 800383a:	6193      	str	r3, [r2, #24]
 800383c:	4b4a      	ldr	r3, [pc, #296]	; (8003968 <HAL_GPIO_Init+0x2b8>)
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	60bb      	str	r3, [r7, #8]
 8003846:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003848:	4a48      	ldr	r2, [pc, #288]	; (800396c <HAL_GPIO_Init+0x2bc>)
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	089b      	lsrs	r3, r3, #2
 800384e:	3302      	adds	r3, #2
 8003850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003854:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	f003 0303 	and.w	r3, r3, #3
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	220f      	movs	r2, #15
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	43db      	mvns	r3, r3
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	4013      	ands	r3, r2
 800386a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a40      	ldr	r2, [pc, #256]	; (8003970 <HAL_GPIO_Init+0x2c0>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d013      	beq.n	800389c <HAL_GPIO_Init+0x1ec>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a3f      	ldr	r2, [pc, #252]	; (8003974 <HAL_GPIO_Init+0x2c4>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d00d      	beq.n	8003898 <HAL_GPIO_Init+0x1e8>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a3e      	ldr	r2, [pc, #248]	; (8003978 <HAL_GPIO_Init+0x2c8>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d007      	beq.n	8003894 <HAL_GPIO_Init+0x1e4>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a3d      	ldr	r2, [pc, #244]	; (800397c <HAL_GPIO_Init+0x2cc>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d101      	bne.n	8003890 <HAL_GPIO_Init+0x1e0>
 800388c:	2303      	movs	r3, #3
 800388e:	e006      	b.n	800389e <HAL_GPIO_Init+0x1ee>
 8003890:	2304      	movs	r3, #4
 8003892:	e004      	b.n	800389e <HAL_GPIO_Init+0x1ee>
 8003894:	2302      	movs	r3, #2
 8003896:	e002      	b.n	800389e <HAL_GPIO_Init+0x1ee>
 8003898:	2301      	movs	r3, #1
 800389a:	e000      	b.n	800389e <HAL_GPIO_Init+0x1ee>
 800389c:	2300      	movs	r3, #0
 800389e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a0:	f002 0203 	and.w	r2, r2, #3
 80038a4:	0092      	lsls	r2, r2, #2
 80038a6:	4093      	lsls	r3, r2
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80038ae:	492f      	ldr	r1, [pc, #188]	; (800396c <HAL_GPIO_Init+0x2bc>)
 80038b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b2:	089b      	lsrs	r3, r3, #2
 80038b4:	3302      	adds	r3, #2
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d006      	beq.n	80038d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80038c8:	4b2d      	ldr	r3, [pc, #180]	; (8003980 <HAL_GPIO_Init+0x2d0>)
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	492c      	ldr	r1, [pc, #176]	; (8003980 <HAL_GPIO_Init+0x2d0>)
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	608b      	str	r3, [r1, #8]
 80038d4:	e006      	b.n	80038e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80038d6:	4b2a      	ldr	r3, [pc, #168]	; (8003980 <HAL_GPIO_Init+0x2d0>)
 80038d8:	689a      	ldr	r2, [r3, #8]
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	43db      	mvns	r3, r3
 80038de:	4928      	ldr	r1, [pc, #160]	; (8003980 <HAL_GPIO_Init+0x2d0>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d006      	beq.n	80038fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80038f0:	4b23      	ldr	r3, [pc, #140]	; (8003980 <HAL_GPIO_Init+0x2d0>)
 80038f2:	68da      	ldr	r2, [r3, #12]
 80038f4:	4922      	ldr	r1, [pc, #136]	; (8003980 <HAL_GPIO_Init+0x2d0>)
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	60cb      	str	r3, [r1, #12]
 80038fc:	e006      	b.n	800390c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80038fe:	4b20      	ldr	r3, [pc, #128]	; (8003980 <HAL_GPIO_Init+0x2d0>)
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	43db      	mvns	r3, r3
 8003906:	491e      	ldr	r1, [pc, #120]	; (8003980 <HAL_GPIO_Init+0x2d0>)
 8003908:	4013      	ands	r3, r2
 800390a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d006      	beq.n	8003926 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003918:	4b19      	ldr	r3, [pc, #100]	; (8003980 <HAL_GPIO_Init+0x2d0>)
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	4918      	ldr	r1, [pc, #96]	; (8003980 <HAL_GPIO_Init+0x2d0>)
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	4313      	orrs	r3, r2
 8003922:	604b      	str	r3, [r1, #4]
 8003924:	e006      	b.n	8003934 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003926:	4b16      	ldr	r3, [pc, #88]	; (8003980 <HAL_GPIO_Init+0x2d0>)
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	43db      	mvns	r3, r3
 800392e:	4914      	ldr	r1, [pc, #80]	; (8003980 <HAL_GPIO_Init+0x2d0>)
 8003930:	4013      	ands	r3, r2
 8003932:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d021      	beq.n	8003984 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003940:	4b0f      	ldr	r3, [pc, #60]	; (8003980 <HAL_GPIO_Init+0x2d0>)
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	490e      	ldr	r1, [pc, #56]	; (8003980 <HAL_GPIO_Init+0x2d0>)
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	4313      	orrs	r3, r2
 800394a:	600b      	str	r3, [r1, #0]
 800394c:	e021      	b.n	8003992 <HAL_GPIO_Init+0x2e2>
 800394e:	bf00      	nop
 8003950:	10320000 	.word	0x10320000
 8003954:	10310000 	.word	0x10310000
 8003958:	10220000 	.word	0x10220000
 800395c:	10210000 	.word	0x10210000
 8003960:	10120000 	.word	0x10120000
 8003964:	10110000 	.word	0x10110000
 8003968:	40021000 	.word	0x40021000
 800396c:	40010000 	.word	0x40010000
 8003970:	40010800 	.word	0x40010800
 8003974:	40010c00 	.word	0x40010c00
 8003978:	40011000 	.word	0x40011000
 800397c:	40011400 	.word	0x40011400
 8003980:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003984:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <HAL_GPIO_Init+0x304>)
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	43db      	mvns	r3, r3
 800398c:	4909      	ldr	r1, [pc, #36]	; (80039b4 <HAL_GPIO_Init+0x304>)
 800398e:	4013      	ands	r3, r2
 8003990:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	3301      	adds	r3, #1
 8003996:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	fa22 f303 	lsr.w	r3, r2, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f47f ae8e 	bne.w	80036c4 <HAL_GPIO_Init+0x14>
  }
}
 80039a8:	bf00      	nop
 80039aa:	bf00      	nop
 80039ac:	372c      	adds	r7, #44	; 0x2c
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bc80      	pop	{r7}
 80039b2:	4770      	bx	lr
 80039b4:	40010400 	.word	0x40010400

080039b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	460b      	mov	r3, r1
 80039c2:	807b      	strh	r3, [r7, #2]
 80039c4:	4613      	mov	r3, r2
 80039c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039c8:	787b      	ldrb	r3, [r7, #1]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039ce:	887a      	ldrh	r2, [r7, #2]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80039d4:	e003      	b.n	80039de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80039d6:	887b      	ldrh	r3, [r7, #2]
 80039d8:	041a      	lsls	r2, r3, #16
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	611a      	str	r2, [r3, #16]
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bc80      	pop	{r7}
 80039e6:	4770      	bx	lr

080039e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039fa:	887a      	ldrh	r2, [r7, #2]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4013      	ands	r3, r2
 8003a00:	041a      	lsls	r2, r3, #16
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	43d9      	mvns	r1, r3
 8003a06:	887b      	ldrh	r3, [r7, #2]
 8003a08:	400b      	ands	r3, r1
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	611a      	str	r2, [r3, #16]
}
 8003a10:	bf00      	nop
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bc80      	pop	{r7}
 8003a18:	4770      	bx	lr
	...

08003a1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e272      	b.n	8003f14 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 8087 	beq.w	8003b4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a3c:	4b92      	ldr	r3, [pc, #584]	; (8003c88 <HAL_RCC_OscConfig+0x26c>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f003 030c 	and.w	r3, r3, #12
 8003a44:	2b04      	cmp	r3, #4
 8003a46:	d00c      	beq.n	8003a62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a48:	4b8f      	ldr	r3, [pc, #572]	; (8003c88 <HAL_RCC_OscConfig+0x26c>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f003 030c 	and.w	r3, r3, #12
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	d112      	bne.n	8003a7a <HAL_RCC_OscConfig+0x5e>
 8003a54:	4b8c      	ldr	r3, [pc, #560]	; (8003c88 <HAL_RCC_OscConfig+0x26c>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a60:	d10b      	bne.n	8003a7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a62:	4b89      	ldr	r3, [pc, #548]	; (8003c88 <HAL_RCC_OscConfig+0x26c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d06c      	beq.n	8003b48 <HAL_RCC_OscConfig+0x12c>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d168      	bne.n	8003b48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e24c      	b.n	8003f14 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a82:	d106      	bne.n	8003a92 <HAL_RCC_OscConfig+0x76>
 8003a84:	4b80      	ldr	r3, [pc, #512]	; (8003c88 <HAL_RCC_OscConfig+0x26c>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a7f      	ldr	r2, [pc, #508]	; (8003c88 <HAL_RCC_OscConfig+0x26c>)
 8003a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	e02e      	b.n	8003af0 <HAL_RCC_OscConfig+0xd4>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10c      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x98>
 8003a9a:	4b7b      	ldr	r3, [pc, #492]	; (8003c88 <HAL_RCC_OscConfig+0x26c>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a7a      	ldr	r2, [pc, #488]	; (8003c88 <HAL_RCC_OscConfig+0x26c>)
 8003aa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	4b78      	ldr	r3, [pc, #480]	; (8003c88 <HAL_RCC_OscConfig+0x26c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a77      	ldr	r2, [pc, #476]	; (8003c88 <HAL_RCC_OscConfig+0x26c>)
 8003aac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	e01d      	b.n	8003af0 <HAL_RCC_OscConfig+0xd4>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003abc:	d10c      	bne.n	8003ad8 <HAL_RCC_OscConfig+0xbc>
 8003abe:	4b72      	ldr	r3, [pc, #456]	; (8003c88 <HAL_RCC_OscConfig+0x26c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a71      	ldr	r2, [pc, #452]	; (8003c88 <HAL_RCC_OscConfig+0x26c>)
 8003ac4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	4b6f      	ldr	r3, [pc, #444]	; (8003c88 <HAL_RCC_OscConfig+0x26c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a6e      	ldr	r2, [pc, #440]	; (8003c88 <HAL_RCC_OscConfig+0x26c>)
 8003ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	e00b      	b.n	8003af0 <HAL_RCC_OscConfig+0xd4>
 8003ad8:	4b6b      	ldr	r3, [pc, #428]	; (8003c88 <HAL_RCC_OscConfig+0x26c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a6a      	ldr	r2, [pc, #424]	; (8003c88 <HAL_RCC_OscConfig+0x26c>)
 8003ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ae2:	6013      	str	r3, [r2, #0]
 8003ae4:	4b68      	ldr	r3, [pc, #416]	; (8003c88 <HAL_RCC_OscConfig+0x26c>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a67      	ldr	r2, [pc, #412]	; (8003c88 <HAL_RCC_OscConfig+0x26c>)
 8003aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d013      	beq.n	8003b20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af8:	f7ff fcf0 	bl	80034dc <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b00:	f7ff fcec 	bl	80034dc <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b64      	cmp	r3, #100	; 0x64
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e200      	b.n	8003f14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b12:	4b5d      	ldr	r3, [pc, #372]	; (8003c88 <HAL_RCC_OscConfig+0x26c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0f0      	beq.n	8003b00 <HAL_RCC_OscConfig+0xe4>
 8003b1e:	e014      	b.n	8003b4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b20:	f7ff fcdc 	bl	80034dc <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b28:	f7ff fcd8 	bl	80034dc <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b64      	cmp	r3, #100	; 0x64
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e1ec      	b.n	8003f14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b3a:	4b53      	ldr	r3, [pc, #332]	; (8003c88 <HAL_RCC_OscConfig+0x26c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1f0      	bne.n	8003b28 <HAL_RCC_OscConfig+0x10c>
 8003b46:	e000      	b.n	8003b4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d063      	beq.n	8003c1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b56:	4b4c      	ldr	r3, [pc, #304]	; (8003c88 <HAL_RCC_OscConfig+0x26c>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f003 030c 	and.w	r3, r3, #12
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00b      	beq.n	8003b7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b62:	4b49      	ldr	r3, [pc, #292]	; (8003c88 <HAL_RCC_OscConfig+0x26c>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f003 030c 	and.w	r3, r3, #12
 8003b6a:	2b08      	cmp	r3, #8
 8003b6c:	d11c      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x18c>
 8003b6e:	4b46      	ldr	r3, [pc, #280]	; (8003c88 <HAL_RCC_OscConfig+0x26c>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d116      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b7a:	4b43      	ldr	r3, [pc, #268]	; (8003c88 <HAL_RCC_OscConfig+0x26c>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d005      	beq.n	8003b92 <HAL_RCC_OscConfig+0x176>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d001      	beq.n	8003b92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e1c0      	b.n	8003f14 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b92:	4b3d      	ldr	r3, [pc, #244]	; (8003c88 <HAL_RCC_OscConfig+0x26c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	4939      	ldr	r1, [pc, #228]	; (8003c88 <HAL_RCC_OscConfig+0x26c>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ba6:	e03a      	b.n	8003c1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d020      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bb0:	4b36      	ldr	r3, [pc, #216]	; (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb6:	f7ff fc91 	bl	80034dc <HAL_GetTick>
 8003bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bbc:	e008      	b.n	8003bd0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bbe:	f7ff fc8d 	bl	80034dc <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e1a1      	b.n	8003f14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd0:	4b2d      	ldr	r3, [pc, #180]	; (8003c88 <HAL_RCC_OscConfig+0x26c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d0f0      	beq.n	8003bbe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bdc:	4b2a      	ldr	r3, [pc, #168]	; (8003c88 <HAL_RCC_OscConfig+0x26c>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	4927      	ldr	r1, [pc, #156]	; (8003c88 <HAL_RCC_OscConfig+0x26c>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	600b      	str	r3, [r1, #0]
 8003bf0:	e015      	b.n	8003c1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bf2:	4b26      	ldr	r3, [pc, #152]	; (8003c8c <HAL_RCC_OscConfig+0x270>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf8:	f7ff fc70 	bl	80034dc <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c00:	f7ff fc6c 	bl	80034dc <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e180      	b.n	8003f14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c12:	4b1d      	ldr	r3, [pc, #116]	; (8003c88 <HAL_RCC_OscConfig+0x26c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f0      	bne.n	8003c00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0308 	and.w	r3, r3, #8
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d03a      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d019      	beq.n	8003c66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c32:	4b17      	ldr	r3, [pc, #92]	; (8003c90 <HAL_RCC_OscConfig+0x274>)
 8003c34:	2201      	movs	r2, #1
 8003c36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c38:	f7ff fc50 	bl	80034dc <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c40:	f7ff fc4c 	bl	80034dc <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e160      	b.n	8003f14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c52:	4b0d      	ldr	r3, [pc, #52]	; (8003c88 <HAL_RCC_OscConfig+0x26c>)
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0f0      	beq.n	8003c40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003c5e:	2001      	movs	r0, #1
 8003c60:	f000 faea 	bl	8004238 <RCC_Delay>
 8003c64:	e01c      	b.n	8003ca0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c66:	4b0a      	ldr	r3, [pc, #40]	; (8003c90 <HAL_RCC_OscConfig+0x274>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c6c:	f7ff fc36 	bl	80034dc <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c72:	e00f      	b.n	8003c94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c74:	f7ff fc32 	bl	80034dc <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d908      	bls.n	8003c94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e146      	b.n	8003f14 <HAL_RCC_OscConfig+0x4f8>
 8003c86:	bf00      	nop
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	42420000 	.word	0x42420000
 8003c90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c94:	4b92      	ldr	r3, [pc, #584]	; (8003ee0 <HAL_RCC_OscConfig+0x4c4>)
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1e9      	bne.n	8003c74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 80a6 	beq.w	8003dfa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cb2:	4b8b      	ldr	r3, [pc, #556]	; (8003ee0 <HAL_RCC_OscConfig+0x4c4>)
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10d      	bne.n	8003cda <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cbe:	4b88      	ldr	r3, [pc, #544]	; (8003ee0 <HAL_RCC_OscConfig+0x4c4>)
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	4a87      	ldr	r2, [pc, #540]	; (8003ee0 <HAL_RCC_OscConfig+0x4c4>)
 8003cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc8:	61d3      	str	r3, [r2, #28]
 8003cca:	4b85      	ldr	r3, [pc, #532]	; (8003ee0 <HAL_RCC_OscConfig+0x4c4>)
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd2:	60bb      	str	r3, [r7, #8]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cda:	4b82      	ldr	r3, [pc, #520]	; (8003ee4 <HAL_RCC_OscConfig+0x4c8>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d118      	bne.n	8003d18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ce6:	4b7f      	ldr	r3, [pc, #508]	; (8003ee4 <HAL_RCC_OscConfig+0x4c8>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a7e      	ldr	r2, [pc, #504]	; (8003ee4 <HAL_RCC_OscConfig+0x4c8>)
 8003cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cf2:	f7ff fbf3 	bl	80034dc <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cfa:	f7ff fbef 	bl	80034dc <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b64      	cmp	r3, #100	; 0x64
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e103      	b.n	8003f14 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d0c:	4b75      	ldr	r3, [pc, #468]	; (8003ee4 <HAL_RCC_OscConfig+0x4c8>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0f0      	beq.n	8003cfa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d106      	bne.n	8003d2e <HAL_RCC_OscConfig+0x312>
 8003d20:	4b6f      	ldr	r3, [pc, #444]	; (8003ee0 <HAL_RCC_OscConfig+0x4c4>)
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	4a6e      	ldr	r2, [pc, #440]	; (8003ee0 <HAL_RCC_OscConfig+0x4c4>)
 8003d26:	f043 0301 	orr.w	r3, r3, #1
 8003d2a:	6213      	str	r3, [r2, #32]
 8003d2c:	e02d      	b.n	8003d8a <HAL_RCC_OscConfig+0x36e>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10c      	bne.n	8003d50 <HAL_RCC_OscConfig+0x334>
 8003d36:	4b6a      	ldr	r3, [pc, #424]	; (8003ee0 <HAL_RCC_OscConfig+0x4c4>)
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	4a69      	ldr	r2, [pc, #420]	; (8003ee0 <HAL_RCC_OscConfig+0x4c4>)
 8003d3c:	f023 0301 	bic.w	r3, r3, #1
 8003d40:	6213      	str	r3, [r2, #32]
 8003d42:	4b67      	ldr	r3, [pc, #412]	; (8003ee0 <HAL_RCC_OscConfig+0x4c4>)
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	4a66      	ldr	r2, [pc, #408]	; (8003ee0 <HAL_RCC_OscConfig+0x4c4>)
 8003d48:	f023 0304 	bic.w	r3, r3, #4
 8003d4c:	6213      	str	r3, [r2, #32]
 8003d4e:	e01c      	b.n	8003d8a <HAL_RCC_OscConfig+0x36e>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	2b05      	cmp	r3, #5
 8003d56:	d10c      	bne.n	8003d72 <HAL_RCC_OscConfig+0x356>
 8003d58:	4b61      	ldr	r3, [pc, #388]	; (8003ee0 <HAL_RCC_OscConfig+0x4c4>)
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	4a60      	ldr	r2, [pc, #384]	; (8003ee0 <HAL_RCC_OscConfig+0x4c4>)
 8003d5e:	f043 0304 	orr.w	r3, r3, #4
 8003d62:	6213      	str	r3, [r2, #32]
 8003d64:	4b5e      	ldr	r3, [pc, #376]	; (8003ee0 <HAL_RCC_OscConfig+0x4c4>)
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	4a5d      	ldr	r2, [pc, #372]	; (8003ee0 <HAL_RCC_OscConfig+0x4c4>)
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	6213      	str	r3, [r2, #32]
 8003d70:	e00b      	b.n	8003d8a <HAL_RCC_OscConfig+0x36e>
 8003d72:	4b5b      	ldr	r3, [pc, #364]	; (8003ee0 <HAL_RCC_OscConfig+0x4c4>)
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	4a5a      	ldr	r2, [pc, #360]	; (8003ee0 <HAL_RCC_OscConfig+0x4c4>)
 8003d78:	f023 0301 	bic.w	r3, r3, #1
 8003d7c:	6213      	str	r3, [r2, #32]
 8003d7e:	4b58      	ldr	r3, [pc, #352]	; (8003ee0 <HAL_RCC_OscConfig+0x4c4>)
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	4a57      	ldr	r2, [pc, #348]	; (8003ee0 <HAL_RCC_OscConfig+0x4c4>)
 8003d84:	f023 0304 	bic.w	r3, r3, #4
 8003d88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d015      	beq.n	8003dbe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d92:	f7ff fba3 	bl	80034dc <HAL_GetTick>
 8003d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d98:	e00a      	b.n	8003db0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d9a:	f7ff fb9f 	bl	80034dc <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e0b1      	b.n	8003f14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db0:	4b4b      	ldr	r3, [pc, #300]	; (8003ee0 <HAL_RCC_OscConfig+0x4c4>)
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d0ee      	beq.n	8003d9a <HAL_RCC_OscConfig+0x37e>
 8003dbc:	e014      	b.n	8003de8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dbe:	f7ff fb8d 	bl	80034dc <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dc4:	e00a      	b.n	8003ddc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc6:	f7ff fb89 	bl	80034dc <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e09b      	b.n	8003f14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ddc:	4b40      	ldr	r3, [pc, #256]	; (8003ee0 <HAL_RCC_OscConfig+0x4c4>)
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1ee      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003de8:	7dfb      	ldrb	r3, [r7, #23]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d105      	bne.n	8003dfa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dee:	4b3c      	ldr	r3, [pc, #240]	; (8003ee0 <HAL_RCC_OscConfig+0x4c4>)
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	4a3b      	ldr	r2, [pc, #236]	; (8003ee0 <HAL_RCC_OscConfig+0x4c4>)
 8003df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003df8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 8087 	beq.w	8003f12 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e04:	4b36      	ldr	r3, [pc, #216]	; (8003ee0 <HAL_RCC_OscConfig+0x4c4>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f003 030c 	and.w	r3, r3, #12
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d061      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	69db      	ldr	r3, [r3, #28]
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d146      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e18:	4b33      	ldr	r3, [pc, #204]	; (8003ee8 <HAL_RCC_OscConfig+0x4cc>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1e:	f7ff fb5d 	bl	80034dc <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e24:	e008      	b.n	8003e38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e26:	f7ff fb59 	bl	80034dc <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e06d      	b.n	8003f14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e38:	4b29      	ldr	r3, [pc, #164]	; (8003ee0 <HAL_RCC_OscConfig+0x4c4>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1f0      	bne.n	8003e26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e4c:	d108      	bne.n	8003e60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e4e:	4b24      	ldr	r3, [pc, #144]	; (8003ee0 <HAL_RCC_OscConfig+0x4c4>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	4921      	ldr	r1, [pc, #132]	; (8003ee0 <HAL_RCC_OscConfig+0x4c4>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e60:	4b1f      	ldr	r3, [pc, #124]	; (8003ee0 <HAL_RCC_OscConfig+0x4c4>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a19      	ldr	r1, [r3, #32]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	430b      	orrs	r3, r1
 8003e72:	491b      	ldr	r1, [pc, #108]	; (8003ee0 <HAL_RCC_OscConfig+0x4c4>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e78:	4b1b      	ldr	r3, [pc, #108]	; (8003ee8 <HAL_RCC_OscConfig+0x4cc>)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7e:	f7ff fb2d 	bl	80034dc <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e86:	f7ff fb29 	bl	80034dc <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e03d      	b.n	8003f14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e98:	4b11      	ldr	r3, [pc, #68]	; (8003ee0 <HAL_RCC_OscConfig+0x4c4>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0f0      	beq.n	8003e86 <HAL_RCC_OscConfig+0x46a>
 8003ea4:	e035      	b.n	8003f12 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ea6:	4b10      	ldr	r3, [pc, #64]	; (8003ee8 <HAL_RCC_OscConfig+0x4cc>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eac:	f7ff fb16 	bl	80034dc <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb4:	f7ff fb12 	bl	80034dc <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e026      	b.n	8003f14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ec6:	4b06      	ldr	r3, [pc, #24]	; (8003ee0 <HAL_RCC_OscConfig+0x4c4>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1f0      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x498>
 8003ed2:	e01e      	b.n	8003f12 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d107      	bne.n	8003eec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e019      	b.n	8003f14 <HAL_RCC_OscConfig+0x4f8>
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	40007000 	.word	0x40007000
 8003ee8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003eec:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <HAL_RCC_OscConfig+0x500>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d106      	bne.n	8003f0e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d001      	beq.n	8003f12 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e000      	b.n	8003f14 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3718      	adds	r7, #24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	40021000 	.word	0x40021000

08003f20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e0d0      	b.n	80040d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f34:	4b6a      	ldr	r3, [pc, #424]	; (80040e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0307 	and.w	r3, r3, #7
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d910      	bls.n	8003f64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f42:	4b67      	ldr	r3, [pc, #412]	; (80040e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f023 0207 	bic.w	r2, r3, #7
 8003f4a:	4965      	ldr	r1, [pc, #404]	; (80040e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f52:	4b63      	ldr	r3, [pc, #396]	; (80040e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0307 	and.w	r3, r3, #7
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d001      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e0b8      	b.n	80040d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d020      	beq.n	8003fb2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d005      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f7c:	4b59      	ldr	r3, [pc, #356]	; (80040e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	4a58      	ldr	r2, [pc, #352]	; (80040e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0308 	and.w	r3, r3, #8
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d005      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f94:	4b53      	ldr	r3, [pc, #332]	; (80040e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	4a52      	ldr	r2, [pc, #328]	; (80040e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003f9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fa0:	4b50      	ldr	r3, [pc, #320]	; (80040e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	494d      	ldr	r1, [pc, #308]	; (80040e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d040      	beq.n	8004040 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d107      	bne.n	8003fd6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc6:	4b47      	ldr	r3, [pc, #284]	; (80040e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d115      	bne.n	8003ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e07f      	b.n	80040d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d107      	bne.n	8003fee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fde:	4b41      	ldr	r3, [pc, #260]	; (80040e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d109      	bne.n	8003ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e073      	b.n	80040d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fee:	4b3d      	ldr	r3, [pc, #244]	; (80040e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e06b      	b.n	80040d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ffe:	4b39      	ldr	r3, [pc, #228]	; (80040e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f023 0203 	bic.w	r2, r3, #3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	4936      	ldr	r1, [pc, #216]	; (80040e4 <HAL_RCC_ClockConfig+0x1c4>)
 800400c:	4313      	orrs	r3, r2
 800400e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004010:	f7ff fa64 	bl	80034dc <HAL_GetTick>
 8004014:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004016:	e00a      	b.n	800402e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004018:	f7ff fa60 	bl	80034dc <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	f241 3288 	movw	r2, #5000	; 0x1388
 8004026:	4293      	cmp	r3, r2
 8004028:	d901      	bls.n	800402e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e053      	b.n	80040d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800402e:	4b2d      	ldr	r3, [pc, #180]	; (80040e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f003 020c 	and.w	r2, r3, #12
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	429a      	cmp	r2, r3
 800403e:	d1eb      	bne.n	8004018 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004040:	4b27      	ldr	r3, [pc, #156]	; (80040e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	429a      	cmp	r2, r3
 800404c:	d210      	bcs.n	8004070 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404e:	4b24      	ldr	r3, [pc, #144]	; (80040e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f023 0207 	bic.w	r2, r3, #7
 8004056:	4922      	ldr	r1, [pc, #136]	; (80040e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	4313      	orrs	r3, r2
 800405c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800405e:	4b20      	ldr	r3, [pc, #128]	; (80040e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	429a      	cmp	r2, r3
 800406a:	d001      	beq.n	8004070 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e032      	b.n	80040d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	2b00      	cmp	r3, #0
 800407a:	d008      	beq.n	800408e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800407c:	4b19      	ldr	r3, [pc, #100]	; (80040e4 <HAL_RCC_ClockConfig+0x1c4>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	4916      	ldr	r1, [pc, #88]	; (80040e4 <HAL_RCC_ClockConfig+0x1c4>)
 800408a:	4313      	orrs	r3, r2
 800408c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0308 	and.w	r3, r3, #8
 8004096:	2b00      	cmp	r3, #0
 8004098:	d009      	beq.n	80040ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800409a:	4b12      	ldr	r3, [pc, #72]	; (80040e4 <HAL_RCC_ClockConfig+0x1c4>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	490e      	ldr	r1, [pc, #56]	; (80040e4 <HAL_RCC_ClockConfig+0x1c4>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040ae:	f000 f821 	bl	80040f4 <HAL_RCC_GetSysClockFreq>
 80040b2:	4602      	mov	r2, r0
 80040b4:	4b0b      	ldr	r3, [pc, #44]	; (80040e4 <HAL_RCC_ClockConfig+0x1c4>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	091b      	lsrs	r3, r3, #4
 80040ba:	f003 030f 	and.w	r3, r3, #15
 80040be:	490a      	ldr	r1, [pc, #40]	; (80040e8 <HAL_RCC_ClockConfig+0x1c8>)
 80040c0:	5ccb      	ldrb	r3, [r1, r3]
 80040c2:	fa22 f303 	lsr.w	r3, r2, r3
 80040c6:	4a09      	ldr	r2, [pc, #36]	; (80040ec <HAL_RCC_ClockConfig+0x1cc>)
 80040c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040ca:	4b09      	ldr	r3, [pc, #36]	; (80040f0 <HAL_RCC_ClockConfig+0x1d0>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff f8ba 	bl	8003248 <HAL_InitTick>

  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	40022000 	.word	0x40022000
 80040e4:	40021000 	.word	0x40021000
 80040e8:	08007b94 	.word	0x08007b94
 80040ec:	20000000 	.word	0x20000000
 80040f0:	20000004 	.word	0x20000004

080040f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80040fa:	2300      	movs	r3, #0
 80040fc:	60fb      	str	r3, [r7, #12]
 80040fe:	2300      	movs	r3, #0
 8004100:	60bb      	str	r3, [r7, #8]
 8004102:	2300      	movs	r3, #0
 8004104:	617b      	str	r3, [r7, #20]
 8004106:	2300      	movs	r3, #0
 8004108:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800410a:	2300      	movs	r3, #0
 800410c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800410e:	4b1e      	ldr	r3, [pc, #120]	; (8004188 <HAL_RCC_GetSysClockFreq+0x94>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f003 030c 	and.w	r3, r3, #12
 800411a:	2b04      	cmp	r3, #4
 800411c:	d002      	beq.n	8004124 <HAL_RCC_GetSysClockFreq+0x30>
 800411e:	2b08      	cmp	r3, #8
 8004120:	d003      	beq.n	800412a <HAL_RCC_GetSysClockFreq+0x36>
 8004122:	e027      	b.n	8004174 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004124:	4b19      	ldr	r3, [pc, #100]	; (800418c <HAL_RCC_GetSysClockFreq+0x98>)
 8004126:	613b      	str	r3, [r7, #16]
      break;
 8004128:	e027      	b.n	800417a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	0c9b      	lsrs	r3, r3, #18
 800412e:	f003 030f 	and.w	r3, r3, #15
 8004132:	4a17      	ldr	r2, [pc, #92]	; (8004190 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004134:	5cd3      	ldrb	r3, [r2, r3]
 8004136:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d010      	beq.n	8004164 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004142:	4b11      	ldr	r3, [pc, #68]	; (8004188 <HAL_RCC_GetSysClockFreq+0x94>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	0c5b      	lsrs	r3, r3, #17
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	4a11      	ldr	r2, [pc, #68]	; (8004194 <HAL_RCC_GetSysClockFreq+0xa0>)
 800414e:	5cd3      	ldrb	r3, [r2, r3]
 8004150:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a0d      	ldr	r2, [pc, #52]	; (800418c <HAL_RCC_GetSysClockFreq+0x98>)
 8004156:	fb03 f202 	mul.w	r2, r3, r2
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004160:	617b      	str	r3, [r7, #20]
 8004162:	e004      	b.n	800416e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a0c      	ldr	r2, [pc, #48]	; (8004198 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004168:	fb02 f303 	mul.w	r3, r2, r3
 800416c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	613b      	str	r3, [r7, #16]
      break;
 8004172:	e002      	b.n	800417a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004174:	4b05      	ldr	r3, [pc, #20]	; (800418c <HAL_RCC_GetSysClockFreq+0x98>)
 8004176:	613b      	str	r3, [r7, #16]
      break;
 8004178:	bf00      	nop
    }
  }
  return sysclockfreq;
 800417a:	693b      	ldr	r3, [r7, #16]
}
 800417c:	4618      	mov	r0, r3
 800417e:	371c      	adds	r7, #28
 8004180:	46bd      	mov	sp, r7
 8004182:	bc80      	pop	{r7}
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	40021000 	.word	0x40021000
 800418c:	007a1200 	.word	0x007a1200
 8004190:	08007bac 	.word	0x08007bac
 8004194:	08007bbc 	.word	0x08007bbc
 8004198:	003d0900 	.word	0x003d0900

0800419c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041a0:	4b02      	ldr	r3, [pc, #8]	; (80041ac <HAL_RCC_GetHCLKFreq+0x10>)
 80041a2:	681b      	ldr	r3, [r3, #0]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bc80      	pop	{r7}
 80041aa:	4770      	bx	lr
 80041ac:	20000000 	.word	0x20000000

080041b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041b4:	f7ff fff2 	bl	800419c <HAL_RCC_GetHCLKFreq>
 80041b8:	4602      	mov	r2, r0
 80041ba:	4b05      	ldr	r3, [pc, #20]	; (80041d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	0a1b      	lsrs	r3, r3, #8
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	4903      	ldr	r1, [pc, #12]	; (80041d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041c6:	5ccb      	ldrb	r3, [r1, r3]
 80041c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	40021000 	.word	0x40021000
 80041d4:	08007ba4 	.word	0x08007ba4

080041d8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	220f      	movs	r2, #15
 80041e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80041e8:	4b11      	ldr	r3, [pc, #68]	; (8004230 <HAL_RCC_GetClockConfig+0x58>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f003 0203 	and.w	r2, r3, #3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80041f4:	4b0e      	ldr	r3, [pc, #56]	; (8004230 <HAL_RCC_GetClockConfig+0x58>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004200:	4b0b      	ldr	r3, [pc, #44]	; (8004230 <HAL_RCC_GetClockConfig+0x58>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800420c:	4b08      	ldr	r3, [pc, #32]	; (8004230 <HAL_RCC_GetClockConfig+0x58>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	08db      	lsrs	r3, r3, #3
 8004212:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800421a:	4b06      	ldr	r3, [pc, #24]	; (8004234 <HAL_RCC_GetClockConfig+0x5c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0207 	and.w	r2, r3, #7
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	bc80      	pop	{r7}
 800422e:	4770      	bx	lr
 8004230:	40021000 	.word	0x40021000
 8004234:	40022000 	.word	0x40022000

08004238 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004240:	4b0a      	ldr	r3, [pc, #40]	; (800426c <RCC_Delay+0x34>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a0a      	ldr	r2, [pc, #40]	; (8004270 <RCC_Delay+0x38>)
 8004246:	fba2 2303 	umull	r2, r3, r2, r3
 800424a:	0a5b      	lsrs	r3, r3, #9
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	fb02 f303 	mul.w	r3, r2, r3
 8004252:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004254:	bf00      	nop
  }
  while (Delay --);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	1e5a      	subs	r2, r3, #1
 800425a:	60fa      	str	r2, [r7, #12]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1f9      	bne.n	8004254 <RCC_Delay+0x1c>
}
 8004260:	bf00      	nop
 8004262:	bf00      	nop
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	bc80      	pop	{r7}
 800426a:	4770      	bx	lr
 800426c:	20000000 	.word	0x20000000
 8004270:	10624dd3 	.word	0x10624dd3

08004274 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e041      	b.n	800430a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d106      	bne.n	80042a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f839 	bl	8004312 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2202      	movs	r2, #2
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3304      	adds	r3, #4
 80042b0:	4619      	mov	r1, r3
 80042b2:	4610      	mov	r0, r2
 80042b4:	f000 f9b4 	bl	8004620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004312:	b480      	push	{r7}
 8004314:	b083      	sub	sp, #12
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800431a:	bf00      	nop
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	bc80      	pop	{r7}
 8004322:	4770      	bx	lr

08004324 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b01      	cmp	r3, #1
 8004336:	d001      	beq.n	800433c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e03a      	b.n	80043b2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68da      	ldr	r2, [r3, #12]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f042 0201 	orr.w	r2, r2, #1
 8004352:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a18      	ldr	r2, [pc, #96]	; (80043bc <HAL_TIM_Base_Start_IT+0x98>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d00e      	beq.n	800437c <HAL_TIM_Base_Start_IT+0x58>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004366:	d009      	beq.n	800437c <HAL_TIM_Base_Start_IT+0x58>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a14      	ldr	r2, [pc, #80]	; (80043c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d004      	beq.n	800437c <HAL_TIM_Base_Start_IT+0x58>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a13      	ldr	r2, [pc, #76]	; (80043c4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d111      	bne.n	80043a0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 0307 	and.w	r3, r3, #7
 8004386:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2b06      	cmp	r3, #6
 800438c:	d010      	beq.n	80043b0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f042 0201 	orr.w	r2, r2, #1
 800439c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800439e:	e007      	b.n	80043b0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 0201 	orr.w	r2, r2, #1
 80043ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3714      	adds	r7, #20
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bc80      	pop	{r7}
 80043ba:	4770      	bx	lr
 80043bc:	40012c00 	.word	0x40012c00
 80043c0:	40000400 	.word	0x40000400
 80043c4:	40000800 	.word	0x40000800

080043c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d122      	bne.n	8004424 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d11b      	bne.n	8004424 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f06f 0202 	mvn.w	r2, #2
 80043f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	f003 0303 	and.w	r3, r3, #3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f8ed 	bl	80045ea <HAL_TIM_IC_CaptureCallback>
 8004410:	e005      	b.n	800441e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f8e0 	bl	80045d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 f8ef 	bl	80045fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	f003 0304 	and.w	r3, r3, #4
 800442e:	2b04      	cmp	r3, #4
 8004430:	d122      	bne.n	8004478 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f003 0304 	and.w	r3, r3, #4
 800443c:	2b04      	cmp	r3, #4
 800443e:	d11b      	bne.n	8004478 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f06f 0204 	mvn.w	r2, #4
 8004448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2202      	movs	r2, #2
 800444e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f8c3 	bl	80045ea <HAL_TIM_IC_CaptureCallback>
 8004464:	e005      	b.n	8004472 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f8b6 	bl	80045d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f8c5 	bl	80045fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	f003 0308 	and.w	r3, r3, #8
 8004482:	2b08      	cmp	r3, #8
 8004484:	d122      	bne.n	80044cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	f003 0308 	and.w	r3, r3, #8
 8004490:	2b08      	cmp	r3, #8
 8004492:	d11b      	bne.n	80044cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f06f 0208 	mvn.w	r2, #8
 800449c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2204      	movs	r2, #4
 80044a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	69db      	ldr	r3, [r3, #28]
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f899 	bl	80045ea <HAL_TIM_IC_CaptureCallback>
 80044b8:	e005      	b.n	80044c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f88c 	bl	80045d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f89b 	bl	80045fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	f003 0310 	and.w	r3, r3, #16
 80044d6:	2b10      	cmp	r3, #16
 80044d8:	d122      	bne.n	8004520 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	f003 0310 	and.w	r3, r3, #16
 80044e4:	2b10      	cmp	r3, #16
 80044e6:	d11b      	bne.n	8004520 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f06f 0210 	mvn.w	r2, #16
 80044f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2208      	movs	r2, #8
 80044f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f86f 	bl	80045ea <HAL_TIM_IC_CaptureCallback>
 800450c:	e005      	b.n	800451a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f862 	bl	80045d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f871 	bl	80045fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b01      	cmp	r3, #1
 800452c:	d10e      	bne.n	800454c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	2b01      	cmp	r3, #1
 800453a:	d107      	bne.n	800454c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f06f 0201 	mvn.w	r2, #1
 8004544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7fe fde4 	bl	8003114 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004556:	2b80      	cmp	r3, #128	; 0x80
 8004558:	d10e      	bne.n	8004578 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004564:	2b80      	cmp	r3, #128	; 0x80
 8004566:	d107      	bne.n	8004578 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f8bf 	bl	80046f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004582:	2b40      	cmp	r3, #64	; 0x40
 8004584:	d10e      	bne.n	80045a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004590:	2b40      	cmp	r3, #64	; 0x40
 8004592:	d107      	bne.n	80045a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800459c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f835 	bl	800460e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f003 0320 	and.w	r3, r3, #32
 80045ae:	2b20      	cmp	r3, #32
 80045b0:	d10e      	bne.n	80045d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f003 0320 	and.w	r3, r3, #32
 80045bc:	2b20      	cmp	r3, #32
 80045be:	d107      	bne.n	80045d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f06f 0220 	mvn.w	r2, #32
 80045c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f88a 	bl	80046e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045d0:	bf00      	nop
 80045d2:	3708      	adds	r7, #8
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bc80      	pop	{r7}
 80045e8:	4770      	bx	lr

080045ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bc80      	pop	{r7}
 80045fa:	4770      	bx	lr

080045fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	bc80      	pop	{r7}
 800460c:	4770      	bx	lr

0800460e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004616:	bf00      	nop
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	bc80      	pop	{r7}
 800461e:	4770      	bx	lr

08004620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a29      	ldr	r2, [pc, #164]	; (80046d8 <TIM_Base_SetConfig+0xb8>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d00b      	beq.n	8004650 <TIM_Base_SetConfig+0x30>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800463e:	d007      	beq.n	8004650 <TIM_Base_SetConfig+0x30>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a26      	ldr	r2, [pc, #152]	; (80046dc <TIM_Base_SetConfig+0xbc>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d003      	beq.n	8004650 <TIM_Base_SetConfig+0x30>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a25      	ldr	r2, [pc, #148]	; (80046e0 <TIM_Base_SetConfig+0xc0>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d108      	bne.n	8004662 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004656:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	4313      	orrs	r3, r2
 8004660:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a1c      	ldr	r2, [pc, #112]	; (80046d8 <TIM_Base_SetConfig+0xb8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d00b      	beq.n	8004682 <TIM_Base_SetConfig+0x62>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004670:	d007      	beq.n	8004682 <TIM_Base_SetConfig+0x62>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a19      	ldr	r2, [pc, #100]	; (80046dc <TIM_Base_SetConfig+0xbc>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d003      	beq.n	8004682 <TIM_Base_SetConfig+0x62>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a18      	ldr	r2, [pc, #96]	; (80046e0 <TIM_Base_SetConfig+0xc0>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d108      	bne.n	8004694 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	4313      	orrs	r3, r2
 8004692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	4313      	orrs	r3, r2
 80046a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a07      	ldr	r2, [pc, #28]	; (80046d8 <TIM_Base_SetConfig+0xb8>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d103      	bne.n	80046c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	691a      	ldr	r2, [r3, #16]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	615a      	str	r2, [r3, #20]
}
 80046ce:	bf00      	nop
 80046d0:	3714      	adds	r7, #20
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bc80      	pop	{r7}
 80046d6:	4770      	bx	lr
 80046d8:	40012c00 	.word	0x40012c00
 80046dc:	40000400 	.word	0x40000400
 80046e0:	40000800 	.word	0x40000800

080046e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bc80      	pop	{r7}
 80046f4:	4770      	bx	lr

080046f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b083      	sub	sp, #12
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046fe:	bf00      	nop
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	bc80      	pop	{r7}
 8004706:	4770      	bx	lr

08004708 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800470e:	f3ef 8305 	mrs	r3, IPSR
 8004712:	60bb      	str	r3, [r7, #8]
  return(result);
 8004714:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10f      	bne.n	800473a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800471a:	f3ef 8310 	mrs	r3, PRIMASK
 800471e:	607b      	str	r3, [r7, #4]
  return(result);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d109      	bne.n	800473a <osKernelInitialize+0x32>
 8004726:	4b10      	ldr	r3, [pc, #64]	; (8004768 <osKernelInitialize+0x60>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b02      	cmp	r3, #2
 800472c:	d109      	bne.n	8004742 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800472e:	f3ef 8311 	mrs	r3, BASEPRI
 8004732:	603b      	str	r3, [r7, #0]
  return(result);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800473a:	f06f 0305 	mvn.w	r3, #5
 800473e:	60fb      	str	r3, [r7, #12]
 8004740:	e00c      	b.n	800475c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004742:	4b09      	ldr	r3, [pc, #36]	; (8004768 <osKernelInitialize+0x60>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d105      	bne.n	8004756 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800474a:	4b07      	ldr	r3, [pc, #28]	; (8004768 <osKernelInitialize+0x60>)
 800474c:	2201      	movs	r2, #1
 800474e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004750:	2300      	movs	r3, #0
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	e002      	b.n	800475c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004756:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800475a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800475c:	68fb      	ldr	r3, [r7, #12]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	bc80      	pop	{r7}
 8004766:	4770      	bx	lr
 8004768:	20000680 	.word	0x20000680

0800476c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004772:	f3ef 8305 	mrs	r3, IPSR
 8004776:	60bb      	str	r3, [r7, #8]
  return(result);
 8004778:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10f      	bne.n	800479e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800477e:	f3ef 8310 	mrs	r3, PRIMASK
 8004782:	607b      	str	r3, [r7, #4]
  return(result);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d109      	bne.n	800479e <osKernelStart+0x32>
 800478a:	4b11      	ldr	r3, [pc, #68]	; (80047d0 <osKernelStart+0x64>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2b02      	cmp	r3, #2
 8004790:	d109      	bne.n	80047a6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004792:	f3ef 8311 	mrs	r3, BASEPRI
 8004796:	603b      	str	r3, [r7, #0]
  return(result);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <osKernelStart+0x3a>
    stat = osErrorISR;
 800479e:	f06f 0305 	mvn.w	r3, #5
 80047a2:	60fb      	str	r3, [r7, #12]
 80047a4:	e00e      	b.n	80047c4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80047a6:	4b0a      	ldr	r3, [pc, #40]	; (80047d0 <osKernelStart+0x64>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d107      	bne.n	80047be <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80047ae:	4b08      	ldr	r3, [pc, #32]	; (80047d0 <osKernelStart+0x64>)
 80047b0:	2202      	movs	r2, #2
 80047b2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80047b4:	f001 f912 	bl	80059dc <vTaskStartScheduler>
      stat = osOK;
 80047b8:	2300      	movs	r3, #0
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	e002      	b.n	80047c4 <osKernelStart+0x58>
    } else {
      stat = osError;
 80047be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047c2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80047c4:	68fb      	ldr	r3, [r7, #12]
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	20000680 	.word	0x20000680

080047d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b092      	sub	sp, #72	; 0x48
 80047d8:	af04      	add	r7, sp, #16
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80047e0:	2300      	movs	r3, #0
 80047e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047e4:	f3ef 8305 	mrs	r3, IPSR
 80047e8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f040 8094 	bne.w	800491a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047f2:	f3ef 8310 	mrs	r3, PRIMASK
 80047f6:	623b      	str	r3, [r7, #32]
  return(result);
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f040 808d 	bne.w	800491a <osThreadNew+0x146>
 8004800:	4b48      	ldr	r3, [pc, #288]	; (8004924 <osThreadNew+0x150>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b02      	cmp	r3, #2
 8004806:	d106      	bne.n	8004816 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004808:	f3ef 8311 	mrs	r3, BASEPRI
 800480c:	61fb      	str	r3, [r7, #28]
  return(result);
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	2b00      	cmp	r3, #0
 8004812:	f040 8082 	bne.w	800491a <osThreadNew+0x146>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d07e      	beq.n	800491a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800481c:	2380      	movs	r3, #128	; 0x80
 800481e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004820:	2318      	movs	r3, #24
 8004822:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004824:	2300      	movs	r3, #0
 8004826:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004828:	f107 031b 	add.w	r3, r7, #27
 800482c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800482e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004832:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d045      	beq.n	80048c6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d002      	beq.n	8004848 <osThreadNew+0x74>
        name = attr->name;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004858:	2b00      	cmp	r3, #0
 800485a:	d008      	beq.n	800486e <osThreadNew+0x9a>
 800485c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800485e:	2b38      	cmp	r3, #56	; 0x38
 8004860:	d805      	bhi.n	800486e <osThreadNew+0x9a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <osThreadNew+0x9e>
        return (NULL);
 800486e:	2300      	movs	r3, #0
 8004870:	e054      	b.n	800491c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	089b      	lsrs	r3, r3, #2
 8004880:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00e      	beq.n	80048a8 <osThreadNew+0xd4>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	2b5b      	cmp	r3, #91	; 0x5b
 8004890:	d90a      	bls.n	80048a8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004896:	2b00      	cmp	r3, #0
 8004898:	d006      	beq.n	80048a8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d002      	beq.n	80048a8 <osThreadNew+0xd4>
        mem = 1;
 80048a2:	2301      	movs	r3, #1
 80048a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80048a6:	e010      	b.n	80048ca <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10c      	bne.n	80048ca <osThreadNew+0xf6>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d108      	bne.n	80048ca <osThreadNew+0xf6>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d104      	bne.n	80048ca <osThreadNew+0xf6>
          mem = 0;
 80048c0:	2300      	movs	r3, #0
 80048c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80048c4:	e001      	b.n	80048ca <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80048c6:	2300      	movs	r3, #0
 80048c8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80048ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d110      	bne.n	80048f2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80048d8:	9202      	str	r2, [sp, #8]
 80048da:	9301      	str	r3, [sp, #4]
 80048dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f000 feac 	bl	8005644 <xTaskCreateStatic>
 80048ec:	4603      	mov	r3, r0
 80048ee:	617b      	str	r3, [r7, #20]
 80048f0:	e013      	b.n	800491a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80048f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d110      	bne.n	800491a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80048f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	f107 0314 	add.w	r3, r7, #20
 8004900:	9301      	str	r3, [sp, #4]
 8004902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 fef6 	bl	80056fc <xTaskCreate>
 8004910:	4603      	mov	r3, r0
 8004912:	2b01      	cmp	r3, #1
 8004914:	d001      	beq.n	800491a <osThreadNew+0x146>
          hTask = NULL;
 8004916:	2300      	movs	r3, #0
 8004918:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800491a:	697b      	ldr	r3, [r7, #20]
}
 800491c:	4618      	mov	r0, r3
 800491e:	3738      	adds	r7, #56	; 0x38
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	20000680 	.word	0x20000680

08004928 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004930:	f3ef 8305 	mrs	r3, IPSR
 8004934:	613b      	str	r3, [r7, #16]
  return(result);
 8004936:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10f      	bne.n	800495c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800493c:	f3ef 8310 	mrs	r3, PRIMASK
 8004940:	60fb      	str	r3, [r7, #12]
  return(result);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d109      	bne.n	800495c <osDelay+0x34>
 8004948:	4b0d      	ldr	r3, [pc, #52]	; (8004980 <osDelay+0x58>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2b02      	cmp	r3, #2
 800494e:	d109      	bne.n	8004964 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004950:	f3ef 8311 	mrs	r3, BASEPRI
 8004954:	60bb      	str	r3, [r7, #8]
  return(result);
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <osDelay+0x3c>
    stat = osErrorISR;
 800495c:	f06f 0305 	mvn.w	r3, #5
 8004960:	617b      	str	r3, [r7, #20]
 8004962:	e007      	b.n	8004974 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004964:	2300      	movs	r3, #0
 8004966:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d002      	beq.n	8004974 <osDelay+0x4c>
      vTaskDelay(ticks);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f001 f800 	bl	8005974 <vTaskDelay>
    }
  }

  return (stat);
 8004974:	697b      	ldr	r3, [r7, #20]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	20000680 	.word	0x20000680

08004984 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f002 f8f3 	bl	8006b78 <pvTimerGetTimerID>
 8004992:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d005      	beq.n	80049a6 <TimerCallback+0x22>
    callb->func (callb->arg);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	6852      	ldr	r2, [r2, #4]
 80049a2:	4610      	mov	r0, r2
 80049a4:	4798      	blx	r3
  }
}
 80049a6:	bf00      	nop
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
	...

080049b0 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b08e      	sub	sp, #56	; 0x38
 80049b4:	af02      	add	r7, sp, #8
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	607a      	str	r2, [r7, #4]
 80049ba:	603b      	str	r3, [r7, #0]
 80049bc:	460b      	mov	r3, r1
 80049be:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80049c0:	2300      	movs	r3, #0
 80049c2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049c4:	f3ef 8305 	mrs	r3, IPSR
 80049c8:	61bb      	str	r3, [r7, #24]
  return(result);
 80049ca:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d16a      	bne.n	8004aa6 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049d0:	f3ef 8310 	mrs	r3, PRIMASK
 80049d4:	617b      	str	r3, [r7, #20]
  return(result);
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d164      	bne.n	8004aa6 <osTimerNew+0xf6>
 80049dc:	4b34      	ldr	r3, [pc, #208]	; (8004ab0 <osTimerNew+0x100>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d105      	bne.n	80049f0 <osTimerNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80049e4:	f3ef 8311 	mrs	r3, BASEPRI
 80049e8:	613b      	str	r3, [r7, #16]
  return(result);
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d15a      	bne.n	8004aa6 <osTimerNew+0xf6>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d057      	beq.n	8004aa6 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80049f6:	2008      	movs	r0, #8
 80049f8:	f002 fad0 	bl	8006f9c <pvPortMalloc>
 80049fc:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d050      	beq.n	8004aa6 <osTimerNew+0xf6>
      callb->func = func;
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8004a10:	7afb      	ldrb	r3, [r7, #11]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d102      	bne.n	8004a1c <osTimerNew+0x6c>
        reload = pdFALSE;
 8004a16:	2300      	movs	r3, #0
 8004a18:	627b      	str	r3, [r7, #36]	; 0x24
 8004a1a:	e001      	b.n	8004a20 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8004a20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a24:	623b      	str	r3, [r7, #32]
      name = NULL;
 8004a26:	2300      	movs	r3, #0
 8004a28:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d01c      	beq.n	8004a6a <osTimerNew+0xba>
        if (attr->name != NULL) {
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <osTimerNew+0x8e>
          name = attr->name;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d006      	beq.n	8004a54 <osTimerNew+0xa4>
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	2b2f      	cmp	r3, #47	; 0x2f
 8004a4c:	d902      	bls.n	8004a54 <osTimerNew+0xa4>
          mem = 1;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	623b      	str	r3, [r7, #32]
 8004a52:	e00c      	b.n	8004a6e <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d108      	bne.n	8004a6e <osTimerNew+0xbe>
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d104      	bne.n	8004a6e <osTimerNew+0xbe>
            mem = 0;
 8004a64:	2300      	movs	r3, #0
 8004a66:	623b      	str	r3, [r7, #32]
 8004a68:	e001      	b.n	8004a6e <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8004a6e:	6a3b      	ldr	r3, [r7, #32]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d10c      	bne.n	8004a8e <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	9301      	str	r3, [sp, #4]
 8004a7a:	4b0e      	ldr	r3, [pc, #56]	; (8004ab4 <osTimerNew+0x104>)
 8004a7c:	9300      	str	r3, [sp, #0]
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a82:	2101      	movs	r1, #1
 8004a84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a86:	f001 fd3e 	bl	8006506 <xTimerCreateStatic>
 8004a8a:	62b8      	str	r0, [r7, #40]	; 0x28
 8004a8c:	e00b      	b.n	8004aa6 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8004a8e:	6a3b      	ldr	r3, [r7, #32]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d108      	bne.n	8004aa6 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8004a94:	4b07      	ldr	r3, [pc, #28]	; (8004ab4 <osTimerNew+0x104>)
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a9c:	2101      	movs	r1, #1
 8004a9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004aa0:	f001 fd10 	bl	80064c4 <xTimerCreate>
 8004aa4:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8004aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3730      	adds	r7, #48	; 0x30
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	20000680 	.word	0x20000680
 8004ab4:	08004985 	.word	0x08004985

08004ab8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4a06      	ldr	r2, [pc, #24]	; (8004ae0 <vApplicationGetIdleTaskMemory+0x28>)
 8004ac8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	4a05      	ldr	r2, [pc, #20]	; (8004ae4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004ace:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2280      	movs	r2, #128	; 0x80
 8004ad4:	601a      	str	r2, [r3, #0]
}
 8004ad6:	bf00      	nop
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bc80      	pop	{r7}
 8004ade:	4770      	bx	lr
 8004ae0:	20000684 	.word	0x20000684
 8004ae4:	200006e0 	.word	0x200006e0

08004ae8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4a07      	ldr	r2, [pc, #28]	; (8004b14 <vApplicationGetTimerTaskMemory+0x2c>)
 8004af8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	4a06      	ldr	r2, [pc, #24]	; (8004b18 <vApplicationGetTimerTaskMemory+0x30>)
 8004afe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b06:	601a      	str	r2, [r3, #0]
}
 8004b08:	bf00      	nop
 8004b0a:	3714      	adds	r7, #20
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bc80      	pop	{r7}
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	200008e0 	.word	0x200008e0
 8004b18:	2000093c 	.word	0x2000093c

08004b1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f103 0208 	add.w	r2, r3, #8
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f103 0208 	add.w	r2, r3, #8
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f103 0208 	add.w	r2, r3, #8
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bc80      	pop	{r7}
 8004b58:	4770      	bx	lr

08004b5a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bc80      	pop	{r7}
 8004b70:	4770      	bx	lr

08004b72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b72:	b480      	push	{r7}
 8004b74:	b085      	sub	sp, #20
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
 8004b7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	1c5a      	adds	r2, r3, #1
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	601a      	str	r2, [r3, #0]
}
 8004bae:	bf00      	nop
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bc80      	pop	{r7}
 8004bb6:	4770      	bx	lr

08004bb8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bce:	d103      	bne.n	8004bd8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	60fb      	str	r3, [r7, #12]
 8004bd6:	e00c      	b.n	8004bf2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	3308      	adds	r3, #8
 8004bdc:	60fb      	str	r3, [r7, #12]
 8004bde:	e002      	b.n	8004be6 <vListInsert+0x2e>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d2f6      	bcs.n	8004be0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	1c5a      	adds	r2, r3, #1
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	601a      	str	r2, [r3, #0]
}
 8004c1e:	bf00      	nop
 8004c20:	3714      	adds	r7, #20
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bc80      	pop	{r7}
 8004c26:	4770      	bx	lr

08004c28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	6892      	ldr	r2, [r2, #8]
 8004c3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	6852      	ldr	r2, [r2, #4]
 8004c48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d103      	bne.n	8004c5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689a      	ldr	r2, [r3, #8]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	1e5a      	subs	r2, r3, #1
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3714      	adds	r7, #20
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bc80      	pop	{r7}
 8004c78:	4770      	bx	lr
	...

08004c7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10a      	bne.n	8004ca6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c94:	f383 8811 	msr	BASEPRI, r3
 8004c98:	f3bf 8f6f 	isb	sy
 8004c9c:	f3bf 8f4f 	dsb	sy
 8004ca0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004ca2:	bf00      	nop
 8004ca4:	e7fe      	b.n	8004ca4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004ca6:	f002 f879 	bl	8006d9c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb2:	68f9      	ldr	r1, [r7, #12]
 8004cb4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004cb6:	fb01 f303 	mul.w	r3, r1, r3
 8004cba:	441a      	add	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	68f9      	ldr	r1, [r7, #12]
 8004cda:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004cdc:	fb01 f303 	mul.w	r3, r1, r3
 8004ce0:	441a      	add	r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	22ff      	movs	r2, #255	; 0xff
 8004cea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	22ff      	movs	r2, #255	; 0xff
 8004cf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d114      	bne.n	8004d26 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d01a      	beq.n	8004d3a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	3310      	adds	r3, #16
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f001 f8f1 	bl	8005ef0 <xTaskRemoveFromEventList>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d012      	beq.n	8004d3a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004d14:	4b0c      	ldr	r3, [pc, #48]	; (8004d48 <xQueueGenericReset+0xcc>)
 8004d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d1a:	601a      	str	r2, [r3, #0]
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	f3bf 8f6f 	isb	sy
 8004d24:	e009      	b.n	8004d3a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	3310      	adds	r3, #16
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7ff fef6 	bl	8004b1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	3324      	adds	r3, #36	; 0x24
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7ff fef1 	bl	8004b1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004d3a:	f002 f85f 	bl	8006dfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004d3e:	2301      	movs	r3, #1
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	e000ed04 	.word	0xe000ed04

08004d4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b08e      	sub	sp, #56	; 0x38
 8004d50:	af02      	add	r7, sp, #8
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
 8004d58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10a      	bne.n	8004d76 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d64:	f383 8811 	msr	BASEPRI, r3
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d72:	bf00      	nop
 8004d74:	e7fe      	b.n	8004d74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10a      	bne.n	8004d92 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d80:	f383 8811 	msr	BASEPRI, r3
 8004d84:	f3bf 8f6f 	isb	sy
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d8e:	bf00      	nop
 8004d90:	e7fe      	b.n	8004d90 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <xQueueGenericCreateStatic+0x52>
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <xQueueGenericCreateStatic+0x56>
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e000      	b.n	8004da4 <xQueueGenericCreateStatic+0x58>
 8004da2:	2300      	movs	r3, #0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10a      	bne.n	8004dbe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dac:	f383 8811 	msr	BASEPRI, r3
 8004db0:	f3bf 8f6f 	isb	sy
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	623b      	str	r3, [r7, #32]
}
 8004dba:	bf00      	nop
 8004dbc:	e7fe      	b.n	8004dbc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d102      	bne.n	8004dca <xQueueGenericCreateStatic+0x7e>
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <xQueueGenericCreateStatic+0x82>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e000      	b.n	8004dd0 <xQueueGenericCreateStatic+0x84>
 8004dce:	2300      	movs	r3, #0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10a      	bne.n	8004dea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd8:	f383 8811 	msr	BASEPRI, r3
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	f3bf 8f4f 	dsb	sy
 8004de4:	61fb      	str	r3, [r7, #28]
}
 8004de6:	bf00      	nop
 8004de8:	e7fe      	b.n	8004de8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004dea:	2350      	movs	r3, #80	; 0x50
 8004dec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2b50      	cmp	r3, #80	; 0x50
 8004df2:	d00a      	beq.n	8004e0a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df8:	f383 8811 	msr	BASEPRI, r3
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	f3bf 8f4f 	dsb	sy
 8004e04:	61bb      	str	r3, [r7, #24]
}
 8004e06:	bf00      	nop
 8004e08:	e7fe      	b.n	8004e08 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00d      	beq.n	8004e30 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e1c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	4613      	mov	r3, r2
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	68b9      	ldr	r1, [r7, #8]
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f000 f805 	bl	8004e3a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3730      	adds	r7, #48	; 0x30
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b084      	sub	sp, #16
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	60f8      	str	r0, [r7, #12]
 8004e42:	60b9      	str	r1, [r7, #8]
 8004e44:	607a      	str	r2, [r7, #4]
 8004e46:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d103      	bne.n	8004e56 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	e002      	b.n	8004e5c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e68:	2101      	movs	r1, #1
 8004e6a:	69b8      	ldr	r0, [r7, #24]
 8004e6c:	f7ff ff06 	bl	8004c7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	78fa      	ldrb	r2, [r7, #3]
 8004e74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004e78:	bf00      	nop
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b08e      	sub	sp, #56	; 0x38
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
 8004e8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10a      	bne.n	8004eb2 <xQueueGenericSend+0x32>
	__asm volatile
 8004e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea0:	f383 8811 	msr	BASEPRI, r3
 8004ea4:	f3bf 8f6f 	isb	sy
 8004ea8:	f3bf 8f4f 	dsb	sy
 8004eac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004eae:	bf00      	nop
 8004eb0:	e7fe      	b.n	8004eb0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d103      	bne.n	8004ec0 <xQueueGenericSend+0x40>
 8004eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <xQueueGenericSend+0x44>
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e000      	b.n	8004ec6 <xQueueGenericSend+0x46>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10a      	bne.n	8004ee0 <xQueueGenericSend+0x60>
	__asm volatile
 8004eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ece:	f383 8811 	msr	BASEPRI, r3
 8004ed2:	f3bf 8f6f 	isb	sy
 8004ed6:	f3bf 8f4f 	dsb	sy
 8004eda:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004edc:	bf00      	nop
 8004ede:	e7fe      	b.n	8004ede <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d103      	bne.n	8004eee <xQueueGenericSend+0x6e>
 8004ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d101      	bne.n	8004ef2 <xQueueGenericSend+0x72>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e000      	b.n	8004ef4 <xQueueGenericSend+0x74>
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10a      	bne.n	8004f0e <xQueueGenericSend+0x8e>
	__asm volatile
 8004ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efc:	f383 8811 	msr	BASEPRI, r3
 8004f00:	f3bf 8f6f 	isb	sy
 8004f04:	f3bf 8f4f 	dsb	sy
 8004f08:	623b      	str	r3, [r7, #32]
}
 8004f0a:	bf00      	nop
 8004f0c:	e7fe      	b.n	8004f0c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f0e:	f001 f9b1 	bl	8006274 <xTaskGetSchedulerState>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d102      	bne.n	8004f1e <xQueueGenericSend+0x9e>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <xQueueGenericSend+0xa2>
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e000      	b.n	8004f24 <xQueueGenericSend+0xa4>
 8004f22:	2300      	movs	r3, #0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10a      	bne.n	8004f3e <xQueueGenericSend+0xbe>
	__asm volatile
 8004f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2c:	f383 8811 	msr	BASEPRI, r3
 8004f30:	f3bf 8f6f 	isb	sy
 8004f34:	f3bf 8f4f 	dsb	sy
 8004f38:	61fb      	str	r3, [r7, #28]
}
 8004f3a:	bf00      	nop
 8004f3c:	e7fe      	b.n	8004f3c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f3e:	f001 ff2d 	bl	8006d9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d302      	bcc.n	8004f54 <xQueueGenericSend+0xd4>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d129      	bne.n	8004fa8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	68b9      	ldr	r1, [r7, #8]
 8004f58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f5a:	f000 fa07 	bl	800536c <prvCopyDataToQueue>
 8004f5e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d010      	beq.n	8004f8a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6a:	3324      	adds	r3, #36	; 0x24
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 ffbf 	bl	8005ef0 <xTaskRemoveFromEventList>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d013      	beq.n	8004fa0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004f78:	4b3f      	ldr	r3, [pc, #252]	; (8005078 <xQueueGenericSend+0x1f8>)
 8004f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f7e:	601a      	str	r2, [r3, #0]
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	e00a      	b.n	8004fa0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d007      	beq.n	8004fa0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004f90:	4b39      	ldr	r3, [pc, #228]	; (8005078 <xQueueGenericSend+0x1f8>)
 8004f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004fa0:	f001 ff2c 	bl	8006dfc <vPortExitCritical>
				return pdPASS;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e063      	b.n	8005070 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d103      	bne.n	8004fb6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004fae:	f001 ff25 	bl	8006dfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	e05c      	b.n	8005070 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d106      	bne.n	8004fca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fbc:	f107 0314 	add.w	r3, r7, #20
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 fff9 	bl	8005fb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fca:	f001 ff17 	bl	8006dfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fce:	f000 fd6b 	bl	8005aa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fd2:	f001 fee3 	bl	8006d9c <vPortEnterCritical>
 8004fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fdc:	b25b      	sxtb	r3, r3
 8004fde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fe2:	d103      	bne.n	8004fec <xQueueGenericSend+0x16c>
 8004fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ff2:	b25b      	sxtb	r3, r3
 8004ff4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ff8:	d103      	bne.n	8005002 <xQueueGenericSend+0x182>
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005002:	f001 fefb 	bl	8006dfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005006:	1d3a      	adds	r2, r7, #4
 8005008:	f107 0314 	add.w	r3, r7, #20
 800500c:	4611      	mov	r1, r2
 800500e:	4618      	mov	r0, r3
 8005010:	f000 ffe8 	bl	8005fe4 <xTaskCheckForTimeOut>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d124      	bne.n	8005064 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800501a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800501c:	f000 fa9e 	bl	800555c <prvIsQueueFull>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d018      	beq.n	8005058 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005028:	3310      	adds	r3, #16
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	4611      	mov	r1, r2
 800502e:	4618      	mov	r0, r3
 8005030:	f000 ff0e 	bl	8005e50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005036:	f000 fa29 	bl	800548c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800503a:	f000 fd43 	bl	8005ac4 <xTaskResumeAll>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	f47f af7c 	bne.w	8004f3e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005046:	4b0c      	ldr	r3, [pc, #48]	; (8005078 <xQueueGenericSend+0x1f8>)
 8005048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	f3bf 8f4f 	dsb	sy
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	e772      	b.n	8004f3e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005058:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800505a:	f000 fa17 	bl	800548c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800505e:	f000 fd31 	bl	8005ac4 <xTaskResumeAll>
 8005062:	e76c      	b.n	8004f3e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005066:	f000 fa11 	bl	800548c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800506a:	f000 fd2b 	bl	8005ac4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800506e:	2300      	movs	r3, #0
		}
	}
}
 8005070:	4618      	mov	r0, r3
 8005072:	3738      	adds	r7, #56	; 0x38
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	e000ed04 	.word	0xe000ed04

0800507c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b08e      	sub	sp, #56	; 0x38
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
 8005088:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800508e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10a      	bne.n	80050aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005098:	f383 8811 	msr	BASEPRI, r3
 800509c:	f3bf 8f6f 	isb	sy
 80050a0:	f3bf 8f4f 	dsb	sy
 80050a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80050a6:	bf00      	nop
 80050a8:	e7fe      	b.n	80050a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d103      	bne.n	80050b8 <xQueueGenericSendFromISR+0x3c>
 80050b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <xQueueGenericSendFromISR+0x40>
 80050b8:	2301      	movs	r3, #1
 80050ba:	e000      	b.n	80050be <xQueueGenericSendFromISR+0x42>
 80050bc:	2300      	movs	r3, #0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10a      	bne.n	80050d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80050c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c6:	f383 8811 	msr	BASEPRI, r3
 80050ca:	f3bf 8f6f 	isb	sy
 80050ce:	f3bf 8f4f 	dsb	sy
 80050d2:	623b      	str	r3, [r7, #32]
}
 80050d4:	bf00      	nop
 80050d6:	e7fe      	b.n	80050d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d103      	bne.n	80050e6 <xQueueGenericSendFromISR+0x6a>
 80050de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d101      	bne.n	80050ea <xQueueGenericSendFromISR+0x6e>
 80050e6:	2301      	movs	r3, #1
 80050e8:	e000      	b.n	80050ec <xQueueGenericSendFromISR+0x70>
 80050ea:	2300      	movs	r3, #0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10a      	bne.n	8005106 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80050f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f4:	f383 8811 	msr	BASEPRI, r3
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	61fb      	str	r3, [r7, #28]
}
 8005102:	bf00      	nop
 8005104:	e7fe      	b.n	8005104 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005106:	f001 ff0b 	bl	8006f20 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800510a:	f3ef 8211 	mrs	r2, BASEPRI
 800510e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005112:	f383 8811 	msr	BASEPRI, r3
 8005116:	f3bf 8f6f 	isb	sy
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	61ba      	str	r2, [r7, #24]
 8005120:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005122:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005124:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005128:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800512a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800512e:	429a      	cmp	r2, r3
 8005130:	d302      	bcc.n	8005138 <xQueueGenericSendFromISR+0xbc>
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b02      	cmp	r3, #2
 8005136:	d12c      	bne.n	8005192 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800513e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	68b9      	ldr	r1, [r7, #8]
 8005146:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005148:	f000 f910 	bl	800536c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800514c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005150:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005154:	d112      	bne.n	800517c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515a:	2b00      	cmp	r3, #0
 800515c:	d016      	beq.n	800518c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800515e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005160:	3324      	adds	r3, #36	; 0x24
 8005162:	4618      	mov	r0, r3
 8005164:	f000 fec4 	bl	8005ef0 <xTaskRemoveFromEventList>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00e      	beq.n	800518c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00b      	beq.n	800518c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	601a      	str	r2, [r3, #0]
 800517a:	e007      	b.n	800518c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800517c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005180:	3301      	adds	r3, #1
 8005182:	b2db      	uxtb	r3, r3
 8005184:	b25a      	sxtb	r2, r3
 8005186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800518c:	2301      	movs	r3, #1
 800518e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005190:	e001      	b.n	8005196 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005192:	2300      	movs	r3, #0
 8005194:	637b      	str	r3, [r7, #52]	; 0x34
 8005196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005198:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80051a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80051a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3738      	adds	r7, #56	; 0x38
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b08c      	sub	sp, #48	; 0x30
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80051b8:	2300      	movs	r3, #0
 80051ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80051c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10a      	bne.n	80051dc <xQueueReceive+0x30>
	__asm volatile
 80051c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ca:	f383 8811 	msr	BASEPRI, r3
 80051ce:	f3bf 8f6f 	isb	sy
 80051d2:	f3bf 8f4f 	dsb	sy
 80051d6:	623b      	str	r3, [r7, #32]
}
 80051d8:	bf00      	nop
 80051da:	e7fe      	b.n	80051da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d103      	bne.n	80051ea <xQueueReceive+0x3e>
 80051e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <xQueueReceive+0x42>
 80051ea:	2301      	movs	r3, #1
 80051ec:	e000      	b.n	80051f0 <xQueueReceive+0x44>
 80051ee:	2300      	movs	r3, #0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10a      	bne.n	800520a <xQueueReceive+0x5e>
	__asm volatile
 80051f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f8:	f383 8811 	msr	BASEPRI, r3
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	61fb      	str	r3, [r7, #28]
}
 8005206:	bf00      	nop
 8005208:	e7fe      	b.n	8005208 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800520a:	f001 f833 	bl	8006274 <xTaskGetSchedulerState>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d102      	bne.n	800521a <xQueueReceive+0x6e>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <xQueueReceive+0x72>
 800521a:	2301      	movs	r3, #1
 800521c:	e000      	b.n	8005220 <xQueueReceive+0x74>
 800521e:	2300      	movs	r3, #0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10a      	bne.n	800523a <xQueueReceive+0x8e>
	__asm volatile
 8005224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	61bb      	str	r3, [r7, #24]
}
 8005236:	bf00      	nop
 8005238:	e7fe      	b.n	8005238 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800523a:	f001 fdaf 	bl	8006d9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800523e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005242:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005246:	2b00      	cmp	r3, #0
 8005248:	d01f      	beq.n	800528a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800524a:	68b9      	ldr	r1, [r7, #8]
 800524c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800524e:	f000 f8f7 	bl	8005440 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	1e5a      	subs	r2, r3, #1
 8005256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005258:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800525a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00f      	beq.n	8005282 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005264:	3310      	adds	r3, #16
 8005266:	4618      	mov	r0, r3
 8005268:	f000 fe42 	bl	8005ef0 <xTaskRemoveFromEventList>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d007      	beq.n	8005282 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005272:	4b3d      	ldr	r3, [pc, #244]	; (8005368 <xQueueReceive+0x1bc>)
 8005274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005282:	f001 fdbb 	bl	8006dfc <vPortExitCritical>
				return pdPASS;
 8005286:	2301      	movs	r3, #1
 8005288:	e069      	b.n	800535e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d103      	bne.n	8005298 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005290:	f001 fdb4 	bl	8006dfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005294:	2300      	movs	r3, #0
 8005296:	e062      	b.n	800535e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529a:	2b00      	cmp	r3, #0
 800529c:	d106      	bne.n	80052ac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800529e:	f107 0310 	add.w	r3, r7, #16
 80052a2:	4618      	mov	r0, r3
 80052a4:	f000 fe88 	bl	8005fb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052a8:	2301      	movs	r3, #1
 80052aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052ac:	f001 fda6 	bl	8006dfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052b0:	f000 fbfa 	bl	8005aa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052b4:	f001 fd72 	bl	8006d9c <vPortEnterCritical>
 80052b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052be:	b25b      	sxtb	r3, r3
 80052c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052c4:	d103      	bne.n	80052ce <xQueueReceive+0x122>
 80052c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052d4:	b25b      	sxtb	r3, r3
 80052d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052da:	d103      	bne.n	80052e4 <xQueueReceive+0x138>
 80052dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052e4:	f001 fd8a 	bl	8006dfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052e8:	1d3a      	adds	r2, r7, #4
 80052ea:	f107 0310 	add.w	r3, r7, #16
 80052ee:	4611      	mov	r1, r2
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 fe77 	bl	8005fe4 <xTaskCheckForTimeOut>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d123      	bne.n	8005344 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052fe:	f000 f917 	bl	8005530 <prvIsQueueEmpty>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d017      	beq.n	8005338 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530a:	3324      	adds	r3, #36	; 0x24
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	4611      	mov	r1, r2
 8005310:	4618      	mov	r0, r3
 8005312:	f000 fd9d 	bl	8005e50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005316:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005318:	f000 f8b8 	bl	800548c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800531c:	f000 fbd2 	bl	8005ac4 <xTaskResumeAll>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d189      	bne.n	800523a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005326:	4b10      	ldr	r3, [pc, #64]	; (8005368 <xQueueReceive+0x1bc>)
 8005328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	e780      	b.n	800523a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005338:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800533a:	f000 f8a7 	bl	800548c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800533e:	f000 fbc1 	bl	8005ac4 <xTaskResumeAll>
 8005342:	e77a      	b.n	800523a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005346:	f000 f8a1 	bl	800548c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800534a:	f000 fbbb 	bl	8005ac4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800534e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005350:	f000 f8ee 	bl	8005530 <prvIsQueueEmpty>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	f43f af6f 	beq.w	800523a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800535c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800535e:	4618      	mov	r0, r3
 8005360:	3730      	adds	r7, #48	; 0x30
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	e000ed04 	.word	0xe000ed04

0800536c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005378:	2300      	movs	r3, #0
 800537a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005380:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10d      	bne.n	80053a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d14d      	bne.n	800542e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	4618      	mov	r0, r3
 8005398:	f000 ff8a 	bl	80062b0 <xTaskPriorityDisinherit>
 800539c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	605a      	str	r2, [r3, #4]
 80053a4:	e043      	b.n	800542e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d119      	bne.n	80053e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6898      	ldr	r0, [r3, #8]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b4:	461a      	mov	r2, r3
 80053b6:	68b9      	ldr	r1, [r7, #8]
 80053b8:	f002 fb02 	bl	80079c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c4:	441a      	add	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	689a      	ldr	r2, [r3, #8]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d32b      	bcc.n	800542e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	609a      	str	r2, [r3, #8]
 80053de:	e026      	b.n	800542e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	68d8      	ldr	r0, [r3, #12]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e8:	461a      	mov	r2, r3
 80053ea:	68b9      	ldr	r1, [r7, #8]
 80053ec:	f002 fae8 	bl	80079c0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	68da      	ldr	r2, [r3, #12]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f8:	425b      	negs	r3, r3
 80053fa:	441a      	add	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	68da      	ldr	r2, [r3, #12]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	429a      	cmp	r2, r3
 800540a:	d207      	bcs.n	800541c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005414:	425b      	negs	r3, r3
 8005416:	441a      	add	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b02      	cmp	r3, #2
 8005420:	d105      	bne.n	800542e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d002      	beq.n	800542e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	3b01      	subs	r3, #1
 800542c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	1c5a      	adds	r2, r3, #1
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005436:	697b      	ldr	r3, [r7, #20]
}
 8005438:	4618      	mov	r0, r3
 800543a:	3718      	adds	r7, #24
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544e:	2b00      	cmp	r3, #0
 8005450:	d018      	beq.n	8005484 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68da      	ldr	r2, [r3, #12]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	441a      	add	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68da      	ldr	r2, [r3, #12]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	429a      	cmp	r2, r3
 800546a:	d303      	bcc.n	8005474 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68d9      	ldr	r1, [r3, #12]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547c:	461a      	mov	r2, r3
 800547e:	6838      	ldr	r0, [r7, #0]
 8005480:	f002 fa9e 	bl	80079c0 <memcpy>
	}
}
 8005484:	bf00      	nop
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005494:	f001 fc82 	bl	8006d9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800549e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054a0:	e011      	b.n	80054c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d012      	beq.n	80054d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	3324      	adds	r3, #36	; 0x24
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 fd1e 	bl	8005ef0 <xTaskRemoveFromEventList>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80054ba:	f000 fdf5 	bl	80060a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80054be:	7bfb      	ldrb	r3, [r7, #15]
 80054c0:	3b01      	subs	r3, #1
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	dce9      	bgt.n	80054a2 <prvUnlockQueue+0x16>
 80054ce:	e000      	b.n	80054d2 <prvUnlockQueue+0x46>
					break;
 80054d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	22ff      	movs	r2, #255	; 0xff
 80054d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80054da:	f001 fc8f 	bl	8006dfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80054de:	f001 fc5d 	bl	8006d9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80054ea:	e011      	b.n	8005510 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d012      	beq.n	800551a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	3310      	adds	r3, #16
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 fcf9 	bl	8005ef0 <xTaskRemoveFromEventList>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d001      	beq.n	8005508 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005504:	f000 fdd0 	bl	80060a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005508:	7bbb      	ldrb	r3, [r7, #14]
 800550a:	3b01      	subs	r3, #1
 800550c:	b2db      	uxtb	r3, r3
 800550e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005510:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005514:	2b00      	cmp	r3, #0
 8005516:	dce9      	bgt.n	80054ec <prvUnlockQueue+0x60>
 8005518:	e000      	b.n	800551c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800551a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	22ff      	movs	r2, #255	; 0xff
 8005520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005524:	f001 fc6a 	bl	8006dfc <vPortExitCritical>
}
 8005528:	bf00      	nop
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005538:	f001 fc30 	bl	8006d9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005540:	2b00      	cmp	r3, #0
 8005542:	d102      	bne.n	800554a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005544:	2301      	movs	r3, #1
 8005546:	60fb      	str	r3, [r7, #12]
 8005548:	e001      	b.n	800554e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800554a:	2300      	movs	r3, #0
 800554c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800554e:	f001 fc55 	bl	8006dfc <vPortExitCritical>

	return xReturn;
 8005552:	68fb      	ldr	r3, [r7, #12]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005564:	f001 fc1a 	bl	8006d9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005570:	429a      	cmp	r2, r3
 8005572:	d102      	bne.n	800557a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005574:	2301      	movs	r3, #1
 8005576:	60fb      	str	r3, [r7, #12]
 8005578:	e001      	b.n	800557e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800557a:	2300      	movs	r3, #0
 800557c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800557e:	f001 fc3d 	bl	8006dfc <vPortExitCritical>

	return xReturn;
 8005582:	68fb      	ldr	r3, [r7, #12]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005596:	2300      	movs	r3, #0
 8005598:	60fb      	str	r3, [r7, #12]
 800559a:	e014      	b.n	80055c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800559c:	4a0e      	ldr	r2, [pc, #56]	; (80055d8 <vQueueAddToRegistry+0x4c>)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10b      	bne.n	80055c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80055a8:	490b      	ldr	r1, [pc, #44]	; (80055d8 <vQueueAddToRegistry+0x4c>)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80055b2:	4a09      	ldr	r2, [pc, #36]	; (80055d8 <vQueueAddToRegistry+0x4c>)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	00db      	lsls	r3, r3, #3
 80055b8:	4413      	add	r3, r2
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80055be:	e006      	b.n	80055ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	3301      	adds	r3, #1
 80055c4:	60fb      	str	r3, [r7, #12]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2b07      	cmp	r3, #7
 80055ca:	d9e7      	bls.n	800559c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80055cc:	bf00      	nop
 80055ce:	bf00      	nop
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bc80      	pop	{r7}
 80055d6:	4770      	bx	lr
 80055d8:	20000d3c 	.word	0x20000d3c

080055dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80055ec:	f001 fbd6 	bl	8006d9c <vPortEnterCritical>
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055f6:	b25b      	sxtb	r3, r3
 80055f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055fc:	d103      	bne.n	8005606 <vQueueWaitForMessageRestricted+0x2a>
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800560c:	b25b      	sxtb	r3, r3
 800560e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005612:	d103      	bne.n	800561c <vQueueWaitForMessageRestricted+0x40>
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800561c:	f001 fbee 	bl	8006dfc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005624:	2b00      	cmp	r3, #0
 8005626:	d106      	bne.n	8005636 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	3324      	adds	r3, #36	; 0x24
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	68b9      	ldr	r1, [r7, #8]
 8005630:	4618      	mov	r0, r3
 8005632:	f000 fc31 	bl	8005e98 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005636:	6978      	ldr	r0, [r7, #20]
 8005638:	f7ff ff28 	bl	800548c <prvUnlockQueue>
	}
 800563c:	bf00      	nop
 800563e:	3718      	adds	r7, #24
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005644:	b580      	push	{r7, lr}
 8005646:	b08e      	sub	sp, #56	; 0x38
 8005648:	af04      	add	r7, sp, #16
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
 8005650:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10a      	bne.n	800566e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565c:	f383 8811 	msr	BASEPRI, r3
 8005660:	f3bf 8f6f 	isb	sy
 8005664:	f3bf 8f4f 	dsb	sy
 8005668:	623b      	str	r3, [r7, #32]
}
 800566a:	bf00      	nop
 800566c:	e7fe      	b.n	800566c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800566e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10a      	bne.n	800568a <xTaskCreateStatic+0x46>
	__asm volatile
 8005674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005678:	f383 8811 	msr	BASEPRI, r3
 800567c:	f3bf 8f6f 	isb	sy
 8005680:	f3bf 8f4f 	dsb	sy
 8005684:	61fb      	str	r3, [r7, #28]
}
 8005686:	bf00      	nop
 8005688:	e7fe      	b.n	8005688 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800568a:	235c      	movs	r3, #92	; 0x5c
 800568c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	2b5c      	cmp	r3, #92	; 0x5c
 8005692:	d00a      	beq.n	80056aa <xTaskCreateStatic+0x66>
	__asm volatile
 8005694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005698:	f383 8811 	msr	BASEPRI, r3
 800569c:	f3bf 8f6f 	isb	sy
 80056a0:	f3bf 8f4f 	dsb	sy
 80056a4:	61bb      	str	r3, [r7, #24]
}
 80056a6:	bf00      	nop
 80056a8:	e7fe      	b.n	80056a8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80056aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d01e      	beq.n	80056ee <xTaskCreateStatic+0xaa>
 80056b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d01b      	beq.n	80056ee <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056be:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80056c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c2:	2202      	movs	r2, #2
 80056c4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80056c8:	2300      	movs	r3, #0
 80056ca:	9303      	str	r3, [sp, #12]
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	9302      	str	r3, [sp, #8]
 80056d0:	f107 0314 	add.w	r3, r7, #20
 80056d4:	9301      	str	r3, [sp, #4]
 80056d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	68b9      	ldr	r1, [r7, #8]
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f000 f850 	bl	8005786 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056e8:	f000 f8d4 	bl	8005894 <prvAddNewTaskToReadyList>
 80056ec:	e001      	b.n	80056f2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80056ee:	2300      	movs	r3, #0
 80056f0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80056f2:	697b      	ldr	r3, [r7, #20]
	}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3728      	adds	r7, #40	; 0x28
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b08c      	sub	sp, #48	; 0x30
 8005700:	af04      	add	r7, sp, #16
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	603b      	str	r3, [r7, #0]
 8005708:	4613      	mov	r3, r2
 800570a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800570c:	88fb      	ldrh	r3, [r7, #6]
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4618      	mov	r0, r3
 8005712:	f001 fc43 	bl	8006f9c <pvPortMalloc>
 8005716:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00e      	beq.n	800573c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800571e:	205c      	movs	r0, #92	; 0x5c
 8005720:	f001 fc3c 	bl	8006f9c <pvPortMalloc>
 8005724:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d003      	beq.n	8005734 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	631a      	str	r2, [r3, #48]	; 0x30
 8005732:	e005      	b.n	8005740 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005734:	6978      	ldr	r0, [r7, #20]
 8005736:	f001 fcf5 	bl	8007124 <vPortFree>
 800573a:	e001      	b.n	8005740 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800573c:	2300      	movs	r3, #0
 800573e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d017      	beq.n	8005776 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800574e:	88fa      	ldrh	r2, [r7, #6]
 8005750:	2300      	movs	r3, #0
 8005752:	9303      	str	r3, [sp, #12]
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	9302      	str	r3, [sp, #8]
 8005758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800575a:	9301      	str	r3, [sp, #4]
 800575c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	68b9      	ldr	r1, [r7, #8]
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f000 f80e 	bl	8005786 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800576a:	69f8      	ldr	r0, [r7, #28]
 800576c:	f000 f892 	bl	8005894 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005770:	2301      	movs	r3, #1
 8005772:	61bb      	str	r3, [r7, #24]
 8005774:	e002      	b.n	800577c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800577a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800577c:	69bb      	ldr	r3, [r7, #24]
	}
 800577e:	4618      	mov	r0, r3
 8005780:	3720      	adds	r7, #32
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b088      	sub	sp, #32
 800578a:	af00      	add	r7, sp, #0
 800578c:	60f8      	str	r0, [r7, #12]
 800578e:	60b9      	str	r1, [r7, #8]
 8005790:	607a      	str	r2, [r7, #4]
 8005792:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005796:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	461a      	mov	r2, r3
 800579e:	21a5      	movs	r1, #165	; 0xa5
 80057a0:	f002 f886 	bl	80078b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80057a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80057ae:	3b01      	subs	r3, #1
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4413      	add	r3, r2
 80057b4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	f023 0307 	bic.w	r3, r3, #7
 80057bc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	f003 0307 	and.w	r3, r3, #7
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00a      	beq.n	80057de <prvInitialiseNewTask+0x58>
	__asm volatile
 80057c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057cc:	f383 8811 	msr	BASEPRI, r3
 80057d0:	f3bf 8f6f 	isb	sy
 80057d4:	f3bf 8f4f 	dsb	sy
 80057d8:	617b      	str	r3, [r7, #20]
}
 80057da:	bf00      	nop
 80057dc:	e7fe      	b.n	80057dc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057de:	2300      	movs	r3, #0
 80057e0:	61fb      	str	r3, [r7, #28]
 80057e2:	e012      	b.n	800580a <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	4413      	add	r3, r2
 80057ea:	7819      	ldrb	r1, [r3, #0]
 80057ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	4413      	add	r3, r2
 80057f2:	3334      	adds	r3, #52	; 0x34
 80057f4:	460a      	mov	r2, r1
 80057f6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	4413      	add	r3, r2
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d006      	beq.n	8005812 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	3301      	adds	r3, #1
 8005808:	61fb      	str	r3, [r7, #28]
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	2b0f      	cmp	r3, #15
 800580e:	d9e9      	bls.n	80057e4 <prvInitialiseNewTask+0x5e>
 8005810:	e000      	b.n	8005814 <prvInitialiseNewTask+0x8e>
		{
			break;
 8005812:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005816:	2200      	movs	r2, #0
 8005818:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800581c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581e:	2b37      	cmp	r3, #55	; 0x37
 8005820:	d901      	bls.n	8005826 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005822:	2337      	movs	r3, #55	; 0x37
 8005824:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005828:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800582a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800582c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005830:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005834:	2200      	movs	r2, #0
 8005836:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583a:	3304      	adds	r3, #4
 800583c:	4618      	mov	r0, r3
 800583e:	f7ff f98c 	bl	8004b5a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005844:	3318      	adds	r3, #24
 8005846:	4618      	mov	r0, r3
 8005848:	f7ff f987 	bl	8004b5a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800584c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005850:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005854:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800585c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005860:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005864:	2200      	movs	r2, #0
 8005866:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586a:	2200      	movs	r2, #0
 800586c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005870:	683a      	ldr	r2, [r7, #0]
 8005872:	68f9      	ldr	r1, [r7, #12]
 8005874:	69b8      	ldr	r0, [r7, #24]
 8005876:	f001 f99f 	bl	8006bb8 <pxPortInitialiseStack>
 800587a:	4602      	mov	r2, r0
 800587c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005882:	2b00      	cmp	r3, #0
 8005884:	d002      	beq.n	800588c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800588a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800588c:	bf00      	nop
 800588e:	3720      	adds	r7, #32
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800589c:	f001 fa7e 	bl	8006d9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80058a0:	4b2d      	ldr	r3, [pc, #180]	; (8005958 <prvAddNewTaskToReadyList+0xc4>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	3301      	adds	r3, #1
 80058a6:	4a2c      	ldr	r2, [pc, #176]	; (8005958 <prvAddNewTaskToReadyList+0xc4>)
 80058a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80058aa:	4b2c      	ldr	r3, [pc, #176]	; (800595c <prvAddNewTaskToReadyList+0xc8>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d109      	bne.n	80058c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80058b2:	4a2a      	ldr	r2, [pc, #168]	; (800595c <prvAddNewTaskToReadyList+0xc8>)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80058b8:	4b27      	ldr	r3, [pc, #156]	; (8005958 <prvAddNewTaskToReadyList+0xc4>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d110      	bne.n	80058e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80058c0:	f000 fc16 	bl	80060f0 <prvInitialiseTaskLists>
 80058c4:	e00d      	b.n	80058e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80058c6:	4b26      	ldr	r3, [pc, #152]	; (8005960 <prvAddNewTaskToReadyList+0xcc>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d109      	bne.n	80058e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80058ce:	4b23      	ldr	r3, [pc, #140]	; (800595c <prvAddNewTaskToReadyList+0xc8>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d8:	429a      	cmp	r2, r3
 80058da:	d802      	bhi.n	80058e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80058dc:	4a1f      	ldr	r2, [pc, #124]	; (800595c <prvAddNewTaskToReadyList+0xc8>)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80058e2:	4b20      	ldr	r3, [pc, #128]	; (8005964 <prvAddNewTaskToReadyList+0xd0>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	3301      	adds	r3, #1
 80058e8:	4a1e      	ldr	r2, [pc, #120]	; (8005964 <prvAddNewTaskToReadyList+0xd0>)
 80058ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80058ec:	4b1d      	ldr	r3, [pc, #116]	; (8005964 <prvAddNewTaskToReadyList+0xd0>)
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f8:	4b1b      	ldr	r3, [pc, #108]	; (8005968 <prvAddNewTaskToReadyList+0xd4>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d903      	bls.n	8005908 <prvAddNewTaskToReadyList+0x74>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005904:	4a18      	ldr	r2, [pc, #96]	; (8005968 <prvAddNewTaskToReadyList+0xd4>)
 8005906:	6013      	str	r3, [r2, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800590c:	4613      	mov	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4a15      	ldr	r2, [pc, #84]	; (800596c <prvAddNewTaskToReadyList+0xd8>)
 8005916:	441a      	add	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	3304      	adds	r3, #4
 800591c:	4619      	mov	r1, r3
 800591e:	4610      	mov	r0, r2
 8005920:	f7ff f927 	bl	8004b72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005924:	f001 fa6a 	bl	8006dfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005928:	4b0d      	ldr	r3, [pc, #52]	; (8005960 <prvAddNewTaskToReadyList+0xcc>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00e      	beq.n	800594e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005930:	4b0a      	ldr	r3, [pc, #40]	; (800595c <prvAddNewTaskToReadyList+0xc8>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593a:	429a      	cmp	r2, r3
 800593c:	d207      	bcs.n	800594e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800593e:	4b0c      	ldr	r3, [pc, #48]	; (8005970 <prvAddNewTaskToReadyList+0xdc>)
 8005940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005944:	601a      	str	r2, [r3, #0]
 8005946:	f3bf 8f4f 	dsb	sy
 800594a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800594e:	bf00      	nop
 8005950:	3708      	adds	r7, #8
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	20001250 	.word	0x20001250
 800595c:	20000d7c 	.word	0x20000d7c
 8005960:	2000125c 	.word	0x2000125c
 8005964:	2000126c 	.word	0x2000126c
 8005968:	20001258 	.word	0x20001258
 800596c:	20000d80 	.word	0x20000d80
 8005970:	e000ed04 	.word	0xe000ed04

08005974 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800597c:	2300      	movs	r3, #0
 800597e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d017      	beq.n	80059b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005986:	4b13      	ldr	r3, [pc, #76]	; (80059d4 <vTaskDelay+0x60>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00a      	beq.n	80059a4 <vTaskDelay+0x30>
	__asm volatile
 800598e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005992:	f383 8811 	msr	BASEPRI, r3
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	60bb      	str	r3, [r7, #8]
}
 80059a0:	bf00      	nop
 80059a2:	e7fe      	b.n	80059a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80059a4:	f000 f880 	bl	8005aa8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80059a8:	2100      	movs	r1, #0
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fcee 	bl	800638c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80059b0:	f000 f888 	bl	8005ac4 <xTaskResumeAll>
 80059b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d107      	bne.n	80059cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80059bc:	4b06      	ldr	r3, [pc, #24]	; (80059d8 <vTaskDelay+0x64>)
 80059be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	f3bf 8f4f 	dsb	sy
 80059c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80059cc:	bf00      	nop
 80059ce:	3710      	adds	r7, #16
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	20001278 	.word	0x20001278
 80059d8:	e000ed04 	.word	0xe000ed04

080059dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b08a      	sub	sp, #40	; 0x28
 80059e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80059e2:	2300      	movs	r3, #0
 80059e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80059e6:	2300      	movs	r3, #0
 80059e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80059ea:	463a      	mov	r2, r7
 80059ec:	1d39      	adds	r1, r7, #4
 80059ee:	f107 0308 	add.w	r3, r7, #8
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7ff f860 	bl	8004ab8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80059f8:	6839      	ldr	r1, [r7, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	9202      	str	r2, [sp, #8]
 8005a00:	9301      	str	r3, [sp, #4]
 8005a02:	2300      	movs	r3, #0
 8005a04:	9300      	str	r3, [sp, #0]
 8005a06:	2300      	movs	r3, #0
 8005a08:	460a      	mov	r2, r1
 8005a0a:	4921      	ldr	r1, [pc, #132]	; (8005a90 <vTaskStartScheduler+0xb4>)
 8005a0c:	4821      	ldr	r0, [pc, #132]	; (8005a94 <vTaskStartScheduler+0xb8>)
 8005a0e:	f7ff fe19 	bl	8005644 <xTaskCreateStatic>
 8005a12:	4603      	mov	r3, r0
 8005a14:	4a20      	ldr	r2, [pc, #128]	; (8005a98 <vTaskStartScheduler+0xbc>)
 8005a16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a18:	4b1f      	ldr	r3, [pc, #124]	; (8005a98 <vTaskStartScheduler+0xbc>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d002      	beq.n	8005a26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a20:	2301      	movs	r3, #1
 8005a22:	617b      	str	r3, [r7, #20]
 8005a24:	e001      	b.n	8005a2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a26:	2300      	movs	r3, #0
 8005a28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d102      	bne.n	8005a36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005a30:	f000 fd00 	bl	8006434 <xTimerCreateTimerTask>
 8005a34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d116      	bne.n	8005a6a <vTaskStartScheduler+0x8e>
	__asm volatile
 8005a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a40:	f383 8811 	msr	BASEPRI, r3
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	613b      	str	r3, [r7, #16]
}
 8005a4e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005a50:	4b12      	ldr	r3, [pc, #72]	; (8005a9c <vTaskStartScheduler+0xc0>)
 8005a52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a56:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005a58:	4b11      	ldr	r3, [pc, #68]	; (8005aa0 <vTaskStartScheduler+0xc4>)
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005a5e:	4b11      	ldr	r3, [pc, #68]	; (8005aa4 <vTaskStartScheduler+0xc8>)
 8005a60:	2200      	movs	r2, #0
 8005a62:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005a64:	f001 f928 	bl	8006cb8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005a68:	e00e      	b.n	8005a88 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a70:	d10a      	bne.n	8005a88 <vTaskStartScheduler+0xac>
	__asm volatile
 8005a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a76:	f383 8811 	msr	BASEPRI, r3
 8005a7a:	f3bf 8f6f 	isb	sy
 8005a7e:	f3bf 8f4f 	dsb	sy
 8005a82:	60fb      	str	r3, [r7, #12]
}
 8005a84:	bf00      	nop
 8005a86:	e7fe      	b.n	8005a86 <vTaskStartScheduler+0xaa>
}
 8005a88:	bf00      	nop
 8005a8a:	3718      	adds	r7, #24
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	08007b08 	.word	0x08007b08
 8005a94:	080060c1 	.word	0x080060c1
 8005a98:	20001274 	.word	0x20001274
 8005a9c:	20001270 	.word	0x20001270
 8005aa0:	2000125c 	.word	0x2000125c
 8005aa4:	20001254 	.word	0x20001254

08005aa8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005aac:	4b04      	ldr	r3, [pc, #16]	; (8005ac0 <vTaskSuspendAll+0x18>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	4a03      	ldr	r2, [pc, #12]	; (8005ac0 <vTaskSuspendAll+0x18>)
 8005ab4:	6013      	str	r3, [r2, #0]
}
 8005ab6:	bf00      	nop
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bc80      	pop	{r7}
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	20001278 	.word	0x20001278

08005ac4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005aca:	2300      	movs	r3, #0
 8005acc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005ad2:	4b42      	ldr	r3, [pc, #264]	; (8005bdc <xTaskResumeAll+0x118>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10a      	bne.n	8005af0 <xTaskResumeAll+0x2c>
	__asm volatile
 8005ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ade:	f383 8811 	msr	BASEPRI, r3
 8005ae2:	f3bf 8f6f 	isb	sy
 8005ae6:	f3bf 8f4f 	dsb	sy
 8005aea:	603b      	str	r3, [r7, #0]
}
 8005aec:	bf00      	nop
 8005aee:	e7fe      	b.n	8005aee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005af0:	f001 f954 	bl	8006d9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005af4:	4b39      	ldr	r3, [pc, #228]	; (8005bdc <xTaskResumeAll+0x118>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	3b01      	subs	r3, #1
 8005afa:	4a38      	ldr	r2, [pc, #224]	; (8005bdc <xTaskResumeAll+0x118>)
 8005afc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005afe:	4b37      	ldr	r3, [pc, #220]	; (8005bdc <xTaskResumeAll+0x118>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d162      	bne.n	8005bcc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b06:	4b36      	ldr	r3, [pc, #216]	; (8005be0 <xTaskResumeAll+0x11c>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d05e      	beq.n	8005bcc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b0e:	e02f      	b.n	8005b70 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005b10:	4b34      	ldr	r3, [pc, #208]	; (8005be4 <xTaskResumeAll+0x120>)
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	3318      	adds	r3, #24
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7ff f883 	bl	8004c28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	3304      	adds	r3, #4
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7ff f87e 	bl	8004c28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b30:	4b2d      	ldr	r3, [pc, #180]	; (8005be8 <xTaskResumeAll+0x124>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d903      	bls.n	8005b40 <xTaskResumeAll+0x7c>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3c:	4a2a      	ldr	r2, [pc, #168]	; (8005be8 <xTaskResumeAll+0x124>)
 8005b3e:	6013      	str	r3, [r2, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b44:	4613      	mov	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4413      	add	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4a27      	ldr	r2, [pc, #156]	; (8005bec <xTaskResumeAll+0x128>)
 8005b4e:	441a      	add	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	3304      	adds	r3, #4
 8005b54:	4619      	mov	r1, r3
 8005b56:	4610      	mov	r0, r2
 8005b58:	f7ff f80b 	bl	8004b72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b60:	4b23      	ldr	r3, [pc, #140]	; (8005bf0 <xTaskResumeAll+0x12c>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d302      	bcc.n	8005b70 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005b6a:	4b22      	ldr	r3, [pc, #136]	; (8005bf4 <xTaskResumeAll+0x130>)
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b70:	4b1c      	ldr	r3, [pc, #112]	; (8005be4 <xTaskResumeAll+0x120>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1cb      	bne.n	8005b10 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d001      	beq.n	8005b82 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005b7e:	f000 fb55 	bl	800622c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005b82:	4b1d      	ldr	r3, [pc, #116]	; (8005bf8 <xTaskResumeAll+0x134>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d010      	beq.n	8005bb0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005b8e:	f000 f845 	bl	8005c1c <xTaskIncrementTick>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d002      	beq.n	8005b9e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005b98:	4b16      	ldr	r3, [pc, #88]	; (8005bf4 <xTaskResumeAll+0x130>)
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1f1      	bne.n	8005b8e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005baa:	4b13      	ldr	r3, [pc, #76]	; (8005bf8 <xTaskResumeAll+0x134>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005bb0:	4b10      	ldr	r3, [pc, #64]	; (8005bf4 <xTaskResumeAll+0x130>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d009      	beq.n	8005bcc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005bbc:	4b0f      	ldr	r3, [pc, #60]	; (8005bfc <xTaskResumeAll+0x138>)
 8005bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	f3bf 8f4f 	dsb	sy
 8005bc8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005bcc:	f001 f916 	bl	8006dfc <vPortExitCritical>

	return xAlreadyYielded;
 8005bd0:	68bb      	ldr	r3, [r7, #8]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	20001278 	.word	0x20001278
 8005be0:	20001250 	.word	0x20001250
 8005be4:	20001210 	.word	0x20001210
 8005be8:	20001258 	.word	0x20001258
 8005bec:	20000d80 	.word	0x20000d80
 8005bf0:	20000d7c 	.word	0x20000d7c
 8005bf4:	20001264 	.word	0x20001264
 8005bf8:	20001260 	.word	0x20001260
 8005bfc:	e000ed04 	.word	0xe000ed04

08005c00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005c06:	4b04      	ldr	r3, [pc, #16]	; (8005c18 <xTaskGetTickCount+0x18>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005c0c:	687b      	ldr	r3, [r7, #4]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bc80      	pop	{r7}
 8005c16:	4770      	bx	lr
 8005c18:	20001254 	.word	0x20001254

08005c1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b086      	sub	sp, #24
 8005c20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c22:	2300      	movs	r3, #0
 8005c24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c26:	4b51      	ldr	r3, [pc, #324]	; (8005d6c <xTaskIncrementTick+0x150>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f040 808e 	bne.w	8005d4c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c30:	4b4f      	ldr	r3, [pc, #316]	; (8005d70 <xTaskIncrementTick+0x154>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	3301      	adds	r3, #1
 8005c36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c38:	4a4d      	ldr	r2, [pc, #308]	; (8005d70 <xTaskIncrementTick+0x154>)
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d120      	bne.n	8005c86 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c44:	4b4b      	ldr	r3, [pc, #300]	; (8005d74 <xTaskIncrementTick+0x158>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00a      	beq.n	8005c64 <xTaskIncrementTick+0x48>
	__asm volatile
 8005c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	603b      	str	r3, [r7, #0]
}
 8005c60:	bf00      	nop
 8005c62:	e7fe      	b.n	8005c62 <xTaskIncrementTick+0x46>
 8005c64:	4b43      	ldr	r3, [pc, #268]	; (8005d74 <xTaskIncrementTick+0x158>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	60fb      	str	r3, [r7, #12]
 8005c6a:	4b43      	ldr	r3, [pc, #268]	; (8005d78 <xTaskIncrementTick+0x15c>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a41      	ldr	r2, [pc, #260]	; (8005d74 <xTaskIncrementTick+0x158>)
 8005c70:	6013      	str	r3, [r2, #0]
 8005c72:	4a41      	ldr	r2, [pc, #260]	; (8005d78 <xTaskIncrementTick+0x15c>)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6013      	str	r3, [r2, #0]
 8005c78:	4b40      	ldr	r3, [pc, #256]	; (8005d7c <xTaskIncrementTick+0x160>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	4a3f      	ldr	r2, [pc, #252]	; (8005d7c <xTaskIncrementTick+0x160>)
 8005c80:	6013      	str	r3, [r2, #0]
 8005c82:	f000 fad3 	bl	800622c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005c86:	4b3e      	ldr	r3, [pc, #248]	; (8005d80 <xTaskIncrementTick+0x164>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d34e      	bcc.n	8005d2e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c90:	4b38      	ldr	r3, [pc, #224]	; (8005d74 <xTaskIncrementTick+0x158>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <xTaskIncrementTick+0x82>
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e000      	b.n	8005ca0 <xTaskIncrementTick+0x84>
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d004      	beq.n	8005cae <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ca4:	4b36      	ldr	r3, [pc, #216]	; (8005d80 <xTaskIncrementTick+0x164>)
 8005ca6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005caa:	601a      	str	r2, [r3, #0]
					break;
 8005cac:	e03f      	b.n	8005d2e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005cae:	4b31      	ldr	r3, [pc, #196]	; (8005d74 <xTaskIncrementTick+0x158>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d203      	bcs.n	8005cce <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005cc6:	4a2e      	ldr	r2, [pc, #184]	; (8005d80 <xTaskIncrementTick+0x164>)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6013      	str	r3, [r2, #0]
						break;
 8005ccc:	e02f      	b.n	8005d2e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	3304      	adds	r3, #4
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7fe ffa8 	bl	8004c28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d004      	beq.n	8005cea <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	3318      	adds	r3, #24
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f7fe ff9f 	bl	8004c28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cee:	4b25      	ldr	r3, [pc, #148]	; (8005d84 <xTaskIncrementTick+0x168>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d903      	bls.n	8005cfe <xTaskIncrementTick+0xe2>
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfa:	4a22      	ldr	r2, [pc, #136]	; (8005d84 <xTaskIncrementTick+0x168>)
 8005cfc:	6013      	str	r3, [r2, #0]
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d02:	4613      	mov	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4413      	add	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	4a1f      	ldr	r2, [pc, #124]	; (8005d88 <xTaskIncrementTick+0x16c>)
 8005d0c:	441a      	add	r2, r3
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	3304      	adds	r3, #4
 8005d12:	4619      	mov	r1, r3
 8005d14:	4610      	mov	r0, r2
 8005d16:	f7fe ff2c 	bl	8004b72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d1e:	4b1b      	ldr	r3, [pc, #108]	; (8005d8c <xTaskIncrementTick+0x170>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d3b3      	bcc.n	8005c90 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d2c:	e7b0      	b.n	8005c90 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d2e:	4b17      	ldr	r3, [pc, #92]	; (8005d8c <xTaskIncrementTick+0x170>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d34:	4914      	ldr	r1, [pc, #80]	; (8005d88 <xTaskIncrementTick+0x16c>)
 8005d36:	4613      	mov	r3, r2
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	4413      	add	r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	440b      	add	r3, r1
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d907      	bls.n	8005d56 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005d46:	2301      	movs	r3, #1
 8005d48:	617b      	str	r3, [r7, #20]
 8005d4a:	e004      	b.n	8005d56 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005d4c:	4b10      	ldr	r3, [pc, #64]	; (8005d90 <xTaskIncrementTick+0x174>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	3301      	adds	r3, #1
 8005d52:	4a0f      	ldr	r2, [pc, #60]	; (8005d90 <xTaskIncrementTick+0x174>)
 8005d54:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005d56:	4b0f      	ldr	r3, [pc, #60]	; (8005d94 <xTaskIncrementTick+0x178>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005d62:	697b      	ldr	r3, [r7, #20]
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3718      	adds	r7, #24
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	20001278 	.word	0x20001278
 8005d70:	20001254 	.word	0x20001254
 8005d74:	20001208 	.word	0x20001208
 8005d78:	2000120c 	.word	0x2000120c
 8005d7c:	20001268 	.word	0x20001268
 8005d80:	20001270 	.word	0x20001270
 8005d84:	20001258 	.word	0x20001258
 8005d88:	20000d80 	.word	0x20000d80
 8005d8c:	20000d7c 	.word	0x20000d7c
 8005d90:	20001260 	.word	0x20001260
 8005d94:	20001264 	.word	0x20001264

08005d98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d9e:	4b27      	ldr	r3, [pc, #156]	; (8005e3c <vTaskSwitchContext+0xa4>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005da6:	4b26      	ldr	r3, [pc, #152]	; (8005e40 <vTaskSwitchContext+0xa8>)
 8005da8:	2201      	movs	r2, #1
 8005daa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005dac:	e041      	b.n	8005e32 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005dae:	4b24      	ldr	r3, [pc, #144]	; (8005e40 <vTaskSwitchContext+0xa8>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005db4:	4b23      	ldr	r3, [pc, #140]	; (8005e44 <vTaskSwitchContext+0xac>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	60fb      	str	r3, [r7, #12]
 8005dba:	e010      	b.n	8005dde <vTaskSwitchContext+0x46>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10a      	bne.n	8005dd8 <vTaskSwitchContext+0x40>
	__asm volatile
 8005dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc6:	f383 8811 	msr	BASEPRI, r3
 8005dca:	f3bf 8f6f 	isb	sy
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	607b      	str	r3, [r7, #4]
}
 8005dd4:	bf00      	nop
 8005dd6:	e7fe      	b.n	8005dd6 <vTaskSwitchContext+0x3e>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	60fb      	str	r3, [r7, #12]
 8005dde:	491a      	ldr	r1, [pc, #104]	; (8005e48 <vTaskSwitchContext+0xb0>)
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	4613      	mov	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	440b      	add	r3, r1
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d0e4      	beq.n	8005dbc <vTaskSwitchContext+0x24>
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	4613      	mov	r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4a12      	ldr	r2, [pc, #72]	; (8005e48 <vTaskSwitchContext+0xb0>)
 8005dfe:	4413      	add	r3, r2
 8005e00:	60bb      	str	r3, [r7, #8]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	605a      	str	r2, [r3, #4]
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	3308      	adds	r3, #8
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d104      	bne.n	8005e22 <vTaskSwitchContext+0x8a>
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	605a      	str	r2, [r3, #4]
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	4a08      	ldr	r2, [pc, #32]	; (8005e4c <vTaskSwitchContext+0xb4>)
 8005e2a:	6013      	str	r3, [r2, #0]
 8005e2c:	4a05      	ldr	r2, [pc, #20]	; (8005e44 <vTaskSwitchContext+0xac>)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6013      	str	r3, [r2, #0]
}
 8005e32:	bf00      	nop
 8005e34:	3714      	adds	r7, #20
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bc80      	pop	{r7}
 8005e3a:	4770      	bx	lr
 8005e3c:	20001278 	.word	0x20001278
 8005e40:	20001264 	.word	0x20001264
 8005e44:	20001258 	.word	0x20001258
 8005e48:	20000d80 	.word	0x20000d80
 8005e4c:	20000d7c 	.word	0x20000d7c

08005e50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10a      	bne.n	8005e76 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e64:	f383 8811 	msr	BASEPRI, r3
 8005e68:	f3bf 8f6f 	isb	sy
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	60fb      	str	r3, [r7, #12]
}
 8005e72:	bf00      	nop
 8005e74:	e7fe      	b.n	8005e74 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e76:	4b07      	ldr	r3, [pc, #28]	; (8005e94 <vTaskPlaceOnEventList+0x44>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	3318      	adds	r3, #24
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f7fe fe9a 	bl	8004bb8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e84:	2101      	movs	r1, #1
 8005e86:	6838      	ldr	r0, [r7, #0]
 8005e88:	f000 fa80 	bl	800638c <prvAddCurrentTaskToDelayedList>
}
 8005e8c:	bf00      	nop
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	20000d7c 	.word	0x20000d7c

08005e98 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b086      	sub	sp, #24
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d10a      	bne.n	8005ec0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eae:	f383 8811 	msr	BASEPRI, r3
 8005eb2:	f3bf 8f6f 	isb	sy
 8005eb6:	f3bf 8f4f 	dsb	sy
 8005eba:	617b      	str	r3, [r7, #20]
}
 8005ebc:	bf00      	nop
 8005ebe:	e7fe      	b.n	8005ebe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ec0:	4b0a      	ldr	r3, [pc, #40]	; (8005eec <vTaskPlaceOnEventListRestricted+0x54>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	3318      	adds	r3, #24
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f7fe fe52 	bl	8004b72 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d002      	beq.n	8005eda <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005ed4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ed8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005eda:	6879      	ldr	r1, [r7, #4]
 8005edc:	68b8      	ldr	r0, [r7, #8]
 8005ede:	f000 fa55 	bl	800638c <prvAddCurrentTaskToDelayedList>
	}
 8005ee2:	bf00      	nop
 8005ee4:	3718      	adds	r7, #24
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	20000d7c 	.word	0x20000d7c

08005ef0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10a      	bne.n	8005f1c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0a:	f383 8811 	msr	BASEPRI, r3
 8005f0e:	f3bf 8f6f 	isb	sy
 8005f12:	f3bf 8f4f 	dsb	sy
 8005f16:	60fb      	str	r3, [r7, #12]
}
 8005f18:	bf00      	nop
 8005f1a:	e7fe      	b.n	8005f1a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	3318      	adds	r3, #24
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7fe fe81 	bl	8004c28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f26:	4b1e      	ldr	r3, [pc, #120]	; (8005fa0 <xTaskRemoveFromEventList+0xb0>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d11d      	bne.n	8005f6a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	3304      	adds	r3, #4
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7fe fe78 	bl	8004c28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f3c:	4b19      	ldr	r3, [pc, #100]	; (8005fa4 <xTaskRemoveFromEventList+0xb4>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d903      	bls.n	8005f4c <xTaskRemoveFromEventList+0x5c>
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f48:	4a16      	ldr	r2, [pc, #88]	; (8005fa4 <xTaskRemoveFromEventList+0xb4>)
 8005f4a:	6013      	str	r3, [r2, #0]
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f50:	4613      	mov	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4a13      	ldr	r2, [pc, #76]	; (8005fa8 <xTaskRemoveFromEventList+0xb8>)
 8005f5a:	441a      	add	r2, r3
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	3304      	adds	r3, #4
 8005f60:	4619      	mov	r1, r3
 8005f62:	4610      	mov	r0, r2
 8005f64:	f7fe fe05 	bl	8004b72 <vListInsertEnd>
 8005f68:	e005      	b.n	8005f76 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	3318      	adds	r3, #24
 8005f6e:	4619      	mov	r1, r3
 8005f70:	480e      	ldr	r0, [pc, #56]	; (8005fac <xTaskRemoveFromEventList+0xbc>)
 8005f72:	f7fe fdfe 	bl	8004b72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f7a:	4b0d      	ldr	r3, [pc, #52]	; (8005fb0 <xTaskRemoveFromEventList+0xc0>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d905      	bls.n	8005f90 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005f84:	2301      	movs	r3, #1
 8005f86:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005f88:	4b0a      	ldr	r3, [pc, #40]	; (8005fb4 <xTaskRemoveFromEventList+0xc4>)
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	601a      	str	r2, [r3, #0]
 8005f8e:	e001      	b.n	8005f94 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005f90:	2300      	movs	r3, #0
 8005f92:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005f94:	697b      	ldr	r3, [r7, #20]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3718      	adds	r7, #24
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	20001278 	.word	0x20001278
 8005fa4:	20001258 	.word	0x20001258
 8005fa8:	20000d80 	.word	0x20000d80
 8005fac:	20001210 	.word	0x20001210
 8005fb0:	20000d7c 	.word	0x20000d7c
 8005fb4:	20001264 	.word	0x20001264

08005fb8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005fc0:	4b06      	ldr	r3, [pc, #24]	; (8005fdc <vTaskInternalSetTimeOutState+0x24>)
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005fc8:	4b05      	ldr	r3, [pc, #20]	; (8005fe0 <vTaskInternalSetTimeOutState+0x28>)
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	605a      	str	r2, [r3, #4]
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bc80      	pop	{r7}
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	20001268 	.word	0x20001268
 8005fe0:	20001254 	.word	0x20001254

08005fe4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b088      	sub	sp, #32
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d10a      	bne.n	800600a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff8:	f383 8811 	msr	BASEPRI, r3
 8005ffc:	f3bf 8f6f 	isb	sy
 8006000:	f3bf 8f4f 	dsb	sy
 8006004:	613b      	str	r3, [r7, #16]
}
 8006006:	bf00      	nop
 8006008:	e7fe      	b.n	8006008 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10a      	bne.n	8006026 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	60fb      	str	r3, [r7, #12]
}
 8006022:	bf00      	nop
 8006024:	e7fe      	b.n	8006024 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006026:	f000 feb9 	bl	8006d9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800602a:	4b1d      	ldr	r3, [pc, #116]	; (80060a0 <xTaskCheckForTimeOut+0xbc>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	69ba      	ldr	r2, [r7, #24]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006042:	d102      	bne.n	800604a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006044:	2300      	movs	r3, #0
 8006046:	61fb      	str	r3, [r7, #28]
 8006048:	e023      	b.n	8006092 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	4b15      	ldr	r3, [pc, #84]	; (80060a4 <xTaskCheckForTimeOut+0xc0>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	429a      	cmp	r2, r3
 8006054:	d007      	beq.n	8006066 <xTaskCheckForTimeOut+0x82>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	69ba      	ldr	r2, [r7, #24]
 800605c:	429a      	cmp	r2, r3
 800605e:	d302      	bcc.n	8006066 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006060:	2301      	movs	r3, #1
 8006062:	61fb      	str	r3, [r7, #28]
 8006064:	e015      	b.n	8006092 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	429a      	cmp	r2, r3
 800606e:	d20b      	bcs.n	8006088 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	1ad2      	subs	r2, r2, r3
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f7ff ff9b 	bl	8005fb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006082:	2300      	movs	r3, #0
 8006084:	61fb      	str	r3, [r7, #28]
 8006086:	e004      	b.n	8006092 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	2200      	movs	r2, #0
 800608c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800608e:	2301      	movs	r3, #1
 8006090:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006092:	f000 feb3 	bl	8006dfc <vPortExitCritical>

	return xReturn;
 8006096:	69fb      	ldr	r3, [r7, #28]
}
 8006098:	4618      	mov	r0, r3
 800609a:	3720      	adds	r7, #32
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	20001254 	.word	0x20001254
 80060a4:	20001268 	.word	0x20001268

080060a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80060a8:	b480      	push	{r7}
 80060aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80060ac:	4b03      	ldr	r3, [pc, #12]	; (80060bc <vTaskMissedYield+0x14>)
 80060ae:	2201      	movs	r2, #1
 80060b0:	601a      	str	r2, [r3, #0]
}
 80060b2:	bf00      	nop
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bc80      	pop	{r7}
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	20001264 	.word	0x20001264

080060c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80060c8:	f000 f852 	bl	8006170 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80060cc:	4b06      	ldr	r3, [pc, #24]	; (80060e8 <prvIdleTask+0x28>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d9f9      	bls.n	80060c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80060d4:	4b05      	ldr	r3, [pc, #20]	; (80060ec <prvIdleTask+0x2c>)
 80060d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060da:	601a      	str	r2, [r3, #0]
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80060e4:	e7f0      	b.n	80060c8 <prvIdleTask+0x8>
 80060e6:	bf00      	nop
 80060e8:	20000d80 	.word	0x20000d80
 80060ec:	e000ed04 	.word	0xe000ed04

080060f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060f6:	2300      	movs	r3, #0
 80060f8:	607b      	str	r3, [r7, #4]
 80060fa:	e00c      	b.n	8006116 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	4613      	mov	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4a12      	ldr	r2, [pc, #72]	; (8006150 <prvInitialiseTaskLists+0x60>)
 8006108:	4413      	add	r3, r2
 800610a:	4618      	mov	r0, r3
 800610c:	f7fe fd06 	bl	8004b1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	3301      	adds	r3, #1
 8006114:	607b      	str	r3, [r7, #4]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2b37      	cmp	r3, #55	; 0x37
 800611a:	d9ef      	bls.n	80060fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800611c:	480d      	ldr	r0, [pc, #52]	; (8006154 <prvInitialiseTaskLists+0x64>)
 800611e:	f7fe fcfd 	bl	8004b1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006122:	480d      	ldr	r0, [pc, #52]	; (8006158 <prvInitialiseTaskLists+0x68>)
 8006124:	f7fe fcfa 	bl	8004b1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006128:	480c      	ldr	r0, [pc, #48]	; (800615c <prvInitialiseTaskLists+0x6c>)
 800612a:	f7fe fcf7 	bl	8004b1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800612e:	480c      	ldr	r0, [pc, #48]	; (8006160 <prvInitialiseTaskLists+0x70>)
 8006130:	f7fe fcf4 	bl	8004b1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006134:	480b      	ldr	r0, [pc, #44]	; (8006164 <prvInitialiseTaskLists+0x74>)
 8006136:	f7fe fcf1 	bl	8004b1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800613a:	4b0b      	ldr	r3, [pc, #44]	; (8006168 <prvInitialiseTaskLists+0x78>)
 800613c:	4a05      	ldr	r2, [pc, #20]	; (8006154 <prvInitialiseTaskLists+0x64>)
 800613e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006140:	4b0a      	ldr	r3, [pc, #40]	; (800616c <prvInitialiseTaskLists+0x7c>)
 8006142:	4a05      	ldr	r2, [pc, #20]	; (8006158 <prvInitialiseTaskLists+0x68>)
 8006144:	601a      	str	r2, [r3, #0]
}
 8006146:	bf00      	nop
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	20000d80 	.word	0x20000d80
 8006154:	200011e0 	.word	0x200011e0
 8006158:	200011f4 	.word	0x200011f4
 800615c:	20001210 	.word	0x20001210
 8006160:	20001224 	.word	0x20001224
 8006164:	2000123c 	.word	0x2000123c
 8006168:	20001208 	.word	0x20001208
 800616c:	2000120c 	.word	0x2000120c

08006170 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006176:	e019      	b.n	80061ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006178:	f000 fe10 	bl	8006d9c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800617c:	4b10      	ldr	r3, [pc, #64]	; (80061c0 <prvCheckTasksWaitingTermination+0x50>)
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	3304      	adds	r3, #4
 8006188:	4618      	mov	r0, r3
 800618a:	f7fe fd4d 	bl	8004c28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800618e:	4b0d      	ldr	r3, [pc, #52]	; (80061c4 <prvCheckTasksWaitingTermination+0x54>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	3b01      	subs	r3, #1
 8006194:	4a0b      	ldr	r2, [pc, #44]	; (80061c4 <prvCheckTasksWaitingTermination+0x54>)
 8006196:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006198:	4b0b      	ldr	r3, [pc, #44]	; (80061c8 <prvCheckTasksWaitingTermination+0x58>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	3b01      	subs	r3, #1
 800619e:	4a0a      	ldr	r2, [pc, #40]	; (80061c8 <prvCheckTasksWaitingTermination+0x58>)
 80061a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80061a2:	f000 fe2b 	bl	8006dfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f810 	bl	80061cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061ac:	4b06      	ldr	r3, [pc, #24]	; (80061c8 <prvCheckTasksWaitingTermination+0x58>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1e1      	bne.n	8006178 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80061b4:	bf00      	nop
 80061b6:	bf00      	nop
 80061b8:	3708      	adds	r7, #8
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	20001224 	.word	0x20001224
 80061c4:	20001250 	.word	0x20001250
 80061c8:	20001238 	.word	0x20001238

080061cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d108      	bne.n	80061f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e2:	4618      	mov	r0, r3
 80061e4:	f000 ff9e 	bl	8007124 <vPortFree>
				vPortFree( pxTCB );
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 ff9b 	bl	8007124 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80061ee:	e018      	b.n	8006222 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d103      	bne.n	8006202 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 ff92 	bl	8007124 <vPortFree>
	}
 8006200:	e00f      	b.n	8006222 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006208:	2b02      	cmp	r3, #2
 800620a:	d00a      	beq.n	8006222 <prvDeleteTCB+0x56>
	__asm volatile
 800620c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006210:	f383 8811 	msr	BASEPRI, r3
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	60fb      	str	r3, [r7, #12]
}
 800621e:	bf00      	nop
 8006220:	e7fe      	b.n	8006220 <prvDeleteTCB+0x54>
	}
 8006222:	bf00      	nop
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
	...

0800622c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006232:	4b0e      	ldr	r3, [pc, #56]	; (800626c <prvResetNextTaskUnblockTime+0x40>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d101      	bne.n	8006240 <prvResetNextTaskUnblockTime+0x14>
 800623c:	2301      	movs	r3, #1
 800623e:	e000      	b.n	8006242 <prvResetNextTaskUnblockTime+0x16>
 8006240:	2300      	movs	r3, #0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d004      	beq.n	8006250 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006246:	4b0a      	ldr	r3, [pc, #40]	; (8006270 <prvResetNextTaskUnblockTime+0x44>)
 8006248:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800624c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800624e:	e008      	b.n	8006262 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006250:	4b06      	ldr	r3, [pc, #24]	; (800626c <prvResetNextTaskUnblockTime+0x40>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	4a04      	ldr	r2, [pc, #16]	; (8006270 <prvResetNextTaskUnblockTime+0x44>)
 8006260:	6013      	str	r3, [r2, #0]
}
 8006262:	bf00      	nop
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	bc80      	pop	{r7}
 800626a:	4770      	bx	lr
 800626c:	20001208 	.word	0x20001208
 8006270:	20001270 	.word	0x20001270

08006274 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800627a:	4b0b      	ldr	r3, [pc, #44]	; (80062a8 <xTaskGetSchedulerState+0x34>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d102      	bne.n	8006288 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006282:	2301      	movs	r3, #1
 8006284:	607b      	str	r3, [r7, #4]
 8006286:	e008      	b.n	800629a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006288:	4b08      	ldr	r3, [pc, #32]	; (80062ac <xTaskGetSchedulerState+0x38>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d102      	bne.n	8006296 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006290:	2302      	movs	r3, #2
 8006292:	607b      	str	r3, [r7, #4]
 8006294:	e001      	b.n	800629a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006296:	2300      	movs	r3, #0
 8006298:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800629a:	687b      	ldr	r3, [r7, #4]
	}
 800629c:	4618      	mov	r0, r3
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bc80      	pop	{r7}
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	2000125c 	.word	0x2000125c
 80062ac:	20001278 	.word	0x20001278

080062b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80062bc:	2300      	movs	r3, #0
 80062be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d056      	beq.n	8006374 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80062c6:	4b2e      	ldr	r3, [pc, #184]	; (8006380 <xTaskPriorityDisinherit+0xd0>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d00a      	beq.n	80062e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80062d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d4:	f383 8811 	msr	BASEPRI, r3
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	60fb      	str	r3, [r7, #12]
}
 80062e2:	bf00      	nop
 80062e4:	e7fe      	b.n	80062e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10a      	bne.n	8006304 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	60bb      	str	r3, [r7, #8]
}
 8006300:	bf00      	nop
 8006302:	e7fe      	b.n	8006302 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006308:	1e5a      	subs	r2, r3, #1
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006316:	429a      	cmp	r2, r3
 8006318:	d02c      	beq.n	8006374 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800631e:	2b00      	cmp	r3, #0
 8006320:	d128      	bne.n	8006374 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	3304      	adds	r3, #4
 8006326:	4618      	mov	r0, r3
 8006328:	f7fe fc7e 	bl	8004c28 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006338:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006344:	4b0f      	ldr	r3, [pc, #60]	; (8006384 <xTaskPriorityDisinherit+0xd4>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	429a      	cmp	r2, r3
 800634a:	d903      	bls.n	8006354 <xTaskPriorityDisinherit+0xa4>
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006350:	4a0c      	ldr	r2, [pc, #48]	; (8006384 <xTaskPriorityDisinherit+0xd4>)
 8006352:	6013      	str	r3, [r2, #0]
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006358:	4613      	mov	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	4413      	add	r3, r2
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	4a09      	ldr	r2, [pc, #36]	; (8006388 <xTaskPriorityDisinherit+0xd8>)
 8006362:	441a      	add	r2, r3
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	3304      	adds	r3, #4
 8006368:	4619      	mov	r1, r3
 800636a:	4610      	mov	r0, r2
 800636c:	f7fe fc01 	bl	8004b72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006370:	2301      	movs	r3, #1
 8006372:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006374:	697b      	ldr	r3, [r7, #20]
	}
 8006376:	4618      	mov	r0, r3
 8006378:	3718      	adds	r7, #24
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	20000d7c 	.word	0x20000d7c
 8006384:	20001258 	.word	0x20001258
 8006388:	20000d80 	.word	0x20000d80

0800638c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006396:	4b21      	ldr	r3, [pc, #132]	; (800641c <prvAddCurrentTaskToDelayedList+0x90>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800639c:	4b20      	ldr	r3, [pc, #128]	; (8006420 <prvAddCurrentTaskToDelayedList+0x94>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	3304      	adds	r3, #4
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7fe fc40 	bl	8004c28 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063ae:	d10a      	bne.n	80063c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d007      	beq.n	80063c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063b6:	4b1a      	ldr	r3, [pc, #104]	; (8006420 <prvAddCurrentTaskToDelayedList+0x94>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3304      	adds	r3, #4
 80063bc:	4619      	mov	r1, r3
 80063be:	4819      	ldr	r0, [pc, #100]	; (8006424 <prvAddCurrentTaskToDelayedList+0x98>)
 80063c0:	f7fe fbd7 	bl	8004b72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80063c4:	e026      	b.n	8006414 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4413      	add	r3, r2
 80063cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80063ce:	4b14      	ldr	r3, [pc, #80]	; (8006420 <prvAddCurrentTaskToDelayedList+0x94>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d209      	bcs.n	80063f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063de:	4b12      	ldr	r3, [pc, #72]	; (8006428 <prvAddCurrentTaskToDelayedList+0x9c>)
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	4b0f      	ldr	r3, [pc, #60]	; (8006420 <prvAddCurrentTaskToDelayedList+0x94>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	3304      	adds	r3, #4
 80063e8:	4619      	mov	r1, r3
 80063ea:	4610      	mov	r0, r2
 80063ec:	f7fe fbe4 	bl	8004bb8 <vListInsert>
}
 80063f0:	e010      	b.n	8006414 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063f2:	4b0e      	ldr	r3, [pc, #56]	; (800642c <prvAddCurrentTaskToDelayedList+0xa0>)
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	4b0a      	ldr	r3, [pc, #40]	; (8006420 <prvAddCurrentTaskToDelayedList+0x94>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	3304      	adds	r3, #4
 80063fc:	4619      	mov	r1, r3
 80063fe:	4610      	mov	r0, r2
 8006400:	f7fe fbda 	bl	8004bb8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006404:	4b0a      	ldr	r3, [pc, #40]	; (8006430 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	429a      	cmp	r2, r3
 800640c:	d202      	bcs.n	8006414 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800640e:	4a08      	ldr	r2, [pc, #32]	; (8006430 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	6013      	str	r3, [r2, #0]
}
 8006414:	bf00      	nop
 8006416:	3710      	adds	r7, #16
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	20001254 	.word	0x20001254
 8006420:	20000d7c 	.word	0x20000d7c
 8006424:	2000123c 	.word	0x2000123c
 8006428:	2000120c 	.word	0x2000120c
 800642c:	20001208 	.word	0x20001208
 8006430:	20001270 	.word	0x20001270

08006434 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b08a      	sub	sp, #40	; 0x28
 8006438:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800643a:	2300      	movs	r3, #0
 800643c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800643e:	f000 fb5b 	bl	8006af8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006442:	4b1c      	ldr	r3, [pc, #112]	; (80064b4 <xTimerCreateTimerTask+0x80>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d021      	beq.n	800648e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800644a:	2300      	movs	r3, #0
 800644c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800644e:	2300      	movs	r3, #0
 8006450:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006452:	1d3a      	adds	r2, r7, #4
 8006454:	f107 0108 	add.w	r1, r7, #8
 8006458:	f107 030c 	add.w	r3, r7, #12
 800645c:	4618      	mov	r0, r3
 800645e:	f7fe fb43 	bl	8004ae8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006462:	6879      	ldr	r1, [r7, #4]
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	9202      	str	r2, [sp, #8]
 800646a:	9301      	str	r3, [sp, #4]
 800646c:	2302      	movs	r3, #2
 800646e:	9300      	str	r3, [sp, #0]
 8006470:	2300      	movs	r3, #0
 8006472:	460a      	mov	r2, r1
 8006474:	4910      	ldr	r1, [pc, #64]	; (80064b8 <xTimerCreateTimerTask+0x84>)
 8006476:	4811      	ldr	r0, [pc, #68]	; (80064bc <xTimerCreateTimerTask+0x88>)
 8006478:	f7ff f8e4 	bl	8005644 <xTaskCreateStatic>
 800647c:	4603      	mov	r3, r0
 800647e:	4a10      	ldr	r2, [pc, #64]	; (80064c0 <xTimerCreateTimerTask+0x8c>)
 8006480:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006482:	4b0f      	ldr	r3, [pc, #60]	; (80064c0 <xTimerCreateTimerTask+0x8c>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800648a:	2301      	movs	r3, #1
 800648c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d10a      	bne.n	80064aa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006498:	f383 8811 	msr	BASEPRI, r3
 800649c:	f3bf 8f6f 	isb	sy
 80064a0:	f3bf 8f4f 	dsb	sy
 80064a4:	613b      	str	r3, [r7, #16]
}
 80064a6:	bf00      	nop
 80064a8:	e7fe      	b.n	80064a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80064aa:	697b      	ldr	r3, [r7, #20]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3718      	adds	r7, #24
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	200012ac 	.word	0x200012ac
 80064b8:	08007b10 	.word	0x08007b10
 80064bc:	08006701 	.word	0x08006701
 80064c0:	200012b0 	.word	0x200012b0

080064c4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b088      	sub	sp, #32
 80064c8:	af02      	add	r7, sp, #8
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
 80064d0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80064d2:	2030      	movs	r0, #48	; 0x30
 80064d4:	f000 fd62 	bl	8006f9c <pvPortMalloc>
 80064d8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00d      	beq.n	80064fc <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	9301      	str	r3, [sp, #4]
 80064e4:	6a3b      	ldr	r3, [r7, #32]
 80064e6:	9300      	str	r3, [sp, #0]
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	68b9      	ldr	r1, [r7, #8]
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f000 f846 	bl	8006580 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 80064fc:	697b      	ldr	r3, [r7, #20]
	}
 80064fe:	4618      	mov	r0, r3
 8006500:	3718      	adds	r7, #24
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8006506:	b580      	push	{r7, lr}
 8006508:	b08a      	sub	sp, #40	; 0x28
 800650a:	af02      	add	r7, sp, #8
 800650c:	60f8      	str	r0, [r7, #12]
 800650e:	60b9      	str	r1, [r7, #8]
 8006510:	607a      	str	r2, [r7, #4]
 8006512:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8006514:	2330      	movs	r3, #48	; 0x30
 8006516:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	2b30      	cmp	r3, #48	; 0x30
 800651c:	d00a      	beq.n	8006534 <xTimerCreateStatic+0x2e>
	__asm volatile
 800651e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	61bb      	str	r3, [r7, #24]
}
 8006530:	bf00      	nop
 8006532:	e7fe      	b.n	8006532 <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8006534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10a      	bne.n	8006550 <xTimerCreateStatic+0x4a>
	__asm volatile
 800653a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653e:	f383 8811 	msr	BASEPRI, r3
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	617b      	str	r3, [r7, #20]
}
 800654c:	bf00      	nop
 800654e:	e7fe      	b.n	800654e <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006552:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00d      	beq.n	8006576 <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	9301      	str	r3, [sp, #4]
 800655e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	68b9      	ldr	r1, [r7, #8]
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f000 f809 	bl	8006580 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8006576:	69fb      	ldr	r3, [r7, #28]
	}
 8006578:	4618      	mov	r0, r3
 800657a:	3720      	adds	r7, #32
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
 800658c:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10a      	bne.n	80065aa <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8006594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006598:	f383 8811 	msr	BASEPRI, r3
 800659c:	f3bf 8f6f 	isb	sy
 80065a0:	f3bf 8f4f 	dsb	sy
 80065a4:	617b      	str	r3, [r7, #20]
}
 80065a6:	bf00      	nop
 80065a8:	e7fe      	b.n	80065a8 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d015      	beq.n	80065dc <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80065b0:	f000 faa2 	bl	8006af8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80065b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80065c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 80065c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c8:	683a      	ldr	r2, [r7, #0]
 80065ca:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ce:	6a3a      	ldr	r2, [r7, #32]
 80065d0:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80065d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d4:	3304      	adds	r3, #4
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7fe fabf 	bl	8004b5a <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80065dc:	bf00      	nop
 80065de:	3718      	adds	r7, #24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b08a      	sub	sp, #40	; 0x28
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
 80065f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80065f2:	2300      	movs	r3, #0
 80065f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10a      	bne.n	8006612 <xTimerGenericCommand+0x2e>
	__asm volatile
 80065fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006600:	f383 8811 	msr	BASEPRI, r3
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	623b      	str	r3, [r7, #32]
}
 800660e:	bf00      	nop
 8006610:	e7fe      	b.n	8006610 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006612:	4b1a      	ldr	r3, [pc, #104]	; (800667c <xTimerGenericCommand+0x98>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d02a      	beq.n	8006670 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	2b05      	cmp	r3, #5
 800662a:	dc18      	bgt.n	800665e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800662c:	f7ff fe22 	bl	8006274 <xTaskGetSchedulerState>
 8006630:	4603      	mov	r3, r0
 8006632:	2b02      	cmp	r3, #2
 8006634:	d109      	bne.n	800664a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006636:	4b11      	ldr	r3, [pc, #68]	; (800667c <xTimerGenericCommand+0x98>)
 8006638:	6818      	ldr	r0, [r3, #0]
 800663a:	f107 0110 	add.w	r1, r7, #16
 800663e:	2300      	movs	r3, #0
 8006640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006642:	f7fe fc1d 	bl	8004e80 <xQueueGenericSend>
 8006646:	6278      	str	r0, [r7, #36]	; 0x24
 8006648:	e012      	b.n	8006670 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800664a:	4b0c      	ldr	r3, [pc, #48]	; (800667c <xTimerGenericCommand+0x98>)
 800664c:	6818      	ldr	r0, [r3, #0]
 800664e:	f107 0110 	add.w	r1, r7, #16
 8006652:	2300      	movs	r3, #0
 8006654:	2200      	movs	r2, #0
 8006656:	f7fe fc13 	bl	8004e80 <xQueueGenericSend>
 800665a:	6278      	str	r0, [r7, #36]	; 0x24
 800665c:	e008      	b.n	8006670 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800665e:	4b07      	ldr	r3, [pc, #28]	; (800667c <xTimerGenericCommand+0x98>)
 8006660:	6818      	ldr	r0, [r3, #0]
 8006662:	f107 0110 	add.w	r1, r7, #16
 8006666:	2300      	movs	r3, #0
 8006668:	683a      	ldr	r2, [r7, #0]
 800666a:	f7fe fd07 	bl	800507c <xQueueGenericSendFromISR>
 800666e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006672:	4618      	mov	r0, r3
 8006674:	3728      	adds	r7, #40	; 0x28
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	200012ac 	.word	0x200012ac

08006680 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b088      	sub	sp, #32
 8006684:	af02      	add	r7, sp, #8
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800668a:	4b1c      	ldr	r3, [pc, #112]	; (80066fc <prvProcessExpiredTimer+0x7c>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	3304      	adds	r3, #4
 8006698:	4618      	mov	r0, r3
 800669a:	f7fe fac5 	bl	8004c28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	69db      	ldr	r3, [r3, #28]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d122      	bne.n	80066ec <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	699a      	ldr	r2, [r3, #24]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	18d1      	adds	r1, r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	683a      	ldr	r2, [r7, #0]
 80066b2:	6978      	ldr	r0, [r7, #20]
 80066b4:	f000 f8c8 	bl	8006848 <prvInsertTimerInActiveList>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d016      	beq.n	80066ec <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80066be:	2300      	movs	r3, #0
 80066c0:	9300      	str	r3, [sp, #0]
 80066c2:	2300      	movs	r3, #0
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	2100      	movs	r1, #0
 80066c8:	6978      	ldr	r0, [r7, #20]
 80066ca:	f7ff ff8b 	bl	80065e4 <xTimerGenericCommand>
 80066ce:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10a      	bne.n	80066ec <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80066d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066da:	f383 8811 	msr	BASEPRI, r3
 80066de:	f3bf 8f6f 	isb	sy
 80066e2:	f3bf 8f4f 	dsb	sy
 80066e6:	60fb      	str	r3, [r7, #12]
}
 80066e8:	bf00      	nop
 80066ea:	e7fe      	b.n	80066ea <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f0:	6978      	ldr	r0, [r7, #20]
 80066f2:	4798      	blx	r3
}
 80066f4:	bf00      	nop
 80066f6:	3718      	adds	r7, #24
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	200012a4 	.word	0x200012a4

08006700 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006708:	f107 0308 	add.w	r3, r7, #8
 800670c:	4618      	mov	r0, r3
 800670e:	f000 f857 	bl	80067c0 <prvGetNextExpireTime>
 8006712:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	4619      	mov	r1, r3
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f000 f803 	bl	8006724 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800671e:	f000 f8d5 	bl	80068cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006722:	e7f1      	b.n	8006708 <prvTimerTask+0x8>

08006724 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800672e:	f7ff f9bb 	bl	8005aa8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006732:	f107 0308 	add.w	r3, r7, #8
 8006736:	4618      	mov	r0, r3
 8006738:	f000 f866 	bl	8006808 <prvSampleTimeNow>
 800673c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d130      	bne.n	80067a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10a      	bne.n	8006760 <prvProcessTimerOrBlockTask+0x3c>
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	429a      	cmp	r2, r3
 8006750:	d806      	bhi.n	8006760 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006752:	f7ff f9b7 	bl	8005ac4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006756:	68f9      	ldr	r1, [r7, #12]
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f7ff ff91 	bl	8006680 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800675e:	e024      	b.n	80067aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d008      	beq.n	8006778 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006766:	4b13      	ldr	r3, [pc, #76]	; (80067b4 <prvProcessTimerOrBlockTask+0x90>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	bf0c      	ite	eq
 8006770:	2301      	moveq	r3, #1
 8006772:	2300      	movne	r3, #0
 8006774:	b2db      	uxtb	r3, r3
 8006776:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006778:	4b0f      	ldr	r3, [pc, #60]	; (80067b8 <prvProcessTimerOrBlockTask+0x94>)
 800677a:	6818      	ldr	r0, [r3, #0]
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	683a      	ldr	r2, [r7, #0]
 8006784:	4619      	mov	r1, r3
 8006786:	f7fe ff29 	bl	80055dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800678a:	f7ff f99b 	bl	8005ac4 <xTaskResumeAll>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10a      	bne.n	80067aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006794:	4b09      	ldr	r3, [pc, #36]	; (80067bc <prvProcessTimerOrBlockTask+0x98>)
 8006796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800679a:	601a      	str	r2, [r3, #0]
 800679c:	f3bf 8f4f 	dsb	sy
 80067a0:	f3bf 8f6f 	isb	sy
}
 80067a4:	e001      	b.n	80067aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80067a6:	f7ff f98d 	bl	8005ac4 <xTaskResumeAll>
}
 80067aa:	bf00      	nop
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	200012a8 	.word	0x200012a8
 80067b8:	200012ac 	.word	0x200012ac
 80067bc:	e000ed04 	.word	0xe000ed04

080067c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80067c8:	4b0e      	ldr	r3, [pc, #56]	; (8006804 <prvGetNextExpireTime+0x44>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	bf0c      	ite	eq
 80067d2:	2301      	moveq	r3, #1
 80067d4:	2300      	movne	r3, #0
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	461a      	mov	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d105      	bne.n	80067f2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067e6:	4b07      	ldr	r3, [pc, #28]	; (8006804 <prvGetNextExpireTime+0x44>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	60fb      	str	r3, [r7, #12]
 80067f0:	e001      	b.n	80067f6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80067f2:	2300      	movs	r3, #0
 80067f4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80067f6:	68fb      	ldr	r3, [r7, #12]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3714      	adds	r7, #20
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bc80      	pop	{r7}
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	200012a4 	.word	0x200012a4

08006808 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006810:	f7ff f9f6 	bl	8005c00 <xTaskGetTickCount>
 8006814:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006816:	4b0b      	ldr	r3, [pc, #44]	; (8006844 <prvSampleTimeNow+0x3c>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	429a      	cmp	r2, r3
 800681e:	d205      	bcs.n	800682c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006820:	f000 f908 	bl	8006a34 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	601a      	str	r2, [r3, #0]
 800682a:	e002      	b.n	8006832 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006832:	4a04      	ldr	r2, [pc, #16]	; (8006844 <prvSampleTimeNow+0x3c>)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006838:	68fb      	ldr	r3, [r7, #12]
}
 800683a:	4618      	mov	r0, r3
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	200012b4 	.word	0x200012b4

08006848 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b086      	sub	sp, #24
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
 8006854:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006856:	2300      	movs	r3, #0
 8006858:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	429a      	cmp	r2, r3
 800686c:	d812      	bhi.n	8006894 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	1ad2      	subs	r2, r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	429a      	cmp	r2, r3
 800687a:	d302      	bcc.n	8006882 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800687c:	2301      	movs	r3, #1
 800687e:	617b      	str	r3, [r7, #20]
 8006880:	e01b      	b.n	80068ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006882:	4b10      	ldr	r3, [pc, #64]	; (80068c4 <prvInsertTimerInActiveList+0x7c>)
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	3304      	adds	r3, #4
 800688a:	4619      	mov	r1, r3
 800688c:	4610      	mov	r0, r2
 800688e:	f7fe f993 	bl	8004bb8 <vListInsert>
 8006892:	e012      	b.n	80068ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	429a      	cmp	r2, r3
 800689a:	d206      	bcs.n	80068aa <prvInsertTimerInActiveList+0x62>
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d302      	bcc.n	80068aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80068a4:	2301      	movs	r3, #1
 80068a6:	617b      	str	r3, [r7, #20]
 80068a8:	e007      	b.n	80068ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80068aa:	4b07      	ldr	r3, [pc, #28]	; (80068c8 <prvInsertTimerInActiveList+0x80>)
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	3304      	adds	r3, #4
 80068b2:	4619      	mov	r1, r3
 80068b4:	4610      	mov	r0, r2
 80068b6:	f7fe f97f 	bl	8004bb8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80068ba:	697b      	ldr	r3, [r7, #20]
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3718      	adds	r7, #24
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	200012a8 	.word	0x200012a8
 80068c8:	200012a4 	.word	0x200012a4

080068cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b08e      	sub	sp, #56	; 0x38
 80068d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80068d2:	e09d      	b.n	8006a10 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	da18      	bge.n	800690c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80068da:	1d3b      	adds	r3, r7, #4
 80068dc:	3304      	adds	r3, #4
 80068de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80068e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d10a      	bne.n	80068fc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80068e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ea:	f383 8811 	msr	BASEPRI, r3
 80068ee:	f3bf 8f6f 	isb	sy
 80068f2:	f3bf 8f4f 	dsb	sy
 80068f6:	61fb      	str	r3, [r7, #28]
}
 80068f8:	bf00      	nop
 80068fa:	e7fe      	b.n	80068fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80068fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006902:	6850      	ldr	r0, [r2, #4]
 8006904:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006906:	6892      	ldr	r2, [r2, #8]
 8006908:	4611      	mov	r1, r2
 800690a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	db7e      	blt.n	8006a10 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006918:	695b      	ldr	r3, [r3, #20]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d004      	beq.n	8006928 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800691e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006920:	3304      	adds	r3, #4
 8006922:	4618      	mov	r0, r3
 8006924:	f7fe f980 	bl	8004c28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006928:	463b      	mov	r3, r7
 800692a:	4618      	mov	r0, r3
 800692c:	f7ff ff6c 	bl	8006808 <prvSampleTimeNow>
 8006930:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2b09      	cmp	r3, #9
 8006936:	d86a      	bhi.n	8006a0e <prvProcessReceivedCommands+0x142>
 8006938:	a201      	add	r2, pc, #4	; (adr r2, 8006940 <prvProcessReceivedCommands+0x74>)
 800693a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693e:	bf00      	nop
 8006940:	08006969 	.word	0x08006969
 8006944:	08006969 	.word	0x08006969
 8006948:	08006969 	.word	0x08006969
 800694c:	08006a11 	.word	0x08006a11
 8006950:	080069c5 	.word	0x080069c5
 8006954:	080069fd 	.word	0x080069fd
 8006958:	08006969 	.word	0x08006969
 800695c:	08006969 	.word	0x08006969
 8006960:	08006a11 	.word	0x08006a11
 8006964:	080069c5 	.word	0x080069c5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	18d1      	adds	r1, r2, r3
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006976:	f7ff ff67 	bl	8006848 <prvInsertTimerInActiveList>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d047      	beq.n	8006a10 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006984:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006986:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698a:	69db      	ldr	r3, [r3, #28]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d13f      	bne.n	8006a10 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006990:	68ba      	ldr	r2, [r7, #8]
 8006992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	441a      	add	r2, r3
 8006998:	2300      	movs	r3, #0
 800699a:	9300      	str	r3, [sp, #0]
 800699c:	2300      	movs	r3, #0
 800699e:	2100      	movs	r1, #0
 80069a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069a2:	f7ff fe1f 	bl	80065e4 <xTimerGenericCommand>
 80069a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80069a8:	6a3b      	ldr	r3, [r7, #32]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d130      	bne.n	8006a10 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80069ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	61bb      	str	r3, [r7, #24]
}
 80069c0:	bf00      	nop
 80069c2:	e7fe      	b.n	80069c2 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80069c4:	68ba      	ldr	r2, [r7, #8]
 80069c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80069ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10a      	bne.n	80069e8 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80069d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d6:	f383 8811 	msr	BASEPRI, r3
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	617b      	str	r3, [r7, #20]
}
 80069e4:	bf00      	nop
 80069e6:	e7fe      	b.n	80069e6 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80069e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ea:	699a      	ldr	r2, [r3, #24]
 80069ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ee:	18d1      	adds	r1, r2, r3
 80069f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069f6:	f7ff ff27 	bl	8006848 <prvInsertTimerInActiveList>
					break;
 80069fa:	e009      	b.n	8006a10 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80069fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d104      	bne.n	8006a10 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8006a06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a08:	f000 fb8c 	bl	8007124 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006a0c:	e000      	b.n	8006a10 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8006a0e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a10:	4b07      	ldr	r3, [pc, #28]	; (8006a30 <prvProcessReceivedCommands+0x164>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	1d39      	adds	r1, r7, #4
 8006a16:	2200      	movs	r2, #0
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f7fe fbc7 	bl	80051ac <xQueueReceive>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f47f af57 	bne.w	80068d4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006a26:	bf00      	nop
 8006a28:	bf00      	nop
 8006a2a:	3730      	adds	r7, #48	; 0x30
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	200012ac 	.word	0x200012ac

08006a34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b088      	sub	sp, #32
 8006a38:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a3a:	e045      	b.n	8006ac8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a3c:	4b2c      	ldr	r3, [pc, #176]	; (8006af0 <prvSwitchTimerLists+0xbc>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a46:	4b2a      	ldr	r3, [pc, #168]	; (8006af0 <prvSwitchTimerLists+0xbc>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	3304      	adds	r3, #4
 8006a54:	4618      	mov	r0, r3
 8006a56:	f7fe f8e7 	bl	8004c28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	69db      	ldr	r3, [r3, #28]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d12e      	bne.n	8006ac8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	699b      	ldr	r3, [r3, #24]
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	4413      	add	r3, r2
 8006a72:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006a74:	68ba      	ldr	r2, [r7, #8]
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d90e      	bls.n	8006a9a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a88:	4b19      	ldr	r3, [pc, #100]	; (8006af0 <prvSwitchTimerLists+0xbc>)
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	3304      	adds	r3, #4
 8006a90:	4619      	mov	r1, r3
 8006a92:	4610      	mov	r0, r2
 8006a94:	f7fe f890 	bl	8004bb8 <vListInsert>
 8006a98:	e016      	b.n	8006ac8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f7ff fd9d 	bl	80065e4 <xTimerGenericCommand>
 8006aaa:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d10a      	bne.n	8006ac8 <prvSwitchTimerLists+0x94>
	__asm volatile
 8006ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab6:	f383 8811 	msr	BASEPRI, r3
 8006aba:	f3bf 8f6f 	isb	sy
 8006abe:	f3bf 8f4f 	dsb	sy
 8006ac2:	603b      	str	r3, [r7, #0]
}
 8006ac4:	bf00      	nop
 8006ac6:	e7fe      	b.n	8006ac6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ac8:	4b09      	ldr	r3, [pc, #36]	; (8006af0 <prvSwitchTimerLists+0xbc>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1b4      	bne.n	8006a3c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006ad2:	4b07      	ldr	r3, [pc, #28]	; (8006af0 <prvSwitchTimerLists+0xbc>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006ad8:	4b06      	ldr	r3, [pc, #24]	; (8006af4 <prvSwitchTimerLists+0xc0>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a04      	ldr	r2, [pc, #16]	; (8006af0 <prvSwitchTimerLists+0xbc>)
 8006ade:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006ae0:	4a04      	ldr	r2, [pc, #16]	; (8006af4 <prvSwitchTimerLists+0xc0>)
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	6013      	str	r3, [r2, #0]
}
 8006ae6:	bf00      	nop
 8006ae8:	3718      	adds	r7, #24
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	200012a4 	.word	0x200012a4
 8006af4:	200012a8 	.word	0x200012a8

08006af8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006afe:	f000 f94d 	bl	8006d9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006b02:	4b15      	ldr	r3, [pc, #84]	; (8006b58 <prvCheckForValidListAndQueue+0x60>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d120      	bne.n	8006b4c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006b0a:	4814      	ldr	r0, [pc, #80]	; (8006b5c <prvCheckForValidListAndQueue+0x64>)
 8006b0c:	f7fe f806 	bl	8004b1c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006b10:	4813      	ldr	r0, [pc, #76]	; (8006b60 <prvCheckForValidListAndQueue+0x68>)
 8006b12:	f7fe f803 	bl	8004b1c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006b16:	4b13      	ldr	r3, [pc, #76]	; (8006b64 <prvCheckForValidListAndQueue+0x6c>)
 8006b18:	4a10      	ldr	r2, [pc, #64]	; (8006b5c <prvCheckForValidListAndQueue+0x64>)
 8006b1a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006b1c:	4b12      	ldr	r3, [pc, #72]	; (8006b68 <prvCheckForValidListAndQueue+0x70>)
 8006b1e:	4a10      	ldr	r2, [pc, #64]	; (8006b60 <prvCheckForValidListAndQueue+0x68>)
 8006b20:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006b22:	2300      	movs	r3, #0
 8006b24:	9300      	str	r3, [sp, #0]
 8006b26:	4b11      	ldr	r3, [pc, #68]	; (8006b6c <prvCheckForValidListAndQueue+0x74>)
 8006b28:	4a11      	ldr	r2, [pc, #68]	; (8006b70 <prvCheckForValidListAndQueue+0x78>)
 8006b2a:	2110      	movs	r1, #16
 8006b2c:	200a      	movs	r0, #10
 8006b2e:	f7fe f90d 	bl	8004d4c <xQueueGenericCreateStatic>
 8006b32:	4603      	mov	r3, r0
 8006b34:	4a08      	ldr	r2, [pc, #32]	; (8006b58 <prvCheckForValidListAndQueue+0x60>)
 8006b36:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006b38:	4b07      	ldr	r3, [pc, #28]	; (8006b58 <prvCheckForValidListAndQueue+0x60>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d005      	beq.n	8006b4c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006b40:	4b05      	ldr	r3, [pc, #20]	; (8006b58 <prvCheckForValidListAndQueue+0x60>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	490b      	ldr	r1, [pc, #44]	; (8006b74 <prvCheckForValidListAndQueue+0x7c>)
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7fe fd20 	bl	800558c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b4c:	f000 f956 	bl	8006dfc <vPortExitCritical>
}
 8006b50:	bf00      	nop
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	200012ac 	.word	0x200012ac
 8006b5c:	2000127c 	.word	0x2000127c
 8006b60:	20001290 	.word	0x20001290
 8006b64:	200012a4 	.word	0x200012a4
 8006b68:	200012a8 	.word	0x200012a8
 8006b6c:	20001358 	.word	0x20001358
 8006b70:	200012b8 	.word	0x200012b8
 8006b74:	08007b18 	.word	0x08007b18

08006b78 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d10a      	bne.n	8006ba0 <pvTimerGetTimerID+0x28>
	__asm volatile
 8006b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8e:	f383 8811 	msr	BASEPRI, r3
 8006b92:	f3bf 8f6f 	isb	sy
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	60fb      	str	r3, [r7, #12]
}
 8006b9c:	bf00      	nop
 8006b9e:	e7fe      	b.n	8006b9e <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8006ba0:	f000 f8fc 	bl	8006d9c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	6a1b      	ldr	r3, [r3, #32]
 8006ba8:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8006baa:	f000 f927 	bl	8006dfc <vPortExitCritical>

	return pvReturn;
 8006bae:	693b      	ldr	r3, [r7, #16]
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3718      	adds	r7, #24
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	3b04      	subs	r3, #4
 8006bc8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006bd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	3b04      	subs	r3, #4
 8006bd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	f023 0201 	bic.w	r2, r3, #1
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	3b04      	subs	r3, #4
 8006be6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006be8:	4a08      	ldr	r2, [pc, #32]	; (8006c0c <pxPortInitialiseStack+0x54>)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	3b14      	subs	r3, #20
 8006bf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	3b20      	subs	r3, #32
 8006bfe:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006c00:	68fb      	ldr	r3, [r7, #12]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3714      	adds	r7, #20
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bc80      	pop	{r7}
 8006c0a:	4770      	bx	lr
 8006c0c:	08006c11 	.word	0x08006c11

08006c10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006c16:	2300      	movs	r3, #0
 8006c18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c1a:	4b12      	ldr	r3, [pc, #72]	; (8006c64 <prvTaskExitError+0x54>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c22:	d00a      	beq.n	8006c3a <prvTaskExitError+0x2a>
	__asm volatile
 8006c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c28:	f383 8811 	msr	BASEPRI, r3
 8006c2c:	f3bf 8f6f 	isb	sy
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	60fb      	str	r3, [r7, #12]
}
 8006c36:	bf00      	nop
 8006c38:	e7fe      	b.n	8006c38 <prvTaskExitError+0x28>
	__asm volatile
 8006c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3e:	f383 8811 	msr	BASEPRI, r3
 8006c42:	f3bf 8f6f 	isb	sy
 8006c46:	f3bf 8f4f 	dsb	sy
 8006c4a:	60bb      	str	r3, [r7, #8]
}
 8006c4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c4e:	bf00      	nop
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d0fc      	beq.n	8006c50 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c56:	bf00      	nop
 8006c58:	bf00      	nop
 8006c5a:	3714      	adds	r7, #20
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bc80      	pop	{r7}
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	2000000c 	.word	0x2000000c
	...

08006c70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c70:	4b07      	ldr	r3, [pc, #28]	; (8006c90 <pxCurrentTCBConst2>)
 8006c72:	6819      	ldr	r1, [r3, #0]
 8006c74:	6808      	ldr	r0, [r1, #0]
 8006c76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006c7a:	f380 8809 	msr	PSP, r0
 8006c7e:	f3bf 8f6f 	isb	sy
 8006c82:	f04f 0000 	mov.w	r0, #0
 8006c86:	f380 8811 	msr	BASEPRI, r0
 8006c8a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006c8e:	4770      	bx	lr

08006c90 <pxCurrentTCBConst2>:
 8006c90:	20000d7c 	.word	0x20000d7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c94:	bf00      	nop
 8006c96:	bf00      	nop

08006c98 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006c98:	4806      	ldr	r0, [pc, #24]	; (8006cb4 <prvPortStartFirstTask+0x1c>)
 8006c9a:	6800      	ldr	r0, [r0, #0]
 8006c9c:	6800      	ldr	r0, [r0, #0]
 8006c9e:	f380 8808 	msr	MSP, r0
 8006ca2:	b662      	cpsie	i
 8006ca4:	b661      	cpsie	f
 8006ca6:	f3bf 8f4f 	dsb	sy
 8006caa:	f3bf 8f6f 	isb	sy
 8006cae:	df00      	svc	0
 8006cb0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006cb2:	bf00      	nop
 8006cb4:	e000ed08 	.word	0xe000ed08

08006cb8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006cbe:	4b32      	ldr	r3, [pc, #200]	; (8006d88 <xPortStartScheduler+0xd0>)
 8006cc0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	22ff      	movs	r2, #255	; 0xff
 8006cce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006cd8:	78fb      	ldrb	r3, [r7, #3]
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	4b2a      	ldr	r3, [pc, #168]	; (8006d8c <xPortStartScheduler+0xd4>)
 8006ce4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ce6:	4b2a      	ldr	r3, [pc, #168]	; (8006d90 <xPortStartScheduler+0xd8>)
 8006ce8:	2207      	movs	r2, #7
 8006cea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006cec:	e009      	b.n	8006d02 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006cee:	4b28      	ldr	r3, [pc, #160]	; (8006d90 <xPortStartScheduler+0xd8>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	4a26      	ldr	r2, [pc, #152]	; (8006d90 <xPortStartScheduler+0xd8>)
 8006cf6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006cf8:	78fb      	ldrb	r3, [r7, #3]
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	005b      	lsls	r3, r3, #1
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d02:	78fb      	ldrb	r3, [r7, #3]
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d0a:	2b80      	cmp	r3, #128	; 0x80
 8006d0c:	d0ef      	beq.n	8006cee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d0e:	4b20      	ldr	r3, [pc, #128]	; (8006d90 <xPortStartScheduler+0xd8>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f1c3 0307 	rsb	r3, r3, #7
 8006d16:	2b04      	cmp	r3, #4
 8006d18:	d00a      	beq.n	8006d30 <xPortStartScheduler+0x78>
	__asm volatile
 8006d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1e:	f383 8811 	msr	BASEPRI, r3
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	f3bf 8f4f 	dsb	sy
 8006d2a:	60bb      	str	r3, [r7, #8]
}
 8006d2c:	bf00      	nop
 8006d2e:	e7fe      	b.n	8006d2e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d30:	4b17      	ldr	r3, [pc, #92]	; (8006d90 <xPortStartScheduler+0xd8>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	021b      	lsls	r3, r3, #8
 8006d36:	4a16      	ldr	r2, [pc, #88]	; (8006d90 <xPortStartScheduler+0xd8>)
 8006d38:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d3a:	4b15      	ldr	r3, [pc, #84]	; (8006d90 <xPortStartScheduler+0xd8>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d42:	4a13      	ldr	r2, [pc, #76]	; (8006d90 <xPortStartScheduler+0xd8>)
 8006d44:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	b2da      	uxtb	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d4e:	4b11      	ldr	r3, [pc, #68]	; (8006d94 <xPortStartScheduler+0xdc>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a10      	ldr	r2, [pc, #64]	; (8006d94 <xPortStartScheduler+0xdc>)
 8006d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d5a:	4b0e      	ldr	r3, [pc, #56]	; (8006d94 <xPortStartScheduler+0xdc>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a0d      	ldr	r2, [pc, #52]	; (8006d94 <xPortStartScheduler+0xdc>)
 8006d60:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d64:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d66:	f000 f8b9 	bl	8006edc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d6a:	4b0b      	ldr	r3, [pc, #44]	; (8006d98 <xPortStartScheduler+0xe0>)
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d70:	f7ff ff92 	bl	8006c98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d74:	f7ff f810 	bl	8005d98 <vTaskSwitchContext>
	prvTaskExitError();
 8006d78:	f7ff ff4a 	bl	8006c10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	e000e400 	.word	0xe000e400
 8006d8c:	200013a8 	.word	0x200013a8
 8006d90:	200013ac 	.word	0x200013ac
 8006d94:	e000ed20 	.word	0xe000ed20
 8006d98:	2000000c 	.word	0x2000000c

08006d9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
	__asm volatile
 8006da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da6:	f383 8811 	msr	BASEPRI, r3
 8006daa:	f3bf 8f6f 	isb	sy
 8006dae:	f3bf 8f4f 	dsb	sy
 8006db2:	607b      	str	r3, [r7, #4]
}
 8006db4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006db6:	4b0f      	ldr	r3, [pc, #60]	; (8006df4 <vPortEnterCritical+0x58>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	4a0d      	ldr	r2, [pc, #52]	; (8006df4 <vPortEnterCritical+0x58>)
 8006dbe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006dc0:	4b0c      	ldr	r3, [pc, #48]	; (8006df4 <vPortEnterCritical+0x58>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d10f      	bne.n	8006de8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006dc8:	4b0b      	ldr	r3, [pc, #44]	; (8006df8 <vPortEnterCritical+0x5c>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00a      	beq.n	8006de8 <vPortEnterCritical+0x4c>
	__asm volatile
 8006dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd6:	f383 8811 	msr	BASEPRI, r3
 8006dda:	f3bf 8f6f 	isb	sy
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	603b      	str	r3, [r7, #0]
}
 8006de4:	bf00      	nop
 8006de6:	e7fe      	b.n	8006de6 <vPortEnterCritical+0x4a>
	}
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bc80      	pop	{r7}
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	2000000c 	.word	0x2000000c
 8006df8:	e000ed04 	.word	0xe000ed04

08006dfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e02:	4b11      	ldr	r3, [pc, #68]	; (8006e48 <vPortExitCritical+0x4c>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10a      	bne.n	8006e20 <vPortExitCritical+0x24>
	__asm volatile
 8006e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0e:	f383 8811 	msr	BASEPRI, r3
 8006e12:	f3bf 8f6f 	isb	sy
 8006e16:	f3bf 8f4f 	dsb	sy
 8006e1a:	607b      	str	r3, [r7, #4]
}
 8006e1c:	bf00      	nop
 8006e1e:	e7fe      	b.n	8006e1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006e20:	4b09      	ldr	r3, [pc, #36]	; (8006e48 <vPortExitCritical+0x4c>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	3b01      	subs	r3, #1
 8006e26:	4a08      	ldr	r2, [pc, #32]	; (8006e48 <vPortExitCritical+0x4c>)
 8006e28:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e2a:	4b07      	ldr	r3, [pc, #28]	; (8006e48 <vPortExitCritical+0x4c>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d105      	bne.n	8006e3e <vPortExitCritical+0x42>
 8006e32:	2300      	movs	r3, #0
 8006e34:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	f383 8811 	msr	BASEPRI, r3
}
 8006e3c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e3e:	bf00      	nop
 8006e40:	370c      	adds	r7, #12
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bc80      	pop	{r7}
 8006e46:	4770      	bx	lr
 8006e48:	2000000c 	.word	0x2000000c
 8006e4c:	00000000 	.word	0x00000000

08006e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e50:	f3ef 8009 	mrs	r0, PSP
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	4b0d      	ldr	r3, [pc, #52]	; (8006e90 <pxCurrentTCBConst>)
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006e60:	6010      	str	r0, [r2, #0]
 8006e62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006e66:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006e6a:	f380 8811 	msr	BASEPRI, r0
 8006e6e:	f7fe ff93 	bl	8005d98 <vTaskSwitchContext>
 8006e72:	f04f 0000 	mov.w	r0, #0
 8006e76:	f380 8811 	msr	BASEPRI, r0
 8006e7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006e7e:	6819      	ldr	r1, [r3, #0]
 8006e80:	6808      	ldr	r0, [r1, #0]
 8006e82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006e86:	f380 8809 	msr	PSP, r0
 8006e8a:	f3bf 8f6f 	isb	sy
 8006e8e:	4770      	bx	lr

08006e90 <pxCurrentTCBConst>:
 8006e90:	20000d7c 	.word	0x20000d7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006e94:	bf00      	nop
 8006e96:	bf00      	nop

08006e98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea2:	f383 8811 	msr	BASEPRI, r3
 8006ea6:	f3bf 8f6f 	isb	sy
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	607b      	str	r3, [r7, #4]
}
 8006eb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006eb2:	f7fe feb3 	bl	8005c1c <xTaskIncrementTick>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d003      	beq.n	8006ec4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006ebc:	4b06      	ldr	r3, [pc, #24]	; (8006ed8 <SysTick_Handler+0x40>)
 8006ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ec2:	601a      	str	r2, [r3, #0]
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	f383 8811 	msr	BASEPRI, r3
}
 8006ece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ed0:	bf00      	nop
 8006ed2:	3708      	adds	r7, #8
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	e000ed04 	.word	0xe000ed04

08006edc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006edc:	b480      	push	{r7}
 8006ede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ee0:	4b0a      	ldr	r3, [pc, #40]	; (8006f0c <vPortSetupTimerInterrupt+0x30>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ee6:	4b0a      	ldr	r3, [pc, #40]	; (8006f10 <vPortSetupTimerInterrupt+0x34>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006eec:	4b09      	ldr	r3, [pc, #36]	; (8006f14 <vPortSetupTimerInterrupt+0x38>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a09      	ldr	r2, [pc, #36]	; (8006f18 <vPortSetupTimerInterrupt+0x3c>)
 8006ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef6:	099b      	lsrs	r3, r3, #6
 8006ef8:	4a08      	ldr	r2, [pc, #32]	; (8006f1c <vPortSetupTimerInterrupt+0x40>)
 8006efa:	3b01      	subs	r3, #1
 8006efc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006efe:	4b03      	ldr	r3, [pc, #12]	; (8006f0c <vPortSetupTimerInterrupt+0x30>)
 8006f00:	2207      	movs	r2, #7
 8006f02:	601a      	str	r2, [r3, #0]
}
 8006f04:	bf00      	nop
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bc80      	pop	{r7}
 8006f0a:	4770      	bx	lr
 8006f0c:	e000e010 	.word	0xe000e010
 8006f10:	e000e018 	.word	0xe000e018
 8006f14:	20000000 	.word	0x20000000
 8006f18:	10624dd3 	.word	0x10624dd3
 8006f1c:	e000e014 	.word	0xe000e014

08006f20 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006f26:	f3ef 8305 	mrs	r3, IPSR
 8006f2a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2b0f      	cmp	r3, #15
 8006f30:	d914      	bls.n	8006f5c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006f32:	4a16      	ldr	r2, [pc, #88]	; (8006f8c <vPortValidateInterruptPriority+0x6c>)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	4413      	add	r3, r2
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006f3c:	4b14      	ldr	r3, [pc, #80]	; (8006f90 <vPortValidateInterruptPriority+0x70>)
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	7afa      	ldrb	r2, [r7, #11]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d20a      	bcs.n	8006f5c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4a:	f383 8811 	msr	BASEPRI, r3
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f3bf 8f4f 	dsb	sy
 8006f56:	607b      	str	r3, [r7, #4]
}
 8006f58:	bf00      	nop
 8006f5a:	e7fe      	b.n	8006f5a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006f5c:	4b0d      	ldr	r3, [pc, #52]	; (8006f94 <vPortValidateInterruptPriority+0x74>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006f64:	4b0c      	ldr	r3, [pc, #48]	; (8006f98 <vPortValidateInterruptPriority+0x78>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d90a      	bls.n	8006f82 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f70:	f383 8811 	msr	BASEPRI, r3
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	603b      	str	r3, [r7, #0]
}
 8006f7e:	bf00      	nop
 8006f80:	e7fe      	b.n	8006f80 <vPortValidateInterruptPriority+0x60>
	}
 8006f82:	bf00      	nop
 8006f84:	3714      	adds	r7, #20
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bc80      	pop	{r7}
 8006f8a:	4770      	bx	lr
 8006f8c:	e000e3f0 	.word	0xe000e3f0
 8006f90:	200013a8 	.word	0x200013a8
 8006f94:	e000ed0c 	.word	0xe000ed0c
 8006f98:	200013ac 	.word	0x200013ac

08006f9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b08a      	sub	sp, #40	; 0x28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006fa8:	f7fe fd7e 	bl	8005aa8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006fac:	4b58      	ldr	r3, [pc, #352]	; (8007110 <pvPortMalloc+0x174>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d101      	bne.n	8006fb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006fb4:	f000 f910 	bl	80071d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006fb8:	4b56      	ldr	r3, [pc, #344]	; (8007114 <pvPortMalloc+0x178>)
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f040 808e 	bne.w	80070e2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d01d      	beq.n	8007008 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006fcc:	2208      	movs	r2, #8
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f003 0307 	and.w	r3, r3, #7
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d014      	beq.n	8007008 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f023 0307 	bic.w	r3, r3, #7
 8006fe4:	3308      	adds	r3, #8
 8006fe6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f003 0307 	and.w	r3, r3, #7
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00a      	beq.n	8007008 <pvPortMalloc+0x6c>
	__asm volatile
 8006ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff6:	f383 8811 	msr	BASEPRI, r3
 8006ffa:	f3bf 8f6f 	isb	sy
 8006ffe:	f3bf 8f4f 	dsb	sy
 8007002:	617b      	str	r3, [r7, #20]
}
 8007004:	bf00      	nop
 8007006:	e7fe      	b.n	8007006 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d069      	beq.n	80070e2 <pvPortMalloc+0x146>
 800700e:	4b42      	ldr	r3, [pc, #264]	; (8007118 <pvPortMalloc+0x17c>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	429a      	cmp	r2, r3
 8007016:	d864      	bhi.n	80070e2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007018:	4b40      	ldr	r3, [pc, #256]	; (800711c <pvPortMalloc+0x180>)
 800701a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800701c:	4b3f      	ldr	r3, [pc, #252]	; (800711c <pvPortMalloc+0x180>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007022:	e004      	b.n	800702e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007026:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800702e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	429a      	cmp	r2, r3
 8007036:	d903      	bls.n	8007040 <pvPortMalloc+0xa4>
 8007038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d1f1      	bne.n	8007024 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007040:	4b33      	ldr	r3, [pc, #204]	; (8007110 <pvPortMalloc+0x174>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007046:	429a      	cmp	r2, r3
 8007048:	d04b      	beq.n	80070e2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800704a:	6a3b      	ldr	r3, [r7, #32]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2208      	movs	r2, #8
 8007050:	4413      	add	r3, r2
 8007052:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	6a3b      	ldr	r3, [r7, #32]
 800705a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800705c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705e:	685a      	ldr	r2, [r3, #4]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	1ad2      	subs	r2, r2, r3
 8007064:	2308      	movs	r3, #8
 8007066:	005b      	lsls	r3, r3, #1
 8007068:	429a      	cmp	r2, r3
 800706a:	d91f      	bls.n	80070ac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800706c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4413      	add	r3, r2
 8007072:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	f003 0307 	and.w	r3, r3, #7
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00a      	beq.n	8007094 <pvPortMalloc+0xf8>
	__asm volatile
 800707e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007082:	f383 8811 	msr	BASEPRI, r3
 8007086:	f3bf 8f6f 	isb	sy
 800708a:	f3bf 8f4f 	dsb	sy
 800708e:	613b      	str	r3, [r7, #16]
}
 8007090:	bf00      	nop
 8007092:	e7fe      	b.n	8007092 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007096:	685a      	ldr	r2, [r3, #4]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	1ad2      	subs	r2, r2, r3
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80070a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80070a6:	69b8      	ldr	r0, [r7, #24]
 80070a8:	f000 f8f8 	bl	800729c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070ac:	4b1a      	ldr	r3, [pc, #104]	; (8007118 <pvPortMalloc+0x17c>)
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	4a18      	ldr	r2, [pc, #96]	; (8007118 <pvPortMalloc+0x17c>)
 80070b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80070ba:	4b17      	ldr	r3, [pc, #92]	; (8007118 <pvPortMalloc+0x17c>)
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	4b18      	ldr	r3, [pc, #96]	; (8007120 <pvPortMalloc+0x184>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d203      	bcs.n	80070ce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80070c6:	4b14      	ldr	r3, [pc, #80]	; (8007118 <pvPortMalloc+0x17c>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a15      	ldr	r2, [pc, #84]	; (8007120 <pvPortMalloc+0x184>)
 80070cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80070ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	4b10      	ldr	r3, [pc, #64]	; (8007114 <pvPortMalloc+0x178>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	431a      	orrs	r2, r3
 80070d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80070dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070de:	2200      	movs	r2, #0
 80070e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80070e2:	f7fe fcef 	bl	8005ac4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	f003 0307 	and.w	r3, r3, #7
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00a      	beq.n	8007106 <pvPortMalloc+0x16a>
	__asm volatile
 80070f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f4:	f383 8811 	msr	BASEPRI, r3
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	f3bf 8f4f 	dsb	sy
 8007100:	60fb      	str	r3, [r7, #12]
}
 8007102:	bf00      	nop
 8007104:	e7fe      	b.n	8007104 <pvPortMalloc+0x168>
	return pvReturn;
 8007106:	69fb      	ldr	r3, [r7, #28]
}
 8007108:	4618      	mov	r0, r3
 800710a:	3728      	adds	r7, #40	; 0x28
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	20001fb8 	.word	0x20001fb8
 8007114:	20001fc4 	.word	0x20001fc4
 8007118:	20001fbc 	.word	0x20001fbc
 800711c:	20001fb0 	.word	0x20001fb0
 8007120:	20001fc0 	.word	0x20001fc0

08007124 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d048      	beq.n	80071c8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007136:	2308      	movs	r3, #8
 8007138:	425b      	negs	r3, r3
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	4413      	add	r3, r2
 800713e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	4b21      	ldr	r3, [pc, #132]	; (80071d0 <vPortFree+0xac>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4013      	ands	r3, r2
 800714e:	2b00      	cmp	r3, #0
 8007150:	d10a      	bne.n	8007168 <vPortFree+0x44>
	__asm volatile
 8007152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007156:	f383 8811 	msr	BASEPRI, r3
 800715a:	f3bf 8f6f 	isb	sy
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	60fb      	str	r3, [r7, #12]
}
 8007164:	bf00      	nop
 8007166:	e7fe      	b.n	8007166 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00a      	beq.n	8007186 <vPortFree+0x62>
	__asm volatile
 8007170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007174:	f383 8811 	msr	BASEPRI, r3
 8007178:	f3bf 8f6f 	isb	sy
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	60bb      	str	r3, [r7, #8]
}
 8007182:	bf00      	nop
 8007184:	e7fe      	b.n	8007184 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	685a      	ldr	r2, [r3, #4]
 800718a:	4b11      	ldr	r3, [pc, #68]	; (80071d0 <vPortFree+0xac>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4013      	ands	r3, r2
 8007190:	2b00      	cmp	r3, #0
 8007192:	d019      	beq.n	80071c8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d115      	bne.n	80071c8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	4b0b      	ldr	r3, [pc, #44]	; (80071d0 <vPortFree+0xac>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	43db      	mvns	r3, r3
 80071a6:	401a      	ands	r2, r3
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80071ac:	f7fe fc7c 	bl	8005aa8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	685a      	ldr	r2, [r3, #4]
 80071b4:	4b07      	ldr	r3, [pc, #28]	; (80071d4 <vPortFree+0xb0>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4413      	add	r3, r2
 80071ba:	4a06      	ldr	r2, [pc, #24]	; (80071d4 <vPortFree+0xb0>)
 80071bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80071be:	6938      	ldr	r0, [r7, #16]
 80071c0:	f000 f86c 	bl	800729c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80071c4:	f7fe fc7e 	bl	8005ac4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80071c8:	bf00      	nop
 80071ca:	3718      	adds	r7, #24
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	20001fc4 	.word	0x20001fc4
 80071d4:	20001fbc 	.word	0x20001fbc

080071d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80071de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80071e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80071e4:	4b27      	ldr	r3, [pc, #156]	; (8007284 <prvHeapInit+0xac>)
 80071e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f003 0307 	and.w	r3, r3, #7
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00c      	beq.n	800720c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	3307      	adds	r3, #7
 80071f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f023 0307 	bic.w	r3, r3, #7
 80071fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	4a1f      	ldr	r2, [pc, #124]	; (8007284 <prvHeapInit+0xac>)
 8007208:	4413      	add	r3, r2
 800720a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007210:	4a1d      	ldr	r2, [pc, #116]	; (8007288 <prvHeapInit+0xb0>)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007216:	4b1c      	ldr	r3, [pc, #112]	; (8007288 <prvHeapInit+0xb0>)
 8007218:	2200      	movs	r2, #0
 800721a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	4413      	add	r3, r2
 8007222:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007224:	2208      	movs	r2, #8
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	1a9b      	subs	r3, r3, r2
 800722a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f023 0307 	bic.w	r3, r3, #7
 8007232:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	4a15      	ldr	r2, [pc, #84]	; (800728c <prvHeapInit+0xb4>)
 8007238:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800723a:	4b14      	ldr	r3, [pc, #80]	; (800728c <prvHeapInit+0xb4>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2200      	movs	r2, #0
 8007240:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007242:	4b12      	ldr	r3, [pc, #72]	; (800728c <prvHeapInit+0xb4>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2200      	movs	r2, #0
 8007248:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	1ad2      	subs	r2, r2, r3
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007258:	4b0c      	ldr	r3, [pc, #48]	; (800728c <prvHeapInit+0xb4>)
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	4a0a      	ldr	r2, [pc, #40]	; (8007290 <prvHeapInit+0xb8>)
 8007266:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	4a09      	ldr	r2, [pc, #36]	; (8007294 <prvHeapInit+0xbc>)
 800726e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007270:	4b09      	ldr	r3, [pc, #36]	; (8007298 <prvHeapInit+0xc0>)
 8007272:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007276:	601a      	str	r2, [r3, #0]
}
 8007278:	bf00      	nop
 800727a:	3714      	adds	r7, #20
 800727c:	46bd      	mov	sp, r7
 800727e:	bc80      	pop	{r7}
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	200013b0 	.word	0x200013b0
 8007288:	20001fb0 	.word	0x20001fb0
 800728c:	20001fb8 	.word	0x20001fb8
 8007290:	20001fc0 	.word	0x20001fc0
 8007294:	20001fbc 	.word	0x20001fbc
 8007298:	20001fc4 	.word	0x20001fc4

0800729c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80072a4:	4b27      	ldr	r3, [pc, #156]	; (8007344 <prvInsertBlockIntoFreeList+0xa8>)
 80072a6:	60fb      	str	r3, [r7, #12]
 80072a8:	e002      	b.n	80072b0 <prvInsertBlockIntoFreeList+0x14>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d8f7      	bhi.n	80072aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	4413      	add	r3, r2
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d108      	bne.n	80072de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	685a      	ldr	r2, [r3, #4]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	441a      	add	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	68ba      	ldr	r2, [r7, #8]
 80072e8:	441a      	add	r2, r3
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d118      	bne.n	8007324 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	4b14      	ldr	r3, [pc, #80]	; (8007348 <prvInsertBlockIntoFreeList+0xac>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d00d      	beq.n	800731a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	685a      	ldr	r2, [r3, #4]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	441a      	add	r2, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	601a      	str	r2, [r3, #0]
 8007318:	e008      	b.n	800732c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800731a:	4b0b      	ldr	r3, [pc, #44]	; (8007348 <prvInsertBlockIntoFreeList+0xac>)
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	601a      	str	r2, [r3, #0]
 8007322:	e003      	b.n	800732c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	429a      	cmp	r2, r3
 8007332:	d002      	beq.n	800733a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800733a:	bf00      	nop
 800733c:	3714      	adds	r7, #20
 800733e:	46bd      	mov	sp, r7
 8007340:	bc80      	pop	{r7}
 8007342:	4770      	bx	lr
 8007344:	20001fb0 	.word	0x20001fb0
 8007348:	20001fb8 	.word	0x20001fb8

0800734c <_ZdlPvj>:
 800734c:	f000 b961 	b.w	8007612 <_ZdlPv>

08007350 <_Znwj>:
 8007350:	2801      	cmp	r0, #1
 8007352:	bf38      	it	cc
 8007354:	2001      	movcc	r0, #1
 8007356:	b510      	push	{r4, lr}
 8007358:	4604      	mov	r4, r0
 800735a:	4620      	mov	r0, r4
 800735c:	f000 f9ec 	bl	8007738 <malloc>
 8007360:	b100      	cbz	r0, 8007364 <_Znwj+0x14>
 8007362:	bd10      	pop	{r4, pc}
 8007364:	f000 f958 	bl	8007618 <_ZSt15get_new_handlerv>
 8007368:	b908      	cbnz	r0, 800736e <_Znwj+0x1e>
 800736a:	f000 f9dd 	bl	8007728 <abort>
 800736e:	4780      	blx	r0
 8007370:	e7f3      	b.n	800735a <_Znwj+0xa>

08007372 <_ZSt17__throw_bad_allocv>:
 8007372:	b508      	push	{r3, lr}
 8007374:	f000 f9d8 	bl	8007728 <abort>

08007378 <_ZSt28__throw_bad_array_new_lengthv>:
 8007378:	b508      	push	{r3, lr}
 800737a:	f000 f9d5 	bl	8007728 <abort>

0800737e <_ZSt19__throw_logic_errorPKc>:
 800737e:	b508      	push	{r3, lr}
 8007380:	f000 f9d2 	bl	8007728 <abort>

08007384 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8007384:	b40f      	push	{r0, r1, r2, r3}
 8007386:	b580      	push	{r7, lr}
 8007388:	b082      	sub	sp, #8
 800738a:	af00      	add	r7, sp, #0
 800738c:	f107 0410 	add.w	r4, r7, #16
 8007390:	f854 5b04 	ldr.w	r5, [r4], #4
 8007394:	4628      	mov	r0, r5
 8007396:	f7f8 fedb 	bl	8000150 <strlen>
 800739a:	f200 2307 	addw	r3, r0, #519	; 0x207
 800739e:	f023 0307 	bic.w	r3, r3, #7
 80073a2:	ebad 0d03 	sub.w	sp, sp, r3
 80073a6:	f500 7100 	add.w	r1, r0, #512	; 0x200
 80073aa:	4623      	mov	r3, r4
 80073ac:	462a      	mov	r2, r5
 80073ae:	4668      	mov	r0, sp
 80073b0:	607c      	str	r4, [r7, #4]
 80073b2:	f000 f8ed 	bl	8007590 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 80073b6:	f000 f9b7 	bl	8007728 <abort>
	...

080073bc <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>:
 80073bc:	290d      	cmp	r1, #13
 80073be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073c0:	4605      	mov	r5, r0
 80073c2:	d817      	bhi.n	80073f4 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x38>
 80073c4:	b389      	cbz	r1, 800742a <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x6e>
 80073c6:	4b1a      	ldr	r3, [pc, #104]	; (8007430 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x74>)
 80073c8:	5c5c      	ldrb	r4, [r3, r1]
 80073ca:	4620      	mov	r0, r4
 80073cc:	f7f9 f81a 	bl	8000404 <__aeabi_i2d>
 80073d0:	4606      	mov	r6, r0
 80073d2:	6828      	ldr	r0, [r5, #0]
 80073d4:	460f      	mov	r7, r1
 80073d6:	f7f9 f827 	bl	8000428 <__aeabi_f2d>
 80073da:	4602      	mov	r2, r0
 80073dc:	460b      	mov	r3, r1
 80073de:	4630      	mov	r0, r6
 80073e0:	4639      	mov	r1, r7
 80073e2:	f7f9 f879 	bl	80004d8 <__aeabi_dmul>
 80073e6:	f000 f91f 	bl	8007628 <floor>
 80073ea:	f7f9 fb0f 	bl	8000a0c <__aeabi_d2uiz>
 80073ee:	6068      	str	r0, [r5, #4]
 80073f0:	4620      	mov	r0, r4
 80073f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073f4:	23f9      	movs	r3, #249	; 0xf9
 80073f6:	4a0f      	ldr	r2, [pc, #60]	; (8007434 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x78>)
 80073f8:	1058      	asrs	r0, r3, #1
 80073fa:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 80073fe:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 8007402:	428e      	cmp	r6, r1
 8007404:	bf2f      	iteee	cs
 8007406:	4603      	movcs	r3, r0
 8007408:	1a1b      	subcc	r3, r3, r0
 800740a:	f103 33ff 	addcc.w	r3, r3, #4294967295	; 0xffffffff
 800740e:	1d22      	addcc	r2, r4, #4
 8007410:	2b00      	cmp	r3, #0
 8007412:	dcf1      	bgt.n	80073f8 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x3c>
 8007414:	4b08      	ldr	r3, [pc, #32]	; (8007438 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x7c>)
 8007416:	6814      	ldr	r4, [r2, #0]
 8007418:	429a      	cmp	r2, r3
 800741a:	d003      	beq.n	8007424 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x68>
 800741c:	4620      	mov	r0, r4
 800741e:	f7f8 ffe1 	bl	80003e4 <__aeabi_ui2d>
 8007422:	e7d5      	b.n	80073d0 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x14>
 8007424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007428:	e7e1      	b.n	80073ee <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x32>
 800742a:	2401      	movs	r4, #1
 800742c:	e7e0      	b.n	80073f0 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x34>
 800742e:	bf00      	nop
 8007430:	08007fc4 	.word	0x08007fc4
 8007434:	08007bd8 	.word	0x08007bd8
 8007438:	08007fbc 	.word	0x08007fbc

0800743c <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>:
 800743c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007440:	4692      	mov	sl, r2
 8007442:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007444:	4604      	mov	r4, r0
 8007446:	eb03 0802 	add.w	r8, r3, r2
 800744a:	684b      	ldr	r3, [r1, #4]
 800744c:	460d      	mov	r5, r1
 800744e:	4598      	cmp	r8, r3
 8007450:	d946      	bls.n	80074e0 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0xa4>
 8007452:	2b00      	cmp	r3, #0
 8007454:	6808      	ldr	r0, [r1, #0]
 8007456:	bf14      	ite	ne
 8007458:	f04f 0900 	movne.w	r9, #0
 800745c:	f04f 090b 	moveq.w	r9, #11
 8007460:	f7f8 ffe2 	bl	8000428 <__aeabi_f2d>
 8007464:	4606      	mov	r6, r0
 8007466:	460f      	mov	r7, r1
 8007468:	45c8      	cmp	r8, r9
 800746a:	4640      	mov	r0, r8
 800746c:	bf38      	it	cc
 800746e:	4648      	movcc	r0, r9
 8007470:	f7f8 ffb8 	bl	80003e4 <__aeabi_ui2d>
 8007474:	4632      	mov	r2, r6
 8007476:	463b      	mov	r3, r7
 8007478:	f7f9 f958 	bl	800072c <__aeabi_ddiv>
 800747c:	4680      	mov	r8, r0
 800747e:	4650      	mov	r0, sl
 8007480:	4689      	mov	r9, r1
 8007482:	f7f8 ffaf 	bl	80003e4 <__aeabi_ui2d>
 8007486:	4602      	mov	r2, r0
 8007488:	460b      	mov	r3, r1
 800748a:	e9cd 2300 	strd	r2, r3, [sp]
 800748e:	4642      	mov	r2, r8
 8007490:	464b      	mov	r3, r9
 8007492:	f7f9 fa9d 	bl	80009d0 <__aeabi_dcmple>
 8007496:	b1c0      	cbz	r0, 80074ca <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x8e>
 8007498:	4640      	mov	r0, r8
 800749a:	4649      	mov	r1, r9
 800749c:	f000 f8c4 	bl	8007628 <floor>
 80074a0:	4b11      	ldr	r3, [pc, #68]	; (80074e8 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0xac>)
 80074a2:	2200      	movs	r2, #0
 80074a4:	f7f8 fe62 	bl	800016c <__adddf3>
 80074a8:	f7f9 fab0 	bl	8000a0c <__aeabi_d2uiz>
 80074ac:	ea4f 014a 	mov.w	r1, sl, lsl #1
 80074b0:	4281      	cmp	r1, r0
 80074b2:	bf38      	it	cc
 80074b4:	4601      	movcc	r1, r0
 80074b6:	4628      	mov	r0, r5
 80074b8:	f7ff ff80 	bl	80073bc <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>
 80074bc:	2301      	movs	r3, #1
 80074be:	6060      	str	r0, [r4, #4]
 80074c0:	7023      	strb	r3, [r4, #0]
 80074c2:	4620      	mov	r0, r4
 80074c4:	b002      	add	sp, #8
 80074c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074ce:	4630      	mov	r0, r6
 80074d0:	4639      	mov	r1, r7
 80074d2:	f7f9 f801 	bl	80004d8 <__aeabi_dmul>
 80074d6:	f000 f8a7 	bl	8007628 <floor>
 80074da:	f7f9 fa97 	bl	8000a0c <__aeabi_d2uiz>
 80074de:	6068      	str	r0, [r5, #4]
 80074e0:	2300      	movs	r3, #0
 80074e2:	e9c4 3300 	strd	r3, r3, [r4]
 80074e6:	e7ec      	b.n	80074c2 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x86>
 80074e8:	3ff00000 	.word	0x3ff00000

080074ec <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 80074ec:	4606      	mov	r6, r0
 80074ee:	460c      	mov	r4, r1
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b09c      	sub	sp, #112	; 0x70
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	1ba4      	subs	r4, r4, r6
 80074f8:	2269      	movs	r2, #105	; 0x69
 80074fa:	490e      	ldr	r1, [pc, #56]	; (8007534 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 80074fc:	1d38      	adds	r0, r7, #4
 80074fe:	f000 fa5f 	bl	80079c0 <memcpy>
 8007502:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8007506:	f023 0307 	bic.w	r3, r3, #7
 800750a:	ebad 0d03 	sub.w	sp, sp, r3
 800750e:	466d      	mov	r5, sp
 8007510:	2268      	movs	r2, #104	; 0x68
 8007512:	1d39      	adds	r1, r7, #4
 8007514:	4628      	mov	r0, r5
 8007516:	f000 fa53 	bl	80079c0 <memcpy>
 800751a:	4622      	mov	r2, r4
 800751c:	4631      	mov	r1, r6
 800751e:	f105 0068 	add.w	r0, r5, #104	; 0x68
 8007522:	f000 fa4d 	bl	80079c0 <memcpy>
 8007526:	2300      	movs	r3, #0
 8007528:	442c      	add	r4, r5
 800752a:	4628      	mov	r0, r5
 800752c:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8007530:	f7ff ff25 	bl	800737e <_ZSt19__throw_logic_errorPKc>
 8007534:	08007fd2 	.word	0x08007fd2

08007538 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8007538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800753c:	af00      	add	r7, sp, #0
 800753e:	b084      	sub	sp, #16
 8007540:	466d      	mov	r5, sp
 8007542:	f105 040c 	add.w	r4, r5, #12
 8007546:	4623      	mov	r3, r4
 8007548:	f04f 0c0a 	mov.w	ip, #10
 800754c:	f8df 803c 	ldr.w	r8, [pc, #60]	; 800758c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 8007550:	fbb2 f6fc 	udiv	r6, r2, ip
 8007554:	fb0c 2e16 	mls	lr, ip, r6, r2
 8007558:	f818 e00e 	ldrb.w	lr, [r8, lr]
 800755c:	f803 ed01 	strb.w	lr, [r3, #-1]!
 8007560:	4696      	mov	lr, r2
 8007562:	f1be 0f09 	cmp.w	lr, #9
 8007566:	4632      	mov	r2, r6
 8007568:	d8f2      	bhi.n	8007550 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 800756a:	1ae4      	subs	r4, r4, r3
 800756c:	428c      	cmp	r4, r1
 800756e:	d809      	bhi.n	8007584 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8007570:	f1c4 010c 	rsb	r1, r4, #12
 8007574:	4622      	mov	r2, r4
 8007576:	4429      	add	r1, r5
 8007578:	f000 fa22 	bl	80079c0 <memcpy>
 800757c:	4620      	mov	r0, r4
 800757e:	46bd      	mov	sp, r7
 8007580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007584:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007588:	e7f8      	b.n	800757c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 800758a:	bf00      	nop
 800758c:	0800803b 	.word	0x0800803b

08007590 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8007590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007594:	4607      	mov	r7, r0
 8007596:	4615      	mov	r5, r2
 8007598:	4604      	mov	r4, r0
 800759a:	3901      	subs	r1, #1
 800759c:	eb00 0801 	add.w	r8, r0, r1
 80075a0:	782a      	ldrb	r2, [r5, #0]
 80075a2:	b392      	cbz	r2, 800760a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 80075a4:	4544      	cmp	r4, r8
 80075a6:	d216      	bcs.n	80075d6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x46>
 80075a8:	2a25      	cmp	r2, #37	; 0x25
 80075aa:	d107      	bne.n	80075bc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 80075ac:	786a      	ldrb	r2, [r5, #1]
 80075ae:	2a73      	cmp	r2, #115	; 0x73
 80075b0:	d009      	beq.n	80075c6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 80075b2:	2a7a      	cmp	r2, #122	; 0x7a
 80075b4:	d016      	beq.n	80075e4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x54>
 80075b6:	2a25      	cmp	r2, #37	; 0x25
 80075b8:	d100      	bne.n	80075bc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 80075ba:	3501      	adds	r5, #1
 80075bc:	f815 2b01 	ldrb.w	r2, [r5], #1
 80075c0:	f804 2b01 	strb.w	r2, [r4], #1
 80075c4:	e7ec      	b.n	80075a0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 80075c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80075ca:	3a01      	subs	r2, #1
 80075cc:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80075d0:	b1c9      	cbz	r1, 8007606 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 80075d2:	4544      	cmp	r4, r8
 80075d4:	d103      	bne.n	80075de <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4e>
 80075d6:	4621      	mov	r1, r4
 80075d8:	4638      	mov	r0, r7
 80075da:	f7ff ff87 	bl	80074ec <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 80075de:	f804 1b01 	strb.w	r1, [r4], #1
 80075e2:	e7f3      	b.n	80075cc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 80075e4:	78aa      	ldrb	r2, [r5, #2]
 80075e6:	2a75      	cmp	r2, #117	; 0x75
 80075e8:	d1e8      	bne.n	80075bc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 80075ea:	461e      	mov	r6, r3
 80075ec:	4620      	mov	r0, r4
 80075ee:	f856 2b04 	ldr.w	r2, [r6], #4
 80075f2:	eba8 0104 	sub.w	r1, r8, r4
 80075f6:	f7ff ff9f 	bl	8007538 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 80075fa:	2800      	cmp	r0, #0
 80075fc:	ddeb      	ble.n	80075d6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x46>
 80075fe:	4633      	mov	r3, r6
 8007600:	4404      	add	r4, r0
 8007602:	3503      	adds	r5, #3
 8007604:	e7cc      	b.n	80075a0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8007606:	3502      	adds	r5, #2
 8007608:	e7ca      	b.n	80075a0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 800760a:	7022      	strb	r2, [r4, #0]
 800760c:	1be0      	subs	r0, r4, r7
 800760e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007612 <_ZdlPv>:
 8007612:	f000 b899 	b.w	8007748 <free>
	...

08007618 <_ZSt15get_new_handlerv>:
 8007618:	4b02      	ldr	r3, [pc, #8]	; (8007624 <_ZSt15get_new_handlerv+0xc>)
 800761a:	6818      	ldr	r0, [r3, #0]
 800761c:	f3bf 8f5b 	dmb	ish
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	20001fc8 	.word	0x20001fc8

08007628 <floor>:
 8007628:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800762c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007630:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007634:	2e13      	cmp	r6, #19
 8007636:	460b      	mov	r3, r1
 8007638:	4607      	mov	r7, r0
 800763a:	460c      	mov	r4, r1
 800763c:	4605      	mov	r5, r0
 800763e:	dc32      	bgt.n	80076a6 <floor+0x7e>
 8007640:	2e00      	cmp	r6, #0
 8007642:	da14      	bge.n	800766e <floor+0x46>
 8007644:	a334      	add	r3, pc, #208	; (adr r3, 8007718 <floor+0xf0>)
 8007646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764a:	f7f8 fd8f 	bl	800016c <__adddf3>
 800764e:	2200      	movs	r2, #0
 8007650:	2300      	movs	r3, #0
 8007652:	f7f9 f9d1 	bl	80009f8 <__aeabi_dcmpgt>
 8007656:	b138      	cbz	r0, 8007668 <floor+0x40>
 8007658:	2c00      	cmp	r4, #0
 800765a:	da56      	bge.n	800770a <floor+0xe2>
 800765c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8007660:	4325      	orrs	r5, r4
 8007662:	d055      	beq.n	8007710 <floor+0xe8>
 8007664:	2500      	movs	r5, #0
 8007666:	4c2e      	ldr	r4, [pc, #184]	; (8007720 <floor+0xf8>)
 8007668:	4623      	mov	r3, r4
 800766a:	462f      	mov	r7, r5
 800766c:	e025      	b.n	80076ba <floor+0x92>
 800766e:	4a2d      	ldr	r2, [pc, #180]	; (8007724 <floor+0xfc>)
 8007670:	fa42 f806 	asr.w	r8, r2, r6
 8007674:	ea01 0208 	and.w	r2, r1, r8
 8007678:	4302      	orrs	r2, r0
 800767a:	d01e      	beq.n	80076ba <floor+0x92>
 800767c:	a326      	add	r3, pc, #152	; (adr r3, 8007718 <floor+0xf0>)
 800767e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007682:	f7f8 fd73 	bl	800016c <__adddf3>
 8007686:	2200      	movs	r2, #0
 8007688:	2300      	movs	r3, #0
 800768a:	f7f9 f9b5 	bl	80009f8 <__aeabi_dcmpgt>
 800768e:	2800      	cmp	r0, #0
 8007690:	d0ea      	beq.n	8007668 <floor+0x40>
 8007692:	2c00      	cmp	r4, #0
 8007694:	bfbe      	ittt	lt
 8007696:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800769a:	4133      	asrlt	r3, r6
 800769c:	18e4      	addlt	r4, r4, r3
 800769e:	2500      	movs	r5, #0
 80076a0:	ea24 0408 	bic.w	r4, r4, r8
 80076a4:	e7e0      	b.n	8007668 <floor+0x40>
 80076a6:	2e33      	cmp	r6, #51	; 0x33
 80076a8:	dd0b      	ble.n	80076c2 <floor+0x9a>
 80076aa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80076ae:	d104      	bne.n	80076ba <floor+0x92>
 80076b0:	4602      	mov	r2, r0
 80076b2:	f7f8 fd5b 	bl	800016c <__adddf3>
 80076b6:	4607      	mov	r7, r0
 80076b8:	460b      	mov	r3, r1
 80076ba:	4638      	mov	r0, r7
 80076bc:	4619      	mov	r1, r3
 80076be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076c2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80076c6:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80076ca:	fa28 f802 	lsr.w	r8, r8, r2
 80076ce:	ea10 0f08 	tst.w	r0, r8
 80076d2:	d0f2      	beq.n	80076ba <floor+0x92>
 80076d4:	a310      	add	r3, pc, #64	; (adr r3, 8007718 <floor+0xf0>)
 80076d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076da:	f7f8 fd47 	bl	800016c <__adddf3>
 80076de:	2200      	movs	r2, #0
 80076e0:	2300      	movs	r3, #0
 80076e2:	f7f9 f989 	bl	80009f8 <__aeabi_dcmpgt>
 80076e6:	2800      	cmp	r0, #0
 80076e8:	d0be      	beq.n	8007668 <floor+0x40>
 80076ea:	2c00      	cmp	r4, #0
 80076ec:	da0a      	bge.n	8007704 <floor+0xdc>
 80076ee:	2e14      	cmp	r6, #20
 80076f0:	d101      	bne.n	80076f6 <floor+0xce>
 80076f2:	3401      	adds	r4, #1
 80076f4:	e006      	b.n	8007704 <floor+0xdc>
 80076f6:	2301      	movs	r3, #1
 80076f8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80076fc:	40b3      	lsls	r3, r6
 80076fe:	441d      	add	r5, r3
 8007700:	42af      	cmp	r7, r5
 8007702:	d8f6      	bhi.n	80076f2 <floor+0xca>
 8007704:	ea25 0508 	bic.w	r5, r5, r8
 8007708:	e7ae      	b.n	8007668 <floor+0x40>
 800770a:	2500      	movs	r5, #0
 800770c:	462c      	mov	r4, r5
 800770e:	e7ab      	b.n	8007668 <floor+0x40>
 8007710:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007714:	e7a8      	b.n	8007668 <floor+0x40>
 8007716:	bf00      	nop
 8007718:	8800759c 	.word	0x8800759c
 800771c:	7e37e43c 	.word	0x7e37e43c
 8007720:	bff00000 	.word	0xbff00000
 8007724:	000fffff 	.word	0x000fffff

08007728 <abort>:
 8007728:	2006      	movs	r0, #6
 800772a:	b508      	push	{r3, lr}
 800772c:	f000 f8f0 	bl	8007910 <raise>
 8007730:	2001      	movs	r0, #1
 8007732:	f7fb fe3e 	bl	80033b2 <_exit>
	...

08007738 <malloc>:
 8007738:	4b02      	ldr	r3, [pc, #8]	; (8007744 <malloc+0xc>)
 800773a:	4601      	mov	r1, r0
 800773c:	6818      	ldr	r0, [r3, #0]
 800773e:	f000 b82b 	b.w	8007798 <_malloc_r>
 8007742:	bf00      	nop
 8007744:	2000005c 	.word	0x2000005c

08007748 <free>:
 8007748:	4b02      	ldr	r3, [pc, #8]	; (8007754 <free+0xc>)
 800774a:	4601      	mov	r1, r0
 800774c:	6818      	ldr	r0, [r3, #0]
 800774e:	f000 b945 	b.w	80079dc <_free_r>
 8007752:	bf00      	nop
 8007754:	2000005c 	.word	0x2000005c

08007758 <sbrk_aligned>:
 8007758:	b570      	push	{r4, r5, r6, lr}
 800775a:	4e0e      	ldr	r6, [pc, #56]	; (8007794 <sbrk_aligned+0x3c>)
 800775c:	460c      	mov	r4, r1
 800775e:	6831      	ldr	r1, [r6, #0]
 8007760:	4605      	mov	r5, r0
 8007762:	b911      	cbnz	r1, 800776a <sbrk_aligned+0x12>
 8007764:	f000 f8f0 	bl	8007948 <_sbrk_r>
 8007768:	6030      	str	r0, [r6, #0]
 800776a:	4621      	mov	r1, r4
 800776c:	4628      	mov	r0, r5
 800776e:	f000 f8eb 	bl	8007948 <_sbrk_r>
 8007772:	1c43      	adds	r3, r0, #1
 8007774:	d00a      	beq.n	800778c <sbrk_aligned+0x34>
 8007776:	1cc4      	adds	r4, r0, #3
 8007778:	f024 0403 	bic.w	r4, r4, #3
 800777c:	42a0      	cmp	r0, r4
 800777e:	d007      	beq.n	8007790 <sbrk_aligned+0x38>
 8007780:	1a21      	subs	r1, r4, r0
 8007782:	4628      	mov	r0, r5
 8007784:	f000 f8e0 	bl	8007948 <_sbrk_r>
 8007788:	3001      	adds	r0, #1
 800778a:	d101      	bne.n	8007790 <sbrk_aligned+0x38>
 800778c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007790:	4620      	mov	r0, r4
 8007792:	bd70      	pop	{r4, r5, r6, pc}
 8007794:	20001fd0 	.word	0x20001fd0

08007798 <_malloc_r>:
 8007798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800779c:	1ccd      	adds	r5, r1, #3
 800779e:	f025 0503 	bic.w	r5, r5, #3
 80077a2:	3508      	adds	r5, #8
 80077a4:	2d0c      	cmp	r5, #12
 80077a6:	bf38      	it	cc
 80077a8:	250c      	movcc	r5, #12
 80077aa:	2d00      	cmp	r5, #0
 80077ac:	4607      	mov	r7, r0
 80077ae:	db01      	blt.n	80077b4 <_malloc_r+0x1c>
 80077b0:	42a9      	cmp	r1, r5
 80077b2:	d905      	bls.n	80077c0 <_malloc_r+0x28>
 80077b4:	230c      	movs	r3, #12
 80077b6:	2600      	movs	r6, #0
 80077b8:	603b      	str	r3, [r7, #0]
 80077ba:	4630      	mov	r0, r6
 80077bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007894 <_malloc_r+0xfc>
 80077c4:	f000 f868 	bl	8007898 <__malloc_lock>
 80077c8:	f8d8 3000 	ldr.w	r3, [r8]
 80077cc:	461c      	mov	r4, r3
 80077ce:	bb5c      	cbnz	r4, 8007828 <_malloc_r+0x90>
 80077d0:	4629      	mov	r1, r5
 80077d2:	4638      	mov	r0, r7
 80077d4:	f7ff ffc0 	bl	8007758 <sbrk_aligned>
 80077d8:	1c43      	adds	r3, r0, #1
 80077da:	4604      	mov	r4, r0
 80077dc:	d155      	bne.n	800788a <_malloc_r+0xf2>
 80077de:	f8d8 4000 	ldr.w	r4, [r8]
 80077e2:	4626      	mov	r6, r4
 80077e4:	2e00      	cmp	r6, #0
 80077e6:	d145      	bne.n	8007874 <_malloc_r+0xdc>
 80077e8:	2c00      	cmp	r4, #0
 80077ea:	d048      	beq.n	800787e <_malloc_r+0xe6>
 80077ec:	6823      	ldr	r3, [r4, #0]
 80077ee:	4631      	mov	r1, r6
 80077f0:	4638      	mov	r0, r7
 80077f2:	eb04 0903 	add.w	r9, r4, r3
 80077f6:	f000 f8a7 	bl	8007948 <_sbrk_r>
 80077fa:	4581      	cmp	r9, r0
 80077fc:	d13f      	bne.n	800787e <_malloc_r+0xe6>
 80077fe:	6821      	ldr	r1, [r4, #0]
 8007800:	4638      	mov	r0, r7
 8007802:	1a6d      	subs	r5, r5, r1
 8007804:	4629      	mov	r1, r5
 8007806:	f7ff ffa7 	bl	8007758 <sbrk_aligned>
 800780a:	3001      	adds	r0, #1
 800780c:	d037      	beq.n	800787e <_malloc_r+0xe6>
 800780e:	6823      	ldr	r3, [r4, #0]
 8007810:	442b      	add	r3, r5
 8007812:	6023      	str	r3, [r4, #0]
 8007814:	f8d8 3000 	ldr.w	r3, [r8]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d038      	beq.n	800788e <_malloc_r+0xf6>
 800781c:	685a      	ldr	r2, [r3, #4]
 800781e:	42a2      	cmp	r2, r4
 8007820:	d12b      	bne.n	800787a <_malloc_r+0xe2>
 8007822:	2200      	movs	r2, #0
 8007824:	605a      	str	r2, [r3, #4]
 8007826:	e00f      	b.n	8007848 <_malloc_r+0xb0>
 8007828:	6822      	ldr	r2, [r4, #0]
 800782a:	1b52      	subs	r2, r2, r5
 800782c:	d41f      	bmi.n	800786e <_malloc_r+0xd6>
 800782e:	2a0b      	cmp	r2, #11
 8007830:	d917      	bls.n	8007862 <_malloc_r+0xca>
 8007832:	1961      	adds	r1, r4, r5
 8007834:	42a3      	cmp	r3, r4
 8007836:	6025      	str	r5, [r4, #0]
 8007838:	bf18      	it	ne
 800783a:	6059      	strne	r1, [r3, #4]
 800783c:	6863      	ldr	r3, [r4, #4]
 800783e:	bf08      	it	eq
 8007840:	f8c8 1000 	streq.w	r1, [r8]
 8007844:	5162      	str	r2, [r4, r5]
 8007846:	604b      	str	r3, [r1, #4]
 8007848:	4638      	mov	r0, r7
 800784a:	f104 060b 	add.w	r6, r4, #11
 800784e:	f000 f829 	bl	80078a4 <__malloc_unlock>
 8007852:	f026 0607 	bic.w	r6, r6, #7
 8007856:	1d23      	adds	r3, r4, #4
 8007858:	1af2      	subs	r2, r6, r3
 800785a:	d0ae      	beq.n	80077ba <_malloc_r+0x22>
 800785c:	1b9b      	subs	r3, r3, r6
 800785e:	50a3      	str	r3, [r4, r2]
 8007860:	e7ab      	b.n	80077ba <_malloc_r+0x22>
 8007862:	42a3      	cmp	r3, r4
 8007864:	6862      	ldr	r2, [r4, #4]
 8007866:	d1dd      	bne.n	8007824 <_malloc_r+0x8c>
 8007868:	f8c8 2000 	str.w	r2, [r8]
 800786c:	e7ec      	b.n	8007848 <_malloc_r+0xb0>
 800786e:	4623      	mov	r3, r4
 8007870:	6864      	ldr	r4, [r4, #4]
 8007872:	e7ac      	b.n	80077ce <_malloc_r+0x36>
 8007874:	4634      	mov	r4, r6
 8007876:	6876      	ldr	r6, [r6, #4]
 8007878:	e7b4      	b.n	80077e4 <_malloc_r+0x4c>
 800787a:	4613      	mov	r3, r2
 800787c:	e7cc      	b.n	8007818 <_malloc_r+0x80>
 800787e:	230c      	movs	r3, #12
 8007880:	4638      	mov	r0, r7
 8007882:	603b      	str	r3, [r7, #0]
 8007884:	f000 f80e 	bl	80078a4 <__malloc_unlock>
 8007888:	e797      	b.n	80077ba <_malloc_r+0x22>
 800788a:	6025      	str	r5, [r4, #0]
 800788c:	e7dc      	b.n	8007848 <_malloc_r+0xb0>
 800788e:	605b      	str	r3, [r3, #4]
 8007890:	deff      	udf	#255	; 0xff
 8007892:	bf00      	nop
 8007894:	20001fcc 	.word	0x20001fcc

08007898 <__malloc_lock>:
 8007898:	4801      	ldr	r0, [pc, #4]	; (80078a0 <__malloc_lock+0x8>)
 800789a:	f000 b88f 	b.w	80079bc <__retarget_lock_acquire_recursive>
 800789e:	bf00      	nop
 80078a0:	20002110 	.word	0x20002110

080078a4 <__malloc_unlock>:
 80078a4:	4801      	ldr	r0, [pc, #4]	; (80078ac <__malloc_unlock+0x8>)
 80078a6:	f000 b88a 	b.w	80079be <__retarget_lock_release_recursive>
 80078aa:	bf00      	nop
 80078ac:	20002110 	.word	0x20002110

080078b0 <memset>:
 80078b0:	4603      	mov	r3, r0
 80078b2:	4402      	add	r2, r0
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d100      	bne.n	80078ba <memset+0xa>
 80078b8:	4770      	bx	lr
 80078ba:	f803 1b01 	strb.w	r1, [r3], #1
 80078be:	e7f9      	b.n	80078b4 <memset+0x4>

080078c0 <_raise_r>:
 80078c0:	291f      	cmp	r1, #31
 80078c2:	b538      	push	{r3, r4, r5, lr}
 80078c4:	4604      	mov	r4, r0
 80078c6:	460d      	mov	r5, r1
 80078c8:	d904      	bls.n	80078d4 <_raise_r+0x14>
 80078ca:	2316      	movs	r3, #22
 80078cc:	6003      	str	r3, [r0, #0]
 80078ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078d2:	bd38      	pop	{r3, r4, r5, pc}
 80078d4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80078d6:	b112      	cbz	r2, 80078de <_raise_r+0x1e>
 80078d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80078dc:	b94b      	cbnz	r3, 80078f2 <_raise_r+0x32>
 80078de:	4620      	mov	r0, r4
 80078e0:	f000 f830 	bl	8007944 <_getpid_r>
 80078e4:	462a      	mov	r2, r5
 80078e6:	4601      	mov	r1, r0
 80078e8:	4620      	mov	r0, r4
 80078ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078ee:	f000 b817 	b.w	8007920 <_kill_r>
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d00a      	beq.n	800790c <_raise_r+0x4c>
 80078f6:	1c59      	adds	r1, r3, #1
 80078f8:	d103      	bne.n	8007902 <_raise_r+0x42>
 80078fa:	2316      	movs	r3, #22
 80078fc:	6003      	str	r3, [r0, #0]
 80078fe:	2001      	movs	r0, #1
 8007900:	e7e7      	b.n	80078d2 <_raise_r+0x12>
 8007902:	2400      	movs	r4, #0
 8007904:	4628      	mov	r0, r5
 8007906:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800790a:	4798      	blx	r3
 800790c:	2000      	movs	r0, #0
 800790e:	e7e0      	b.n	80078d2 <_raise_r+0x12>

08007910 <raise>:
 8007910:	4b02      	ldr	r3, [pc, #8]	; (800791c <raise+0xc>)
 8007912:	4601      	mov	r1, r0
 8007914:	6818      	ldr	r0, [r3, #0]
 8007916:	f7ff bfd3 	b.w	80078c0 <_raise_r>
 800791a:	bf00      	nop
 800791c:	2000005c 	.word	0x2000005c

08007920 <_kill_r>:
 8007920:	b538      	push	{r3, r4, r5, lr}
 8007922:	2300      	movs	r3, #0
 8007924:	4d06      	ldr	r5, [pc, #24]	; (8007940 <_kill_r+0x20>)
 8007926:	4604      	mov	r4, r0
 8007928:	4608      	mov	r0, r1
 800792a:	4611      	mov	r1, r2
 800792c:	602b      	str	r3, [r5, #0]
 800792e:	f7fb fd30 	bl	8003392 <_kill>
 8007932:	1c43      	adds	r3, r0, #1
 8007934:	d102      	bne.n	800793c <_kill_r+0x1c>
 8007936:	682b      	ldr	r3, [r5, #0]
 8007938:	b103      	cbz	r3, 800793c <_kill_r+0x1c>
 800793a:	6023      	str	r3, [r4, #0]
 800793c:	bd38      	pop	{r3, r4, r5, pc}
 800793e:	bf00      	nop
 8007940:	2000210c 	.word	0x2000210c

08007944 <_getpid_r>:
 8007944:	f7fb bd1e 	b.w	8003384 <_getpid>

08007948 <_sbrk_r>:
 8007948:	b538      	push	{r3, r4, r5, lr}
 800794a:	2300      	movs	r3, #0
 800794c:	4d05      	ldr	r5, [pc, #20]	; (8007964 <_sbrk_r+0x1c>)
 800794e:	4604      	mov	r4, r0
 8007950:	4608      	mov	r0, r1
 8007952:	602b      	str	r3, [r5, #0]
 8007954:	f7fb fd38 	bl	80033c8 <_sbrk>
 8007958:	1c43      	adds	r3, r0, #1
 800795a:	d102      	bne.n	8007962 <_sbrk_r+0x1a>
 800795c:	682b      	ldr	r3, [r5, #0]
 800795e:	b103      	cbz	r3, 8007962 <_sbrk_r+0x1a>
 8007960:	6023      	str	r3, [r4, #0]
 8007962:	bd38      	pop	{r3, r4, r5, pc}
 8007964:	2000210c 	.word	0x2000210c

08007968 <__errno>:
 8007968:	4b01      	ldr	r3, [pc, #4]	; (8007970 <__errno+0x8>)
 800796a:	6818      	ldr	r0, [r3, #0]
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	2000005c 	.word	0x2000005c

08007974 <__libc_init_array>:
 8007974:	b570      	push	{r4, r5, r6, lr}
 8007976:	2600      	movs	r6, #0
 8007978:	4d0c      	ldr	r5, [pc, #48]	; (80079ac <__libc_init_array+0x38>)
 800797a:	4c0d      	ldr	r4, [pc, #52]	; (80079b0 <__libc_init_array+0x3c>)
 800797c:	1b64      	subs	r4, r4, r5
 800797e:	10a4      	asrs	r4, r4, #2
 8007980:	42a6      	cmp	r6, r4
 8007982:	d109      	bne.n	8007998 <__libc_init_array+0x24>
 8007984:	f000 f872 	bl	8007a6c <_init>
 8007988:	2600      	movs	r6, #0
 800798a:	4d0a      	ldr	r5, [pc, #40]	; (80079b4 <__libc_init_array+0x40>)
 800798c:	4c0a      	ldr	r4, [pc, #40]	; (80079b8 <__libc_init_array+0x44>)
 800798e:	1b64      	subs	r4, r4, r5
 8007990:	10a4      	asrs	r4, r4, #2
 8007992:	42a6      	cmp	r6, r4
 8007994:	d105      	bne.n	80079a2 <__libc_init_array+0x2e>
 8007996:	bd70      	pop	{r4, r5, r6, pc}
 8007998:	f855 3b04 	ldr.w	r3, [r5], #4
 800799c:	4798      	blx	r3
 800799e:	3601      	adds	r6, #1
 80079a0:	e7ee      	b.n	8007980 <__libc_init_array+0xc>
 80079a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80079a6:	4798      	blx	r3
 80079a8:	3601      	adds	r6, #1
 80079aa:	e7f2      	b.n	8007992 <__libc_init_array+0x1e>
 80079ac:	08008048 	.word	0x08008048
 80079b0:	08008048 	.word	0x08008048
 80079b4:	08008048 	.word	0x08008048
 80079b8:	08008050 	.word	0x08008050

080079bc <__retarget_lock_acquire_recursive>:
 80079bc:	4770      	bx	lr

080079be <__retarget_lock_release_recursive>:
 80079be:	4770      	bx	lr

080079c0 <memcpy>:
 80079c0:	440a      	add	r2, r1
 80079c2:	4291      	cmp	r1, r2
 80079c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80079c8:	d100      	bne.n	80079cc <memcpy+0xc>
 80079ca:	4770      	bx	lr
 80079cc:	b510      	push	{r4, lr}
 80079ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079d2:	4291      	cmp	r1, r2
 80079d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079d8:	d1f9      	bne.n	80079ce <memcpy+0xe>
 80079da:	bd10      	pop	{r4, pc}

080079dc <_free_r>:
 80079dc:	b538      	push	{r3, r4, r5, lr}
 80079de:	4605      	mov	r5, r0
 80079e0:	2900      	cmp	r1, #0
 80079e2:	d040      	beq.n	8007a66 <_free_r+0x8a>
 80079e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079e8:	1f0c      	subs	r4, r1, #4
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	bfb8      	it	lt
 80079ee:	18e4      	addlt	r4, r4, r3
 80079f0:	f7ff ff52 	bl	8007898 <__malloc_lock>
 80079f4:	4a1c      	ldr	r2, [pc, #112]	; (8007a68 <_free_r+0x8c>)
 80079f6:	6813      	ldr	r3, [r2, #0]
 80079f8:	b933      	cbnz	r3, 8007a08 <_free_r+0x2c>
 80079fa:	6063      	str	r3, [r4, #4]
 80079fc:	6014      	str	r4, [r2, #0]
 80079fe:	4628      	mov	r0, r5
 8007a00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a04:	f7ff bf4e 	b.w	80078a4 <__malloc_unlock>
 8007a08:	42a3      	cmp	r3, r4
 8007a0a:	d908      	bls.n	8007a1e <_free_r+0x42>
 8007a0c:	6820      	ldr	r0, [r4, #0]
 8007a0e:	1821      	adds	r1, r4, r0
 8007a10:	428b      	cmp	r3, r1
 8007a12:	bf01      	itttt	eq
 8007a14:	6819      	ldreq	r1, [r3, #0]
 8007a16:	685b      	ldreq	r3, [r3, #4]
 8007a18:	1809      	addeq	r1, r1, r0
 8007a1a:	6021      	streq	r1, [r4, #0]
 8007a1c:	e7ed      	b.n	80079fa <_free_r+0x1e>
 8007a1e:	461a      	mov	r2, r3
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	b10b      	cbz	r3, 8007a28 <_free_r+0x4c>
 8007a24:	42a3      	cmp	r3, r4
 8007a26:	d9fa      	bls.n	8007a1e <_free_r+0x42>
 8007a28:	6811      	ldr	r1, [r2, #0]
 8007a2a:	1850      	adds	r0, r2, r1
 8007a2c:	42a0      	cmp	r0, r4
 8007a2e:	d10b      	bne.n	8007a48 <_free_r+0x6c>
 8007a30:	6820      	ldr	r0, [r4, #0]
 8007a32:	4401      	add	r1, r0
 8007a34:	1850      	adds	r0, r2, r1
 8007a36:	4283      	cmp	r3, r0
 8007a38:	6011      	str	r1, [r2, #0]
 8007a3a:	d1e0      	bne.n	80079fe <_free_r+0x22>
 8007a3c:	6818      	ldr	r0, [r3, #0]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	4408      	add	r0, r1
 8007a42:	6010      	str	r0, [r2, #0]
 8007a44:	6053      	str	r3, [r2, #4]
 8007a46:	e7da      	b.n	80079fe <_free_r+0x22>
 8007a48:	d902      	bls.n	8007a50 <_free_r+0x74>
 8007a4a:	230c      	movs	r3, #12
 8007a4c:	602b      	str	r3, [r5, #0]
 8007a4e:	e7d6      	b.n	80079fe <_free_r+0x22>
 8007a50:	6820      	ldr	r0, [r4, #0]
 8007a52:	1821      	adds	r1, r4, r0
 8007a54:	428b      	cmp	r3, r1
 8007a56:	bf01      	itttt	eq
 8007a58:	6819      	ldreq	r1, [r3, #0]
 8007a5a:	685b      	ldreq	r3, [r3, #4]
 8007a5c:	1809      	addeq	r1, r1, r0
 8007a5e:	6021      	streq	r1, [r4, #0]
 8007a60:	6063      	str	r3, [r4, #4]
 8007a62:	6054      	str	r4, [r2, #4]
 8007a64:	e7cb      	b.n	80079fe <_free_r+0x22>
 8007a66:	bd38      	pop	{r3, r4, r5, pc}
 8007a68:	20001fcc 	.word	0x20001fcc

08007a6c <_init>:
 8007a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a6e:	bf00      	nop
 8007a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a72:	bc08      	pop	{r3}
 8007a74:	469e      	mov	lr, r3
 8007a76:	4770      	bx	lr

08007a78 <_fini>:
 8007a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7a:	bf00      	nop
 8007a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a7e:	bc08      	pop	{r3}
 8007a80:	469e      	mov	lr, r3
 8007a82:	4770      	bx	lr
