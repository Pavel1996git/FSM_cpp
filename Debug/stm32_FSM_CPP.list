
stm32_FSM_CPP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008620  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d0  08008730  08008730  00018730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d00  08008d00  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08008d00  08008d00  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008d00  08008d00  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008d00  08008d00  00018d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08008d08  08008d08  00018d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08008d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002184  20000060  08008d70  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200021e4  08008d70  000221e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   000268a6  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fbf  00000000  00000000  00046972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ac0  00000000  00000000  0004a938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000146c  00000000  00000000  0004c3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006f3b  00000000  00000000  0004d864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015d9a  00000000  00000000  0005479f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ac90b  00000000  00000000  0006a539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007d60  00000000  00000000  00116e44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0011eba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08008718 	.word	0x08008718

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08008718 	.word	0x08008718

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <_ZSt17__size_to_integerj>:

  // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
  inline _GLIBCXX_CONSTEXPR int
  __size_to_integer(int __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR unsigned
  __size_to_integer(unsigned __n) { return __n; }
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr

08000a60 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr

08000a76 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a84:	d205      	bcs.n	8000a92 <_ZSt16__deque_buf_sizej+0x1c>
 8000a86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a90:	e000      	b.n	8000a94 <_ZSt16__deque_buf_sizej+0x1e>
 8000a92:	2301      	movs	r3, #1
 8000a94:	4618      	mov	r0, r3
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr

08000a9e <_ZNKSt4hashIaEclEa>:

  /// Explicit specialization for char.
  _Cxx_hashtable_define_trivial_hash(char)

  /// Explicit specialization for signed char.
  _Cxx_hashtable_define_trivial_hash(signed char)
 8000a9e:	b480      	push	{r7}
 8000aa0:	b083      	sub	sp, #12
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
 8000aa6:	460b      	mov	r3, r1
 8000aa8:	70fb      	strb	r3, [r7, #3]
 8000aaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <_ZNSt8__detail15_Hash_node_baseC1Ev>:
   */
  struct _Hash_node_base
  {
    _Hash_node_base* _M_nxt;

    _Hash_node_base() noexcept : _M_nxt() { }
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr

08000ad2 <_ZNKSt8__detail18_Mod_range_hashingclEjj>:
    typedef std::size_t first_argument_type;
    typedef std::size_t second_argument_type;
    typedef std::size_t result_type;

    result_type
    operator()(first_argument_type __num,
 8000ad2:	b480      	push	{r7}
 8000ad4:	b085      	sub	sp, #20
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	60f8      	str	r0, [r7, #12]
 8000ada:	60b9      	str	r1, [r7, #8]
 8000adc:	607a      	str	r2, [r7, #4]
	       second_argument_type __den) const noexcept
    { return __num % __den; }
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	fbb3 f2f2 	udiv	r2, r3, r2
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	fb01 f202 	mul.w	r2, r1, r2
 8000aec:	1a9b      	subs	r3, r3, r2
 8000aee:	4618      	mov	r0, r3
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <_ZNSt8__detail20_Prime_rehash_policyC1Ef>:
  /// smallest prime that keeps the load factor small enough.
  struct _Prime_rehash_policy
  {
    using __has_load_factor = true_type;

    _Prime_rehash_policy(float __z = 1.0) noexcept
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
    : _M_max_load_factor(__z), _M_next_resize(0) { }
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	683a      	ldr	r2, [r7, #0]
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4618      	mov	r0, r3
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr

08000b1a <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>:
		   std::size_t __n_ins) const;

    typedef std::size_t _State;

    _State
    _M_state() const
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
    { return _M_next_resize; }
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	4618      	mov	r0, r3
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr

08000b30 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d201      	bcs.n	8000b4a <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	e000      	b.n	8000b4c <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8000b4a:	687b      	ldr	r3, [r7, #4]
    }
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr

08000b56 <_ZNSt5queueIaSt5dequeIaSaIaEEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f000 fb34 	bl	80011ce <_ZNSt5dequeIaSaIaEED1Ev>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <_ZN15TransitionTableC1Ev>:
//volatile Queue eventQueue[NUM_MACHINES];

#include "UML_FSM.hpp"

// TransitionTable constructor
TransitionTable::TransitionTable() : num_states(NUM_STATES), num_events(NUM_EVENTS) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3350      	adds	r3, #80	; 0x50
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 fb12 	bl	80011a6 <_ZNSt5queueIaSt5dequeIaSaIaEEEC1IS2_vEEv>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	220a      	movs	r2, #10
 8000b86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	220a      	movs	r2, #10
 8000b8e:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
    stateFunctions.fill(nullptr);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2200      	movs	r2, #0
 8000b96:	60fa      	str	r2, [r7, #12]
 8000b98:	f107 020c 	add.w	r2, r7, #12
 8000b9c:	4611      	mov	r1, r2
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 fb3a 	bl	8001218 <_ZNSt5arrayIPFvvELj10EE4fillERKS1_>
}
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <_ZNSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EEC1Ev>:
    protected:
      typedef std::size_t 				__hash_code;

      // We need the default constructor for the local iterators and _Hashtable
      // default constructor.
      _Hash_code_base() = default;
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f000 fb44 	bl	8001244 <_ZNSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIaELb1EEC1Ev>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <_ZNSt8__detail15_Hashtable_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>:
      _S_node_equals(const _Hash_node_code_cache<true>& __lhn,
		     const _Hash_node_code_cache<true>& __rhn)
      { return __lhn._M_hash_code == __rhn._M_hash_code; }

    protected:
      _Hashtable_base() = default;
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff ffed 	bl	8000bae <_ZNSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EEC1Ev>
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f000 fb3f 	bl	8001258 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIaELb1EEC1Ev>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEELb1EED1Ev>:
    struct _Hashtable_ebo_helper<_Nm, _Tp, true>
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f000 fb49 	bl	8001284 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEED1Ev>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEEC1Ev>:
      using __buckets_alloc_type =
	__alloc_rebind<__node_alloc_type, __node_base_ptr>;
      using __buckets_alloc_traits = std::allocator_traits<__buckets_alloc_type>;
      using __buckets_ptr = __node_base_ptr*;

      _Hashtable_alloc() = default;
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f000 fb31 	bl	800126c <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEELb1EEC1Ev>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEED1Ev>:
    struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc>
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff ffe1 	bl	8000be4 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEELb1EED1Ev>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4618      	mov	r0, r3
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>:
		   const _Hash&, const _Equal&, const allocator_type&,
		   false_type __uks);

    public:
      // Constructor, destructor, assignment, swap
      _Hashtable() = default;
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f7ff ffc6 	bl	8000bc6 <_ZNSt8__detail15_Hashtable_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff ffde 	bl	8000bfc <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEEC1Ev>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f103 0218 	add.w	r2, r3, #24
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3308      	adds	r3, #8
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ff2f 	bl	8000ab8 <_ZNSt8__detail15_Hash_node_baseC1Ev>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3310      	adds	r3, #16
 8000c64:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff ff45 	bl	8000af8 <_ZNSt8__detail20_Prime_rehash_policyC1Ef>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <_ZNSt13unordered_mapIaP9BaseStateSt4hashIaESt8equal_toIaESaISt4pairIKaS1_EEEC1Ev>:
#endif

      //construct/destroy/copy

      /// Default constructor.
      unordered_map() = default;
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ffcf 	bl	8000c2c <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <_ZNSt13unordered_mapIaP9BaseStateSt4hashIaESt8equal_toIaESaISt4pairIKaS1_EEED1Ev>:
    class unordered_map
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 fafa 	bl	800129c <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <_ZN15TransitionTableD1Ev>:

// Define StateFunction type
using StateFunction = void (*)();

// TransitionTable class definition
class TransitionTable {
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	3350      	adds	r3, #80	; 0x50
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff ff49 	bl	8000b56 <_ZNSt5queueIaSt5dequeIaSaIaEEED1Ev>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <_ZNSt5queueIaSt5dequeIaSaIaEEEaSEOS3_>:
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
 8000cd6:	6039      	str	r1, [r7, #0]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	683a      	ldr	r2, [r7, #0]
 8000cdc:	4611      	mov	r1, r2
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 faee 	bl	80012c0 <_ZNSt5dequeIaSaIaEEaSEOS1_>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <_ZN15TransitionTableaSEOS_>:
 8000cee:	b5b0      	push	{r4, r5, r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
 8000cf6:	6039      	str	r1, [r7, #0]
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	4614      	mov	r4, r2
 8000cfe:	461d      	mov	r5, r3
 8000d00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d08:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d0c:	e884 0003 	stmia.w	r4, {r0, r1}
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	f102 0428 	add.w	r4, r2, #40	; 0x28
 8000d18:	f103 0528 	add.w	r5, r3, #40	; 0x28
 8000d1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d24:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d28:	e884 0003 	stmia.w	r4, {r0, r1}
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	3350      	adds	r3, #80	; 0x50
 8000d36:	4619      	mov	r1, r3
 8000d38:	4610      	mov	r0, r2
 8000d3a:	f7ff ffc8 	bl	8000cce <_ZNSt5queueIaSt5dequeIaSaIaEEEaSEOS3_>
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	f993 2078 	ldrsb.w	r2, [r3, #120]	; 0x78
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	f993 2079 	ldrsb.w	r2, [r3, #121]	; 0x79
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bdb0      	pop	{r4, r5, r7, pc}

08000d60 <_ZN18FiniteStateMachineC1Ev>:

// FiniteStateMachine constructor
FiniteStateMachine::FiniteStateMachine() : thisState(-1), startState(-1) {
 8000d60:	b590      	push	{r4, r7, lr}
 8000d62:	b0a3      	sub	sp, #140	; 0x8c
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3304      	adds	r3, #4
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ff86 	bl	8000c7e <_ZNSt13unordered_mapIaP9BaseStateSt4hashIaESt8equal_toIaESaISt4pairIKaS1_EEEC1Ev>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	22ff      	movs	r2, #255	; 0xff
 8000d76:	f883 2020 	strb.w	r2, [r3, #32]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	22ff      	movs	r2, #255	; 0xff
 8000d7e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	3324      	adds	r3, #36	; 0x24
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fef2 	bl	8000b70 <_ZN15TransitionTableC1Ev>
    transitionTable = TransitionTable();
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8000d92:	f107 030c 	add.w	r3, r7, #12
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff feea 	bl	8000b70 <_ZN15TransitionTableC1Ev>
 8000d9c:	f107 030c 	add.w	r3, r7, #12
 8000da0:	4619      	mov	r1, r3
 8000da2:	4620      	mov	r0, r4
 8000da4:	f7ff ffa3 	bl	8000cee <_ZN15TransitionTableaSEOS_>
 8000da8:	f107 030c 	add.w	r3, r7, #12
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff80 	bl	8000cb2 <_ZN15TransitionTableD1Ev>
}
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4618      	mov	r0, r3
 8000db6:	378c      	adds	r7, #140	; 0x8c
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd90      	pop	{r4, r7, pc}

08000dbc <_ZN18FiniteStateMachineD1Ev>:

// FiniteStateMachine destructor
FiniteStateMachine::~FiniteStateMachine() {}
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3324      	adds	r3, #36	; 0x24
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ff72 	bl	8000cb2 <_ZN15TransitionTableD1Ev>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ff60 	bl	8000c98 <_ZNSt13unordered_mapIaP9BaseStateSt4hashIaESt8equal_toIaESaISt4pairIKaS1_EEED1Ev>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <_ZN9BaseStateC1EaaP18FiniteStateMachinePFvvE>:

// BaseState constructor
BaseState::BaseState(stateType initial, stateType new_state, FiniteStateMachine* pFSM, StateFunction funct)
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	460b      	mov	r3, r1
 8000df0:	72fb      	strb	r3, [r7, #11]
 8000df2:	4613      	mov	r3, r2
 8000df4:	72bb      	strb	r3, [r7, #10]
    : initial_state(initial), new_state(new_state), pFiniteStateMachine(pFSM), functPtr(funct) {
 8000df6:	4a11      	ldr	r2, [pc, #68]	; (8000e3c <_ZN9BaseStateC1EaaP18FiniteStateMachinePFvvE+0x58>)
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	711a      	strb	r2, [r3, #4]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	7aba      	ldrb	r2, [r7, #10]
 8000e08:	715a      	strb	r2, [r3, #5]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e14:	60da      	str	r2, [r3, #12]
	pFiniteStateMachine->stateDictionary.emplace(initial, this);
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	1d19      	adds	r1, r3, #4
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	61fb      	str	r3, [r7, #28]
 8000e20:	f107 0014 	add.w	r0, r7, #20
 8000e24:	f107 031c 	add.w	r3, r7, #28
 8000e28:	f107 020b 	add.w	r2, r7, #11
 8000e2c:	f000 fa5b 	bl	80012e6 <_ZNSt13unordered_mapIaP9BaseStateSt4hashIaESt8equal_toIaESaISt4pairIKaS1_EEE7emplaceIJRaS1_EEES6_INSt8__detail14_Node_iteratorIS8_Lb0ELb0EEEbEDpOT_>
}
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4618      	mov	r0, r3
 8000e34:	3720      	adds	r7, #32
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	080087f0 	.word	0x080087f0

08000e40 <_ZN9BaseState4nextEv>:
void BaseState::next()
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]

}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr
	...

08000e54 <_ZN14StandardStatesC1EaaP18FiniteStateMachinePFvvE>:
void ChoiseStates::next()
{
	goChoise();
}
// StandardStates constructor
StandardStates::StandardStates(stateType initial_state, stateType new_state, FiniteStateMachine* pFiniteStateMachine, StateFunction functPtr)
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af02      	add	r7, sp, #8
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	460b      	mov	r3, r1
 8000e60:	72fb      	strb	r3, [r7, #11]
 8000e62:	4613      	mov	r3, r2
 8000e64:	72bb      	strb	r3, [r7, #10]
    : BaseState(initial_state, new_state, pFiniteStateMachine, functPtr) {
 8000e66:	68f8      	ldr	r0, [r7, #12]
 8000e68:	f997 200a 	ldrsb.w	r2, [r7, #10]
 8000e6c:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f7ff ffb5 	bl	8000de4 <_ZN9BaseStateC1EaaP18FiniteStateMachinePFvvE>
 8000e7a:	4a09      	ldr	r2, [pc, #36]	; (8000ea0 <_ZN14StandardStatesC1EaaP18FiniteStateMachinePFvvE+0x4c>)
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	601a      	str	r2, [r3, #0]
    pFiniteStateMachine->transitionTable.stateFunctions.at(initial_state) = functPtr;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3324      	adds	r3, #36	; 0x24
 8000e84:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8000e88:	4611      	mov	r1, r2
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 fa46 	bl	800131c <_ZNSt5arrayIPFvvELj10EE2atEj>
 8000e90:	4602      	mov	r2, r0
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	6013      	str	r3, [r2, #0]
}
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	080087e4 	.word	0x080087e4

08000ea4 <_ZN14StandardStates3endEv>:

// StandardStates method: end
void StandardStates::end() {
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]

    pFiniteStateMachine->thisState = new_state;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	f992 2005 	ldrsb.w	r2, [r2, #5]
 8000eb6:	f883 2020 	strb.w	r2, [r3, #32]
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr

08000ec4 <_ZN14StandardStates4nextEv>:

void StandardStates::next ()
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	end();
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff ffe9 	bl	8000ea4 <_ZN14StandardStates3endEv>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <_ZN11EventStatesC1EaP18FiniteStateMachinePFvvE>:
void FiniteStateMachine::next() {
    this->thisState = new_state;
}
*/
// EventStates constructor
EventStates::EventStates(stateType initial_state, FiniteStateMachine* pFiniteStateMachine, StateFunction functPtr)
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b088      	sub	sp, #32
 8000ee0:	af02      	add	r7, sp, #8
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	607a      	str	r2, [r7, #4]
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	72fb      	strb	r3, [r7, #11]
    : BaseState(initial_state, -1, pFiniteStateMachine, functPtr) {
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000efc:	f7ff ff72 	bl	8000de4 <_ZN9BaseStateC1EaaP18FiniteStateMachinePFvvE>
 8000f00:	4a10      	ldr	r2, [pc, #64]	; (8000f44 <_ZN11EventStatesC1EaP18FiniteStateMachinePFvvE+0x68>)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	601a      	str	r2, [r3, #0]
    transitionEvent.fill(-1);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	3310      	adds	r3, #16
 8000f0a:	22ff      	movs	r2, #255	; 0xff
 8000f0c:	75fa      	strb	r2, [r7, #23]
 8000f0e:	f107 0217 	add.w	r2, r7, #23
 8000f12:	4611      	mov	r1, r2
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 fa1b 	bl	8001350 <_ZNSt5arrayIaLj10EE4fillERKa>
    eventQueuePtr = &(pFiniteStateMachine->transitionTable.eventQueue);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f103 0274 	add.w	r2, r3, #116	; 0x74
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	61da      	str	r2, [r3, #28]
    pFiniteStateMachine->transitionTable.stateFunctions.at(initial_state) = functPtr;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3324      	adds	r3, #36	; 0x24
 8000f28:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8000f2c:	4611      	mov	r1, r2
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 f9f4 	bl	800131c <_ZNSt5arrayIPFvvELj10EE2atEj>
 8000f34:	4602      	mov	r2, r0
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	6013      	str	r3, [r2, #0]
}
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	080087d8 	.word	0x080087d8

08000f48 <_ZN11EventStates8addEventEaa>:

// EventStates method: addEvent
void EventStates::addEvent(stateType event, stateType new_state) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	460b      	mov	r3, r1
 8000f52:	70fb      	strb	r3, [r7, #3]
 8000f54:	4613      	mov	r3, r2
 8000f56:	70bb      	strb	r3, [r7, #2]
    transitionEvent.at(event) = new_state;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3310      	adds	r3, #16
 8000f5c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8000f60:	4611      	mov	r1, r2
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 fa0a 	bl	800137c <_ZNSt5arrayIaLj10EE2atEj>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	78bb      	ldrb	r3, [r7, #2]
 8000f6c:	7013      	strb	r3, [r2, #0]
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <_ZN11EventStates9waitEventEv>:

// EventStates method: waitEvent
void EventStates::waitEvent() {
 8000f76:	b590      	push	{r4, r7, lr}
 8000f78:	b085      	sub	sp, #20
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
	stateType currentEvent;
    while (1) {

        while (eventQueuePtr->empty()) {
 8000f7e:	e002      	b.n	8000f86 <_ZN11EventStates9waitEventEv+0x10>
            osDelay(1);
 8000f80:	2001      	movs	r0, #1
 8000f82:	f004 facb 	bl	800551c <osDelay>
        while (eventQueuePtr->empty()) {
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 fa10 	bl	80013b0 <_ZNKSt5queueIaSt5dequeIaSaIaEEE5emptyEv>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d1f4      	bne.n	8000f80 <_ZN11EventStates9waitEventEv+0xa>
        }

       currentEvent = eventQueuePtr->front();
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 fa15 	bl	80013ca <_ZNSt5queueIaSt5dequeIaSaIaEEE5frontEv>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	73fb      	strb	r3, [r7, #15]
        if (handleTransition(currentEvent) != -1) {
 8000fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000faa:	4619      	mov	r1, r3
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f000 f82d 	bl	800100c <_ZN11EventStates16handleTransitionEa>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fb8:	bf14      	ite	ne
 8000fba:	2301      	movne	r3, #1
 8000fbc:	2300      	moveq	r3, #0
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d005      	beq.n	8000fd0 <_ZN11EventStates9waitEventEv+0x5a>
            eventQueuePtr->pop();
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	69db      	ldr	r3, [r3, #28]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 fa0b 	bl	80013e4 <_ZNSt5queueIaSt5dequeIaSaIaEEE3popEv>
            break;
 8000fce:	e003      	b.n	8000fd8 <_ZN11EventStates9waitEventEv+0x62>
        } else {
            osDelay(1);
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	f004 faa3 	bl	800551c <osDelay>
        while (eventQueuePtr->empty()) {
 8000fd6:	e7d6      	b.n	8000f86 <_ZN11EventStates9waitEventEv+0x10>
        }
    }

    pFiniteStateMachine->thisState = handleTransition(currentEvent);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	689c      	ldr	r4, [r3, #8]
 8000fdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 f812 	bl	800100c <_ZN11EventStates16handleTransitionEa>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	f884 3020 	strb.w	r3, [r4, #32]
}
 8000fee:	bf00      	nop
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd90      	pop	{r4, r7, pc}

08000ff6 <_ZN11EventStates4nextEv>:
void EventStates::next()
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
	waitEvent();
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff ffb9 	bl	8000f76 <_ZN11EventStates9waitEventEv>
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <_ZN11EventStates16handleTransitionEa>:
// EventStates method: handleTransition
stateType EventStates::handleTransition(stateType event) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	70fb      	strb	r3, [r7, #3]
    if (transitionEvent.at(event) != -1) {
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3310      	adds	r3, #16
 800101c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8001020:	4611      	mov	r1, r2
 8001022:	4618      	mov	r0, r3
 8001024:	f000 f9aa 	bl	800137c <_ZNSt5arrayIaLj10EE2atEj>
 8001028:	4603      	mov	r3, r0
 800102a:	f993 3000 	ldrsb.w	r3, [r3]
 800102e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001032:	bf14      	ite	ne
 8001034:	2301      	movne	r3, #1
 8001036:	2300      	moveq	r3, #0
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	d00d      	beq.n	800105a <_ZN11EventStates16handleTransitionEa+0x4e>
        stateType newState = transitionEvent.at(event);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3310      	adds	r3, #16
 8001042:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f000 f997 	bl	800137c <_ZNSt5arrayIaLj10EE2atEj>
 800104e:	4603      	mov	r3, r0
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	73fb      	strb	r3, [r7, #15]
        return newState;
 8001054:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001058:	e001      	b.n	800105e <_ZN11EventStates16handleTransitionEa+0x52>
    } else {
        return -1;
 800105a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 800105e:	4618      	mov	r0, r3
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <_ZN18FiniteStateMachine19createStateStandartEaaPFvvE>:


// FiniteStateMachine method: createStateStandart
StandardStates FiniteStateMachine::createStateStandart(stateType initial_state, stateType new_state, StateFunction functPtr) {
 8001066:	b580      	push	{r7, lr}
 8001068:	b086      	sub	sp, #24
 800106a:	af02      	add	r7, sp, #8
 800106c:	60f8      	str	r0, [r7, #12]
 800106e:	60b9      	str	r1, [r7, #8]
 8001070:	4611      	mov	r1, r2
 8001072:	461a      	mov	r2, r3
 8001074:	460b      	mov	r3, r1
 8001076:	71fb      	strb	r3, [r7, #7]
 8001078:	4613      	mov	r3, r2
 800107a:	71bb      	strb	r3, [r7, #6]
    return StandardStates(initial_state, new_state, this, functPtr);
 800107c:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8001080:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	68f8      	ldr	r0, [r7, #12]
 800108c:	f7ff fee2 	bl	8000e54 <_ZN14StandardStatesC1EaaP18FiniteStateMachinePFvvE>
}
 8001090:	68f8      	ldr	r0, [r7, #12]
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <_ZN18FiniteStateMachine16createStateEventEaPFvvE>:



// FiniteStateMachine method: createStateEvent
EventStates FiniteStateMachine::createStateEvent(stateType initial_state, StateFunction functPtr) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	4613      	mov	r3, r2
 80010a6:	71fb      	strb	r3, [r7, #7]
    return EventStates(initial_state, this, functPtr);
 80010a8:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	68f8      	ldr	r0, [r7, #12]
 80010b2:	f7ff ff13 	bl	8000edc <_ZN11EventStatesC1EaP18FiniteStateMachinePFvvE>
}
 80010b6:	68f8      	ldr	r0, [r7, #12]
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <_ZN18FiniteStateMachine9sendEventEa>:
ChoiseStates FiniteStateMachine::createStateChoise(stateType initial_state, StateFunction functPtr) {
    return ChoiseStates(initial_state, this, functPtr);
}

// FiniteStateMachine method: sendEvent
void FiniteStateMachine::sendEvent(stateType event) {
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	460b      	mov	r3, r1
 80010c8:	70fb      	strb	r3, [r7, #3]
    this->transitionTable.eventQueue.push(event);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3374      	adds	r3, #116	; 0x74
 80010ce:	1cfa      	adds	r2, r7, #3
 80010d0:	4611      	mov	r1, r2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 f992 	bl	80013fc <_ZNSt5queueIaSt5dequeIaSaIaEEE4pushERKa>
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <_ZN18FiniteStateMachine13setStartStateEa>:

// FiniteStateMachine method: setStartState
void FiniteStateMachine::setStartState(stateType state) {
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	70fb      	strb	r3, [r7, #3]
    startState = state;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	78fa      	ldrb	r2, [r7, #3]
 80010f0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    //this->pState =
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr

080010fe <_ZN18FiniteStateMachine12stateMachineEv>:

// FiniteStateMachine method: stateMashine
void FiniteStateMachine::stateMachine()
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
    this->thisState = startState;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f993 2022 	ldrsb.w	r2, [r3, #34]	; 0x22
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f883 2020 	strb.w	r2, [r3, #32]
    for(;;) {
    	this->pState = stateDictionary[thisState];
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	1d1a      	adds	r2, r3, #4
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3320      	adds	r3, #32
 800111a:	4619      	mov	r1, r3
 800111c:	4610      	mov	r0, r2
 800111e:	f000 f97b 	bl	8001418 <_ZNSt13unordered_mapIaP9BaseStateSt4hashIaESt8equal_toIaESaISt4pairIKaS1_EEEixERS7_>
 8001122:	4603      	mov	r3, r0
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	601a      	str	r2, [r3, #0]
    	this->transitionTable.stateFunctions[this->thisState]();
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8001136:	4619      	mov	r1, r3
 8001138:	4610      	mov	r0, r2
 800113a:	f000 f97c 	bl	8001436 <_ZNSt5arrayIPFvvELj10EEixEj>
 800113e:	4603      	mov	r3, r0
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4798      	blx	r3
    	this->pState = stateDictionary[thisState];
 8001144:	e7e5      	b.n	8001112 <_ZN18FiniteStateMachine12stateMachineEv+0x14>

08001146 <_ZN18FiniteStateMachine4nextEv>:
    }
}
void FiniteStateMachine::next()
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
	pState->next();
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4610      	mov	r0, r2
 800115c:	4798      	blx	r3
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	429a      	cmp	r2, r3
 800117a:	d201      	bcs.n	8001180 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	e000      	b.n	8001182 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8001180:	687b      	ldr	r3, [r7, #4]
    }
 8001182:	4618      	mov	r0, r3
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr

0800118c <_ZNSt5dequeIaSaIaEEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4618      	mov	r0, r3
 8001198:	f000 f972 	bl	8001480 <_ZNSt11_Deque_baseIaSaIaEEC1Ev>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <_ZNSt5queueIaSt5dequeIaSaIaEEEC1IS2_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
	: c() { }
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4618      	mov	r0, r3
 80011b2:	2328      	movs	r3, #40	; 0x28
 80011b4:	461a      	mov	r2, r3
 80011b6:	2100      	movs	r1, #0
 80011b8:	f007 f9d0 	bl	800855c <memset>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff ffe4 	bl	800118c <_ZNSt5dequeIaSaIaEEC1Ev>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <_ZNSt5dequeIaSaIaEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b08a      	sub	sp, #40	; 0x28
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 80011d6:	f107 0308 	add.w	r3, r7, #8
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	4618      	mov	r0, r3
 80011de:	f000 f982 	bl	80014e6 <_ZNSt5dequeIaSaIaEE5beginEv>
 80011e2:	f107 0318 	add.w	r3, r7, #24
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 f98b 	bl	8001504 <_ZNSt5dequeIaSaIaEE3endEv>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f000 f996 	bl	8001522 <_ZNSt11_Deque_baseIaSaIaEE19_M_get_Tp_allocatorEv>
 80011f6:	4603      	mov	r3, r0
 80011f8:	f107 0218 	add.w	r2, r7, #24
 80011fc:	f107 0108 	add.w	r1, r7, #8
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 f9b3 	bl	800156c <_ZNSt5dequeIaSaIaEE15_M_destroy_dataESt15_Deque_iteratorIaRaPaES5_RKS0_>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4618      	mov	r0, r3
 800120a:	f000 f94a 	bl	80014a2 <_ZNSt11_Deque_baseIaSaIaEED1Ev>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4618      	mov	r0, r3
 8001212:	3728      	adds	r7, #40	; 0x28
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <_ZNSt5arrayIPFvvELj10EE4fillERKS1_>:

      // No explicit construct/copy/destroy for aggregate type.

      // DR 776.
      _GLIBCXX20_CONSTEXPR void
      fill(const value_type& __u)
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
      { std::fill_n(begin(), size(), __u); }
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 f9ae 	bl	8001584 <_ZNSt5arrayIPFvvELj10EE5beginEv>
 8001228:	4604      	mov	r4, r0
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f000 f9b6 	bl	800159c <_ZNKSt5arrayIPFvvELj10EE4sizeEv>
 8001230:	4603      	mov	r3, r0
 8001232:	683a      	ldr	r2, [r7, #0]
 8001234:	4619      	mov	r1, r3
 8001236:	4620      	mov	r0, r4
 8001238:	f000 f9ba 	bl	80015b0 <_ZSt6fill_nIPPFvvEjS1_ET_S3_T0_RKT1_>
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	bd90      	pop	{r4, r7, pc}

08001244 <_ZNSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIaELb1EEC1Ev>:
      _Hashtable_ebo_helper() noexcept(noexcept(_Tp())) : _Tp() { }
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4618      	mov	r0, r3
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr

08001258 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIaELb1EEC1Ev>:
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4618      	mov	r0, r3
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr

0800126c <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEELb1EEC1Ev>:
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f000 f9b6 	bl	80015e6 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEC1Ev>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4618      	mov	r0, r3
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f000 f9b6 	bl	80015fe <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEED1Ev>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>:

  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    ~_Hashtable() noexcept
    {
      clear();
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f000 f9b4 	bl	8001612 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>
      _M_deallocate_buckets();
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 f9d1 	bl	8001652 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
    }
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff fcaf 	bl	8000c14 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEED1Ev>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <_ZNSt5dequeIaSaIaEEaSEOS1_>:
       *  The contents of @a __x are moved into this deque (without copying,
       *  if the allocators permit it).
       *  @a __x is a valid, but unspecified %deque.
       */
      deque&
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
      {
	using __always_equal = typename _Alloc_traits::is_always_equal;
	_M_move_assign1(std::move(__x), __always_equal{});
 80012ca:	6838      	ldr	r0, [r7, #0]
 80012cc:	f000 f9d1 	bl	8001672 <_ZSt4moveIRSt5dequeIaSaIaEEEONSt16remove_referenceIT_E4typeEOS5_>
 80012d0:	4603      	mov	r3, r0
 80012d2:	4622      	mov	r2, r4
 80012d4:	4619      	mov	r1, r3
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f000 f9d5 	bl	8001686 <_ZNSt5dequeIaSaIaEE15_M_move_assign1EOS1_St17integral_constantIbLb1EE>
	return *this;
 80012dc:	687b      	ldr	r3, [r7, #4]
      }
 80012de:	4618      	mov	r0, r3
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd90      	pop	{r4, r7, pc}

080012e6 <_ZNSt13unordered_mapIaP9BaseStateSt4hashIaESt8equal_toIaESaISt4pairIKaS1_EEE7emplaceIJRaS1_EEES6_INSt8__detail14_Node_iteratorIS8_Lb0ELb0EEEbEDpOT_>:
       *
       *  Insertion requires amortized constant time.
       */
      template<typename... _Args>
	std::pair<iterator, bool>
	emplace(_Args&&... __args)
 80012e6:	b5b0      	push	{r4, r5, r7, lr}
 80012e8:	b084      	sub	sp, #16
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	60f8      	str	r0, [r7, #12]
 80012ee:	60b9      	str	r1, [r7, #8]
 80012f0:	607a      	str	r2, [r7, #4]
 80012f2:	603b      	str	r3, [r7, #0]
	{ return _M_h.emplace(std::forward<_Args>(__args)...); }
 80012f4:	68bc      	ldr	r4, [r7, #8]
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 f9e6 	bl	80016c8 <_ZSt7forwardIRaEOT_RNSt16remove_referenceIS1_E4typeE>
 80012fc:	4605      	mov	r5, r0
 80012fe:	6838      	ldr	r0, [r7, #0]
 8001300:	f000 f9ec 	bl	80016dc <_ZSt7forwardIP9BaseStateEOT_RNSt16remove_referenceIS2_E4typeE>
 8001304:	4603      	mov	r3, r0
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	462a      	mov	r2, r5
 800130a:	4621      	mov	r1, r4
 800130c:	f000 f9f0 	bl	80016f0 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE7emplaceIJRaS3_EEES0_INS6_14_Node_iteratorIS4_Lb0ELb0EEEbEDpOT_>
 8001310:	bf00      	nop
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800131c <_ZNSt5arrayIPFvvELj10EE2atEj>:
#endif
	return _AT_Type::_S_ref(_M_elems, __n);
      }

      _GLIBCXX17_CONSTEXPR reference
      at(size_type __n)
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
      {
	if (__n >= _Nm)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	2b09      	cmp	r3, #9
 800132a:	d904      	bls.n	8001336 <_ZNSt5arrayIPFvvELj10EE2atEj+0x1a>
	  std::__throw_out_of_range_fmt(__N("array::at: __n (which is %zu) "
 800132c:	220a      	movs	r2, #10
 800132e:	6839      	ldr	r1, [r7, #0]
 8001330:	4806      	ldr	r0, [pc, #24]	; (800134c <_ZNSt5arrayIPFvvELj10EE2atEj+0x30>)
 8001332:	f006 fe62 	bl	8007ffa <_ZSt24__throw_out_of_range_fmtPKcz>
					    ">= _Nm (which is %zu)"),
					__n, _Nm);
	return _AT_Type::_S_ref(_M_elems, __n);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6839      	ldr	r1, [r7, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f000 f9f3 	bl	8001726 <_ZNSt14__array_traitsIPFvvELj10EE6_S_refERA10_KS1_j>
 8001340:	4603      	mov	r3, r0
      }
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	08008730 	.word	0x08008730

08001350 <_ZNSt5arrayIaLj10EE4fillERKa>:
      fill(const value_type& __u)
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
      { std::fill_n(begin(), size(), __u); }
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f000 f9f1 	bl	8001742 <_ZNSt5arrayIaLj10EE5beginEv>
 8001360:	4604      	mov	r4, r0
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f000 f9f9 	bl	800175a <_ZNKSt5arrayIaLj10EE4sizeEv>
 8001368:	4603      	mov	r3, r0
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	4619      	mov	r1, r3
 800136e:	4620      	mov	r0, r4
 8001370:	f000 f9fd 	bl	800176e <_ZSt6fill_nIPajaET_S1_T0_RKT1_>
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	bd90      	pop	{r4, r7, pc}

0800137c <_ZNSt5arrayIaLj10EE2atEj>:
      at(size_type __n)
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
	if (__n >= _Nm)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	2b09      	cmp	r3, #9
 800138a:	d904      	bls.n	8001396 <_ZNSt5arrayIaLj10EE2atEj+0x1a>
	  std::__throw_out_of_range_fmt(__N("array::at: __n (which is %zu) "
 800138c:	220a      	movs	r2, #10
 800138e:	6839      	ldr	r1, [r7, #0]
 8001390:	4806      	ldr	r0, [pc, #24]	; (80013ac <_ZNSt5arrayIaLj10EE2atEj+0x30>)
 8001392:	f006 fe32 	bl	8007ffa <_ZSt24__throw_out_of_range_fmtPKcz>
	return _AT_Type::_S_ref(_M_elems, __n);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6839      	ldr	r1, [r7, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f000 fa02 	bl	80017a4 <_ZNSt14__array_traitsIaLj10EE6_S_refERA10_Kaj>
 80013a0:	4603      	mov	r3, r0
      }
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	08008730 	.word	0x08008730

080013b0 <_ZNKSt5queueIaSt5dequeIaSaIaEEE5emptyEv>:

      /**
       *  Returns true if the %queue is empty.
       */
      _GLIBCXX_NODISCARD bool
      empty() const
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 f9ff 	bl	80017be <_ZNKSt5dequeIaSaIaEE5emptyEv>
 80013c0:	4603      	mov	r3, r0
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <_ZNSt5queueIaSt5dequeIaSaIaEEE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %queue.
       */
      reference
      front()
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	return c.front();
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 fa04 	bl	80017e2 <_ZNSt5dequeIaSaIaEE5frontEv>
 80013da:	4603      	mov	r3, r0
      }
 80013dc:	4618      	mov	r0, r3
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <_ZNSt5queueIaSt5dequeIaSaIaEEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 fa0b 	bl	800180a <_ZNSt5dequeIaSaIaEE9pop_frontEv>
      }
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <_ZNSt5queueIaSt5dequeIaSaIaEEE4pushERKa>:
      push(const value_type& __x)
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
      { c.push_back(__x); }
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6839      	ldr	r1, [r7, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f000 fa20 	bl	8001850 <_ZNSt5dequeIaSaIaEE9push_backERKa>
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <_ZNSt13unordered_mapIaP9BaseStateSt4hashIaESt8equal_toIaESaISt4pairIKaS1_EEEixERS7_>:
       *  is then returned.
       *
       *  Lookup requires constant time.
       */
      mapped_type&
      operator[](const key_type& __k)
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
      { return _M_h[__k]; }
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6839      	ldr	r1, [r7, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f000 fa34 	bl	8001894 <_ZNSt8__detail9_Map_baseIaSt4pairIKaP9BaseStateESaIS5_ENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS2_>
 800142c:	4603      	mov	r3, r0
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <_ZNSt5arrayIPFvvELj10EEixEj>:
      operator[](size_type __n) noexcept
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
 800143e:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6839      	ldr	r1, [r7, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f000 f96e 	bl	8001726 <_ZNSt14__array_traitsIPFvvELj10EE6_S_refERA10_KS1_j>
 800144a:	4603      	mov	r3, r0
      }
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4618      	mov	r0, r3
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr

08001468 <_ZNSt11_Deque_baseIaSaIaEE11_Deque_implD1Ev>:
      struct _Deque_impl
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f000 fa75 	bl	8001960 <_ZNSaIaED1Ev>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <_ZNSt11_Deque_baseIaSaIaEEC1Ev>:
      _Deque_base()
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4618      	mov	r0, r3
 800148c:	f000 fa58 	bl	8001940 <_ZNSt11_Deque_baseIaSaIaEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8001490:	2100      	movs	r1, #0
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 fa70 	bl	8001978 <_ZNSt11_Deque_baseIaSaIaEE17_M_initialize_mapEj>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <_ZNSt11_Deque_baseIaSaIaEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d010      	beq.n	80014d4 <_ZNSt11_Deque_baseIaSaIaEED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80014ba:	3304      	adds	r3, #4
 80014bc:	461a      	mov	r2, r3
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f000 fabc 	bl	8001a3c <_ZNSt11_Deque_baseIaSaIaEE16_M_destroy_nodesEPPaS3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6819      	ldr	r1, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	461a      	mov	r2, r3
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 facf 	bl	8001a72 <_ZNSt11_Deque_baseIaSaIaEE17_M_deallocate_mapEPPaj>
    }
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff ffc6 	bl	8001468 <_ZNSt11_Deque_baseIaSaIaEE11_Deque_implD1Ev>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <_ZNSt5dequeIaSaIaEE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	3308      	adds	r3, #8
 80014f4:	4619      	mov	r1, r3
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 f81d 	bl	8001536 <_ZNSt15_Deque_iteratorIaRaPaEC1ERKS2_>
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <_ZNSt5dequeIaSaIaEE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %deque.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	3318      	adds	r3, #24
 8001512:	4619      	mov	r1, r3
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 f80e 	bl	8001536 <_ZNSt15_Deque_iteratorIaRaPaEC1ERKS2_>
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <_ZNSt11_Deque_baseIaSaIaEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4618      	mov	r0, r3
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr

08001536 <_ZNSt15_Deque_iteratorIaRaPaEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	605a      	str	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	68da      	ldr	r2, [r3, #12]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	60da      	str	r2, [r3, #12]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4618      	mov	r0, r3
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr

0800156c <_ZNSt5dequeIaSaIaEE15_M_destroy_dataESt15_Deque_iteratorIaRaPaES5_RKS0_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 800156c:	b480      	push	{r7}
 800156e:	b08d      	sub	sp, #52	; 0x34
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
 8001578:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 800157a:	bf00      	nop
 800157c:	3734      	adds	r7, #52	; 0x34
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr

08001584 <_ZNSt5arrayIPFvvELj10EE5beginEv>:
      begin() noexcept
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 fa8b 	bl	8001aa8 <_ZNSt5arrayIPFvvELj10EE4dataEv>
 8001592:	4603      	mov	r3, r0
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <_ZNKSt5arrayIPFvvELj10EE4sizeEv>:
      size() const noexcept { return _Nm; }
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	230a      	movs	r3, #10
 80015a6:	4618      	mov	r0, r3
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <_ZSt6fill_nIPPFvvEjS1_ET_S3_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 80015b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 80015bc:	68fc      	ldr	r4, [r7, #12]
 80015be:	68b8      	ldr	r0, [r7, #8]
 80015c0:	f7ff fa44 	bl	8000a4c <_ZSt17__size_to_integerj>
 80015c4:	4605      	mov	r5, r0
			       std::__iterator_category(__first));
 80015c6:	f107 030c 	add.w	r3, r7, #12
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 fa79 	bl	8001ac2 <_ZSt19__iterator_categoryIPPFvvEENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 80015d0:	4633      	mov	r3, r6
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	4629      	mov	r1, r5
 80015d6:	4620      	mov	r0, r4
 80015d8:	f000 fa7d 	bl	8001ad6 <_ZSt10__fill_n_aIPPFvvEjS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>
 80015dc:	4603      	mov	r3, r0
    }
 80015de:	4618      	mov	r0, r3
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015e6 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 fa8e 	bl	8001b10 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEC1Ev>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr

08001612 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    clear() noexcept
    {
      this->_M_deallocate_nodes(_M_begin());
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 fa82 	bl	8001b24 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 8001620:	4603      	mov	r3, r0
 8001622:	4619      	mov	r1, r3
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 fa88 	bl	8001b3a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE19_M_deallocate_nodesEPS7_>
      __builtin_memset(_M_buckets, 0,
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681a      	ldr	r2, [r3, #0]
		       _M_bucket_count * sizeof(__node_base_ptr));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
      __builtin_memset(_M_buckets, 0,
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4610      	mov	r0, r2
 8001636:	461a      	mov	r2, r3
 8001638:	2100      	movs	r1, #0
 800163a:	f006 ff8f 	bl	800855c <memset>
      _M_element_count = 0;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	60da      	str	r2, [r3, #12]
      _M_before_begin._M_nxt = nullptr;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]
    }
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>:
      _M_deallocate_buckets()
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6819      	ldr	r1, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	461a      	mov	r2, r3
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 fa80 	bl	8001b6a <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS6_15_Hash_node_baseEj>
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <_ZSt4moveIRSt5dequeIaSaIaEEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001672:	b480      	push	{r7}
 8001674:	b083      	sub	sp, #12
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4618      	mov	r0, r3
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr

08001686 <_ZNSt5dequeIaSaIaEE15_M_move_assign1EOS1_St17integral_constantIbLb1EE>:

#if __cplusplus >= 201103L
      // Constant-time, nothrow move assignment when source object's memory
      // can be moved because the allocators are equal.
      void
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 8001686:	b590      	push	{r4, r7, lr}
 8001688:	b085      	sub	sp, #20
 800168a:	af00      	add	r7, sp, #0
 800168c:	60f8      	str	r0, [r7, #12]
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	713a      	strb	r2, [r7, #4]
      {
	this->_M_impl._M_swap_data(__x._M_impl);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	68ba      	ldr	r2, [r7, #8]
 8001696:	4611      	mov	r1, r2
 8001698:	4618      	mov	r0, r3
 800169a:	f000 fa7d 	bl	8001b98 <_ZNSt11_Deque_baseIaSaIaEE16_Deque_impl_data12_M_swap_dataERS2_>
	__x.clear();
 800169e:	68b8      	ldr	r0, [r7, #8]
 80016a0:	f000 fa87 	bl	8001bb2 <_ZNSt5dequeIaSaIaEE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff ff3b 	bl	8001522 <_ZNSt11_Deque_baseIaSaIaEE19_M_get_Tp_allocatorEv>
 80016ac:	4604      	mov	r4, r0
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ff36 	bl	8001522 <_ZNSt11_Deque_baseIaSaIaEE19_M_get_Tp_allocatorEv>
 80016b6:	4603      	mov	r3, r0
 80016b8:	4619      	mov	r1, r3
 80016ba:	4620      	mov	r0, r4
 80016bc:	f000 fa8d 	bl	8001bda <_ZSt15__alloc_on_moveISaIaEEvRT_S2_>
      }
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd90      	pop	{r4, r7, pc}

080016c8 <_ZSt7forwardIRaEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4618      	mov	r0, r3
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr

080016dc <_ZSt7forwardIP9BaseStateEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4618      	mov	r0, r3
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr

080016f0 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE7emplaceIJRaS3_EEES0_INS6_14_Node_iteratorIS4_Lb0ELb0EEEbEDpOT_>:
	emplace(_Args&&... __args)
 80016f0:	b5b0      	push	{r4, r5, r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af02      	add	r7, sp, #8
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
 80016fc:	603b      	str	r3, [r7, #0]
	{ return _M_emplace(__unique_keys{}, std::forward<_Args>(__args)...); }
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff ffe2 	bl	80016c8 <_ZSt7forwardIRaEOT_RNSt16remove_referenceIS1_E4typeE>
 8001704:	4604      	mov	r4, r0
 8001706:	6838      	ldr	r0, [r7, #0]
 8001708:	f7ff ffe8 	bl	80016dc <_ZSt7forwardIP9BaseStateEOT_RNSt16remove_referenceIS2_E4typeE>
 800170c:	4603      	mov	r3, r0
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	4623      	mov	r3, r4
 8001714:	462a      	mov	r2, r5
 8001716:	68b9      	ldr	r1, [r7, #8]
 8001718:	f000 fa6d 	bl	8001bf6 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE10_M_emplaceIJRaS3_EEES0_INS6_14_Node_iteratorIS4_Lb0ELb0EEEbESt17integral_constantIbLb1EEDpOT_>
 800171c:	bf00      	nop
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bdb0      	pop	{r4, r5, r7, pc}

08001726 <_ZNSt14__array_traitsIPFvvELj10EE6_S_refERA10_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
 800172e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	4413      	add	r3, r2
 8001738:	4618      	mov	r0, r3
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr

08001742 <_ZNSt5arrayIaLj10EE5beginEv>:
      begin() noexcept
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 fabb 	bl	8001cc6 <_ZNSt5arrayIaLj10EE4dataEv>
 8001750:	4603      	mov	r3, r0
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <_ZNKSt5arrayIaLj10EE4sizeEv>:
      size() const noexcept { return _Nm; }
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	230a      	movs	r3, #10
 8001764:	4618      	mov	r0, r3
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr

0800176e <_ZSt6fill_nIPajaET_S1_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 800176e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001770:	b085      	sub	sp, #20
 8001772:	af00      	add	r7, sp, #0
 8001774:	60f8      	str	r0, [r7, #12]
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	607a      	str	r2, [r7, #4]
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 800177a:	68fc      	ldr	r4, [r7, #12]
 800177c:	68b8      	ldr	r0, [r7, #8]
 800177e:	f7ff f965 	bl	8000a4c <_ZSt17__size_to_integerj>
 8001782:	4605      	mov	r5, r0
			       std::__iterator_category(__first));
 8001784:	f107 030c 	add.w	r3, r7, #12
 8001788:	4618      	mov	r0, r3
 800178a:	f000 faa9 	bl	8001ce0 <_ZSt19__iterator_categoryIPaENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 800178e:	4633      	mov	r3, r6
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	4629      	mov	r1, r5
 8001794:	4620      	mov	r0, r4
 8001796:	f000 faad 	bl	8001cf4 <_ZSt10__fill_n_aIPajaET_S1_T0_RKT1_St26random_access_iterator_tag>
 800179a:	4603      	mov	r3, r0
    }
 800179c:	4618      	mov	r0, r3
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017a4 <_ZNSt14__array_traitsIaLj10EE6_S_refERA10_Kaj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	4413      	add	r3, r2
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr

080017be <_ZNKSt5dequeIaSaIaEE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f103 0218 	add.w	r2, r3, #24
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3308      	adds	r3, #8
 80017d0:	4619      	mov	r1, r3
 80017d2:	4610      	mov	r0, r2
 80017d4:	f000 faa9 	bl	8001d2a <_ZSteqRKSt15_Deque_iteratorIaRaPaES4_>
 80017d8:	4603      	mov	r3, r0
 80017da:	4618      	mov	r0, r3
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <_ZNSt5dequeIaSaIaEE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b086      	sub	sp, #24
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
	return *begin();
 80017ea:	f107 0308 	add.w	r3, r7, #8
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fe78 	bl	80014e6 <_ZNSt5dequeIaSaIaEE5beginEv>
 80017f6:	f107 0308 	add.w	r3, r7, #8
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 faa8 	bl	8001d50 <_ZNKSt15_Deque_iteratorIaRaPaEdeEv>
 8001800:	4603      	mov	r3, r0
      }
 8001802:	4618      	mov	r0, r3
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <_ZNSt5dequeIaSaIaEE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	3b01      	subs	r3, #1
	if (this->_M_impl._M_start._M_cur
 800181c:	429a      	cmp	r2, r3
 800181e:	d010      	beq.n	8001842 <_ZNSt5dequeIaSaIaEE9pop_frontEv+0x38>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fe7d 	bl	8001522 <_ZNSt11_Deque_baseIaSaIaEE19_M_get_Tp_allocatorEv>
 8001828:	4602      	mov	r2, r0
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	4619      	mov	r1, r3
 8001830:	4610      	mov	r0, r2
 8001832:	f000 fa98 	bl	8001d66 <_ZNSt16allocator_traitsISaIaEE7destroyIaEEvRS0_PT_>
	    ++this->_M_impl._M_start._M_cur;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	1c5a      	adds	r2, r3, #1
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	609a      	str	r2, [r3, #8]
      }
 8001840:	e002      	b.n	8001848 <_ZNSt5dequeIaSaIaEE9pop_frontEv+0x3e>
	  _M_pop_front_aux();
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 fa9c 	bl	8001d80 <_ZNSt5dequeIaSaIaEE16_M_pop_front_auxEv>
      }
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <_ZNSt5dequeIaSaIaEE9push_backERKa>:
      push_back(const value_type& __x)
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	3b01      	subs	r3, #1
	if (this->_M_impl._M_finish._M_cur
 8001864:	429a      	cmp	r2, r3
 8001866:	d00c      	beq.n	8001882 <_ZNSt5dequeIaSaIaEE9push_backERKa+0x32>
	    _Alloc_traits::construct(this->_M_impl,
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	4619      	mov	r1, r3
 8001872:	f000 faad 	bl	8001dd0 <_ZNSt16allocator_traitsISaIaEE9constructIaJRKaEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	1c5a      	adds	r2, r3, #1
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	619a      	str	r2, [r3, #24]
      }
 8001880:	e003      	b.n	800188a <_ZNSt5dequeIaSaIaEE9push_backERKa+0x3a>
	  _M_push_back_aux(__x);
 8001882:	6839      	ldr	r1, [r7, #0]
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 fab7 	bl	8001df8 <_ZNSt5dequeIaSaIaEE16_M_push_back_auxIJRKaEEEvDpOT_>
      }
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <_ZNSt8__detail9_Map_baseIaSt4pairIKaP9BaseStateESaIS5_ENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS2_>:
    _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
 8001894:	b590      	push	{r4, r7, lr}
 8001896:	b08f      	sub	sp, #60	; 0x3c
 8001898:	af02      	add	r7, sp, #8
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
      __hashtable* __h = static_cast<__hashtable*>(this);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      __hash_code __code = __h->_M_hash_code(__k);
 80018a2:	6839      	ldr	r1, [r7, #0]
 80018a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80018a6:	f000 faeb 	bl	8001e80 <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS2_>
 80018aa:	62b8      	str	r0, [r7, #40]	; 0x28
      std::size_t __bkt = __h->_M_bucket_index(__code);
 80018ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80018b0:	f000 fafb 	bl	8001eaa <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 80018b4:	6278      	str	r0, [r7, #36]	; 0x24
      if (auto __node = __h->_M_find_node(__bkt, __k, __code))
 80018b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80018be:	f000 fb05 	bl	8001ecc <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS1_j>
 80018c2:	6238      	str	r0, [r7, #32]
 80018c4:	6a3b      	ldr	r3, [r7, #32]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d007      	beq.n	80018da <_ZNSt8__detail9_Map_baseIaSt4pairIKaP9BaseStateESaIS5_ENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS2_+0x46>
	return __node->_M_v().second;
 80018ca:	6a3b      	ldr	r3, [r7, #32]
 80018cc:	3304      	adds	r3, #4
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 fb15 	bl	8001efe <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE4_M_vEv>
 80018d4:	4603      	mov	r3, r0
 80018d6:	1d1c      	adds	r4, r3, #4
 80018d8:	e02a      	b.n	8001930 <_ZNSt8__detail9_Map_baseIaSt4pairIKaP9BaseStateESaIS5_ENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS2_+0x9c>
      typename __hashtable::_Scoped_node __node {
 80018da:	6afc      	ldr	r4, [r7, #44]	; 0x2c
	std::tuple<const key_type&>(__k),
 80018dc:	f107 0318 	add.w	r3, r7, #24
 80018e0:	6839      	ldr	r1, [r7, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 fb17 	bl	8001f16 <_ZNSt5tupleIJRKaEEC1ILb1ELb1EEES1_>
      typename __hashtable::_Scoped_node __node {
 80018e8:	f107 0218 	add.w	r2, r7, #24
 80018ec:	f107 0010 	add.w	r0, r7, #16
 80018f0:	f107 031c 	add.w	r3, r7, #28
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	4613      	mov	r3, r2
 80018f8:	4a10      	ldr	r2, [pc, #64]	; (800193c <_ZNSt8__detail9_Map_baseIaSt4pairIKaP9BaseStateESaIS5_ENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS2_+0xa8>)
 80018fa:	4621      	mov	r1, r4
 80018fc:	f000 fb1a 	bl	8001f34 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS1_EESN_IJEEEEEPNS6_16_Hashtable_allocISaINS6_10_Hash_nodeIS4_Lb0EEEEEEDpOT_>
	= __h->_M_insert_unique_node(__bkt, __code, __node._M_node);
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	2201      	movs	r2, #1
 8001904:	9200      	str	r2, [sp, #0]
 8001906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001908:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800190a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800190c:	f000 fb4b 	bl	8001fa6 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS6_10_Hash_nodeIS4_Lb0EEEj>
 8001910:	4603      	mov	r3, r0
 8001912:	60fb      	str	r3, [r7, #12]
      __node._M_node = nullptr;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
      return __pos->second;
 8001918:	f107 030c 	add.w	r3, r7, #12
 800191c:	4618      	mov	r0, r3
 800191e:	f000 fb8b 	bl	8002038 <_ZNKSt8__detail14_Node_iteratorISt4pairIKaP9BaseStateELb0ELb0EEptEv>
 8001922:	4603      	mov	r3, r0
 8001924:	1d1c      	adds	r4, r3, #4
    }
 8001926:	f107 0310 	add.w	r3, r7, #16
 800192a:	4618      	mov	r0, r3
 800192c:	f000 fb26 	bl	8001f7c <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>
 8001930:	4623      	mov	r3, r4
 8001932:	4618      	mov	r0, r3
 8001934:	3734      	adds	r7, #52	; 0x34
 8001936:	46bd      	mov	sp, r7
 8001938:	bd90      	pop	{r4, r7, pc}
 800193a:	bf00      	nop
 800193c:	080087cc 	.word	0x080087cc

08001940 <_ZNSt11_Deque_baseIaSaIaEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f000 fb84 	bl	8002056 <_ZNSaIaEC1Ev>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4618      	mov	r0, r3
 8001952:	f000 fb8c 	bl	800206e <_ZNSt11_Deque_baseIaSaIaEE16_Deque_impl_dataC1Ev>
	{ }
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4618      	mov	r0, r3
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <_ZNSaIaED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 fb99 	bl	80020a0 <_ZN9__gnu_cxx13new_allocatorIaED1Ev>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4618      	mov	r0, r3
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <_ZNSt11_Deque_baseIaSaIaEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b089      	sub	sp, #36	; 0x24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8001982:	2001      	movs	r0, #1
 8001984:	f7ff f877 	bl	8000a76 <_ZSt16__deque_buf_sizej>
 8001988:	4602      	mov	r2, r0
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001990:	3301      	adds	r3, #1
 8001992:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8001994:	2308      	movs	r3, #8
 8001996:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	3302      	adds	r3, #2
 800199c:	613b      	str	r3, [r7, #16]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800199e:	f107 0210 	add.w	r2, r7, #16
 80019a2:	f107 030c 	add.w	r3, r7, #12
 80019a6:	4611      	mov	r1, r2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fbdc 	bl	8001166 <_ZSt3maxIjERKT_S2_S2_>
 80019ae:	4603      	mov	r3, r0
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	4619      	mov	r1, r3
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 fb79 	bl	80020b4 <_ZNSt11_Deque_baseIaSaIaEE15_M_allocate_mapEj>
 80019c2:	4602      	mov	r2, r0
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6859      	ldr	r1, [r3, #4]
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	1acb      	subs	r3, r1, r3
 80019d4:	085b      	lsrs	r3, r3, #1
 80019d6:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 80019d8:	4413      	add	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4413      	add	r3, r2
 80019e4:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	69b9      	ldr	r1, [r7, #24]
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f000 fb7f 	bl	80020ee <_ZNSt11_Deque_baseIaSaIaEE15_M_create_nodesEPPaS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3308      	adds	r3, #8
 80019f4:	69b9      	ldr	r1, [r7, #24]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 fb94 	bl	8002124 <_ZNSt15_Deque_iteratorIaRaPaE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f103 0218 	add.w	r2, r3, #24
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	3b04      	subs	r3, #4
 8001a06:	4619      	mov	r1, r3
 8001a08:	4610      	mov	r0, r2
 8001a0a:	f000 fb8b 	bl	8002124 <_ZNSt15_Deque_iteratorIaRaPaE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68da      	ldr	r2, [r3, #12]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8001a1a:	2001      	movs	r0, #1
 8001a1c:	f7ff f82b 	bl	8000a76 <_ZSt16__deque_buf_sizej>
 8001a20:	4602      	mov	r2, r0
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a28:	fb01 f202 	mul.w	r2, r1, r2
 8001a2c:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8001a2e:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	619a      	str	r2, [r3, #24]
    }
 8001a34:	bf00      	nop
 8001a36:	3724      	adds	r7, #36	; 0x24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd90      	pop	{r4, r7, pc}

08001a3c <_ZNSt11_Deque_baseIaSaIaEE16_M_destroy_nodesEPPaS3_>:
    _Deque_base<_Tp, _Alloc>::
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	e008      	b.n	8001a60 <_ZNSt11_Deque_baseIaSaIaEE16_M_destroy_nodesEPPaS3_+0x24>
	_M_deallocate_node(*__n);
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4619      	mov	r1, r3
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f000 fb7d 	bl	8002154 <_ZNSt11_Deque_baseIaSaIaEE18_M_deallocate_nodeEPa>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	697a      	ldr	r2, [r7, #20]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d3f2      	bcc.n	8001a4e <_ZNSt11_Deque_baseIaSaIaEE16_M_destroy_nodesEPPaS3_+0x12>
    }
 8001a68:	bf00      	nop
 8001a6a:	bf00      	nop
 8001a6c:	3718      	adds	r7, #24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <_ZNSt11_Deque_baseIaSaIaEE17_M_deallocate_mapEPPaj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b086      	sub	sp, #24
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	60f8      	str	r0, [r7, #12]
 8001a7a:	60b9      	str	r1, [r7, #8]
 8001a7c:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8001a7e:	f107 0314 	add.w	r3, r7, #20
 8001a82:	68f9      	ldr	r1, [r7, #12]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f000 fb78 	bl	800217a <_ZNKSt11_Deque_baseIaSaIaEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8001a8a:	f107 0314 	add.w	r3, r7, #20
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	68b9      	ldr	r1, [r7, #8]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f000 fb8e 	bl	80021b4 <_ZNSt16allocator_traitsISaIPaEE10deallocateERS1_PS0_j>
      }
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f000 fb7d 	bl	800219c <_ZNSaIPaED1Ev>
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <_ZNSt5arrayIPFvvELj10EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f000 fb8d 	bl	80021d2 <_ZNSt14__array_traitsIPFvvELj10EE6_S_ptrERA10_KS1_>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <_ZSt19__iterator_categoryIPPFvvEENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001aca:	bf00      	nop
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr

08001ad6 <_ZSt10__fill_n_aIPPFvvEjS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b084      	sub	sp, #16
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	60f8      	str	r0, [r7, #12]
 8001ade:	60b9      	str	r1, [r7, #8]
 8001ae0:	607a      	str	r2, [r7, #4]
 8001ae2:	703b      	strb	r3, [r7, #0]
      if (__n <= 0)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <_ZSt10__fill_n_aIPPFvvEjS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x18>
	return __first;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	e00c      	b.n	8001b08 <_ZSt10__fill_n_aIPPFvvEjS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x32>
      std::__fill_a(__first, __first + __n, __value);
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	4413      	add	r3, r2
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	4619      	mov	r1, r3
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f000 fb73 	bl	80021e6 <_ZSt8__fill_aIPPFvvES1_EvT_S3_RKT0_>
      return __first + __n;
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	4413      	add	r3, r2
    }
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>:
      _M_begin() const
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr

08001b3a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE19_M_deallocate_nodesEPS7_>:
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
    }

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_ptr __n)
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b084      	sub	sp, #16
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
 8001b42:	6039      	str	r1, [r7, #0]
    {
      while (__n)
 8001b44:	e009      	b.n	8001b5a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE19_M_deallocate_nodesEPS7_+0x20>
	{
	  __node_ptr __tmp = __n;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	60fb      	str	r3, [r7, #12]
	  __n = __n->_M_next();
 8001b4a:	6838      	ldr	r0, [r7, #0]
 8001b4c:	f000 fb5a 	bl	8002204 <_ZNKSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EE7_M_nextEv>
 8001b50:	6038      	str	r0, [r7, #0]
	  _M_deallocate_node(__tmp);
 8001b52:	68f9      	ldr	r1, [r7, #12]
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 fb60 	bl	800221a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE18_M_deallocate_nodeEPS7_>
      while (__n)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1f2      	bne.n	8001b46 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE19_M_deallocate_nodesEPS7_+0xc>
	}
    }
 8001b60:	bf00      	nop
 8001b62:	bf00      	nop
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS6_15_Hash_node_baseEj>:
      _M_deallocate_buckets(__buckets_ptr __bkts, size_type __bkt_count)
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b084      	sub	sp, #16
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	60f8      	str	r0, [r7, #12]
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	607a      	str	r2, [r7, #4]
	if (_M_uses_single_bucket(__bkts))
 8001b76:	68b9      	ldr	r1, [r7, #8]
 8001b78:	68f8      	ldr	r0, [r7, #12]
 8001b7a:	f000 fb69 	bl	8002250 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS6_15_Hash_node_baseE>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d105      	bne.n	8001b90 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS6_15_Hash_node_baseEj+0x26>
	__hashtable_alloc::_M_deallocate_buckets(__bkts, __bkt_count);
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	68b9      	ldr	r1, [r7, #8]
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f000 fb78 	bl	800227e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>
 8001b8e:	e000      	b.n	8001b92 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS6_15_Hash_node_baseEj+0x28>
	  return;
 8001b90:	bf00      	nop
      }
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <_ZNSt11_Deque_baseIaSaIaEE16_Deque_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8001ba2:	6839      	ldr	r1, [r7, #0]
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 fb8d 	bl	80022c4 <_ZSt4swapINSt11_Deque_baseIaSaIaEE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>
	}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <_ZNSt5dequeIaSaIaEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b086      	sub	sp, #24
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8001bba:	f107 0308 	add.w	r3, r7, #8
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fc90 	bl	80014e6 <_ZNSt5dequeIaSaIaEE5beginEv>
 8001bc6:	f107 0308 	add.w	r3, r7, #8
 8001bca:	4619      	mov	r1, r3
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 fbac 	bl	800232a <_ZNSt5dequeIaSaIaEE15_M_erase_at_endESt15_Deque_iteratorIaRaPaE>
 8001bd2:	bf00      	nop
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <_ZSt15__alloc_on_moveISaIaEEvRT_S2_>:
    { }
#endif

  template<typename _Alloc>
    _GLIBCXX14_CONSTEXPR inline void
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
 8001be2:	6039      	str	r1, [r7, #0]
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
#if __cplusplus >= 201703L
      if constexpr (__pocma::value)
	__one = std::move(__two);
#else
      __do_alloc_on_move(__one, __two, __pocma());
 8001be4:	461a      	mov	r2, r3
 8001be6:	6839      	ldr	r1, [r7, #0]
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 fbd1 	bl	8002390 <_ZSt18__do_alloc_on_moveISaIaEEvRT_S2_St17integral_constantIbLb1EE>
#endif
    }
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE10_M_emplaceIJRaS3_EEES0_INS6_14_Node_iteratorIS4_Lb0ELb0EEEbESt17integral_constantIbLb1EEDpOT_>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8001bf6:	b590      	push	{r4, r7, lr}
 8001bf8:	b091      	sub	sp, #68	; 0x44
 8001bfa:	af02      	add	r7, sp, #8
 8001bfc:	60f8      	str	r0, [r7, #12]
 8001bfe:	60b9      	str	r1, [r7, #8]
 8001c00:	713a      	strb	r2, [r7, #4]
 8001c02:	603b      	str	r3, [r7, #0]
	_Scoped_node __node { this, std::forward<_Args>(__args)...  };
 8001c04:	6838      	ldr	r0, [r7, #0]
 8001c06:	f7ff fd5f 	bl	80016c8 <_ZSt7forwardIRaEOT_RNSt16remove_referenceIS1_E4typeE>
 8001c0a:	4604      	mov	r4, r0
 8001c0c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001c0e:	f7ff fd65 	bl	80016dc <_ZSt7forwardIP9BaseStateEOT_RNSt16remove_referenceIS2_E4typeE>
 8001c12:	4603      	mov	r3, r0
 8001c14:	f107 0014 	add.w	r0, r7, #20
 8001c18:	4622      	mov	r2, r4
 8001c1a:	68b9      	ldr	r1, [r7, #8]
 8001c1c:	f000 fbc5 	bl	80023aa <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1IJRaS3_EEEPNS6_16_Hashtable_allocISaINS6_10_Hash_nodeIS4_Lb0EEEEEEDpOT_>
	const key_type& __k = _ExtractKey{}(__node._M_node->_M_v());
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	3304      	adds	r3, #4
 8001c24:	4618      	mov	r0, r3
 8001c26:	f000 f96a 	bl	8001efe <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE4_M_vEv>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	f107 031c 	add.w	r3, r7, #28
 8001c30:	4611      	mov	r1, r2
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 fbd9 	bl	80023ea <_ZNKSt8__detail10_Select1stclIRSt4pairIKaP9BaseStateEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS8_>
 8001c38:	6378      	str	r0, [r7, #52]	; 0x34
	__hash_code __code = this->_M_hash_code(__k);
 8001c3a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001c3c:	68b8      	ldr	r0, [r7, #8]
 8001c3e:	f000 f91f 	bl	8001e80 <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS2_>
 8001c42:	6338      	str	r0, [r7, #48]	; 0x30
	size_type __bkt = _M_bucket_index(__code);
 8001c44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c46:	68b8      	ldr	r0, [r7, #8]
 8001c48:	f000 f92f 	bl	8001eaa <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 8001c4c:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (__node_ptr __p = _M_find_node(__bkt, __k, __code))
 8001c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c54:	68b8      	ldr	r0, [r7, #8]
 8001c56:	f000 f939 	bl	8001ecc <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS1_j>
 8001c5a:	62b8      	str	r0, [r7, #40]	; 0x28
 8001c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d011      	beq.n	8001c86 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE10_M_emplaceIJRaS3_EEES0_INS6_14_Node_iteratorIS4_Lb0ELb0EEEbESt17integral_constantIbLb1EEDpOT_+0x90>
	  return std::make_pair(iterator(__p), false);
 8001c62:	f107 0320 	add.w	r3, r7, #32
 8001c66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f000 fbcf 	bl	800240c <_ZNSt8__detail14_Node_iteratorISt4pairIKaP9BaseStateELb0ELb0EEC1EPNS_10_Hash_nodeIS5_Lb0EEE>
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8001c7a:	f107 0120 	add.w	r1, r7, #32
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 fbd3 	bl	800242a <_ZSt9make_pairINSt8__detail14_Node_iteratorISt4pairIKaP9BaseStateELb0ELb0EEEbES2_INSt25__strip_reference_wrapperINSt5decayIT_E4typeEE6__typeENS8_INS9_IT0_E4typeEE6__typeEEOSA_OSF_>
 8001c84:	e016      	b.n	8001cb4 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE10_M_emplaceIJRaS3_EEES0_INS6_14_Node_iteratorIS4_Lb0ELb0EEEbESt17integral_constantIbLb1EEDpOT_+0xbe>
	auto __pos = _M_insert_unique_node(__bkt, __code, __node._M_node);
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	9200      	str	r2, [sp, #0]
 8001c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c90:	68b8      	ldr	r0, [r7, #8]
 8001c92:	f000 f988 	bl	8001fa6 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS6_10_Hash_nodeIS4_Lb0EEEj>
 8001c96:	4603      	mov	r3, r0
 8001c98:	613b      	str	r3, [r7, #16]
	__node._M_node = nullptr;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61bb      	str	r3, [r7, #24]
	return { __pos, true };
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001ca4:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8001ca8:	f107 0310 	add.w	r3, r7, #16
 8001cac:	4619      	mov	r1, r3
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f000 fbd2 	bl	8002458 <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKaP9BaseStateELb0ELb0EEEbEC1IRS6_bLb1EEEOT_OT0_>
      }
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f000 f95f 	bl	8001f7c <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	373c      	adds	r7, #60	; 0x3c
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd90      	pop	{r4, r7, pc}

08001cc6 <_ZNSt5arrayIaLj10EE4dataEv>:
      data() noexcept
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f000 fbda 	bl	800248a <_ZNSt14__array_traitsIaLj10EE6_S_ptrERA10_Ka>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <_ZSt19__iterator_categoryIPaENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
    __iterator_category(const _Iter&)
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001ce8:	bf00      	nop
 8001cea:	4618      	mov	r0, r3
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr

08001cf4 <_ZSt10__fill_n_aIPajaET_S1_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
 8001d00:	703b      	strb	r3, [r7, #0]
      if (__n <= 0)
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <_ZSt10__fill_n_aIPajaET_S1_T0_RKT1_St26random_access_iterator_tag+0x18>
	return __first;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	e00a      	b.n	8001d22 <_ZSt10__fill_n_aIPajaET_S1_T0_RKT1_St26random_access_iterator_tag+0x2e>
      std::__fill_a(__first, __first + __n, __value);
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	4413      	add	r3, r2
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	4619      	mov	r1, r3
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f000 fbc1 	bl	800249e <_ZSt8__fill_aIPaaEvT_S1_RKT0_>
      return __first + __n;
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	4413      	add	r3, r2
    }
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <_ZSteqRKSt15_Deque_iteratorIaRaPaES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
 8001d32:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	bf0c      	ite	eq
 8001d40:	2301      	moveq	r3, #1
 8001d42:	2300      	movne	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	4618      	mov	r0, r3
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <_ZNKSt15_Deque_iteratorIaRaPaEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr

08001d66 <_ZNSt16allocator_traitsISaIaEE7destroyIaEEvRS0_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8001d70:	6839      	ldr	r1, [r7, #0]
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 fba2 	bl	80024bc <_ZN9__gnu_cxx13new_allocatorIaE7destroyIaEEvPT_>
	}
 8001d78:	bf00      	nop
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <_ZNSt5dequeIaSaIaEE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fbc9 	bl	8001522 <_ZNSt11_Deque_baseIaSaIaEE19_M_get_Tp_allocatorEv>
 8001d90:	4602      	mov	r2, r0
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	4619      	mov	r1, r3
 8001d98:	4610      	mov	r0, r2
 8001d9a:	f7ff ffe4 	bl	8001d66 <_ZNSt16allocator_traitsISaIaEE7destroyIaEEvRS0_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	4619      	mov	r1, r3
 8001da6:	4610      	mov	r0, r2
 8001da8:	f000 f9d4 	bl	8002154 <_ZNSt11_Deque_baseIaSaIaEE18_M_deallocate_nodeEPa>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f103 0208 	add.w	r2, r3, #8
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	3304      	adds	r3, #4
 8001db8:	4619      	mov	r1, r3
 8001dba:	4610      	mov	r0, r2
 8001dbc:	f000 f9b2 	bl	8002124 <_ZNSt15_Deque_iteratorIaRaPaE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68da      	ldr	r2, [r3, #12]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
    }
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <_ZNSt16allocator_traitsISaIaEE9constructIaJRKaEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 fb77 	bl	80024d0 <_ZSt7forwardIRKaEOT_RNSt16remove_referenceIS2_E4typeE>
 8001de2:	4603      	mov	r3, r0
 8001de4:	461a      	mov	r2, r3
 8001de6:	68b9      	ldr	r1, [r7, #8]
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f000 fb7b 	bl	80024e4 <_ZN9__gnu_cxx13new_allocatorIaE9constructIaJRKaEEEvPT_DpOT0_>
	}
 8001dee:	bf00      	nop
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <_ZNSt5dequeIaSaIaEE16_M_push_back_auxIJRKaEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8001df8:	b5b0      	push	{r4, r5, r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 fb86 	bl	8002514 <_ZNKSt5dequeIaSaIaEE4sizeEv>
 8001e08:	4604      	mov	r4, r0
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 fb94 	bl	8002538 <_ZNKSt5dequeIaSaIaEE8max_sizeEv>
 8001e10:	4603      	mov	r3, r0
 8001e12:	429c      	cmp	r4, r3
 8001e14:	bf0c      	ite	eq
 8001e16:	2301      	moveq	r3, #1
 8001e18:	2300      	movne	r3, #0
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d002      	beq.n	8001e26 <_ZNSt5dequeIaSaIaEE16_M_push_back_auxIJRKaEEEvDpOT_+0x2e>
	  __throw_length_error(
 8001e20:	4816      	ldr	r0, [pc, #88]	; (8001e7c <_ZNSt5dequeIaSaIaEE16_M_push_back_auxIJRKaEEEvDpOT_+0x84>)
 8001e22:	f006 f8e7 	bl	8007ff4 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 8001e26:	2101      	movs	r1, #1
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 fb96 	bl	800255a <_ZNSt5dequeIaSaIaEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	1d1c      	adds	r4, r3, #4
 8001e36:	4610      	mov	r0, r2
 8001e38:	f000 fbaa 	bl	8002590 <_ZNSt11_Deque_baseIaSaIaEE16_M_allocate_nodeEv>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8001e40:	687c      	ldr	r4, [r7, #4]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	699d      	ldr	r5, [r3, #24]
 8001e46:	6838      	ldr	r0, [r7, #0]
 8001e48:	f000 fb42 	bl	80024d0 <_ZSt7forwardIRKaEOT_RNSt16remove_referenceIS2_E4typeE>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	461a      	mov	r2, r3
 8001e50:	4629      	mov	r1, r5
 8001e52:	4620      	mov	r0, r4
 8001e54:	f7ff ffbc 	bl	8001dd0 <_ZNSt16allocator_traitsISaIaEE9constructIaJRKaEEEvRS0_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f103 0218 	add.w	r2, r3, #24
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	3304      	adds	r3, #4
 8001e64:	4619      	mov	r1, r3
 8001e66:	4610      	mov	r0, r2
 8001e68:	f000 f95c 	bl	8002124 <_ZNSt15_Deque_iteratorIaRaPaE11_M_set_nodeEPS1_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	69da      	ldr	r2, [r3, #28]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	619a      	str	r2, [r3, #24]
      }
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bdb0      	pop	{r4, r5, r7, pc}
 8001e7c:	08008764 	.word	0x08008764

08001e80 <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS2_>:
      _M_hash_code(const _Key& __k) const
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
	return _M_hash()(__k);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 fb92 	bl	80025b4 <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv>
 8001e90:	4602      	mov	r2, r0
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	f993 3000 	ldrsb.w	r3, [r3]
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4610      	mov	r0, r2
 8001e9c:	f7fe fdff 	bl	8000a9e <_ZNKSt4hashIaEclEa>
 8001ea0:	4603      	mov	r3, r0
      }
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>:
      _M_bucket_index(__hash_code __c) const
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
 8001eb2:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__c, _M_bucket_count); }
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	6839      	ldr	r1, [r7, #0]
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 fb85 	bl	80025cc <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEjj>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS1_j>:
      _M_find_node(size_type __bkt, const key_type& __key,
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
 8001ed8:	603b      	str	r3, [r7, #0]
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	68b9      	ldr	r1, [r7, #8]
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f000 fb85 	bl	80025f0 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j>
 8001ee6:	6178      	str	r0, [r7, #20]
	if (__before_n)
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d002      	beq.n	8001ef4 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS1_j+0x28>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	e000      	b.n	8001ef6 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS1_j+0x2a>
	return nullptr;
 8001ef4:	2300      	movs	r3, #0
      }
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE4_M_vEv>:
      _M_v() noexcept
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 fbb7 	bl	800267a <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE9_M_valptrEv>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <_ZNSt5tupleIJRKaEEC1ILb1ELb1EEES1_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6839      	ldr	r1, [r7, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f000 fbb5 	bl	8002694 <_ZNSt11_Tuple_implILj0EJRKaEEC1ES1_>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS1_EESN_IJEEEEEPNS6_16_Hashtable_allocISaINS6_10_Hash_nodeIS4_Lb0EEEEEEDpOT_>:
	  _Scoped_node(__hashtable_alloc* __h, _Args&&... __args)
 8001f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
 8001f40:	603b      	str	r3, [r7, #0]
	  : _M_h(__h),
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	68ba      	ldr	r2, [r7, #8]
 8001f46:	601a      	str	r2, [r3, #0]
	    _M_node(__h->_M_allocate_node(std::forward<_Args>(__args)...))
 8001f48:	68bc      	ldr	r4, [r7, #8]
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 fbb1 	bl	80026b2 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8001f50:	4605      	mov	r5, r0
 8001f52:	6838      	ldr	r0, [r7, #0]
 8001f54:	f000 fbb7 	bl	80026c6 <_ZSt7forwardISt5tupleIJRKaEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8001f58:	4606      	mov	r6, r0
 8001f5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f5c:	f000 fbbd 	bl	80026da <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001f60:	4603      	mov	r3, r0
 8001f62:	4632      	mov	r2, r6
 8001f64:	4629      	mov	r1, r5
 8001f66:	4620      	mov	r0, r4
 8001f68:	f000 fbce 	bl	8002708 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE16_M_allocate_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESE_IJEEEEEPS7_DpOT_>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	605a      	str	r2, [r3, #4]
	  { }
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4618      	mov	r0, r3
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f7c <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>:
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d007      	beq.n	8001f9c <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev+0x20>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	4619      	mov	r1, r3
 8001f96:	4610      	mov	r0, r2
 8001f98:	f000 f93f 	bl	800221a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE18_M_deallocate_nodeEPS7_>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS6_10_Hash_nodeIS4_Lb0EEEj>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8001fa6:	b590      	push	{r4, r7, lr}
 8001fa8:	b08d      	sub	sp, #52	; 0x34
 8001faa:	af02      	add	r7, sp, #8
 8001fac:	60f8      	str	r0, [r7, #12]
 8001fae:	60b9      	str	r1, [r7, #8]
 8001fb0:	607a      	str	r2, [r7, #4]
 8001fb2:	603b      	str	r3, [r7, #0]
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	3310      	adds	r3, #16
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe fdae 	bl	8000b1a <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	61fb      	str	r3, [r7, #28]
 8001fc2:	f107 031c 	add.w	r3, r7, #28
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f103 0110 	add.w	r1, r3, #16
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	68dc      	ldr	r4, [r3, #12]
 8001fd6:	f107 0014 	add.w	r0, r7, #20
 8001fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	4623      	mov	r3, r4
 8001fe0:	f006 f866 	bl	80080b0 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>
      if (__do_rehash.first)
 8001fe4:	7d3b      	ldrb	r3, [r7, #20]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00a      	beq.n	8002000 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS6_10_Hash_nodeIS4_Lb0EEEj+0x5a>
	  _M_rehash(__do_rehash.second, __saved_state);
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fee:	4619      	mov	r1, r3
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	f000 fbca 	bl	800278a <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>
	  __bkt = _M_bucket_index(__code);
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	f7ff ff56 	bl	8001eaa <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 8001ffe:	60b8      	str	r0, [r7, #8]
      this->_M_store_code(*__node, __code);
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	3304      	adds	r3, #4
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	4619      	mov	r1, r3
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f000 fbcd 	bl	80027a8 <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeERNS_21_Hash_node_code_cacheILb0EEEj>
      _M_insert_bucket_begin(__bkt, __node);
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	68b9      	ldr	r1, [r7, #8]
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 fbd3 	bl	80027be <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS6_10_Hash_nodeIS4_Lb0EEE>
      ++_M_element_count;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	1c5a      	adds	r2, r3, #1
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	60da      	str	r2, [r3, #12]
      return iterator(__node);
 8002022:	f107 0320 	add.w	r3, r7, #32
 8002026:	6839      	ldr	r1, [r7, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f000 f9ef 	bl	800240c <_ZNSt8__detail14_Node_iteratorISt4pairIKaP9BaseStateELb0ELb0EEC1EPNS_10_Hash_nodeIS5_Lb0EEE>
 800202e:	6a3b      	ldr	r3, [r7, #32]
    }
 8002030:	4618      	mov	r0, r3
 8002032:	372c      	adds	r7, #44	; 0x2c
 8002034:	46bd      	mov	sp, r7
 8002036:	bd90      	pop	{r4, r7, pc}

08002038 <_ZNKSt8__detail14_Node_iteratorISt4pairIKaP9BaseStateELb0ELb0EEptEv>:
      operator->() const noexcept
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
      { return this->_M_cur->_M_valptr(); }
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	3304      	adds	r3, #4
 8002046:	4618      	mov	r0, r3
 8002048:	f000 fb17 	bl	800267a <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE9_M_valptrEv>
 800204c:	4603      	mov	r3, r0
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <_ZNSaIaEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 fbf4 	bl	800284c <_ZN9__gnu_cxx13new_allocatorIaEC1Ev>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <_ZNSt11_Deque_baseIaSaIaEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3308      	adds	r3, #8
 8002086:	4618      	mov	r0, r3
 8002088:	f000 fbea 	bl	8002860 <_ZNSt15_Deque_iteratorIaRaPaEC1Ev>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3318      	adds	r3, #24
 8002090:	4618      	mov	r0, r3
 8002092:	f000 fbe5 	bl	8002860 <_ZNSt15_Deque_iteratorIaRaPaEC1Ev>
	{ }
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4618      	mov	r0, r3
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <_ZN9__gnu_cxx13new_allocatorIaED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4618      	mov	r0, r3
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr

080020b4 <_ZNSt11_Deque_baseIaSaIaEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 80020b4:	b590      	push	{r4, r7, lr}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80020be:	f107 030c 	add.w	r3, r7, #12
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f000 f858 	bl	800217a <_ZNKSt11_Deque_baseIaSaIaEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80020ca:	f107 030c 	add.w	r3, r7, #12
 80020ce:	6839      	ldr	r1, [r7, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f000 fbdb 	bl	800288c <_ZNSt16allocator_traitsISaIPaEE8allocateERS1_j>
 80020d6:	4604      	mov	r4, r0
 80020d8:	bf00      	nop
      }
 80020da:	f107 030c 	add.w	r3, r7, #12
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 f85c 	bl	800219c <_ZNSaIPaED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80020e4:	4623      	mov	r3, r4
      }
 80020e6:	4618      	mov	r0, r3
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd90      	pop	{r4, r7, pc}

080020ee <_ZNSt11_Deque_baseIaSaIaEE15_M_create_nodesEPPaS3_>:
    _Deque_base<_Tp, _Alloc>::
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b086      	sub	sp, #24
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	e008      	b.n	8002112 <_ZNSt11_Deque_baseIaSaIaEE15_M_create_nodesEPPaS3_+0x24>
	    *__cur = this->_M_allocate_node();
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f000 fa45 	bl	8002590 <_ZNSt11_Deque_baseIaSaIaEE16_M_allocate_nodeEv>
 8002106:	4602      	mov	r2, r0
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	3304      	adds	r3, #4
 8002110:	617b      	str	r3, [r7, #20]
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	429a      	cmp	r2, r3
 8002118:	d3f2      	bcc.n	8002100 <_ZNSt11_Deque_baseIaSaIaEE15_M_create_nodesEPPaS3_+0x12>
    }
 800211a:	bf00      	nop
 800211c:	bf00      	nop
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <_ZNSt15_Deque_iteratorIaRaPaE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8002124:	b590      	push	{r4, r7, lr}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685c      	ldr	r4, [r3, #4]
 8002140:	f000 fbb3 	bl	80028aa <_ZNSt15_Deque_iteratorIaRaPaE14_S_buffer_sizeEv>
 8002144:	4603      	mov	r3, r0
 8002146:	18e2      	adds	r2, r4, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	609a      	str	r2, [r3, #8]
      }
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	bd90      	pop	{r4, r7, pc}

08002154 <_ZNSt11_Deque_baseIaSaIaEE18_M_deallocate_nodeEPa>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8002154:	b590      	push	{r4, r7, lr}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 800215e:	687c      	ldr	r4, [r7, #4]
 8002160:	2001      	movs	r0, #1
 8002162:	f7fe fc88 	bl	8000a76 <_ZSt16__deque_buf_sizej>
 8002166:	4603      	mov	r3, r0
 8002168:	461a      	mov	r2, r3
 800216a:	6839      	ldr	r1, [r7, #0]
 800216c:	4620      	mov	r0, r4
 800216e:	f000 fba4 	bl	80028ba <_ZNSt16allocator_traitsISaIaEE10deallocateERS0_Paj>
      }
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	bd90      	pop	{r4, r7, pc}

0800217a <_ZNKSt11_Deque_baseIaSaIaEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8002184:	6838      	ldr	r0, [r7, #0]
 8002186:	f000 fba7 	bl	80028d8 <_ZNKSt11_Deque_baseIaSaIaEE19_M_get_Tp_allocatorEv>
 800218a:	4603      	mov	r3, r0
 800218c:	4619      	mov	r1, r3
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 fbac 	bl	80028ec <_ZNSaIPaEC1IaEERKSaIT_E>
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <_ZNSaIPaED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 fbae 	bl	8002906 <_ZN9__gnu_cxx13new_allocatorIPaED1Ev>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4618      	mov	r0, r3
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <_ZNSt16allocator_traitsISaIPaEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	68b9      	ldr	r1, [r7, #8]
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f000 fba8 	bl	800291a <_ZN9__gnu_cxx13new_allocatorIPaE10deallocateEPS1_j>
 80021ca:	bf00      	nop
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <_ZNSt14__array_traitsIPFvvELj10EE6_S_ptrERA10_KS1_>:
      _S_ptr(const _Type& __t) noexcept
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4618      	mov	r0, r3
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr

080021e6 <_ZSt8__fill_aIPPFvvES1_EvT_S3_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b084      	sub	sp, #16
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	60f8      	str	r0, [r7, #12]
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	68b9      	ldr	r1, [r7, #8]
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f000 fb9f 	bl	800293a <_ZSt9__fill_a1IPPFvvES1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>
 80021fc:	bf00      	nop
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <_ZNKSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EE7_M_nextEv>:
      _M_next() const noexcept
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Hash_node*>(this->_M_nxt); }
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	bc80      	pop	{r7}
 8002218:	4770      	bx	lr

0800221a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE18_M_deallocate_nodeEPS7_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_ptr __n)
 800221a:	b590      	push	{r4, r7, lr}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	6039      	str	r1, [r7, #0]
      __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 fba2 	bl	800296e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE17_M_node_allocatorEv>
 800222a:	4604      	mov	r4, r0
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	3304      	adds	r3, #4
 8002230:	4618      	mov	r0, r3
 8002232:	f000 fa22 	bl	800267a <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE9_M_valptrEv>
 8002236:	4603      	mov	r3, r0
 8002238:	4619      	mov	r1, r3
 800223a:	4620      	mov	r0, r4
 800223c:	f000 fba3 	bl	8002986 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE7destroyIS6_EEvRS8_PT_>
      _M_deallocate_node_ptr(__n);
 8002240:	6839      	ldr	r1, [r7, #0]
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 fbac 	bl	80029a0 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE22_M_deallocate_node_ptrEPS7_>
    }
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	bd90      	pop	{r4, r7, pc}

08002250 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS6_15_Hash_node_baseE>:
      _M_uses_single_bucket(__buckets_ptr __bkts) const
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3318      	adds	r3, #24
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	bf0c      	ite	eq
 8002264:	2301      	moveq	r3, #1
 8002266:	2300      	movne	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	bf14      	ite	ne
 800226e:	2301      	movne	r3, #1
 8002270:	2300      	moveq	r3, #0
 8002272:	b2db      	uxtb	r3, r3
 8002274:	4618      	mov	r0, r3
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr

0800227e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>:
      return __p;
    }

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::
 800227e:	b580      	push	{r7, lr}
 8002280:	b086      	sub	sp, #24
 8002282:	af00      	add	r7, sp, #0
 8002284:	60f8      	str	r0, [r7, #12]
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	607a      	str	r2, [r7, #4]
    _M_deallocate_buckets(__buckets_ptr __bkts,
			  std::size_t __bkt_count)
    {
      typedef typename __buckets_alloc_traits::pointer _Ptr;
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
 800228a:	68b8      	ldr	r0, [r7, #8]
 800228c:	f000 fb9e 	bl	80029cc <_ZNSt14pointer_traitsIPPNSt8__detail15_Hash_node_baseEE10pointer_toERS2_>
 8002290:	6178      	str	r0, [r7, #20]
      __buckets_alloc_type __alloc(_M_node_allocator());
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 fb6b 	bl	800296e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE17_M_node_allocatorEv>
 8002298:	4602      	mov	r2, r0
 800229a:	f107 0310 	add.w	r3, r7, #16
 800229e:	4611      	mov	r1, r2
 80022a0:	4618      	mov	r0, r3
 80022a2:	f000 fb9f 	bl	80029e4 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEERKSaIT_E>
      __buckets_alloc_traits::deallocate(__alloc, __ptr, __bkt_count);
 80022a6:	f107 0310 	add.w	r3, r7, #16
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6979      	ldr	r1, [r7, #20]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 fbb1 	bl	8002a16 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>
    }
 80022b4:	f107 0310 	add.w	r3, r7, #16
 80022b8:	4618      	mov	r0, r3
 80022ba:	f000 fba0 	bl	80029fe <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <_ZSt4swapINSt11_Deque_baseIaSaIaEE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 80022c4:	b5b0      	push	{r4, r5, r7, lr}
 80022c6:	b08c      	sub	sp, #48	; 0x30
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 fbb0 	bl	8002a34 <_ZSt4moveIRNSt11_Deque_baseIaSaIaEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 80022d4:	4602      	mov	r2, r0
 80022d6:	f107 0308 	add.w	r3, r7, #8
 80022da:	4611      	mov	r1, r2
 80022dc:	4618      	mov	r0, r3
 80022de:	f000 fbd7 	bl	8002a90 <_ZNSt11_Deque_baseIaSaIaEE16_Deque_impl_dataC1EOS2_>
      __a = _GLIBCXX_MOVE(__b);
 80022e2:	6838      	ldr	r0, [r7, #0]
 80022e4:	f000 fba6 	bl	8002a34 <_ZSt4moveIRNSt11_Deque_baseIaSaIaEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 80022e8:	4602      	mov	r2, r0
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	461c      	mov	r4, r3
 80022ee:	4615      	mov	r5, r2
 80022f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022f8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022fc:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8002300:	f107 0308 	add.w	r3, r7, #8
 8002304:	4618      	mov	r0, r3
 8002306:	f000 fb95 	bl	8002a34 <_ZSt4moveIRNSt11_Deque_baseIaSaIaEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 800230a:	4602      	mov	r2, r0
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	461c      	mov	r4, r3
 8002310:	4615      	mov	r5, r2
 8002312:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002314:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002316:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002318:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800231a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800231e:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 8002322:	bf00      	nop
 8002324:	3730      	adds	r7, #48	; 0x30
 8002326:	46bd      	mov	sp, r7
 8002328:	bdb0      	pop	{r4, r5, r7, pc}

0800232a <_ZNSt5dequeIaSaIaEE15_M_erase_at_endESt15_Deque_iteratorIaRaPaE>:
      _M_erase_at_end(iterator __pos)
 800232a:	b590      	push	{r4, r7, lr}
 800232c:	b08b      	sub	sp, #44	; 0x2c
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 8002334:	f107 0308 	add.w	r3, r7, #8
 8002338:	6839      	ldr	r1, [r7, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff f8fb 	bl	8001536 <_ZNSt15_Deque_iteratorIaRaPaEC1ERKS2_>
 8002340:	f107 0318 	add.w	r3, r7, #24
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff f8dc 	bl	8001504 <_ZNSt5dequeIaSaIaEE3endEv>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff f8e7 	bl	8001522 <_ZNSt11_Deque_baseIaSaIaEE19_M_get_Tp_allocatorEv>
 8002354:	4603      	mov	r3, r0
 8002356:	f107 0218 	add.w	r2, r7, #24
 800235a:	f107 0108 	add.w	r1, r7, #8
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7ff f904 	bl	800156c <_ZNSt5dequeIaSaIaEE15_M_destroy_dataESt15_Deque_iteratorIaRaPaES5_RKS0_>
	_M_destroy_nodes(__pos._M_node + 1,
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 8002370:	3304      	adds	r3, #4
 8002372:	461a      	mov	r2, r3
 8002374:	f7ff fb62 	bl	8001a3c <_ZNSt11_Deque_baseIaSaIaEE16_M_destroy_nodesEPPaS3_>
	this->_M_impl._M_finish = __pos;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	f103 0418 	add.w	r4, r3, #24
 8002380:	4613      	mov	r3, r2
 8002382:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002384:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8002388:	bf00      	nop
 800238a:	372c      	adds	r7, #44	; 0x2c
 800238c:	46bd      	mov	sp, r7
 800238e:	bd90      	pop	{r4, r7, pc}

08002390 <_ZSt18__do_alloc_on_moveISaIaEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 800239c:	68b8      	ldr	r0, [r7, #8]
 800239e:	f000 fb96 	bl	8002ace <_ZSt4moveIRSaIaEEONSt16remove_referenceIT_E4typeEOS3_>
 80023a2:	bf00      	nop
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1IJRaS3_EEEPNS6_16_Hashtable_allocISaINS6_10_Hash_nodeIS4_Lb0EEEEEEDpOT_>:
	  _Scoped_node(__hashtable_alloc* __h, _Args&&... __args)
 80023aa:	b5b0      	push	{r4, r5, r7, lr}
 80023ac:	b084      	sub	sp, #16
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	60f8      	str	r0, [r7, #12]
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	607a      	str	r2, [r7, #4]
 80023b6:	603b      	str	r3, [r7, #0]
	  : _M_h(__h),
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	601a      	str	r2, [r3, #0]
	    _M_node(__h->_M_allocate_node(std::forward<_Args>(__args)...))
 80023be:	68bc      	ldr	r4, [r7, #8]
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7ff f981 	bl	80016c8 <_ZSt7forwardIRaEOT_RNSt16remove_referenceIS1_E4typeE>
 80023c6:	4605      	mov	r5, r0
 80023c8:	6838      	ldr	r0, [r7, #0]
 80023ca:	f7ff f987 	bl	80016dc <_ZSt7forwardIP9BaseStateEOT_RNSt16remove_referenceIS2_E4typeE>
 80023ce:	4603      	mov	r3, r0
 80023d0:	461a      	mov	r2, r3
 80023d2:	4629      	mov	r1, r5
 80023d4:	4620      	mov	r0, r4
 80023d6:	f000 fb84 	bl	8002ae2 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE16_M_allocate_nodeIJRaS5_EEEPS7_DpOT_>
 80023da:	4602      	mov	r2, r0
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	605a      	str	r2, [r3, #4]
	  { }
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4618      	mov	r0, r3
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bdb0      	pop	{r4, r5, r7, pc}

080023ea <_ZNKSt8__detail10_Select1stclIRSt4pairIKaP9BaseStateEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS8_>:
      operator()(_Tp&& __x) const noexcept
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	6039      	str	r1, [r7, #0]
      { return std::get<0>(std::forward<_Tp>(__x)); }
 80023f4:	6838      	ldr	r0, [r7, #0]
 80023f6:	f000 fbac 	bl	8002b52 <_ZSt7forwardIRSt4pairIKaP9BaseStateEEOT_RNSt16remove_referenceIS6_E4typeE>
 80023fa:	4603      	mov	r3, r0
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 fbb2 	bl	8002b66 <_ZSt3getILj0EKaP9BaseStateERNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERS7_>
 8002402:	4603      	mov	r3, r0
 8002404:	4618      	mov	r0, r3
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <_ZNSt8__detail14_Node_iteratorISt4pairIKaP9BaseStateELb0ELb0EEC1EPNS_10_Hash_nodeIS5_Lb0EEE>:
      _Node_iterator(__node_type* __p) noexcept
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
      : __base_type(__p) { }
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6839      	ldr	r1, [r7, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f000 fbaf 	bl	8002b7e <_ZNSt8__detail19_Node_iterator_baseISt4pairIKaP9BaseStateELb0EEC1EPNS_10_Hash_nodeIS5_Lb0EEE>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <_ZSt9make_pairINSt8__detail14_Node_iteratorISt4pairIKaP9BaseStateELb0ELb0EEEbES2_INSt25__strip_reference_wrapperINSt5decayIT_E4typeEE6__typeENS8_INS9_IT0_E4typeEE6__typeEEOSA_OSF_>:
#if __cplusplus >= 201103L
  // NB: DR 706.
  template<typename _T1, typename _T2>
    constexpr pair<typename __decay_and_strip<_T1>::__type,
                   typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
 800242a:	b590      	push	{r4, r7, lr}
 800242c:	b085      	sub	sp, #20
 800242e:	af00      	add	r7, sp, #0
 8002430:	60f8      	str	r0, [r7, #12]
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	607a      	str	r2, [r7, #4]
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> 	      __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
 8002436:	68b8      	ldr	r0, [r7, #8]
 8002438:	f000 fbaf 	bl	8002b9a <_ZSt7forwardINSt8__detail14_Node_iteratorISt4pairIKaP9BaseStateELb0ELb0EEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800243c:	4604      	mov	r4, r0
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7ff f808 	bl	8001454 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8002444:	4603      	mov	r3, r0
 8002446:	461a      	mov	r2, r3
 8002448:	4621      	mov	r1, r4
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 fbaf 	bl	8002bae <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKaP9BaseStateELb0ELb0EEEbEC1IS6_bLb1EEEOT_OT0_>
    }
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	bd90      	pop	{r4, r7, pc}

08002458 <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKaP9BaseStateELb0ELb0EEEbEC1IRS6_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8002464:	68b8      	ldr	r0, [r7, #8]
 8002466:	f000 fbbb 	bl	8002be0 <_ZSt7forwardIRNSt8__detail14_Node_iteratorISt4pairIKaP9BaseStateELb0ELb0EEEEOT_RNSt16remove_referenceIS9_E4typeE>
 800246a:	4602      	mov	r2, r0
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7fe ffee 	bl	8001454 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8002478:	4603      	mov	r3, r0
 800247a:	781a      	ldrb	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	711a      	strb	r2, [r3, #4]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <_ZNSt14__array_traitsIaLj10EE6_S_ptrERA10_Ka>:
      _S_ptr(const _Type& __t) noexcept
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4618      	mov	r0, r3
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr

0800249e <_ZSt8__fill_aIPaaEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 800249e:	b580      	push	{r7, lr}
 80024a0:	b084      	sub	sp, #16
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	60f8      	str	r0, [r7, #12]
 80024a6:	60b9      	str	r1, [r7, #8]
 80024a8:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	68b9      	ldr	r1, [r7, #8]
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 fba0 	bl	8002bf4 <_ZSt9__fill_a1IaEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>
 80024b4:	bf00      	nop
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <_ZN9__gnu_cxx13new_allocatorIaE7destroyIaEEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr

080024d0 <_ZSt7forwardIRKaEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr

080024e4 <_ZN9__gnu_cxx13new_allocatorIaE9constructIaJRKaEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80024e4:	b590      	push	{r4, r7, lr}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff ffed 	bl	80024d0 <_ZSt7forwardIRKaEOT_RNSt16remove_referenceIS2_E4typeE>
 80024f6:	4603      	mov	r3, r0
 80024f8:	f993 4000 	ldrsb.w	r4, [r3]
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	4619      	mov	r1, r3
 8002500:	2001      	movs	r0, #1
 8002502:	f7fe faad 	bl	8000a60 <_ZnwjPv>
 8002506:	4603      	mov	r3, r0
 8002508:	4622      	mov	r2, r4
 800250a:	701a      	strb	r2, [r3, #0]
 800250c:	bf00      	nop
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	bd90      	pop	{r4, r7, pc}

08002514 <_ZNKSt5dequeIaSaIaEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f103 0218 	add.w	r2, r3, #24
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	3308      	adds	r3, #8
 8002526:	4619      	mov	r1, r3
 8002528:	4610      	mov	r0, r2
 800252a:	f000 fb7d 	bl	8002c28 <_ZStmiRKSt15_Deque_iteratorIaRaPaES4_>
 800252e:	4603      	mov	r3, r0
 8002530:	4618      	mov	r0, r3
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <_ZNKSt5dequeIaSaIaEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4618      	mov	r0, r3
 8002544:	f000 f9c8 	bl	80028d8 <_ZNKSt11_Deque_baseIaSaIaEE19_M_get_Tp_allocatorEv>
 8002548:	4603      	mov	r3, r0
 800254a:	4618      	mov	r0, r3
 800254c:	f000 fb96 	bl	8002c7c <_ZNSt5dequeIaSaIaEE11_S_max_sizeERKS0_>
 8002550:	4603      	mov	r3, r0
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <_ZNSt5dequeIaSaIaEE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	6809      	ldr	r1, [r1, #0]
 8002574:	1a41      	subs	r1, r0, r1
 8002576:	1089      	asrs	r1, r1, #2
 8002578:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800257a:	429a      	cmp	r2, r3
 800257c:	d904      	bls.n	8002588 <_ZNSt5dequeIaSaIaEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 800257e:	2200      	movs	r2, #0
 8002580:	6839      	ldr	r1, [r7, #0]
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 fb94 	bl	8002cb0 <_ZNSt5dequeIaSaIaEE17_M_reallocate_mapEjb>
      }
 8002588:	bf00      	nop
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <_ZNSt11_Deque_baseIaSaIaEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8002590:	b590      	push	{r4, r7, lr}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8002598:	687c      	ldr	r4, [r7, #4]
 800259a:	2001      	movs	r0, #1
 800259c:	f7fe fa6b 	bl	8000a76 <_ZSt16__deque_buf_sizej>
 80025a0:	4603      	mov	r3, r0
 80025a2:	4619      	mov	r1, r3
 80025a4:	4620      	mov	r0, r4
 80025a6:	f000 fc1d 	bl	8002de4 <_ZNSt16allocator_traitsISaIaEE8allocateERS0_j>
 80025aa:	4603      	mov	r3, r0
      }
 80025ac:	4618      	mov	r0, r3
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd90      	pop	{r4, r7, pc}

080025b4 <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv>:
      _M_hash() const { return __ebo_hash::_M_cget(); }
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 fc20 	bl	8002e02 <_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIaELb1EE7_M_cgetEv>
 80025c2:	4603      	mov	r3, r0
 80025c4:	4618      	mov	r0, r3
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEjj>:
      _M_bucket_index(__hash_code __c, std::size_t __bkt_count) const
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
      { return _RangeHash{}(__c, __bkt_count); }
 80025d8:	f107 0314 	add.w	r3, r7, #20
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	68b9      	ldr	r1, [r7, #8]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fe fa76 	bl	8000ad2 <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 80025e6:	4603      	mov	r3, r0
 80025e8:	4618      	mov	r0, r3
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
 80025fc:	603b      	str	r3, [r7, #0]
      __node_base_ptr __prev_p = _M_buckets[__bkt];
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4413      	add	r3, r2
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	617b      	str	r3, [r7, #20]
      if (!__prev_p)
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x26>
	return nullptr;
 8002612:	2300      	movs	r3, #0
 8002614:	e02d      	b.n	8002672 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x82>
      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	613b      	str	r3, [r7, #16]
	  if (this->_M_equals(__k, __code, *__p))
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	3304      	adds	r3, #4
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f000 fbf6 	bl	8002e16 <_ZNKSt8__detail15_Hashtable_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS5_Lb0EEE>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x44>
	    return __prev_p;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	e01e      	b.n	8002672 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x82>
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00c      	beq.n	8002656 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x66>
 800263c:	6938      	ldr	r0, [r7, #16]
 800263e:	f7ff fde1 	bl	8002204 <_ZNKSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EE7_M_nextEv>
 8002642:	4603      	mov	r3, r0
 8002644:	3304      	adds	r3, #4
 8002646:	4619      	mov	r1, r3
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 fc11 	bl	8002e70 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS6_16_Hash_node_valueIS4_Lb0EEE>
 800264e:	4602      	mov	r2, r0
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	4293      	cmp	r3, r2
 8002654:	d001      	beq.n	800265a <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x6a>
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x6c>
 800265a:	2300      	movs	r3, #0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d106      	bne.n	800266e <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x7e>
	  __prev_p = __p;
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	617b      	str	r3, [r7, #20]
	   __p = __p->_M_next())
 8002664:	6938      	ldr	r0, [r7, #16]
 8002666:	f7ff fdcd 	bl	8002204 <_ZNKSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EE7_M_nextEv>
 800266a:	6138      	str	r0, [r7, #16]
	  if (this->_M_equals(__k, __code, *__p))
 800266c:	e7d6      	b.n	800261c <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x2c>
	    break;
 800266e:	bf00      	nop
      return nullptr;
 8002670:	2300      	movs	r3, #0
    }
 8002672:	4618      	mov	r0, r3
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE9_M_valptrEv>:
      _M_valptr() noexcept
 800267a:	b580      	push	{r7, lr}
 800267c:	b082      	sub	sp, #8
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4618      	mov	r0, r3
 8002686:	f000 fc04 	bl	8002e92 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKaP9BaseStateEE6_M_ptrEv>
 800268a:	4603      	mov	r3, r0
 800268c:	4618      	mov	r0, r3
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <_ZNSt11_Tuple_implILj0EJRKaEEC1ES1_>:
      _Tuple_impl(const _Head& __head)
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
      : _Base(__head)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6839      	ldr	r1, [r7, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 fc01 	bl	8002eaa <_ZNSt10_Head_baseILj0ERKaLb0EEC1ES1_>
      { }
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4618      	mov	r0, r3
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bc80      	pop	{r7}
 80026c4:	4770      	bx	lr

080026c6 <_ZSt7forwardISt5tupleIJRKaEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4618      	mov	r0, r3
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr

080026da <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4618      	mov	r0, r3
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr

080026ee <_ZNSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEC1Ev>:
    struct _Hash_node
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fe f9dd 	bl	8000ab8 <_ZNSt8__detail15_Hash_node_baseC1Ev>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4618      	mov	r0, r3
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE16_M_allocate_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESE_IJEEEEEPS7_DpOT_>:
      _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
 8002708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800270c:	b088      	sub	sp, #32
 800270e:	af02      	add	r7, sp, #8
 8002710:	60f8      	str	r0, [r7, #12]
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
 8002716:	603b      	str	r3, [r7, #0]
	auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f000 f928 	bl	800296e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE17_M_node_allocatorEv>
 800271e:	4603      	mov	r3, r0
 8002720:	2101      	movs	r1, #1
 8002722:	4618      	mov	r0, r3
 8002724:	f000 fbcf 	bl	8002ec6 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE8allocateERS8_j>
 8002728:	6178      	str	r0, [r7, #20]
	__node_ptr __n = std::__to_address(__nptr);
 800272a:	6978      	ldr	r0, [r7, #20]
 800272c:	f000 fbda 	bl	8002ee4 <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEPT_S9_>
 8002730:	6138      	str	r0, [r7, #16]
	    ::new ((void*)__n) __node_type;
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4619      	mov	r1, r3
 8002736:	200c      	movs	r0, #12
 8002738:	f7fe f992 	bl	8000a60 <_ZnwjPv>
 800273c:	4603      	mov	r3, r0
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff ffd5 	bl	80026ee <_ZNSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEC1Ev>
	    __node_alloc_traits::construct(_M_node_allocator(),
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f000 f912 	bl	800296e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE17_M_node_allocatorEv>
 800274a:	4604      	mov	r4, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	3304      	adds	r3, #4
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff ff92 	bl	800267a <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE9_M_valptrEv>
 8002756:	4605      	mov	r5, r0
 8002758:	68b8      	ldr	r0, [r7, #8]
 800275a:	f7ff ffaa 	bl	80026b2 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800275e:	4606      	mov	r6, r0
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7ff ffb0 	bl	80026c6 <_ZSt7forwardISt5tupleIJRKaEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8002766:	4680      	mov	r8, r0
 8002768:	6838      	ldr	r0, [r7, #0]
 800276a:	f7ff ffb6 	bl	80026da <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800276e:	4603      	mov	r3, r0
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	4643      	mov	r3, r8
 8002774:	4632      	mov	r2, r6
 8002776:	4629      	mov	r1, r5
 8002778:	4620      	mov	r0, r4
 800277a:	f000 fbbd 	bl	8002ef8 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJRS3_EESE_IJEEEEEvRS8_PT_DpOT0_>
	    return __n;
 800277e:	693b      	ldr	r3, [r7, #16]
      }
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800278a <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800278a:	b580      	push	{r7, lr}
 800278c:	b084      	sub	sp, #16
 800278e:	af00      	add	r7, sp, #0
 8002790:	60f8      	str	r0, [r7, #12]
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	607a      	str	r2, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash(size_type __bkt_count, const __rehash_state& __state)
    {
      __try
	{
	  _M_rehash_aux(__bkt_count, __unique_keys{});
 8002796:	461a      	mov	r2, r3
 8002798:	68b9      	ldr	r1, [r7, #8]
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f000 fbd9 	bl	8002f52 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>
	  // A failure here means that buckets allocation failed.  We only
	  // have to restore hash policy previous state.
	  _M_rehash_policy._M_reset(__state);
	  __throw_exception_again;
	}
    }
 80027a0:	bf00      	nop
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeERNS_21_Hash_node_code_cacheILb0EEEj>:
      _M_store_code(_Hash_node_code_cache<false>&, __hash_code) const
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
      { }
 80027b4:	bf00      	nop
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr

080027be <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS6_10_Hash_nodeIS4_Lb0EEE>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80027be:	b590      	push	{r4, r7, lr}
 80027c0:	b085      	sub	sp, #20
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	60f8      	str	r0, [r7, #12]
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	607a      	str	r2, [r7, #4]
      if (_M_buckets[__bkt])
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d011      	beq.n	80027fe <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS6_10_Hash_nodeIS4_Lb0EEE+0x40>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt]->_M_nxt = __node;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	601a      	str	r2, [r3, #0]
    }
 80027fc:	e022      	b.n	8002844 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS6_10_Hash_nodeIS4_Lb0EEE+0x86>
	  __node->_M_nxt = _M_before_begin._M_nxt;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	601a      	str	r2, [r3, #0]
	  _M_before_begin._M_nxt = __node;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	609a      	str	r2, [r3, #8]
	  if (__node->_M_nxt)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00f      	beq.n	8002834 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS6_10_Hash_nodeIS4_Lb0EEE+0x76>
	    _M_buckets[_M_bucket_index(*__node->_M_next())] = __node;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681c      	ldr	r4, [r3, #0]
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7ff fcf3 	bl	8002204 <_ZNKSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EE7_M_nextEv>
 800281e:	4603      	mov	r3, r0
 8002820:	3304      	adds	r3, #4
 8002822:	4619      	mov	r1, r3
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f000 fb23 	bl	8002e70 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS6_16_Hash_node_valueIS4_Lb0EEE>
 800282a:	4603      	mov	r3, r0
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4423      	add	r3, r4
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt] = &_M_before_begin;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	3208      	adds	r2, #8
 8002842:	601a      	str	r2, [r3, #0]
    }
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	bd90      	pop	{r4, r7, pc}

0800284c <_ZN9__gnu_cxx13new_allocatorIaEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4618      	mov	r0, r3
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr

08002860 <_ZNSt15_Deque_iteratorIaRaPaEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	605a      	str	r2, [r3, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	609a      	str	r2, [r3, #8]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	60da      	str	r2, [r3, #12]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4618      	mov	r0, r3
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr

0800288c <_ZNSt16allocator_traitsISaIPaEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002896:	2200      	movs	r2, #0
 8002898:	6839      	ldr	r1, [r7, #0]
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 fbc8 	bl	8003030 <_ZN9__gnu_cxx13new_allocatorIPaE8allocateEjPKv>
 80028a0:	4603      	mov	r3, r0
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <_ZNSt15_Deque_iteratorIaRaPaE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80028aa:	b580      	push	{r7, lr}
 80028ac:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80028ae:	2001      	movs	r0, #1
 80028b0:	f7fe f8e1 	bl	8000a76 <_ZSt16__deque_buf_sizej>
 80028b4:	4603      	mov	r3, r0
 80028b6:	4618      	mov	r0, r3
 80028b8:	bd80      	pop	{r7, pc}

080028ba <_ZNSt16allocator_traitsISaIaEE10deallocateERS0_Paj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b084      	sub	sp, #16
 80028be:	af00      	add	r7, sp, #0
 80028c0:	60f8      	str	r0, [r7, #12]
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	68b9      	ldr	r1, [r7, #8]
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f000 fbd9 	bl	8003082 <_ZN9__gnu_cxx13new_allocatorIaE10deallocateEPaj>
 80028d0:	bf00      	nop
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <_ZNKSt11_Deque_baseIaSaIaEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4618      	mov	r0, r3
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr

080028ec <_ZNSaIPaEC1IaEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 fbd1 	bl	800309e <_ZN9__gnu_cxx13new_allocatorIPaEC1Ev>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4618      	mov	r0, r3
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <_ZN9__gnu_cxx13new_allocatorIPaED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4618      	mov	r0, r3
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr

0800291a <_ZN9__gnu_cxx13new_allocatorIPaE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800291a:	b580      	push	{r7, lr}
 800291c:	b084      	sub	sp, #16
 800291e:	af00      	add	r7, sp, #0
 8002920:	60f8      	str	r0, [r7, #12]
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4619      	mov	r1, r3
 800292c:	68b8      	ldr	r0, [r7, #8]
 800292e:	f005 fb45 	bl	8007fbc <_ZdlPvj>
      }
 8002932:	bf00      	nop
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <_ZSt9__fill_a1IPPFvvES1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 800293a:	b480      	push	{r7}
 800293c:	b087      	sub	sp, #28
 800293e:	af00      	add	r7, sp, #0
 8002940:	60f8      	str	r0, [r7, #12]
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 800294c:	e005      	b.n	800295a <_ZSt9__fill_a1IPPFvvES1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x20>
	*__first = __tmp;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	601a      	str	r2, [r3, #0]
      for (; __first != __last; ++__first)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	3304      	adds	r3, #4
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	429a      	cmp	r2, r3
 8002960:	d1f5      	bne.n	800294e <_ZSt9__fill_a1IPPFvvES1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x14>
    }
 8002962:	bf00      	nop
 8002964:	bf00      	nop
 8002966:	371c      	adds	r7, #28
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr

0800296e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE17_M_node_allocatorEv>:
      _M_node_allocator()
 800296e:	b580      	push	{r7, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
      { return __ebo_node_alloc::_M_get(); }
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 fb9b 	bl	80030b2 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEELb1EE6_M_getEv>
 800297c:	4603      	mov	r3, r0
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE7destroyIS6_EEvRS8_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
 800298e:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8002990:	6839      	ldr	r1, [r7, #0]
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 fb97 	bl	80030c6 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE7destroyIS7_EEvPT_>
	}
 8002998:	bf00      	nop
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE22_M_deallocate_node_ptrEPS7_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_ptr __n)
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
 80029aa:	6838      	ldr	r0, [r7, #0]
 80029ac:	f000 fb95 	bl	80030da <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE10pointer_toERS7_>
 80029b0:	60f8      	str	r0, [r7, #12]
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7ff ffdb 	bl	800296e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE17_M_node_allocatorEv>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2201      	movs	r2, #1
 80029bc:	68f9      	ldr	r1, [r7, #12]
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 fab8 	bl	8002f34 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE10deallocateERS8_PS7_j>
    }
 80029c4:	bf00      	nop
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <_ZNSt14pointer_traitsIPPNSt8__detail15_Hash_node_baseEE10pointer_toERS2_>:
       *  @brief  Obtain a pointer to an object
       *  @param  __r  A reference to an object of type @c element_type
       *  @return @c addressof(__r)
      */
      static _GLIBCXX20_CONSTEXPR pointer
      pointer_to(__make_not_void<element_type>& __r) noexcept
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 fb8c 	bl	80030f2 <_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 80029da:	4603      	mov	r3, r0
 80029dc:	4618      	mov	r0, r3
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEERKSaIT_E>:
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 fb8b 	bl	800310a <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4618      	mov	r0, r3
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 fb89 	bl	800311e <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEED1Ev>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b084      	sub	sp, #16
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	60f8      	str	r0, [r7, #12]
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	68b9      	ldr	r1, [r7, #8]
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 fb83 	bl	8003132 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS3_j>
 8002a2c:	bf00      	nop
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <_ZSt4moveIRNSt11_Deque_baseIaSaIaEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr

08002a48 <_ZNSt11_Deque_baseIaSaIaEE16_Deque_impl_dataC1ERKS2_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	605a      	str	r2, [r3, #4]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f103 0208 	add.w	r2, r3, #8
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	3308      	adds	r3, #8
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4610      	mov	r0, r2
 8002a70:	f7fe fd61 	bl	8001536 <_ZNSt15_Deque_iteratorIaRaPaEC1ERKS2_>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f103 0218 	add.w	r2, r3, #24
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	3318      	adds	r3, #24
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4610      	mov	r0, r2
 8002a82:	f7fe fd58 	bl	8001536 <_ZNSt15_Deque_iteratorIaRaPaEC1ERKS2_>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <_ZNSt11_Deque_baseIaSaIaEE16_Deque_impl_dataC1EOS2_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 8002a90:	b5b0      	push	{r4, r5, r7, lr}
 8002a92:	b08c      	sub	sp, #48	; 0x30
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 8002a9a:	6839      	ldr	r1, [r7, #0]
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f7ff ffd3 	bl	8002a48 <_ZNSt11_Deque_baseIaSaIaEE16_Deque_impl_dataC1ERKS2_>
	{ __x = _Deque_impl_data(); }
 8002aa2:	f107 0308 	add.w	r3, r7, #8
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff fae1 	bl	800206e <_ZNSt11_Deque_baseIaSaIaEE16_Deque_impl_dataC1Ev>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	461d      	mov	r5, r3
 8002ab0:	f107 0408 	add.w	r4, r7, #8
 8002ab4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ab6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ab8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002abc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ac0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3730      	adds	r7, #48	; 0x30
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bdb0      	pop	{r4, r5, r7, pc}

08002ace <_ZSt4moveIRSaIaEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr

08002ae2 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE16_M_allocate_nodeIJRaS5_EEEPS7_DpOT_>:
      _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
 8002ae2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ae4:	b087      	sub	sp, #28
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	60f8      	str	r0, [r7, #12]
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	607a      	str	r2, [r7, #4]
	auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f7ff ff3d 	bl	800296e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE17_M_node_allocatorEv>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2101      	movs	r1, #1
 8002af8:	4618      	mov	r0, r3
 8002afa:	f000 f9e4 	bl	8002ec6 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE8allocateERS8_j>
 8002afe:	6178      	str	r0, [r7, #20]
	__node_ptr __n = std::__to_address(__nptr);
 8002b00:	6978      	ldr	r0, [r7, #20]
 8002b02:	f000 f9ef 	bl	8002ee4 <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEPT_S9_>
 8002b06:	6138      	str	r0, [r7, #16]
	    ::new ((void*)__n) __node_type;
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	200c      	movs	r0, #12
 8002b0e:	f7fd ffa7 	bl	8000a60 <_ZnwjPv>
 8002b12:	4603      	mov	r3, r0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fdea 	bl	80026ee <_ZNSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEC1Ev>
	    __node_alloc_traits::construct(_M_node_allocator(),
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f7ff ff27 	bl	800296e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE17_M_node_allocatorEv>
 8002b20:	4604      	mov	r4, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	3304      	adds	r3, #4
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff fda7 	bl	800267a <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE9_M_valptrEv>
 8002b2c:	4605      	mov	r5, r0
 8002b2e:	68b8      	ldr	r0, [r7, #8]
 8002b30:	f7fe fdca 	bl	80016c8 <_ZSt7forwardIRaEOT_RNSt16remove_referenceIS1_E4typeE>
 8002b34:	4606      	mov	r6, r0
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7fe fdd0 	bl	80016dc <_ZSt7forwardIP9BaseStateEOT_RNSt16remove_referenceIS2_E4typeE>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	4632      	mov	r2, r6
 8002b40:	4629      	mov	r1, r5
 8002b42:	4620      	mov	r0, r4
 8002b44:	f000 fb05 	bl	8003152 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE9constructIS6_JRaS5_EEEvRS8_PT_DpOT0_>
	    return __n;
 8002b48:	693b      	ldr	r3, [r7, #16]
      }
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	371c      	adds	r7, #28
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b52 <_ZSt7forwardIRSt4pairIKaP9BaseStateEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr

08002b66 <_ZSt3getILj0EKaP9BaseStateERNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERS7_>:
	{ return std::forward<const _Tp2>(__pair.second); }
    };

  template<size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&
    get(pair<_Tp1, _Tp2>& __in) noexcept
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
    { return __pair_get<_Int>::__get(__in); }
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 fb07 	bl	8003182 <_ZNSt10__pair_getILj0EE5__getIKaP9BaseStateEERT_RSt4pairIS5_T0_E>
 8002b74:	4603      	mov	r3, r0
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <_ZNSt8__detail19_Node_iterator_baseISt4pairIKaP9BaseStateELb0EEC1EPNS_10_Hash_nodeIS5_Lb0EEE>:
      _Node_iterator_base(__node_type* __p) noexcept
 8002b7e:	b480      	push	{r7}
 8002b80:	b083      	sub	sp, #12
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
 8002b86:	6039      	str	r1, [r7, #0]
      : _M_cur(__p) { }
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4618      	mov	r0, r3
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr

08002b9a <_ZSt7forwardINSt8__detail14_Node_iteratorISt4pairIKaP9BaseStateELb0ELb0EEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc80      	pop	{r7}
 8002bac:	4770      	bx	lr

08002bae <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKaP9BaseStateELb0ELb0EEEbEC1IS6_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b084      	sub	sp, #16
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	60f8      	str	r0, [r7, #12]
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8002bba:	68b8      	ldr	r0, [r7, #8]
 8002bbc:	f7ff ffed 	bl	8002b9a <_ZSt7forwardINSt8__detail14_Node_iteratorISt4pairIKaP9BaseStateELb0ELb0EEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6812      	ldr	r2, [r2, #0]
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f7fe fc43 	bl	8001454 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	781a      	ldrb	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	711a      	strb	r2, [r3, #4]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <_ZSt7forwardIRNSt8__detail14_Node_iteratorISt4pairIKaP9BaseStateELb0ELb0EEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4618      	mov	r0, r3
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr

08002bf4 <_ZSt9__fill_a1IaEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>:
    __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __c;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	75fb      	strb	r3, [r7, #23]
      if (const size_t __len = __last - __first)
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	613b      	str	r3, [r7, #16]
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <_ZSt9__fill_a1IaEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x2c>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 8002c14:	7dfb      	ldrb	r3, [r7, #23]
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	4619      	mov	r1, r3
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f005 fc9e 	bl	800855c <memset>
    }
 8002c20:	bf00      	nop
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <_ZStmiRKSt15_Deque_iteratorIaRaPaES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8002c32:	f7ff fe3a 	bl	80028aa <_ZNSt15_Deque_iteratorIaRaPaE14_S_buffer_sizeEv>
 8002c36:	4603      	mov	r3, r0
 8002c38:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - bool(__x._M_node))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68da      	ldr	r2, [r3, #12]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	109b      	asrs	r3, r3, #2
 8002c46:	461a      	mov	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	bf14      	ite	ne
 8002c50:	2301      	movne	r3, #1
 8002c52:	2300      	moveq	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	fb03 f201 	mul.w	r2, r3, r1
	  + (__x._M_cur - __x._M_first)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6819      	ldr	r1, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	1acb      	subs	r3, r1, r3
 8002c66:	441a      	add	r2, r3
	  + (__y._M_last - __y._M_cur);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	6899      	ldr	r1, [r3, #8]
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	1acb      	subs	r3, r1, r3
 8002c72:	4413      	add	r3, r2
      }
 8002c74:	4618      	mov	r0, r3
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <_ZNSt5dequeIaSaIaEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8002c84:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002c88:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 fa83 	bl	8003196 <_ZNSt16allocator_traitsISaIaEE8max_sizeERKS0_>
 8002c90:	4603      	mov	r3, r0
 8002c92:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002c94:	f107 0208 	add.w	r2, r7, #8
 8002c98:	f107 030c 	add.w	r3, r7, #12
 8002c9c:	4611      	mov	r1, r2
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fd ff46 	bl	8000b30 <_ZSt3minIjERKT_S2_S2_>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	681b      	ldr	r3, [r3, #0]
      }
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <_ZNSt5dequeIaSaIaEE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8002cb0:	b590      	push	{r4, r7, lr}
 8002cb2:	b08b      	sub	sp, #44	; 0x2c
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	109b      	asrs	r3, r3, #2
 8002cca:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8002ccc:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	6a3a      	ldr	r2, [r7, #32]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d92d      	bls.n	8002d3e <_ZNSt5dequeIaSaIaEE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	1acb      	subs	r3, r1, r3
 8002cee:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002cf0:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8002cf2:	79fb      	ldrb	r3, [r7, #7]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d002      	beq.n	8002cfe <_ZNSt5dequeIaSaIaEE17_M_reallocate_mapEjb+0x4e>
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	e000      	b.n	8002d00 <_ZNSt5dequeIaSaIaEE17_M_reallocate_mapEjb+0x50>
 8002cfe:	2300      	movs	r3, #0
 8002d00:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002d02:	4413      	add	r3, r2
 8002d04:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d209      	bcs.n	8002d24 <_ZNSt5dequeIaSaIaEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8002d18:	3304      	adds	r3, #4
 8002d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	f000 fa46 	bl	80031ae <_ZSt4copyIPPaS1_ET0_T_S3_S2_>
 8002d22:	e048      	b.n	8002db6 <_ZNSt5dequeIaSaIaEE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8002d2c:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8002d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d34:	4413      	add	r3, r2
 8002d36:	461a      	mov	r2, r3
 8002d38:	f000 fa51 	bl	80031de <_ZSt13copy_backwardIPPaS1_ET0_T_S3_S2_>
 8002d3c:	e03b      	b.n	8002db6 <_ZNSt5dequeIaSaIaEE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	3304      	adds	r3, #4
 8002d46:	f107 0208 	add.w	r2, r7, #8
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7fe fa0a 	bl	8001166 <_ZSt3maxIjERKT_S2_S2_>
 8002d52:	4603      	mov	r3, r0
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8002d58:	3302      	adds	r3, #2
 8002d5a:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	69b9      	ldr	r1, [r7, #24]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff f9a7 	bl	80020b4 <_ZNSt11_Deque_baseIaSaIaEE15_M_allocate_mapEj>
 8002d66:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	085b      	lsrs	r3, r3, #1
 8002d70:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d002      	beq.n	8002d7e <_ZNSt5dequeIaSaIaEE17_M_reallocate_mapEjb+0xce>
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	e000      	b.n	8002d80 <_ZNSt5dequeIaSaIaEE17_M_reallocate_mapEjb+0xd0>
 8002d7e:	2300      	movs	r3, #0
 8002d80:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	4413      	add	r3, r2
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8002d90:	3304      	adds	r3, #4
 8002d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d94:	4619      	mov	r1, r3
 8002d96:	f000 fa0a 	bl	80031ae <_ZSt4copyIPPaS1_ET0_T_S3_S2_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6819      	ldr	r1, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	461a      	mov	r2, r3
 8002da6:	f7fe fe64 	bl	8001a72 <_ZNSt11_Deque_baseIaSaIaEE17_M_deallocate_mapEPPaj>

	  this->_M_impl._M_map = __new_map;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	3308      	adds	r3, #8
 8002dba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff f9b1 	bl	8002124 <_ZNSt15_Deque_iteratorIaRaPaE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f103 0018 	add.w	r0, r3, #24
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd4:	4413      	add	r3, r2
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	f7ff f9a4 	bl	8002124 <_ZNSt15_Deque_iteratorIaRaPaE11_M_set_nodeEPS1_>
    }
 8002ddc:	bf00      	nop
 8002dde:	372c      	adds	r7, #44	; 0x2c
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd90      	pop	{r4, r7, pc}

08002de4 <_ZNSt16allocator_traitsISaIaEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002dee:	2200      	movs	r2, #0
 8002df0:	6839      	ldr	r1, [r7, #0]
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 fa16 	bl	8003224 <_ZN9__gnu_cxx13new_allocatorIaE8allocateEjPKv>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIaELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr

08002e16 <_ZNKSt8__detail15_Hashtable_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS5_Lb0EEE>:
      _M_equals(const _Key& __k, __hash_code __c,
 8002e16:	b590      	push	{r4, r7, lr}
 8002e18:	b087      	sub	sp, #28
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	60f8      	str	r0, [r7, #12]
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	607a      	str	r2, [r7, #4]
 8002e22:	603b      	str	r3, [r7, #0]
	return _S_equals(__c, __n) && _M_eq()(__k, _ExtractKey{}(__n._M_v()));
 8002e24:	6839      	ldr	r1, [r7, #0]
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 fa1d 	bl	8003266 <_ZNSt8__detail15_Hashtable_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb0EEE>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d019      	beq.n	8002e66 <_ZNKSt8__detail15_Hashtable_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS5_Lb0EEE+0x50>
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 fa22 	bl	800327c <_ZNKSt8__detail15_Hashtable_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>
 8002e38:	4604      	mov	r4, r0
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f000 fa29 	bl	8003294 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE4_M_vEv>
 8002e42:	4602      	mov	r2, r0
 8002e44:	f107 0314 	add.w	r3, r7, #20
 8002e48:	4611      	mov	r1, r2
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 fa2e 	bl	80032ac <_ZNKSt8__detail10_Select1stclIRKSt4pairIKaP9BaseStateEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS9_>
 8002e50:	4603      	mov	r3, r0
 8002e52:	461a      	mov	r2, r3
 8002e54:	68b9      	ldr	r1, [r7, #8]
 8002e56:	4620      	mov	r0, r4
 8002e58:	f000 fa39 	bl	80032ce <_ZNKSt8equal_toIaEclERKaS2_>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <_ZNKSt8__detail15_Hashtable_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS5_Lb0EEE+0x50>
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <_ZNKSt8__detail15_Hashtable_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS5_Lb0EEE+0x52>
 8002e66:	2300      	movs	r3, #0
      }
 8002e68:	4618      	mov	r0, r3
 8002e6a:	371c      	adds	r7, #28
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd90      	pop	{r4, r7, pc}

08002e70 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS6_16_Hash_node_valueIS4_Lb0EEE>:
      _M_bucket_index(const __node_value_type& __n) const noexcept
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__n, _M_bucket_count); }
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	6839      	ldr	r1, [r7, #0]
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 fa39 	bl	80032fa <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIS5_Lb0EEEj>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKaP9BaseStateEE6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b082      	sub	sp, #8
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 fa4f 	bl	800333e <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKaP9BaseStateEE7_M_addrEv>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <_ZNSt10_Head_baseILj0ERKaLb0EEC1ES1_>:
      constexpr _Head_base(const _Head& __h)
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
 8002eb2:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr

08002ec6 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE8allocateERS8_j>:
      allocate(allocator_type& __a, size_type __n)
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
 8002ece:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	6839      	ldr	r1, [r7, #0]
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 fa49 	bl	800336c <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE8allocateEjPKv>
 8002eda:	4603      	mov	r3, r0
 8002edc:	4618      	mov	r0, r3
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEPT_S9_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 8002eec:	687b      	ldr	r3, [r7, #4]
    }
 8002eee:	4618      	mov	r0, r3
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr

08002ef8 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJRS3_EESE_IJEEEEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8002ef8:	b5b0      	push	{r4, r5, r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af02      	add	r7, sp, #8
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
 8002f04:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7ff fbd3 	bl	80026b2 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8002f0c:	4604      	mov	r4, r0
 8002f0e:	6838      	ldr	r0, [r7, #0]
 8002f10:	f7ff fbd9 	bl	80026c6 <_ZSt7forwardISt5tupleIJRKaEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8002f14:	4605      	mov	r5, r0
 8002f16:	6a38      	ldr	r0, [r7, #32]
 8002f18:	f7ff fbdf 	bl	80026da <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	462b      	mov	r3, r5
 8002f22:	4622      	mov	r2, r4
 8002f24:	68b9      	ldr	r1, [r7, #8]
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 fa5e 	bl	80033e8 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvPT_DpOT0_>
	}
 8002f2c:	bf00      	nop
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bdb0      	pop	{r4, r5, r7, pc}

08002f34 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE10deallocateERS8_PS7_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	68b9      	ldr	r1, [r7, #8]
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 fa76 	bl	8003436 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE10deallocateEPS8_j>
 8002f4a:	bf00      	nop
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b08a      	sub	sp, #40	; 0x28
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	60f8      	str	r0, [r7, #12]
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	713a      	strb	r2, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash_aux(size_type __bkt_count, true_type /* __uks */)
    {
      __buckets_ptr __new_buckets = _M_allocate_buckets(__bkt_count);
 8002f5e:	68b9      	ldr	r1, [r7, #8]
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 fa7b 	bl	800345c <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>
 8002f66:	61f8      	str	r0, [r7, #28]
      __node_ptr __p = _M_begin();
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f7fe fddb 	bl	8001b24 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 8002f6e:	6278      	str	r0, [r7, #36]	; 0x24
      _M_before_begin._M_nxt = nullptr;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	609a      	str	r2, [r3, #8]
      std::size_t __bbegin_bkt = 0;
 8002f76:	2300      	movs	r3, #0
 8002f78:	623b      	str	r3, [r7, #32]
      while (__p)
 8002f7a:	e03e      	b.n	8002ffa <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xa8>
	{
	  __node_ptr __next = __p->_M_next();
 8002f7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f7e:	f7ff f941 	bl	8002204 <_ZNKSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EE7_M_nextEv>
 8002f82:	61b8      	str	r0, [r7, #24]
	  std::size_t __bkt
	    = __hash_code_base::_M_bucket_index(*__p, __bkt_count);
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	3304      	adds	r3, #4
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 f9b4 	bl	80032fa <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIS5_Lb0EEEj>
 8002f92:	6178      	str	r0, [r7, #20]
	  if (!__new_buckets[__bkt])
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	69fa      	ldr	r2, [r7, #28]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d11a      	bne.n	8002fd8 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x86>
	    {
	      __p->_M_nxt = _M_before_begin._M_nxt;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	601a      	str	r2, [r3, #0]
	      _M_before_begin._M_nxt = __p;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fae:	609a      	str	r2, [r3, #8]
	      __new_buckets[__bkt] = &_M_before_begin;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	69fa      	ldr	r2, [r7, #28]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	3208      	adds	r2, #8
 8002fbc:	601a      	str	r2, [r3, #0]
	      if (__p->_M_nxt)
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d005      	beq.n	8002fd2 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x80>
		__new_buckets[__bbegin_bkt] = __p;
 8002fc6:	6a3b      	ldr	r3, [r7, #32]
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	69fa      	ldr	r2, [r7, #28]
 8002fcc:	4413      	add	r3, r2
 8002fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd0:	601a      	str	r2, [r3, #0]
	      __bbegin_bkt = __bkt;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	623b      	str	r3, [r7, #32]
 8002fd6:	e00e      	b.n	8002ff6 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xa4>
	    }
	  else
	    {
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	69fa      	ldr	r2, [r7, #28]
 8002fde:	4413      	add	r3, r2
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	601a      	str	r2, [r3, #0]
	      __new_buckets[__bkt]->_M_nxt = __p;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	69fa      	ldr	r2, [r7, #28]
 8002fee:	4413      	add	r3, r2
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff4:	601a      	str	r2, [r3, #0]
	    }

	  __p = __next;
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	627b      	str	r3, [r7, #36]	; 0x24
      while (__p)
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1bd      	bne.n	8002f7c <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x2a>
	}

      _M_deallocate_buckets();
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f7fe fb26 	bl	8001652 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
      _M_bucket_count = __bkt_count;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	68ba      	ldr	r2, [r7, #8]
 800300a:	605a      	str	r2, [r3, #4]
      _M_buckets = __new_buckets;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	69fa      	ldr	r2, [r7, #28]
 8003010:	601a      	str	r2, [r3, #0]
    }
 8003012:	bf00      	nop
 8003014:	3728      	adds	r7, #40	; 0x28
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <_ZNK9__gnu_cxx13new_allocatorIPaE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003022:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8003026:	4618      	mov	r0, r3
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	bc80      	pop	{r7}
 800302e:	4770      	bx	lr

08003030 <_ZN9__gnu_cxx13new_allocatorIPaE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f7ff ffec 	bl	800301a <_ZNK9__gnu_cxx13new_allocatorIPaE11_M_max_sizeEv>
 8003042:	4602      	mov	r2, r0
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	4293      	cmp	r3, r2
 8003048:	bf8c      	ite	hi
 800304a:	2301      	movhi	r3, #1
 800304c:	2300      	movls	r3, #0
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	bf14      	ite	ne
 8003054:	2301      	movne	r3, #1
 8003056:	2300      	moveq	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d007      	beq.n	800306e <_ZN9__gnu_cxx13new_allocatorIPaE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003064:	d301      	bcc.n	800306a <_ZN9__gnu_cxx13new_allocatorIPaE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8003066:	f004 ffbf 	bl	8007fe8 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800306a:	f004 ffba 	bl	8007fe2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4618      	mov	r0, r3
 8003074:	f004 ffa4 	bl	8007fc0 <_Znwj>
 8003078:	4603      	mov	r3, r0
      }
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <_ZN9__gnu_cxx13new_allocatorIaE10deallocateEPaj>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8003082:	b580      	push	{r7, lr}
 8003084:	b084      	sub	sp, #16
 8003086:	af00      	add	r7, sp, #0
 8003088:	60f8      	str	r0, [r7, #12]
 800308a:	60b9      	str	r1, [r7, #8]
 800308c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	68b8      	ldr	r0, [r7, #8]
 8003092:	f004 ff93 	bl	8007fbc <_ZdlPvj>
      }
 8003096:	bf00      	nop
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <_ZN9__gnu_cxx13new_allocatorIPaEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4618      	mov	r0, r3
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bc80      	pop	{r7}
 80030b0:	4770      	bx	lr

080030b2 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEELb1EE6_M_getEv>:
      _Tp& _M_get() { return static_cast<_Tp&>(*this); }
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4618      	mov	r0, r3
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bc80      	pop	{r7}
 80030c4:	4770      	bx	lr

080030c6 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE7destroyIS7_EEvPT_>:
	destroy(_Up* __p)
 80030c6:	b480      	push	{r7}
 80030c8:	b083      	sub	sp, #12
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
 80030ce:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bc80      	pop	{r7}
 80030d8:	4770      	bx	lr

080030da <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE10pointer_toERS7_>:
      pointer_to(__make_not_void<element_type>& __r) noexcept
 80030da:	b580      	push	{r7, lr}
 80030dc:	b082      	sub	sp, #8
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f9d7 	bl	8003496 <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEPT_RS8_>
 80030e8:	4603      	mov	r3, r0
 80030ea:	4618      	mov	r0, r3
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>:
    addressof(_Tp& __r) noexcept
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f9d7 	bl	80034ae <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 8003100:	4603      	mov	r3, r0
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4618      	mov	r0, r3
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	bc80      	pop	{r7}
 800311c:	4770      	bx	lr

0800311e <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800311e:	b480      	push	{r7}
 8003120:	b083      	sub	sp, #12
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4618      	mov	r0, r3
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	bc80      	pop	{r7}
 8003130:	4770      	bx	lr

08003132 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8003132:	b580      	push	{r7, lr}
 8003134:	b084      	sub	sp, #16
 8003136:	af00      	add	r7, sp, #0
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4619      	mov	r1, r3
 8003144:	68b8      	ldr	r0, [r7, #8]
 8003146:	f004 ff39 	bl	8007fbc <_ZdlPvj>
      }
 800314a:	bf00      	nop
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE9constructIS6_JRaS5_EEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003152:	b590      	push	{r4, r7, lr}
 8003154:	b085      	sub	sp, #20
 8003156:	af00      	add	r7, sp, #0
 8003158:	60f8      	str	r0, [r7, #12]
 800315a:	60b9      	str	r1, [r7, #8]
 800315c:	607a      	str	r2, [r7, #4]
 800315e:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7fe fab1 	bl	80016c8 <_ZSt7forwardIRaEOT_RNSt16remove_referenceIS1_E4typeE>
 8003166:	4604      	mov	r4, r0
 8003168:	6838      	ldr	r0, [r7, #0]
 800316a:	f7fe fab7 	bl	80016dc <_ZSt7forwardIP9BaseStateEOT_RNSt16remove_referenceIS2_E4typeE>
 800316e:	4603      	mov	r3, r0
 8003170:	4622      	mov	r2, r4
 8003172:	68b9      	ldr	r1, [r7, #8]
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f000 f9a4 	bl	80034c2 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE9constructIS7_JRaS6_EEEvPT_DpOT0_>
	}
 800317a:	bf00      	nop
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	bd90      	pop	{r4, r7, pc}

08003182 <_ZNSt10__pair_getILj0EE5__getIKaP9BaseStateEERT_RSt4pairIS5_T0_E>:
	__get(pair<_Tp1, _Tp2>& __pair) noexcept
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
	{ return __pair.first; }
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4618      	mov	r0, r3
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	bc80      	pop	{r7}
 8003194:	4770      	bx	lr

08003196 <_ZNSt16allocator_traitsISaIaEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8003196:	b580      	push	{r7, lr}
 8003198:	b082      	sub	sp, #8
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f9ad 	bl	80034fe <_ZNK9__gnu_cxx13new_allocatorIaE8max_sizeEv>
 80031a4:	4603      	mov	r3, r0
      }
 80031a6:	4618      	mov	r0, r3
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <_ZSt4copyIPPaS1_ET0_T_S3_S2_>:
    copy(_II __first, _II __last, _OI __result)
 80031ae:	b590      	push	{r4, r7, lr}
 80031b0:	b085      	sub	sp, #20
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	60f8      	str	r0, [r7, #12]
 80031b6:	60b9      	str	r1, [r7, #8]
 80031b8:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 f9ab 	bl	8003516 <_ZSt12__miter_baseIPPaET_S2_>
 80031c0:	4604      	mov	r4, r0
 80031c2:	68b8      	ldr	r0, [r7, #8]
 80031c4:	f000 f9a7 	bl	8003516 <_ZSt12__miter_baseIPPaET_S2_>
 80031c8:	4603      	mov	r3, r0
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	4619      	mov	r1, r3
 80031ce:	4620      	mov	r0, r4
 80031d0:	f000 f9ab 	bl	800352a <_ZSt13__copy_move_aILb0EPPaS1_ET1_T0_S3_S2_>
 80031d4:	4603      	mov	r3, r0
    }
 80031d6:	4618      	mov	r0, r3
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd90      	pop	{r4, r7, pc}

080031de <_ZSt13copy_backwardIPPaS1_ET0_T_S3_S2_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80031de:	b590      	push	{r4, r7, lr}
 80031e0:	b085      	sub	sp, #20
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	60f8      	str	r0, [r7, #12]
 80031e6:	60b9      	str	r1, [r7, #8]
 80031e8:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 f993 	bl	8003516 <_ZSt12__miter_baseIPPaET_S2_>
 80031f0:	4604      	mov	r4, r0
 80031f2:	68b8      	ldr	r0, [r7, #8]
 80031f4:	f000 f98f 	bl	8003516 <_ZSt12__miter_baseIPPaET_S2_>
 80031f8:	4603      	mov	r3, r0
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	4619      	mov	r1, r3
 80031fe:	4620      	mov	r0, r4
 8003200:	f000 f9b6 	bl	8003570 <_ZSt22__copy_move_backward_aILb0EPPaS1_ET1_T0_S3_S2_>
 8003204:	4603      	mov	r3, r0
    }
 8003206:	4618      	mov	r0, r3
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	bd90      	pop	{r4, r7, pc}

0800320e <_ZNK9__gnu_cxx13new_allocatorIaE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003216:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
      }
 800321a:	4618      	mov	r0, r3
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr

08003224 <_ZN9__gnu_cxx13new_allocatorIaE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f7ff ffec 	bl	800320e <_ZNK9__gnu_cxx13new_allocatorIaE11_M_max_sizeEv>
 8003236:	4602      	mov	r2, r0
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	4293      	cmp	r3, r2
 800323c:	bf8c      	ite	hi
 800323e:	2301      	movhi	r3, #1
 8003240:	2300      	movls	r3, #0
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	bf14      	ite	ne
 8003248:	2301      	movne	r3, #1
 800324a:	2300      	moveq	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <_ZN9__gnu_cxx13new_allocatorIaE8allocateEjPKv+0x32>
	    std::__throw_bad_alloc();
 8003252:	f004 fec6 	bl	8007fe2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003256:	68b8      	ldr	r0, [r7, #8]
 8003258:	f004 feb2 	bl	8007fc0 <_Znwj>
 800325c:	4603      	mov	r3, r0
      }
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <_ZNSt8__detail15_Hashtable_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb0EEE>:
      _S_equals(__hash_code, const _Hash_node_code_cache<false>&)
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
 800326e:	6039      	str	r1, [r7, #0]
      { return true; }
 8003270:	2301      	movs	r3, #1
 8003272:	4618      	mov	r0, r3
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr

0800327c <_ZNKSt8__detail15_Hashtable_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>:
      _M_eq() const { return _EqualEBO::_M_cget(); }
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 f996 	bl	80035b6 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIaELb1EE7_M_cgetEv>
 800328a:	4603      	mov	r3, r0
 800328c:	4618      	mov	r0, r3
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE4_M_vEv>:
      _M_v() const noexcept
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f994 	bl	80035ca <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE9_M_valptrEv>
 80032a2:	4603      	mov	r3, r0
 80032a4:	4618      	mov	r0, r3
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <_ZNKSt8__detail10_Select1stclIRKSt4pairIKaP9BaseStateEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS9_>:
      operator()(_Tp&& __x) const noexcept
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
      { return std::get<0>(std::forward<_Tp>(__x)); }
 80032b6:	6838      	ldr	r0, [r7, #0]
 80032b8:	f000 f994 	bl	80035e4 <_ZSt7forwardIRKSt4pairIKaP9BaseStateEEOT_RNSt16remove_referenceIS7_E4typeE>
 80032bc:	4603      	mov	r3, r0
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 f99a 	bl	80035f8 <_ZSt3getILj0EKaP9BaseStateERKNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERKS7_>
 80032c4:	4603      	mov	r3, r0
 80032c6:	4618      	mov	r0, r3
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <_ZNKSt8equal_toIaEclERKaS2_>:
  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 80032ce:	b480      	push	{r7}
 80032d0:	b085      	sub	sp, #20
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	60f8      	str	r0, [r7, #12]
 80032d6:	60b9      	str	r1, [r7, #8]
 80032d8:	607a      	str	r2, [r7, #4]
      { return __x == __y; }
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	f993 2000 	ldrsb.w	r2, [r3]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f993 3000 	ldrsb.w	r3, [r3]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	bf0c      	ite	eq
 80032ea:	2301      	moveq	r3, #1
 80032ec:	2300      	movne	r3, #0
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	4618      	mov	r0, r3
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bc80      	pop	{r7}
 80032f8:	4770      	bx	lr

080032fa <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIS5_Lb0EEEj>:
      _M_bucket_index(const _Hash_node_value<_Value, false>& __n,
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b086      	sub	sp, #24
 80032fe:	af00      	add	r7, sp, #0
 8003300:	60f8      	str	r0, [r7, #12]
 8003302:	60b9      	str	r1, [r7, #8]
 8003304:	607a      	str	r2, [r7, #4]
	return _RangeHash{}(_M_hash_code(_ExtractKey{}(__n._M_v())),
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff ffc3 	bl	8003294 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE4_M_vEv>
 800330e:	4602      	mov	r2, r0
 8003310:	f107 0314 	add.w	r3, r7, #20
 8003314:	4611      	mov	r1, r2
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff ffc8 	bl	80032ac <_ZNKSt8__detail10_Select1stclIRKSt4pairIKaP9BaseStateEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS9_>
 800331c:	4603      	mov	r3, r0
 800331e:	4619      	mov	r1, r3
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f7fe fdad 	bl	8001e80 <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS2_>
 8003326:	4601      	mov	r1, r0
 8003328:	f107 0310 	add.w	r3, r7, #16
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	4618      	mov	r0, r3
 8003330:	f7fd fbcf 	bl	8000ad2 <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 8003334:	4603      	mov	r3, r0
      }
 8003336:	4618      	mov	r0, r3
 8003338:	3718      	adds	r7, #24
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKaP9BaseStateEE7_M_addrEv>:
      _M_addr() noexcept
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 8003346:	687b      	ldr	r3, [r7, #4]
      }
 8003348:	4618      	mov	r0, r3
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	bc80      	pop	{r7}
 8003350:	4770      	bx	lr
	...

08003354 <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800335c:	4b02      	ldr	r3, [pc, #8]	; (8003368 <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE11_M_max_sizeEv+0x14>)
      }
 800335e:	4618      	mov	r0, r3
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	bc80      	pop	{r7}
 8003366:	4770      	bx	lr
 8003368:	0aaaaaaa 	.word	0x0aaaaaaa

0800336c <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f7ff ffeb 	bl	8003354 <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE11_M_max_sizeEv>
 800337e:	4602      	mov	r2, r0
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	4293      	cmp	r3, r2
 8003384:	bf8c      	ite	hi
 8003386:	2301      	movhi	r3, #1
 8003388:	2300      	movls	r3, #0
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	bf14      	ite	ne
 8003390:	2301      	movne	r3, #1
 8003392:	2300      	moveq	r3, #0
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d007      	beq.n	80033aa <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	4a09      	ldr	r2, [pc, #36]	; (80033c4 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE8allocateEjPKv+0x58>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d901      	bls.n	80033a6 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80033a2:	f004 fe21 	bl	8007fe8 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80033a6:	f004 fe1c 	bl	8007fe2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	4613      	mov	r3, r2
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	4413      	add	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4618      	mov	r0, r3
 80033b6:	f004 fe03 	bl	8007fc0 <_Znwj>
 80033ba:	4603      	mov	r3, r0
      }
 80033bc:	4618      	mov	r0, r3
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	15555555 	.word	0x15555555

080033c8 <_ZNSt5tupleIJRKaEEC1EOS2_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	4611      	mov	r1, r2
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 f919 	bl	8003610 <_ZNSt11_Tuple_implILj0EJRKaEEC1EOS2_>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4618      	mov	r0, r3
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80033e8:	b590      	push	{r4, r7, lr}
 80033ea:	b089      	sub	sp, #36	; 0x24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
 80033f4:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7ff f95b 	bl	80026b2 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80033fc:	6838      	ldr	r0, [r7, #0]
 80033fe:	f7ff f962 	bl	80026c6 <_ZSt7forwardISt5tupleIJRKaEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8003402:	4602      	mov	r2, r0
 8003404:	f107 0318 	add.w	r3, r7, #24
 8003408:	4611      	mov	r1, r2
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff ffdc 	bl	80033c8 <_ZNSt5tupleIJRKaEEC1EOS2_>
 8003410:	f107 0418 	add.w	r4, r7, #24
 8003414:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003416:	f7ff f960 	bl	80026da <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	4619      	mov	r1, r3
 800341e:	2008      	movs	r0, #8
 8003420:	f7fd fb1e 	bl	8000a60 <_ZnwjPv>
 8003424:	7f3b      	ldrb	r3, [r7, #28]
 8003426:	4622      	mov	r2, r4
 8003428:	7d39      	ldrb	r1, [r7, #20]
 800342a:	f000 f900 	bl	800362e <_ZNSt4pairIKaP9BaseStateEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>
 800342e:	bf00      	nop
 8003430:	3724      	adds	r7, #36	; 0x24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd90      	pop	{r4, r7, pc}

08003436 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8003436:	b580      	push	{r7, lr}
 8003438:	b084      	sub	sp, #16
 800343a:	af00      	add	r7, sp, #0
 800343c:	60f8      	str	r0, [r7, #12]
 800343e:	60b9      	str	r1, [r7, #8]
 8003440:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	4613      	mov	r3, r2
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	4413      	add	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4619      	mov	r1, r3
 800344e:	68b8      	ldr	r0, [r7, #8]
 8003450:	f004 fdb4 	bl	8007fbc <_ZdlPvj>
      }
 8003454:	bf00      	nop
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>:
      _M_allocate_buckets(size_type __bkt_count)
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
	if (__builtin_expect(__bkt_count == 1, false))
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2b01      	cmp	r3, #1
 800346a:	bf0c      	ite	eq
 800346c:	2301      	moveq	r3, #1
 800346e:	2300      	movne	r3, #0
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d005      	beq.n	8003482 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x26>
	    _M_single_bucket = nullptr;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	619a      	str	r2, [r3, #24]
	    return &_M_single_bucket;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3318      	adds	r3, #24
 8003480:	e005      	b.n	800348e <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x32>
	return __hashtable_alloc::_M_allocate_buckets(__bkt_count);
 8003482:	6839      	ldr	r1, [r7, #0]
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f8e6 	bl	8003656 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE19_M_allocate_bucketsEj>
 800348a:	4603      	mov	r3, r0
 800348c:	bf00      	nop
      }
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEPT_RS8_>:
    addressof(_Tp& __r) noexcept
 8003496:	b580      	push	{r7, lr}
 8003498:	b082      	sub	sp, #8
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f906 	bl	80036b0 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEPT_RS8_>
 80034a4:	4603      	mov	r3, r0
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80034ae:	b480      	push	{r7}
 80034b0:	b083      	sub	sp, #12
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4618      	mov	r0, r3
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	bc80      	pop	{r7}
 80034c0:	4770      	bx	lr

080034c2 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE9constructIS7_JRaS6_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80034c2:	b5b0      	push	{r4, r5, r7, lr}
 80034c4:	b084      	sub	sp, #16
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	60f8      	str	r0, [r7, #12]
 80034ca:	60b9      	str	r1, [r7, #8]
 80034cc:	607a      	str	r2, [r7, #4]
 80034ce:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7fe f8f9 	bl	80016c8 <_ZSt7forwardIRaEOT_RNSt16remove_referenceIS1_E4typeE>
 80034d6:	4604      	mov	r4, r0
 80034d8:	6838      	ldr	r0, [r7, #0]
 80034da:	f7fe f8ff 	bl	80016dc <_ZSt7forwardIP9BaseStateEOT_RNSt16remove_referenceIS2_E4typeE>
 80034de:	4605      	mov	r5, r0
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	4619      	mov	r1, r3
 80034e4:	2008      	movs	r0, #8
 80034e6:	f7fd fabb 	bl	8000a60 <_ZnwjPv>
 80034ea:	4603      	mov	r3, r0
 80034ec:	462a      	mov	r2, r5
 80034ee:	4621      	mov	r1, r4
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 f8e7 	bl	80036c4 <_ZNSt4pairIKaP9BaseStateEC1IRaS2_Lb1EEEOT_OT0_>
 80034f6:	bf00      	nop
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bdb0      	pop	{r4, r5, r7, pc}

080034fe <_ZNK9__gnu_cxx13new_allocatorIaE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80034fe:	b580      	push	{r7, lr}
 8003500:	b082      	sub	sp, #8
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7ff fe81 	bl	800320e <_ZNK9__gnu_cxx13new_allocatorIaE11_M_max_sizeEv>
 800350c:	4603      	mov	r3, r0
 800350e:	4618      	mov	r0, r3
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <_ZSt12__miter_baseIPPaET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4618      	mov	r0, r3
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	bc80      	pop	{r7}
 8003528:	4770      	bx	lr

0800352a <_ZSt13__copy_move_aILb0EPPaS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800352a:	b5b0      	push	{r4, r5, r7, lr}
 800352c:	b084      	sub	sp, #16
 800352e:	af00      	add	r7, sp, #0
 8003530:	60f8      	str	r0, [r7, #12]
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f000 f8de 	bl	80036f8 <_ZSt12__niter_baseIPPaET_S2_>
 800353c:	4604      	mov	r4, r0
 800353e:	68b8      	ldr	r0, [r7, #8]
 8003540:	f000 f8da 	bl	80036f8 <_ZSt12__niter_baseIPPaET_S2_>
 8003544:	4605      	mov	r5, r0
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4618      	mov	r0, r3
 800354a:	f000 f8d5 	bl	80036f8 <_ZSt12__niter_baseIPPaET_S2_>
 800354e:	4603      	mov	r3, r0
 8003550:	461a      	mov	r2, r3
 8003552:	4629      	mov	r1, r5
 8003554:	4620      	mov	r0, r4
 8003556:	f000 f8d9 	bl	800370c <_ZSt14__copy_move_a1ILb0EPPaS1_ET1_T0_S3_S2_>
 800355a:	4602      	mov	r2, r0
 800355c:	1d3b      	adds	r3, r7, #4
 800355e:	4611      	mov	r1, r2
 8003560:	4618      	mov	r0, r3
 8003562:	f000 f8e3 	bl	800372c <_ZSt12__niter_wrapIPPaET_RKS2_S2_>
 8003566:	4603      	mov	r3, r0
    }
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bdb0      	pop	{r4, r5, r7, pc}

08003570 <_ZSt22__copy_move_backward_aILb0EPPaS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8003570:	b5b0      	push	{r4, r5, r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 f8bb 	bl	80036f8 <_ZSt12__niter_baseIPPaET_S2_>
 8003582:	4604      	mov	r4, r0
 8003584:	68b8      	ldr	r0, [r7, #8]
 8003586:	f000 f8b7 	bl	80036f8 <_ZSt12__niter_baseIPPaET_S2_>
 800358a:	4605      	mov	r5, r0
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4618      	mov	r0, r3
 8003590:	f000 f8b2 	bl	80036f8 <_ZSt12__niter_baseIPPaET_S2_>
 8003594:	4603      	mov	r3, r0
 8003596:	461a      	mov	r2, r3
 8003598:	4629      	mov	r1, r5
 800359a:	4620      	mov	r0, r4
 800359c:	f000 f8d1 	bl	8003742 <_ZSt23__copy_move_backward_a1ILb0EPPaS1_ET1_T0_S3_S2_>
 80035a0:	4602      	mov	r2, r0
 80035a2:	1d3b      	adds	r3, r7, #4
 80035a4:	4611      	mov	r1, r2
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 f8c0 	bl	800372c <_ZSt12__niter_wrapIPPaET_RKS2_S2_>
 80035ac:	4603      	mov	r3, r0
    }
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bdb0      	pop	{r4, r5, r7, pc}

080035b6 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIaELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4618      	mov	r0, r3
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bc80      	pop	{r7}
 80035c8:	4770      	bx	lr

080035ca <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE9_M_valptrEv>:
      _M_valptr() const noexcept
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b082      	sub	sp, #8
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f000 f8c4 	bl	8003762 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKaP9BaseStateEE6_M_ptrEv>
 80035da:	4603      	mov	r3, r0
 80035dc:	4618      	mov	r0, r3
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <_ZSt7forwardIRKSt4pairIKaP9BaseStateEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4618      	mov	r0, r3
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr

080035f8 <_ZSt3getILj0EKaP9BaseStateERKNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERKS7_>:
    get(pair<_Tp1, _Tp2>&& __in) noexcept
    { return __pair_get<_Int>::__move_get(std::move(__in)); }

  template<size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&
    get(const pair<_Tp1, _Tp2>& __in) noexcept
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
    { return __pair_get<_Int>::__const_get(__in); }
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f8ba 	bl	800377a <_ZNSt10__pair_getILj0EE11__const_getIKaP9BaseStateEERKT_RKSt4pairIS5_T0_E>
 8003606:	4603      	mov	r3, r0
 8003608:	4618      	mov	r0, r3
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <_ZNSt11_Tuple_implILj0EJRKaEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	6812      	ldr	r2, [r2, #0]
 8003620:	601a      	str	r2, [r3, #0]
      { }
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4618      	mov	r0, r3
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr

0800362e <_ZNSt4pairIKaP9BaseStateEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>:
  */
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      _GLIBCXX20_CONSTEXPR
      inline
      pair<_T1, _T2>::
 800362e:	b5b0      	push	{r4, r5, r7, lr}
 8003630:	b086      	sub	sp, #24
 8003632:	af02      	add	r7, sp, #8
 8003634:	60f8      	str	r0, [r7, #12]
 8003636:	7239      	strb	r1, [r7, #8]
 8003638:	607a      	str	r2, [r7, #4]
 800363a:	703b      	strb	r3, [r7, #0]
      pair(piecewise_construct_t,
	   tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 800363c:	463a      	mov	r2, r7
 800363e:	f88d 4000 	strb.w	r4, [sp]
 8003642:	462b      	mov	r3, r5
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 f8a1 	bl	800378e <_ZNSt4pairIKaP9BaseStateEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>
      { }
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bdb0      	pop	{r4, r5, r7, pc}

08003656 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE19_M_allocate_bucketsEj>:
    _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __bkt_count)
 8003656:	b590      	push	{r4, r7, lr}
 8003658:	b087      	sub	sp, #28
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
 800365e:	6039      	str	r1, [r7, #0]
      __buckets_alloc_type __alloc(_M_node_allocator());
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7ff f984 	bl	800296e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE17_M_node_allocatorEv>
 8003666:	4602      	mov	r2, r0
 8003668:	f107 030c 	add.w	r3, r7, #12
 800366c:	4611      	mov	r1, r2
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff f9b8 	bl	80029e4 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEERKSaIT_E>
      auto __ptr = __buckets_alloc_traits::allocate(__alloc, __bkt_count);
 8003674:	f107 030c 	add.w	r3, r7, #12
 8003678:	6839      	ldr	r1, [r7, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f000 f8a2 	bl	80037c4 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>
 8003680:	6178      	str	r0, [r7, #20]
      __buckets_ptr __p = std::__to_address(__ptr);
 8003682:	6978      	ldr	r0, [r7, #20]
 8003684:	f000 f8ad 	bl	80037e2 <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>
 8003688:	6138      	str	r0, [r7, #16]
      __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	4610      	mov	r0, r2
 8003692:	461a      	mov	r2, r3
 8003694:	2100      	movs	r1, #0
 8003696:	f004 ff61 	bl	800855c <memset>
      return __p;
 800369a:	693c      	ldr	r4, [r7, #16]
    }
 800369c:	f107 030c 	add.w	r3, r7, #12
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff f9ac 	bl	80029fe <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
      return __p;
 80036a6:	4623      	mov	r3, r4
    }
 80036a8:	4618      	mov	r0, r3
 80036aa:	371c      	adds	r7, #28
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd90      	pop	{r4, r7, pc}

080036b0 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEPT_RS8_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4618      	mov	r0, r3
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr

080036c4 <_ZNSt4pairIKaP9BaseStateEC1IRaS2_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80036d0:	68b8      	ldr	r0, [r7, #8]
 80036d2:	f7fd fff9 	bl	80016c8 <_ZSt7forwardIRaEOT_RNSt16remove_referenceIS1_E4typeE>
 80036d6:	4603      	mov	r3, r0
 80036d8:	f993 2000 	ldrsb.w	r2, [r3]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	701a      	strb	r2, [r3, #0]
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f7fd fffb 	bl	80016dc <_ZSt7forwardIP9BaseStateEOT_RNSt16remove_referenceIS2_E4typeE>
 80036e6:	4603      	mov	r3, r0
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	605a      	str	r2, [r3, #4]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <_ZSt12__niter_baseIPPaET_S2_>:
    __niter_base(_Iterator __it)
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4618      	mov	r0, r3
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr

0800370c <_ZSt14__copy_move_a1ILb0EPPaS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	68b9      	ldr	r1, [r7, #8]
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 f86a 	bl	80037f6 <_ZSt14__copy_move_a2ILb0EPPaS1_ET1_T0_S3_S2_>
 8003722:	4603      	mov	r3, r0
 8003724:	4618      	mov	r0, r3
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <_ZSt12__niter_wrapIPPaET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
    { return __res; }
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	4618      	mov	r0, r3
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr

08003742 <_ZSt23__copy_move_backward_a1ILb0EPPaS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8003742:	b580      	push	{r7, lr}
 8003744:	b084      	sub	sp, #16
 8003746:	af00      	add	r7, sp, #0
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	68b9      	ldr	r1, [r7, #8]
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 f85f 	bl	8003816 <_ZSt23__copy_move_backward_a2ILb0EPPaS1_ET1_T0_S3_S2_>
 8003758:	4603      	mov	r3, r0
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKaP9BaseStateEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8003762:	b580      	push	{r7, lr}
 8003764:	b082      	sub	sp, #8
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f863 	bl	8003836 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKaP9BaseStateEE7_M_addrEv>
 8003770:	4603      	mov	r3, r0
 8003772:	4618      	mov	r0, r3
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <_ZNSt10__pair_getILj0EE11__const_getIKaP9BaseStateEERKT_RKSt4pairIS5_T0_E>:
	__const_get(const pair<_Tp1, _Tp2>& __pair) noexcept
 800377a:	b480      	push	{r7}
 800377c:	b083      	sub	sp, #12
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
	{ return __pair.first; }
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4618      	mov	r0, r3
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	bc80      	pop	{r7}
 800378c:	4770      	bx	lr

0800378e <_ZNSt4pairIKaP9BaseStateEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, size_t... _Indexes1,
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 800378e:	b580      	push	{r7, lr}
 8003790:	b084      	sub	sp, #16
 8003792:	af00      	add	r7, sp, #0
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	607a      	str	r2, [r7, #4]
 800379a:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 800379c:	68b8      	ldr	r0, [r7, #8]
 800379e:	f000 f854 	bl	800384a <_ZSt3getILj0EJRKaEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 80037a2:	4603      	mov	r3, r0
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7fe fe93 	bl	80024d0 <_ZSt7forwardIRKaEOT_RNSt16remove_referenceIS2_E4typeE>
 80037aa:	4603      	mov	r3, r0
 80037ac:	f993 2000 	ldrsb.w	r2, [r3]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	701a      	strb	r2, [r3, #0]
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	605a      	str	r2, [r3, #4]
      { }
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	4618      	mov	r0, r3
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80037ce:	2200      	movs	r2, #0
 80037d0:	6839      	ldr	r1, [r7, #0]
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f851 	bl	800387a <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv>
 80037d8:	4603      	mov	r3, r0
 80037da:	4618      	mov	r0, r3
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>:
    __to_address(_Tp* __ptr) noexcept
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
      return __ptr;
 80037ea:	687b      	ldr	r3, [r7, #4]
    }
 80037ec:	4618      	mov	r0, r3
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bc80      	pop	{r7}
 80037f4:	4770      	bx	lr

080037f6 <_ZSt14__copy_move_a2ILb0EPPaS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b084      	sub	sp, #16
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	60f8      	str	r0, [r7, #12]
 80037fe:	60b9      	str	r1, [r7, #8]
 8003800:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	68b9      	ldr	r1, [r7, #8]
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 f860 	bl	80038cc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPaEEPT_PKS4_S7_S5_>
 800380c:	4603      	mov	r3, r0
    }
 800380e:	4618      	mov	r0, r3
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <_ZSt23__copy_move_backward_a2ILb0EPPaS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8003816:	b580      	push	{r7, lr}
 8003818:	b084      	sub	sp, #16
 800381a:	af00      	add	r7, sp, #0
 800381c:	60f8      	str	r0, [r7, #12]
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	68b9      	ldr	r1, [r7, #8]
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 f86d 	bl	8003906 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPaEEPT_PKS4_S7_S5_>
 800382c:	4603      	mov	r3, r0
    }
 800382e:	4618      	mov	r0, r3
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKaP9BaseStateEE7_M_addrEv>:
      _M_addr() const noexcept
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
        return static_cast<const void*>(&_M_storage);
 800383e:	687b      	ldr	r3, [r7, #4]
      }
 8003840:	4618      	mov	r0, r3
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	bc80      	pop	{r7}
 8003848:	4770      	bx	lr

0800384a <_ZSt3getILj0EJRKaEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 800384a:	b580      	push	{r7, lr}
 800384c:	b082      	sub	sp, #8
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4618      	mov	r0, r3
 8003856:	f000 f878 	bl	800394a <_ZSt12__get_helperILj0ERKaJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 800385a:	4603      	mov	r3, r0
 800385c:	4618      	mov	r0, r3
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <_ZNK9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800386c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8003870:	4618      	mov	r0, r3
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr

0800387a <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800387a:	b580      	push	{r7, lr}
 800387c:	b084      	sub	sp, #16
 800387e:	af00      	add	r7, sp, #0
 8003880:	60f8      	str	r0, [r7, #12]
 8003882:	60b9      	str	r1, [r7, #8]
 8003884:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f7ff ffec 	bl	8003864 <_ZNK9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE11_M_max_sizeEv>
 800388c:	4602      	mov	r2, r0
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	4293      	cmp	r3, r2
 8003892:	bf8c      	ite	hi
 8003894:	2301      	movhi	r3, #1
 8003896:	2300      	movls	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	bf14      	ite	ne
 800389e:	2301      	movne	r3, #1
 80038a0:	2300      	moveq	r3, #0
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d007      	beq.n	80038b8 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ae:	d301      	bcc.n	80038b4 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80038b0:	f004 fb9a 	bl	8007fe8 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80038b4:	f004 fb95 	bl	8007fe2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4618      	mov	r0, r3
 80038be:	f004 fb7f 	bl	8007fc0 <_Znwj>
 80038c2:	4603      	mov	r3, r0
      }
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPaEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	109b      	asrs	r3, r3, #2
 80038e0:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d006      	beq.n	80038f6 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPaEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	461a      	mov	r2, r3
 80038ee:	68f9      	ldr	r1, [r7, #12]
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f004 fe19 	bl	8008528 <memmove>
	  return __result + _Num;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	4413      	add	r3, r2
	}
 80038fe:	4618      	mov	r0, r3
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPaEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003906:	b580      	push	{r7, lr}
 8003908:	b086      	sub	sp, #24
 800390a:	af00      	add	r7, sp, #0
 800390c:	60f8      	str	r0, [r7, #12]
 800390e:	60b9      	str	r1, [r7, #8]
 8003910:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	109b      	asrs	r3, r3, #2
 800391a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPaEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	425b      	negs	r3, r3
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	18d0      	adds	r0, r2, r3
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	461a      	mov	r2, r3
 8003932:	68f9      	ldr	r1, [r7, #12]
 8003934:	f004 fdf8 	bl	8008528 <memmove>
	  return __result - _Num;
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	425b      	negs	r3, r3
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	4413      	add	r3, r2
	}
 8003942:	4618      	mov	r0, r3
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <_ZSt12__get_helperILj0ERKaJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800394a:	b580      	push	{r7, lr}
 800394c:	b082      	sub	sp, #8
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f805 	bl	8003962 <_ZNSt11_Tuple_implILj0EJRKaEE7_M_headERS2_>
 8003958:	4603      	mov	r3, r0
 800395a:	4618      	mov	r0, r3
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <_ZNSt11_Tuple_implILj0EJRKaEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003962:	b580      	push	{r7, lr}
 8003964:	b082      	sub	sp, #8
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4618      	mov	r0, r3
 800396e:	f000 f805 	bl	800397c <_ZNSt10_Head_baseILj0ERKaLb0EE7_M_headERS2_>
 8003972:	4603      	mov	r3, r0
 8003974:	4618      	mov	r0, r3
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <_ZNSt10_Head_baseILj0ERKaLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4618      	mov	r0, r3
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	bc80      	pop	{r7}
 8003990:	4770      	bx	lr
	...

08003994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	fsm1.setStartState(STATE_BLINK_SHORT);
 8003998:	2102      	movs	r1, #2
 800399a:	4818      	ldr	r0, [pc, #96]	; (80039fc <main+0x68>)
 800399c:	f7fd fba0 	bl	80010e0 <_ZN18FiniteStateMachine13setStartStateEa>
	fsm2.setStartState(STATE_WHAIT_TIMER);
 80039a0:	2105      	movs	r1, #5
 80039a2:	4817      	ldr	r0, [pc, #92]	; (8003a00 <main+0x6c>)
 80039a4:	f7fd fb9c 	bl	80010e0 <_ZN18FiniteStateMachine13setStartStateEa>
	stateWhaitTimer.addEvent(EVENT_TYMER_UPDATE, STATE_BLINK_REAL);
 80039a8:	2204      	movs	r2, #4
 80039aa:	2101      	movs	r1, #1
 80039ac:	4815      	ldr	r0, [pc, #84]	; (8003a04 <main+0x70>)
 80039ae:	f7fd facb 	bl	8000f48 <_ZN11EventStates8addEventEaa>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039b2:	f000 fb65 	bl	8004080 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80039b6:	f000 f839 	bl	8003a2c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039ba:	f000 f87d 	bl	8003ab8 <_ZL12MX_GPIO_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80039be:	f001 fc9d 	bl	80052fc <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of myTimer */
  myTimerHandle = osTimerNew(TimerCallback, osTimerPeriodic, NULL, &myTimer_attributes);
 80039c2:	4b11      	ldr	r3, [pc, #68]	; (8003a08 <main+0x74>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	2101      	movs	r1, #1
 80039c8:	4810      	ldr	r0, [pc, #64]	; (8003a0c <main+0x78>)
 80039ca:	f001 fdeb 	bl	80055a4 <osTimerNew>
 80039ce:	4603      	mov	r3, r0
 80039d0:	4a0f      	ldr	r2, [pc, #60]	; (8003a10 <main+0x7c>)
 80039d2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskFSM1 */
  TaskFSM1Handle = osThreadNew(fTaskFSM1, NULL, &TaskFSM1_attributes);
 80039d4:	4a0f      	ldr	r2, [pc, #60]	; (8003a14 <main+0x80>)
 80039d6:	2100      	movs	r1, #0
 80039d8:	480f      	ldr	r0, [pc, #60]	; (8003a18 <main+0x84>)
 80039da:	f001 fcf5 	bl	80053c8 <osThreadNew>
 80039de:	4603      	mov	r3, r0
 80039e0:	4a0e      	ldr	r2, [pc, #56]	; (8003a1c <main+0x88>)
 80039e2:	6013      	str	r3, [r2, #0]

  /* creation of TaskFSM2 */
  TaskFSM2Handle = osThreadNew(fTaskFSM2, NULL, &TaskFSM2_attributes);
 80039e4:	4a0e      	ldr	r2, [pc, #56]	; (8003a20 <main+0x8c>)
 80039e6:	2100      	movs	r1, #0
 80039e8:	480e      	ldr	r0, [pc, #56]	; (8003a24 <main+0x90>)
 80039ea:	f001 fced 	bl	80053c8 <osThreadNew>
 80039ee:	4603      	mov	r3, r0
 80039f0:	4a0d      	ldr	r2, [pc, #52]	; (8003a28 <main+0x94>)
 80039f2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80039f4:	f001 fcb4 	bl	8005360 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80039f8:	e7fe      	b.n	80039f8 <main+0x64>
 80039fa:	bf00      	nop
 80039fc:	20000570 	.word	0x20000570
 8003a00:	20000630 	.word	0x20000630
 8003a04:	200006e0 	.word	0x200006e0
 8003a08:	0800883c 	.word	0x0800883c
 8003a0c:	08003cb1 	.word	0x08003cb1
 8003a10:	2000053c 	.word	0x2000053c
 8003a14:	080087f4 	.word	0x080087f4
 8003a18:	08003c79 	.word	0x08003c79
 8003a1c:	2000007c 	.word	0x2000007c
 8003a20:	08008818 	.word	0x08008818
 8003a24:	08003c95 	.word	0x08003c95
 8003a28:	200002dc 	.word	0x200002dc

08003a2c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b090      	sub	sp, #64	; 0x40
 8003a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a32:	f107 0318 	add.w	r3, r7, #24
 8003a36:	2228      	movs	r2, #40	; 0x28
 8003a38:	2100      	movs	r1, #0
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f004 fd8e 	bl	800855c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a40:	1d3b      	adds	r3, r7, #4
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	605a      	str	r2, [r3, #4]
 8003a48:	609a      	str	r2, [r3, #8]
 8003a4a:	60da      	str	r2, [r3, #12]
 8003a4c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003a4e:	2302      	movs	r3, #2
 8003a50:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a52:	2301      	movs	r3, #1
 8003a54:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a56:	2310      	movs	r3, #16
 8003a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a5e:	f107 0318 	add.w	r3, r7, #24
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 fdd4 	bl	8004610 <HAL_RCC_OscConfig>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	bf14      	ite	ne
 8003a6e:	2301      	movne	r3, #1
 8003a70:	2300      	moveq	r3, #0
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <_Z18SystemClock_Configv+0x50>
  {
    Error_Handler();
 8003a78:	f000 f93a 	bl	8003cf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a7c:	230f      	movs	r3, #15
 8003a7e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003a80:	2300      	movs	r3, #0
 8003a82:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a84:	2300      	movs	r3, #0
 8003a86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003a90:	1d3b      	adds	r3, r7, #4
 8003a92:	2100      	movs	r1, #0
 8003a94:	4618      	mov	r0, r3
 8003a96:	f001 f83d 	bl	8004b14 <HAL_RCC_ClockConfig>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	bf14      	ite	ne
 8003aa0:	2301      	movne	r3, #1
 8003aa2:	2300      	moveq	r3, #0
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <_Z18SystemClock_Configv+0x82>
  {
    Error_Handler();
 8003aaa:	f000 f921 	bl	8003cf0 <Error_Handler>
  }
}
 8003aae:	bf00      	nop
 8003ab0:	3740      	adds	r7, #64	; 0x40
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
	...

08003ab8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003abe:	f107 0308 	add.w	r3, r7, #8
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	605a      	str	r2, [r3, #4]
 8003ac8:	609a      	str	r2, [r3, #8]
 8003aca:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003acc:	4b18      	ldr	r3, [pc, #96]	; (8003b30 <_ZL12MX_GPIO_Initv+0x78>)
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	4a17      	ldr	r2, [pc, #92]	; (8003b30 <_ZL12MX_GPIO_Initv+0x78>)
 8003ad2:	f043 0310 	orr.w	r3, r3, #16
 8003ad6:	6193      	str	r3, [r2, #24]
 8003ad8:	4b15      	ldr	r3, [pc, #84]	; (8003b30 <_ZL12MX_GPIO_Initv+0x78>)
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	f003 0310 	and.w	r3, r3, #16
 8003ae0:	607b      	str	r3, [r7, #4]
 8003ae2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ae4:	4b12      	ldr	r3, [pc, #72]	; (8003b30 <_ZL12MX_GPIO_Initv+0x78>)
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	4a11      	ldr	r2, [pc, #68]	; (8003b30 <_ZL12MX_GPIO_Initv+0x78>)
 8003aea:	f043 0304 	orr.w	r3, r3, #4
 8003aee:	6193      	str	r3, [r2, #24]
 8003af0:	4b0f      	ldr	r3, [pc, #60]	; (8003b30 <_ZL12MX_GPIO_Initv+0x78>)
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	603b      	str	r3, [r7, #0]
 8003afa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003afc:	2200      	movs	r2, #0
 8003afe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b02:	480c      	ldr	r0, [pc, #48]	; (8003b34 <_ZL12MX_GPIO_Initv+0x7c>)
 8003b04:	f000 fd52 	bl	80045ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003b08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b12:	2300      	movs	r3, #0
 8003b14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b16:	2302      	movs	r3, #2
 8003b18:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b1a:	f107 0308 	add.w	r3, r7, #8
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4804      	ldr	r0, [pc, #16]	; (8003b34 <_ZL12MX_GPIO_Initv+0x7c>)
 8003b22:	f000 fbbf 	bl	80042a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003b26:	bf00      	nop
 8003b28:	3718      	adds	r7, #24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40021000 	.word	0x40021000
 8003b34:	40011000 	.word	0x40011000

08003b38 <_Z17f_stateBlinkShortv>:

/* USER CODE BEGIN 4 */
void f_stateBlinkShort()
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
	const uint32_t xFrequency = 500; // 500 миллисекунд
 8003b3e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003b42:	60fb      	str	r3, [r7, #12]
	const TickType_t xTransitionTime = pdMS_TO_TICKS(6000); // 6 секунд
 8003b44:	f241 7370 	movw	r3, #6000	; 0x1770
 8003b48:	60bb      	str	r3, [r7, #8]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8003b4a:	f002 fe93 	bl	8006874 <xTaskGetTickCount>
 8003b4e:	6078      	str	r0, [r7, #4]
	while((xTaskGetTickCount() - xLastWakeTime) < xTransitionTime)
 8003b50:	e008      	b.n	8003b64 <_Z17f_stateBlinkShortv+0x2c>
	{
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Выполнение действий для состояния 1
 8003b52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b56:	480e      	ldr	r0, [pc, #56]	; (8003b90 <_Z17f_stateBlinkShortv+0x58>)
 8003b58:	f000 fd40 	bl	80045dc <HAL_GPIO_TogglePin>
	osDelay(xFrequency); // Задержка в тиках времени FreeRTOS
 8003b5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b60:	f001 fcdc 	bl	800551c <osDelay>
	while((xTaskGetTickCount() - xLastWakeTime) < xTransitionTime)
 8003b64:	f002 fe86 	bl	8006874 <xTaskGetTickCount>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	f241 726f 	movw	r2, #5999	; 0x176f
 8003b72:	4293      	cmp	r3, r2
 8003b74:	bf94      	ite	ls
 8003b76:	2301      	movls	r3, #1
 8003b78:	2300      	movhi	r3, #0
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1e8      	bne.n	8003b52 <_Z17f_stateBlinkShortv+0x1a>
	}
	fsm1.next();
 8003b80:	4804      	ldr	r0, [pc, #16]	; (8003b94 <_Z17f_stateBlinkShortv+0x5c>)
 8003b82:	f7fd fae0 	bl	8001146 <_ZN18FiniteStateMachine4nextEv>
	//fsm1.pState->end();
}
 8003b86:	bf00      	nop
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40011000 	.word	0x40011000
 8003b94:	20000570 	.word	0x20000570

08003b98 <_Z16f_stateBlinkLongv>:

void f_stateBlinkLong()
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
	const uint32_t xFrequency = 1000; // 500 миллисекунд
 8003b9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ba2:	60fb      	str	r3, [r7, #12]
	const TickType_t xTransitionTime = pdMS_TO_TICKS(6000); // 6 секунд
 8003ba4:	f241 7370 	movw	r3, #6000	; 0x1770
 8003ba8:	60bb      	str	r3, [r7, #8]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8003baa:	f002 fe63 	bl	8006874 <xTaskGetTickCount>
 8003bae:	6078      	str	r0, [r7, #4]
	while((xTaskGetTickCount() - xLastWakeTime) < xTransitionTime)
 8003bb0:	e008      	b.n	8003bc4 <_Z16f_stateBlinkLongv+0x2c>
	{
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Выполнение действий для состояния 1
 8003bb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bb6:	480e      	ldr	r0, [pc, #56]	; (8003bf0 <_Z16f_stateBlinkLongv+0x58>)
 8003bb8:	f000 fd10 	bl	80045dc <HAL_GPIO_TogglePin>
	osDelay(xFrequency); // Задержка в тиках времени FreeRTOS
 8003bbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bc0:	f001 fcac 	bl	800551c <osDelay>
	while((xTaskGetTickCount() - xLastWakeTime) < xTransitionTime)
 8003bc4:	f002 fe56 	bl	8006874 <xTaskGetTickCount>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	f241 726f 	movw	r2, #5999	; 0x176f
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	bf94      	ite	ls
 8003bd6:	2301      	movls	r3, #1
 8003bd8:	2300      	movhi	r3, #0
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1e8      	bne.n	8003bb2 <_Z16f_stateBlinkLongv+0x1a>
	}
	fsm1.next();
 8003be0:	4804      	ldr	r0, [pc, #16]	; (8003bf4 <_Z16f_stateBlinkLongv+0x5c>)
 8003be2:	f7fd fab0 	bl	8001146 <_ZN18FiniteStateMachine4nextEv>
}
 8003be6:	bf00      	nop
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40011000 	.word	0x40011000
 8003bf4:	20000570 	.word	0x20000570

08003bf8 <_Z16f_stateBlinkRealv>:

void f_stateBlinkReal()
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
	const uint32_t xFrequency = 100; // 100 миллисекунд
 8003bfe:	2364      	movs	r3, #100	; 0x64
 8003c00:	60fb      	str	r3, [r7, #12]
	const TickType_t xTransitionTime = pdMS_TO_TICKS(2000); // 2 секунд
 8003c02:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003c06:	60bb      	str	r3, [r7, #8]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8003c08:	f002 fe34 	bl	8006874 <xTaskGetTickCount>
 8003c0c:	6078      	str	r0, [r7, #4]
	  while((xTaskGetTickCount() - xLastWakeTime) < xTransitionTime)
 8003c0e:	e007      	b.n	8003c20 <_Z16f_stateBlinkRealv+0x28>
	  {
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Выполнение действий для состояния 1
 8003c10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c14:	480d      	ldr	r0, [pc, #52]	; (8003c4c <_Z16f_stateBlinkRealv+0x54>)
 8003c16:	f000 fce1 	bl	80045dc <HAL_GPIO_TogglePin>
		  osDelay(xFrequency); // Задержка в тиках времени FreeRTOS
 8003c1a:	2064      	movs	r0, #100	; 0x64
 8003c1c:	f001 fc7e 	bl	800551c <osDelay>
	  while((xTaskGetTickCount() - xLastWakeTime) < xTransitionTime)
 8003c20:	f002 fe28 	bl	8006874 <xTaskGetTickCount>
 8003c24:	4602      	mov	r2, r0
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	bf94      	ite	ls
 8003c32:	2301      	movls	r3, #1
 8003c34:	2300      	movhi	r3, #0
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1e9      	bne.n	8003c10 <_Z16f_stateBlinkRealv+0x18>
	  }
	 fsm2.next();
 8003c3c:	4804      	ldr	r0, [pc, #16]	; (8003c50 <_Z16f_stateBlinkRealv+0x58>)
 8003c3e:	f7fd fa82 	bl	8001146 <_ZN18FiniteStateMachine4nextEv>

}
 8003c42:	bf00      	nop
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40011000 	.word	0x40011000
 8003c50:	20000630 	.word	0x20000630

08003c54 <_Z17f_stateWhaitTimerv>:

void f_stateWhaitTimer()
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
	osTimerStart(myTimerHandle, pdMS_TO_TICKS(10000));
 8003c58:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <_Z17f_stateWhaitTimerv+0x1c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f242 7110 	movw	r1, #10000	; 0x2710
 8003c60:	4618      	mov	r0, r3
 8003c62:	f001 fd23 	bl	80056ac <osTimerStart>


	fsm2.next();
 8003c66:	4803      	ldr	r0, [pc, #12]	; (8003c74 <_Z17f_stateWhaitTimerv+0x20>)
 8003c68:	f7fd fa6d 	bl	8001146 <_ZN18FiniteStateMachine4nextEv>

}
 8003c6c:	bf00      	nop
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	2000053c 	.word	0x2000053c
 8003c74:	20000630 	.word	0x20000630

08003c78 <_Z9fTaskFSM1Pv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_fTaskFSM1 */
void fTaskFSM1(void *argument)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
fsm1.stateMachine();
 8003c80:	4803      	ldr	r0, [pc, #12]	; (8003c90 <_Z9fTaskFSM1Pv+0x18>)
 8003c82:	f7fd fa3c 	bl	80010fe <_ZN18FiniteStateMachine12stateMachineEv>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8003c86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c8a:	f001 fc47 	bl	800551c <osDelay>
 8003c8e:	e7fa      	b.n	8003c86 <_Z9fTaskFSM1Pv+0xe>
 8003c90:	20000570 	.word	0x20000570

08003c94 <_Z9fTaskFSM2Pv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTaskFSM2 */
void fTaskFSM2(void *argument)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTaskFSM2 */
fsm2.stateMachine();
 8003c9c:	4803      	ldr	r0, [pc, #12]	; (8003cac <_Z9fTaskFSM2Pv+0x18>)
 8003c9e:	f7fd fa2e 	bl	80010fe <_ZN18FiniteStateMachine12stateMachineEv>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8003ca2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ca6:	f001 fc39 	bl	800551c <osDelay>
 8003caa:	e7fa      	b.n	8003ca2 <_Z9fTaskFSM2Pv+0xe>
 8003cac:	20000630 	.word	0x20000630

08003cb0 <_Z13TimerCallbackPv>:
  /* USER CODE END fTaskFSM2 */
}

/* TimerCallback function */
void TimerCallback(void *argument)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TimerCallback */
fsm2.sendEvent(EVENT_TYMER_UPDATE);
 8003cb8:	2101      	movs	r1, #1
 8003cba:	4803      	ldr	r0, [pc, #12]	; (8003cc8 <_Z13TimerCallbackPv+0x18>)
 8003cbc:	f7fd f9ff 	bl	80010be <_ZN18FiniteStateMachine9sendEventEa>
  /* USER CODE END TimerCallback */
}
 8003cc0:	bf00      	nop
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	20000630 	.word	0x20000630

08003ccc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a04      	ldr	r2, [pc, #16]	; (8003cec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d101      	bne.n	8003ce2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003cde:	f000 f9e5 	bl	80040ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003ce2:	bf00      	nop
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40000800 	.word	0x40000800

08003cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cf4:	b672      	cpsid	i
}
 8003cf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cf8:	e7fe      	b.n	8003cf8 <Error_Handler+0x8>
	...

08003cfc <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af02      	add	r7, sp, #8
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d128      	bne.n	8003d5e <_Z41__static_initialization_and_destruction_0ii+0x62>
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d123      	bne.n	8003d5e <_Z41__static_initialization_and_destruction_0ii+0x62>
FiniteStateMachine fsm1;
 8003d16:	481b      	ldr	r0, [pc, #108]	; (8003d84 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003d18:	f7fd f822 	bl	8000d60 <_ZN18FiniteStateMachineC1Ev>
StandardStates stateBlinkShort= fsm1.createStateStandart(STATE_BLINK_SHORT, STATE_BLINK_LONG, f_stateBlinkShort);
 8003d1c:	481a      	ldr	r0, [pc, #104]	; (8003d88 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003d1e:	4b1b      	ldr	r3, [pc, #108]	; (8003d8c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	2303      	movs	r3, #3
 8003d24:	2202      	movs	r2, #2
 8003d26:	4917      	ldr	r1, [pc, #92]	; (8003d84 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003d28:	f7fd f99d 	bl	8001066 <_ZN18FiniteStateMachine19createStateStandartEaaPFvvE>
StandardStates stateBlinkLong = fsm1.createStateStandart(STATE_BLINK_LONG, STATE_BLINK_SHORT, f_stateBlinkLong);
 8003d2c:	4818      	ldr	r0, [pc, #96]	; (8003d90 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8003d2e:	4b19      	ldr	r3, [pc, #100]	; (8003d94 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8003d30:	9300      	str	r3, [sp, #0]
 8003d32:	2302      	movs	r3, #2
 8003d34:	2203      	movs	r2, #3
 8003d36:	4913      	ldr	r1, [pc, #76]	; (8003d84 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003d38:	f7fd f995 	bl	8001066 <_ZN18FiniteStateMachine19createStateStandartEaaPFvvE>
FiniteStateMachine fsm2;
 8003d3c:	4816      	ldr	r0, [pc, #88]	; (8003d98 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8003d3e:	f7fd f80f 	bl	8000d60 <_ZN18FiniteStateMachineC1Ev>
StandardStates stateBlinkReal= fsm2.createStateStandart(STATE_BLINK_REAL, STATE_WHAIT_TIMER, f_stateBlinkReal);
 8003d42:	4816      	ldr	r0, [pc, #88]	; (8003d9c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8003d44:	4b16      	ldr	r3, [pc, #88]	; (8003da0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	2305      	movs	r3, #5
 8003d4a:	2204      	movs	r2, #4
 8003d4c:	4912      	ldr	r1, [pc, #72]	; (8003d98 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8003d4e:	f7fd f98a 	bl	8001066 <_ZN18FiniteStateMachine19createStateStandartEaaPFvvE>
EventStates stateWhaitTimer = fsm2.createStateEvent(STATE_WHAIT_TIMER, f_stateWhaitTimer);
 8003d52:	4814      	ldr	r0, [pc, #80]	; (8003da4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8003d54:	4b14      	ldr	r3, [pc, #80]	; (8003da8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8003d56:	2205      	movs	r2, #5
 8003d58:	490f      	ldr	r1, [pc, #60]	; (8003d98 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8003d5a:	f7fd f99d 	bl	8001098 <_ZN18FiniteStateMachine16createStateEventEaPFvvE>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10a      	bne.n	8003d7a <_Z41__static_initialization_and_destruction_0ii+0x7e>
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d105      	bne.n	8003d7a <_Z41__static_initialization_and_destruction_0ii+0x7e>
FiniteStateMachine fsm2;
 8003d6e:	480a      	ldr	r0, [pc, #40]	; (8003d98 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8003d70:	f7fd f824 	bl	8000dbc <_ZN18FiniteStateMachineD1Ev>
FiniteStateMachine fsm1;
 8003d74:	4803      	ldr	r0, [pc, #12]	; (8003d84 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003d76:	f7fd f821 	bl	8000dbc <_ZN18FiniteStateMachineD1Ev>
}
 8003d7a:	bf00      	nop
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	20000570 	.word	0x20000570
 8003d88:	20000610 	.word	0x20000610
 8003d8c:	08003b39 	.word	0x08003b39
 8003d90:	20000620 	.word	0x20000620
 8003d94:	08003b99 	.word	0x08003b99
 8003d98:	20000630 	.word	0x20000630
 8003d9c:	200006d0 	.word	0x200006d0
 8003da0:	08003bf9 	.word	0x08003bf9
 8003da4:	200006e0 	.word	0x200006e0
 8003da8:	08003c55 	.word	0x08003c55

08003dac <_GLOBAL__sub_I_TaskFSM1Handle>:
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003db4:	2001      	movs	r0, #1
 8003db6:	f7ff ffa1 	bl	8003cfc <_Z41__static_initialization_and_destruction_0ii>
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <_GLOBAL__sub_D_TaskFSM1Handle>:
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	f7ff ff99 	bl	8003cfc <_Z41__static_initialization_and_destruction_0ii>
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003dd2:	4b18      	ldr	r3, [pc, #96]	; (8003e34 <HAL_MspInit+0x68>)
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	4a17      	ldr	r2, [pc, #92]	; (8003e34 <HAL_MspInit+0x68>)
 8003dd8:	f043 0301 	orr.w	r3, r3, #1
 8003ddc:	6193      	str	r3, [r2, #24]
 8003dde:	4b15      	ldr	r3, [pc, #84]	; (8003e34 <HAL_MspInit+0x68>)
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	60bb      	str	r3, [r7, #8]
 8003de8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dea:	4b12      	ldr	r3, [pc, #72]	; (8003e34 <HAL_MspInit+0x68>)
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	4a11      	ldr	r2, [pc, #68]	; (8003e34 <HAL_MspInit+0x68>)
 8003df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003df4:	61d3      	str	r3, [r2, #28]
 8003df6:	4b0f      	ldr	r3, [pc, #60]	; (8003e34 <HAL_MspInit+0x68>)
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfe:	607b      	str	r3, [r7, #4]
 8003e00:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003e02:	2200      	movs	r2, #0
 8003e04:	210f      	movs	r1, #15
 8003e06:	f06f 0001 	mvn.w	r0, #1
 8003e0a:	f000 fa20 	bl	800424e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003e0e:	4b0a      	ldr	r3, [pc, #40]	; (8003e38 <HAL_MspInit+0x6c>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	60fb      	str	r3, [r7, #12]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003e1a:	60fb      	str	r3, [r7, #12]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	4a04      	ldr	r2, [pc, #16]	; (8003e38 <HAL_MspInit+0x6c>)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e2a:	bf00      	nop
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	40021000 	.word	0x40021000
 8003e38:	40010000 	.word	0x40010000

08003e3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b08e      	sub	sp, #56	; 0x38
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8003e52:	4b34      	ldr	r3, [pc, #208]	; (8003f24 <HAL_InitTick+0xe8>)
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	4a33      	ldr	r2, [pc, #204]	; (8003f24 <HAL_InitTick+0xe8>)
 8003e58:	f043 0304 	orr.w	r3, r3, #4
 8003e5c:	61d3      	str	r3, [r2, #28]
 8003e5e:	4b31      	ldr	r3, [pc, #196]	; (8003f24 <HAL_InitTick+0xe8>)
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	f003 0304 	and.w	r3, r3, #4
 8003e66:	60fb      	str	r3, [r7, #12]
 8003e68:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003e6a:	f107 0210 	add.w	r2, r7, #16
 8003e6e:	f107 0314 	add.w	r3, r7, #20
 8003e72:	4611      	mov	r1, r2
 8003e74:	4618      	mov	r0, r3
 8003e76:	f000 ffa9 	bl	8004dcc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003e7a:	6a3b      	ldr	r3, [r7, #32]
 8003e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d103      	bne.n	8003e8c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003e84:	f000 ff8e 	bl	8004da4 <HAL_RCC_GetPCLK1Freq>
 8003e88:	6378      	str	r0, [r7, #52]	; 0x34
 8003e8a:	e004      	b.n	8003e96 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003e8c:	f000 ff8a 	bl	8004da4 <HAL_RCC_GetPCLK1Freq>
 8003e90:	4603      	mov	r3, r0
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e98:	4a23      	ldr	r2, [pc, #140]	; (8003f28 <HAL_InitTick+0xec>)
 8003e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9e:	0c9b      	lsrs	r3, r3, #18
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8003ea4:	4b21      	ldr	r3, [pc, #132]	; (8003f2c <HAL_InitTick+0xf0>)
 8003ea6:	4a22      	ldr	r2, [pc, #136]	; (8003f30 <HAL_InitTick+0xf4>)
 8003ea8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8003eaa:	4b20      	ldr	r3, [pc, #128]	; (8003f2c <HAL_InitTick+0xf0>)
 8003eac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003eb0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8003eb2:	4a1e      	ldr	r2, [pc, #120]	; (8003f2c <HAL_InitTick+0xf0>)
 8003eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8003eb8:	4b1c      	ldr	r3, [pc, #112]	; (8003f2c <HAL_InitTick+0xf0>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ebe:	4b1b      	ldr	r3, [pc, #108]	; (8003f2c <HAL_InitTick+0xf0>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ec4:	4b19      	ldr	r3, [pc, #100]	; (8003f2c <HAL_InitTick+0xf0>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8003eca:	4818      	ldr	r0, [pc, #96]	; (8003f2c <HAL_InitTick+0xf0>)
 8003ecc:	f000 ffcc 	bl	8004e68 <HAL_TIM_Base_Init>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003ed6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d11b      	bne.n	8003f16 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8003ede:	4813      	ldr	r0, [pc, #76]	; (8003f2c <HAL_InitTick+0xf0>)
 8003ee0:	f001 f81a 	bl	8004f18 <HAL_TIM_Base_Start_IT>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003eea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d111      	bne.n	8003f16 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003ef2:	201e      	movs	r0, #30
 8003ef4:	f000 f9c7 	bl	8004286 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b0f      	cmp	r3, #15
 8003efc:	d808      	bhi.n	8003f10 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8003efe:	2200      	movs	r2, #0
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	201e      	movs	r0, #30
 8003f04:	f000 f9a3 	bl	800424e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f08:	4a0a      	ldr	r2, [pc, #40]	; (8003f34 <HAL_InitTick+0xf8>)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	e002      	b.n	8003f16 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003f16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3738      	adds	r7, #56	; 0x38
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	40021000 	.word	0x40021000
 8003f28:	431bde83 	.word	0x431bde83
 8003f2c:	20000700 	.word	0x20000700
 8003f30:	40000800 	.word	0x40000800
 8003f34:	20000004 	.word	0x20000004

08003f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003f3c:	e7fe      	b.n	8003f3c <NMI_Handler+0x4>

08003f3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f42:	e7fe      	b.n	8003f42 <HardFault_Handler+0x4>

08003f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f48:	e7fe      	b.n	8003f48 <MemManage_Handler+0x4>

08003f4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f4e:	e7fe      	b.n	8003f4e <BusFault_Handler+0x4>

08003f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f54:	e7fe      	b.n	8003f54 <UsageFault_Handler+0x4>

08003f56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f56:	b480      	push	{r7}
 8003f58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f5a:	bf00      	nop
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bc80      	pop	{r7}
 8003f60:	4770      	bx	lr
	...

08003f64 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003f68:	4802      	ldr	r0, [pc, #8]	; (8003f74 <TIM4_IRQHandler+0x10>)
 8003f6a:	f001 f827 	bl	8004fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003f6e:	bf00      	nop
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20000700 	.word	0x20000700

08003f78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  return 1;
 8003f7c:	2301      	movs	r3, #1
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bc80      	pop	{r7}
 8003f84:	4770      	bx	lr

08003f86 <_kill>:

int _kill(int pid, int sig)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b082      	sub	sp, #8
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
 8003f8e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003f90:	f004 fb40 	bl	8008614 <__errno>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2216      	movs	r2, #22
 8003f98:	601a      	str	r2, [r3, #0]
  return -1;
 8003f9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <_exit>:

void _exit (int status)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b082      	sub	sp, #8
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003fae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7ff ffe7 	bl	8003f86 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003fb8:	e7fe      	b.n	8003fb8 <_exit+0x12>
	...

08003fbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fc4:	4a14      	ldr	r2, [pc, #80]	; (8004018 <_sbrk+0x5c>)
 8003fc6:	4b15      	ldr	r3, [pc, #84]	; (800401c <_sbrk+0x60>)
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fd0:	4b13      	ldr	r3, [pc, #76]	; (8004020 <_sbrk+0x64>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d102      	bne.n	8003fde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003fd8:	4b11      	ldr	r3, [pc, #68]	; (8004020 <_sbrk+0x64>)
 8003fda:	4a12      	ldr	r2, [pc, #72]	; (8004024 <_sbrk+0x68>)
 8003fdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003fde:	4b10      	ldr	r3, [pc, #64]	; (8004020 <_sbrk+0x64>)
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d207      	bcs.n	8003ffc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003fec:	f004 fb12 	bl	8008614 <__errno>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	220c      	movs	r2, #12
 8003ff4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ff6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ffa:	e009      	b.n	8004010 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ffc:	4b08      	ldr	r3, [pc, #32]	; (8004020 <_sbrk+0x64>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004002:	4b07      	ldr	r3, [pc, #28]	; (8004020 <_sbrk+0x64>)
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4413      	add	r3, r2
 800400a:	4a05      	ldr	r2, [pc, #20]	; (8004020 <_sbrk+0x64>)
 800400c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800400e:	68fb      	ldr	r3, [r7, #12]
}
 8004010:	4618      	mov	r0, r3
 8004012:	3718      	adds	r7, #24
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	20005000 	.word	0x20005000
 800401c:	00000400 	.word	0x00000400
 8004020:	20000748 	.word	0x20000748
 8004024:	200021e8 	.word	0x200021e8

08004028 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800402c:	bf00      	nop
 800402e:	46bd      	mov	sp, r7
 8004030:	bc80      	pop	{r7}
 8004032:	4770      	bx	lr

08004034 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004034:	f7ff fff8 	bl	8004028 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004038:	480b      	ldr	r0, [pc, #44]	; (8004068 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800403a:	490c      	ldr	r1, [pc, #48]	; (800406c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800403c:	4a0c      	ldr	r2, [pc, #48]	; (8004070 <LoopFillZerobss+0x16>)
  movs r3, #0
 800403e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004040:	e002      	b.n	8004048 <LoopCopyDataInit>

08004042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004046:	3304      	adds	r3, #4

08004048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800404a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800404c:	d3f9      	bcc.n	8004042 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800404e:	4a09      	ldr	r2, [pc, #36]	; (8004074 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004050:	4c09      	ldr	r4, [pc, #36]	; (8004078 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004054:	e001      	b.n	800405a <LoopFillZerobss>

08004056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004058:	3204      	adds	r2, #4

0800405a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800405a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800405c:	d3fb      	bcc.n	8004056 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800405e:	f004 fadf 	bl	8008620 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004062:	f7ff fc97 	bl	8003994 <main>
  bx lr
 8004066:	4770      	bx	lr
  ldr r0, =_sdata
 8004068:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800406c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8004070:	08008d10 	.word	0x08008d10
  ldr r2, =_sbss
 8004074:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8004078:	200021e4 	.word	0x200021e4

0800407c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800407c:	e7fe      	b.n	800407c <ADC1_2_IRQHandler>
	...

08004080 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004084:	4b08      	ldr	r3, [pc, #32]	; (80040a8 <HAL_Init+0x28>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a07      	ldr	r2, [pc, #28]	; (80040a8 <HAL_Init+0x28>)
 800408a:	f043 0310 	orr.w	r3, r3, #16
 800408e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004090:	2003      	movs	r0, #3
 8004092:	f000 f8d1 	bl	8004238 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004096:	200f      	movs	r0, #15
 8004098:	f7ff fed0 	bl	8003e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800409c:	f7ff fe96 	bl	8003dcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40022000 	.word	0x40022000

080040ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040b0:	4b05      	ldr	r3, [pc, #20]	; (80040c8 <HAL_IncTick+0x1c>)
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	461a      	mov	r2, r3
 80040b6:	4b05      	ldr	r3, [pc, #20]	; (80040cc <HAL_IncTick+0x20>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4413      	add	r3, r2
 80040bc:	4a03      	ldr	r2, [pc, #12]	; (80040cc <HAL_IncTick+0x20>)
 80040be:	6013      	str	r3, [r2, #0]
}
 80040c0:	bf00      	nop
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bc80      	pop	{r7}
 80040c6:	4770      	bx	lr
 80040c8:	20000008 	.word	0x20000008
 80040cc:	2000074c 	.word	0x2000074c

080040d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  return uwTick;
 80040d4:	4b02      	ldr	r3, [pc, #8]	; (80040e0 <HAL_GetTick+0x10>)
 80040d6:	681b      	ldr	r3, [r3, #0]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	46bd      	mov	sp, r7
 80040dc:	bc80      	pop	{r7}
 80040de:	4770      	bx	lr
 80040e0:	2000074c 	.word	0x2000074c

080040e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f003 0307 	and.w	r3, r3, #7
 80040f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040f4:	4b0c      	ldr	r3, [pc, #48]	; (8004128 <__NVIC_SetPriorityGrouping+0x44>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004100:	4013      	ands	r3, r2
 8004102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800410c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004116:	4a04      	ldr	r2, [pc, #16]	; (8004128 <__NVIC_SetPriorityGrouping+0x44>)
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	60d3      	str	r3, [r2, #12]
}
 800411c:	bf00      	nop
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	bc80      	pop	{r7}
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	e000ed00 	.word	0xe000ed00

0800412c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004130:	4b04      	ldr	r3, [pc, #16]	; (8004144 <__NVIC_GetPriorityGrouping+0x18>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	0a1b      	lsrs	r3, r3, #8
 8004136:	f003 0307 	and.w	r3, r3, #7
}
 800413a:	4618      	mov	r0, r3
 800413c:	46bd      	mov	sp, r7
 800413e:	bc80      	pop	{r7}
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	e000ed00 	.word	0xe000ed00

08004148 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	4603      	mov	r3, r0
 8004150:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004156:	2b00      	cmp	r3, #0
 8004158:	db0b      	blt.n	8004172 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800415a:	79fb      	ldrb	r3, [r7, #7]
 800415c:	f003 021f 	and.w	r2, r3, #31
 8004160:	4906      	ldr	r1, [pc, #24]	; (800417c <__NVIC_EnableIRQ+0x34>)
 8004162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004166:	095b      	lsrs	r3, r3, #5
 8004168:	2001      	movs	r0, #1
 800416a:	fa00 f202 	lsl.w	r2, r0, r2
 800416e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	bc80      	pop	{r7}
 800417a:	4770      	bx	lr
 800417c:	e000e100 	.word	0xe000e100

08004180 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	4603      	mov	r3, r0
 8004188:	6039      	str	r1, [r7, #0]
 800418a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800418c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004190:	2b00      	cmp	r3, #0
 8004192:	db0a      	blt.n	80041aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	b2da      	uxtb	r2, r3
 8004198:	490c      	ldr	r1, [pc, #48]	; (80041cc <__NVIC_SetPriority+0x4c>)
 800419a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419e:	0112      	lsls	r2, r2, #4
 80041a0:	b2d2      	uxtb	r2, r2
 80041a2:	440b      	add	r3, r1
 80041a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041a8:	e00a      	b.n	80041c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	4908      	ldr	r1, [pc, #32]	; (80041d0 <__NVIC_SetPriority+0x50>)
 80041b0:	79fb      	ldrb	r3, [r7, #7]
 80041b2:	f003 030f 	and.w	r3, r3, #15
 80041b6:	3b04      	subs	r3, #4
 80041b8:	0112      	lsls	r2, r2, #4
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	440b      	add	r3, r1
 80041be:	761a      	strb	r2, [r3, #24]
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bc80      	pop	{r7}
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	e000e100 	.word	0xe000e100
 80041d0:	e000ed00 	.word	0xe000ed00

080041d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b089      	sub	sp, #36	; 0x24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f003 0307 	and.w	r3, r3, #7
 80041e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	f1c3 0307 	rsb	r3, r3, #7
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	bf28      	it	cs
 80041f2:	2304      	movcs	r3, #4
 80041f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	3304      	adds	r3, #4
 80041fa:	2b06      	cmp	r3, #6
 80041fc:	d902      	bls.n	8004204 <NVIC_EncodePriority+0x30>
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	3b03      	subs	r3, #3
 8004202:	e000      	b.n	8004206 <NVIC_EncodePriority+0x32>
 8004204:	2300      	movs	r3, #0
 8004206:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004208:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	fa02 f303 	lsl.w	r3, r2, r3
 8004212:	43da      	mvns	r2, r3
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	401a      	ands	r2, r3
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800421c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	fa01 f303 	lsl.w	r3, r1, r3
 8004226:	43d9      	mvns	r1, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800422c:	4313      	orrs	r3, r2
         );
}
 800422e:	4618      	mov	r0, r3
 8004230:	3724      	adds	r7, #36	; 0x24
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr

08004238 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f7ff ff4f 	bl	80040e4 <__NVIC_SetPriorityGrouping>
}
 8004246:	bf00      	nop
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800424e:	b580      	push	{r7, lr}
 8004250:	b086      	sub	sp, #24
 8004252:	af00      	add	r7, sp, #0
 8004254:	4603      	mov	r3, r0
 8004256:	60b9      	str	r1, [r7, #8]
 8004258:	607a      	str	r2, [r7, #4]
 800425a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800425c:	2300      	movs	r3, #0
 800425e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004260:	f7ff ff64 	bl	800412c <__NVIC_GetPriorityGrouping>
 8004264:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	68b9      	ldr	r1, [r7, #8]
 800426a:	6978      	ldr	r0, [r7, #20]
 800426c:	f7ff ffb2 	bl	80041d4 <NVIC_EncodePriority>
 8004270:	4602      	mov	r2, r0
 8004272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004276:	4611      	mov	r1, r2
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff ff81 	bl	8004180 <__NVIC_SetPriority>
}
 800427e:	bf00      	nop
 8004280:	3718      	adds	r7, #24
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b082      	sub	sp, #8
 800428a:	af00      	add	r7, sp, #0
 800428c:	4603      	mov	r3, r0
 800428e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff ff57 	bl	8004148 <__NVIC_EnableIRQ>
}
 800429a:	bf00      	nop
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
	...

080042a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b08b      	sub	sp, #44	; 0x2c
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042ae:	2300      	movs	r3, #0
 80042b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80042b2:	2300      	movs	r3, #0
 80042b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042b6:	e169      	b.n	800458c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80042b8:	2201      	movs	r2, #1
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	fa02 f303 	lsl.w	r3, r2, r3
 80042c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	69fa      	ldr	r2, [r7, #28]
 80042c8:	4013      	ands	r3, r2
 80042ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	f040 8158 	bne.w	8004586 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	4a9a      	ldr	r2, [pc, #616]	; (8004544 <HAL_GPIO_Init+0x2a0>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d05e      	beq.n	800439e <HAL_GPIO_Init+0xfa>
 80042e0:	4a98      	ldr	r2, [pc, #608]	; (8004544 <HAL_GPIO_Init+0x2a0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d875      	bhi.n	80043d2 <HAL_GPIO_Init+0x12e>
 80042e6:	4a98      	ldr	r2, [pc, #608]	; (8004548 <HAL_GPIO_Init+0x2a4>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d058      	beq.n	800439e <HAL_GPIO_Init+0xfa>
 80042ec:	4a96      	ldr	r2, [pc, #600]	; (8004548 <HAL_GPIO_Init+0x2a4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d86f      	bhi.n	80043d2 <HAL_GPIO_Init+0x12e>
 80042f2:	4a96      	ldr	r2, [pc, #600]	; (800454c <HAL_GPIO_Init+0x2a8>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d052      	beq.n	800439e <HAL_GPIO_Init+0xfa>
 80042f8:	4a94      	ldr	r2, [pc, #592]	; (800454c <HAL_GPIO_Init+0x2a8>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d869      	bhi.n	80043d2 <HAL_GPIO_Init+0x12e>
 80042fe:	4a94      	ldr	r2, [pc, #592]	; (8004550 <HAL_GPIO_Init+0x2ac>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d04c      	beq.n	800439e <HAL_GPIO_Init+0xfa>
 8004304:	4a92      	ldr	r2, [pc, #584]	; (8004550 <HAL_GPIO_Init+0x2ac>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d863      	bhi.n	80043d2 <HAL_GPIO_Init+0x12e>
 800430a:	4a92      	ldr	r2, [pc, #584]	; (8004554 <HAL_GPIO_Init+0x2b0>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d046      	beq.n	800439e <HAL_GPIO_Init+0xfa>
 8004310:	4a90      	ldr	r2, [pc, #576]	; (8004554 <HAL_GPIO_Init+0x2b0>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d85d      	bhi.n	80043d2 <HAL_GPIO_Init+0x12e>
 8004316:	2b12      	cmp	r3, #18
 8004318:	d82a      	bhi.n	8004370 <HAL_GPIO_Init+0xcc>
 800431a:	2b12      	cmp	r3, #18
 800431c:	d859      	bhi.n	80043d2 <HAL_GPIO_Init+0x12e>
 800431e:	a201      	add	r2, pc, #4	; (adr r2, 8004324 <HAL_GPIO_Init+0x80>)
 8004320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004324:	0800439f 	.word	0x0800439f
 8004328:	08004379 	.word	0x08004379
 800432c:	0800438b 	.word	0x0800438b
 8004330:	080043cd 	.word	0x080043cd
 8004334:	080043d3 	.word	0x080043d3
 8004338:	080043d3 	.word	0x080043d3
 800433c:	080043d3 	.word	0x080043d3
 8004340:	080043d3 	.word	0x080043d3
 8004344:	080043d3 	.word	0x080043d3
 8004348:	080043d3 	.word	0x080043d3
 800434c:	080043d3 	.word	0x080043d3
 8004350:	080043d3 	.word	0x080043d3
 8004354:	080043d3 	.word	0x080043d3
 8004358:	080043d3 	.word	0x080043d3
 800435c:	080043d3 	.word	0x080043d3
 8004360:	080043d3 	.word	0x080043d3
 8004364:	080043d3 	.word	0x080043d3
 8004368:	08004381 	.word	0x08004381
 800436c:	08004395 	.word	0x08004395
 8004370:	4a79      	ldr	r2, [pc, #484]	; (8004558 <HAL_GPIO_Init+0x2b4>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d013      	beq.n	800439e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004376:	e02c      	b.n	80043d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	623b      	str	r3, [r7, #32]
          break;
 800437e:	e029      	b.n	80043d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	3304      	adds	r3, #4
 8004386:	623b      	str	r3, [r7, #32]
          break;
 8004388:	e024      	b.n	80043d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	3308      	adds	r3, #8
 8004390:	623b      	str	r3, [r7, #32]
          break;
 8004392:	e01f      	b.n	80043d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	330c      	adds	r3, #12
 800439a:	623b      	str	r3, [r7, #32]
          break;
 800439c:	e01a      	b.n	80043d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d102      	bne.n	80043ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80043a6:	2304      	movs	r3, #4
 80043a8:	623b      	str	r3, [r7, #32]
          break;
 80043aa:	e013      	b.n	80043d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d105      	bne.n	80043c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80043b4:	2308      	movs	r3, #8
 80043b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	69fa      	ldr	r2, [r7, #28]
 80043bc:	611a      	str	r2, [r3, #16]
          break;
 80043be:	e009      	b.n	80043d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80043c0:	2308      	movs	r3, #8
 80043c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	69fa      	ldr	r2, [r7, #28]
 80043c8:	615a      	str	r2, [r3, #20]
          break;
 80043ca:	e003      	b.n	80043d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80043cc:	2300      	movs	r3, #0
 80043ce:	623b      	str	r3, [r7, #32]
          break;
 80043d0:	e000      	b.n	80043d4 <HAL_GPIO_Init+0x130>
          break;
 80043d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	2bff      	cmp	r3, #255	; 0xff
 80043d8:	d801      	bhi.n	80043de <HAL_GPIO_Init+0x13a>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	e001      	b.n	80043e2 <HAL_GPIO_Init+0x13e>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	3304      	adds	r3, #4
 80043e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	2bff      	cmp	r3, #255	; 0xff
 80043e8:	d802      	bhi.n	80043f0 <HAL_GPIO_Init+0x14c>
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	e002      	b.n	80043f6 <HAL_GPIO_Init+0x152>
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	3b08      	subs	r3, #8
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	210f      	movs	r1, #15
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	fa01 f303 	lsl.w	r3, r1, r3
 8004404:	43db      	mvns	r3, r3
 8004406:	401a      	ands	r2, r3
 8004408:	6a39      	ldr	r1, [r7, #32]
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	fa01 f303 	lsl.w	r3, r1, r3
 8004410:	431a      	orrs	r2, r3
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	f000 80b1 	beq.w	8004586 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004424:	4b4d      	ldr	r3, [pc, #308]	; (800455c <HAL_GPIO_Init+0x2b8>)
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	4a4c      	ldr	r2, [pc, #304]	; (800455c <HAL_GPIO_Init+0x2b8>)
 800442a:	f043 0301 	orr.w	r3, r3, #1
 800442e:	6193      	str	r3, [r2, #24]
 8004430:	4b4a      	ldr	r3, [pc, #296]	; (800455c <HAL_GPIO_Init+0x2b8>)
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	60bb      	str	r3, [r7, #8]
 800443a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800443c:	4a48      	ldr	r2, [pc, #288]	; (8004560 <HAL_GPIO_Init+0x2bc>)
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	089b      	lsrs	r3, r3, #2
 8004442:	3302      	adds	r3, #2
 8004444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004448:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	f003 0303 	and.w	r3, r3, #3
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	220f      	movs	r2, #15
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	43db      	mvns	r3, r3
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	4013      	ands	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a40      	ldr	r2, [pc, #256]	; (8004564 <HAL_GPIO_Init+0x2c0>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d013      	beq.n	8004490 <HAL_GPIO_Init+0x1ec>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a3f      	ldr	r2, [pc, #252]	; (8004568 <HAL_GPIO_Init+0x2c4>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d00d      	beq.n	800448c <HAL_GPIO_Init+0x1e8>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a3e      	ldr	r2, [pc, #248]	; (800456c <HAL_GPIO_Init+0x2c8>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d007      	beq.n	8004488 <HAL_GPIO_Init+0x1e4>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a3d      	ldr	r2, [pc, #244]	; (8004570 <HAL_GPIO_Init+0x2cc>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d101      	bne.n	8004484 <HAL_GPIO_Init+0x1e0>
 8004480:	2303      	movs	r3, #3
 8004482:	e006      	b.n	8004492 <HAL_GPIO_Init+0x1ee>
 8004484:	2304      	movs	r3, #4
 8004486:	e004      	b.n	8004492 <HAL_GPIO_Init+0x1ee>
 8004488:	2302      	movs	r3, #2
 800448a:	e002      	b.n	8004492 <HAL_GPIO_Init+0x1ee>
 800448c:	2301      	movs	r3, #1
 800448e:	e000      	b.n	8004492 <HAL_GPIO_Init+0x1ee>
 8004490:	2300      	movs	r3, #0
 8004492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004494:	f002 0203 	and.w	r2, r2, #3
 8004498:	0092      	lsls	r2, r2, #2
 800449a:	4093      	lsls	r3, r2
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	4313      	orrs	r3, r2
 80044a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80044a2:	492f      	ldr	r1, [pc, #188]	; (8004560 <HAL_GPIO_Init+0x2bc>)
 80044a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a6:	089b      	lsrs	r3, r3, #2
 80044a8:	3302      	adds	r3, #2
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d006      	beq.n	80044ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80044bc:	4b2d      	ldr	r3, [pc, #180]	; (8004574 <HAL_GPIO_Init+0x2d0>)
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	492c      	ldr	r1, [pc, #176]	; (8004574 <HAL_GPIO_Init+0x2d0>)
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	608b      	str	r3, [r1, #8]
 80044c8:	e006      	b.n	80044d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80044ca:	4b2a      	ldr	r3, [pc, #168]	; (8004574 <HAL_GPIO_Init+0x2d0>)
 80044cc:	689a      	ldr	r2, [r3, #8]
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	43db      	mvns	r3, r3
 80044d2:	4928      	ldr	r1, [pc, #160]	; (8004574 <HAL_GPIO_Init+0x2d0>)
 80044d4:	4013      	ands	r3, r2
 80044d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d006      	beq.n	80044f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80044e4:	4b23      	ldr	r3, [pc, #140]	; (8004574 <HAL_GPIO_Init+0x2d0>)
 80044e6:	68da      	ldr	r2, [r3, #12]
 80044e8:	4922      	ldr	r1, [pc, #136]	; (8004574 <HAL_GPIO_Init+0x2d0>)
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60cb      	str	r3, [r1, #12]
 80044f0:	e006      	b.n	8004500 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80044f2:	4b20      	ldr	r3, [pc, #128]	; (8004574 <HAL_GPIO_Init+0x2d0>)
 80044f4:	68da      	ldr	r2, [r3, #12]
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	43db      	mvns	r3, r3
 80044fa:	491e      	ldr	r1, [pc, #120]	; (8004574 <HAL_GPIO_Init+0x2d0>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d006      	beq.n	800451a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800450c:	4b19      	ldr	r3, [pc, #100]	; (8004574 <HAL_GPIO_Init+0x2d0>)
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	4918      	ldr	r1, [pc, #96]	; (8004574 <HAL_GPIO_Init+0x2d0>)
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	4313      	orrs	r3, r2
 8004516:	604b      	str	r3, [r1, #4]
 8004518:	e006      	b.n	8004528 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800451a:	4b16      	ldr	r3, [pc, #88]	; (8004574 <HAL_GPIO_Init+0x2d0>)
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	43db      	mvns	r3, r3
 8004522:	4914      	ldr	r1, [pc, #80]	; (8004574 <HAL_GPIO_Init+0x2d0>)
 8004524:	4013      	ands	r3, r2
 8004526:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d021      	beq.n	8004578 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004534:	4b0f      	ldr	r3, [pc, #60]	; (8004574 <HAL_GPIO_Init+0x2d0>)
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	490e      	ldr	r1, [pc, #56]	; (8004574 <HAL_GPIO_Init+0x2d0>)
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	4313      	orrs	r3, r2
 800453e:	600b      	str	r3, [r1, #0]
 8004540:	e021      	b.n	8004586 <HAL_GPIO_Init+0x2e2>
 8004542:	bf00      	nop
 8004544:	10320000 	.word	0x10320000
 8004548:	10310000 	.word	0x10310000
 800454c:	10220000 	.word	0x10220000
 8004550:	10210000 	.word	0x10210000
 8004554:	10120000 	.word	0x10120000
 8004558:	10110000 	.word	0x10110000
 800455c:	40021000 	.word	0x40021000
 8004560:	40010000 	.word	0x40010000
 8004564:	40010800 	.word	0x40010800
 8004568:	40010c00 	.word	0x40010c00
 800456c:	40011000 	.word	0x40011000
 8004570:	40011400 	.word	0x40011400
 8004574:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004578:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <HAL_GPIO_Init+0x304>)
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	43db      	mvns	r3, r3
 8004580:	4909      	ldr	r1, [pc, #36]	; (80045a8 <HAL_GPIO_Init+0x304>)
 8004582:	4013      	ands	r3, r2
 8004584:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	3301      	adds	r3, #1
 800458a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004592:	fa22 f303 	lsr.w	r3, r2, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	f47f ae8e 	bne.w	80042b8 <HAL_GPIO_Init+0x14>
  }
}
 800459c:	bf00      	nop
 800459e:	bf00      	nop
 80045a0:	372c      	adds	r7, #44	; 0x2c
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bc80      	pop	{r7}
 80045a6:	4770      	bx	lr
 80045a8:	40010400 	.word	0x40010400

080045ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	460b      	mov	r3, r1
 80045b6:	807b      	strh	r3, [r7, #2]
 80045b8:	4613      	mov	r3, r2
 80045ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045bc:	787b      	ldrb	r3, [r7, #1]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045c2:	887a      	ldrh	r2, [r7, #2]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80045c8:	e003      	b.n	80045d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80045ca:	887b      	ldrh	r3, [r7, #2]
 80045cc:	041a      	lsls	r2, r3, #16
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	611a      	str	r2, [r3, #16]
}
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bc80      	pop	{r7}
 80045da:	4770      	bx	lr

080045dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	460b      	mov	r3, r1
 80045e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80045ee:	887a      	ldrh	r2, [r7, #2]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4013      	ands	r3, r2
 80045f4:	041a      	lsls	r2, r3, #16
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	43d9      	mvns	r1, r3
 80045fa:	887b      	ldrh	r3, [r7, #2]
 80045fc:	400b      	ands	r3, r1
 80045fe:	431a      	orrs	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	611a      	str	r2, [r3, #16]
}
 8004604:	bf00      	nop
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	bc80      	pop	{r7}
 800460c:	4770      	bx	lr
	...

08004610 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e272      	b.n	8004b08 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 8087 	beq.w	800473e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004630:	4b92      	ldr	r3, [pc, #584]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f003 030c 	and.w	r3, r3, #12
 8004638:	2b04      	cmp	r3, #4
 800463a:	d00c      	beq.n	8004656 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800463c:	4b8f      	ldr	r3, [pc, #572]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f003 030c 	and.w	r3, r3, #12
 8004644:	2b08      	cmp	r3, #8
 8004646:	d112      	bne.n	800466e <HAL_RCC_OscConfig+0x5e>
 8004648:	4b8c      	ldr	r3, [pc, #560]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004654:	d10b      	bne.n	800466e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004656:	4b89      	ldr	r3, [pc, #548]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d06c      	beq.n	800473c <HAL_RCC_OscConfig+0x12c>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d168      	bne.n	800473c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e24c      	b.n	8004b08 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004676:	d106      	bne.n	8004686 <HAL_RCC_OscConfig+0x76>
 8004678:	4b80      	ldr	r3, [pc, #512]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a7f      	ldr	r2, [pc, #508]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 800467e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004682:	6013      	str	r3, [r2, #0]
 8004684:	e02e      	b.n	80046e4 <HAL_RCC_OscConfig+0xd4>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10c      	bne.n	80046a8 <HAL_RCC_OscConfig+0x98>
 800468e:	4b7b      	ldr	r3, [pc, #492]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a7a      	ldr	r2, [pc, #488]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 8004694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	4b78      	ldr	r3, [pc, #480]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a77      	ldr	r2, [pc, #476]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 80046a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046a4:	6013      	str	r3, [r2, #0]
 80046a6:	e01d      	b.n	80046e4 <HAL_RCC_OscConfig+0xd4>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046b0:	d10c      	bne.n	80046cc <HAL_RCC_OscConfig+0xbc>
 80046b2:	4b72      	ldr	r3, [pc, #456]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a71      	ldr	r2, [pc, #452]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 80046b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046bc:	6013      	str	r3, [r2, #0]
 80046be:	4b6f      	ldr	r3, [pc, #444]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a6e      	ldr	r2, [pc, #440]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 80046c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	e00b      	b.n	80046e4 <HAL_RCC_OscConfig+0xd4>
 80046cc:	4b6b      	ldr	r3, [pc, #428]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a6a      	ldr	r2, [pc, #424]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 80046d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046d6:	6013      	str	r3, [r2, #0]
 80046d8:	4b68      	ldr	r3, [pc, #416]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a67      	ldr	r2, [pc, #412]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 80046de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d013      	beq.n	8004714 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ec:	f7ff fcf0 	bl	80040d0 <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046f4:	f7ff fcec 	bl	80040d0 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b64      	cmp	r3, #100	; 0x64
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e200      	b.n	8004b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004706:	4b5d      	ldr	r3, [pc, #372]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d0f0      	beq.n	80046f4 <HAL_RCC_OscConfig+0xe4>
 8004712:	e014      	b.n	800473e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004714:	f7ff fcdc 	bl	80040d0 <HAL_GetTick>
 8004718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800471a:	e008      	b.n	800472e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800471c:	f7ff fcd8 	bl	80040d0 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b64      	cmp	r3, #100	; 0x64
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e1ec      	b.n	8004b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800472e:	4b53      	ldr	r3, [pc, #332]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1f0      	bne.n	800471c <HAL_RCC_OscConfig+0x10c>
 800473a:	e000      	b.n	800473e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800473c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d063      	beq.n	8004812 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800474a:	4b4c      	ldr	r3, [pc, #304]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f003 030c 	and.w	r3, r3, #12
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00b      	beq.n	800476e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004756:	4b49      	ldr	r3, [pc, #292]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f003 030c 	and.w	r3, r3, #12
 800475e:	2b08      	cmp	r3, #8
 8004760:	d11c      	bne.n	800479c <HAL_RCC_OscConfig+0x18c>
 8004762:	4b46      	ldr	r3, [pc, #280]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d116      	bne.n	800479c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800476e:	4b43      	ldr	r3, [pc, #268]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d005      	beq.n	8004786 <HAL_RCC_OscConfig+0x176>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d001      	beq.n	8004786 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e1c0      	b.n	8004b08 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004786:	4b3d      	ldr	r3, [pc, #244]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	4939      	ldr	r1, [pc, #228]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 8004796:	4313      	orrs	r3, r2
 8004798:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800479a:	e03a      	b.n	8004812 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d020      	beq.n	80047e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047a4:	4b36      	ldr	r3, [pc, #216]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 80047a6:	2201      	movs	r2, #1
 80047a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047aa:	f7ff fc91 	bl	80040d0 <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047b0:	e008      	b.n	80047c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047b2:	f7ff fc8d 	bl	80040d0 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e1a1      	b.n	8004b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c4:	4b2d      	ldr	r3, [pc, #180]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0f0      	beq.n	80047b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d0:	4b2a      	ldr	r3, [pc, #168]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	00db      	lsls	r3, r3, #3
 80047de:	4927      	ldr	r1, [pc, #156]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	600b      	str	r3, [r1, #0]
 80047e4:	e015      	b.n	8004812 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047e6:	4b26      	ldr	r3, [pc, #152]	; (8004880 <HAL_RCC_OscConfig+0x270>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ec:	f7ff fc70 	bl	80040d0 <HAL_GetTick>
 80047f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047f2:	e008      	b.n	8004806 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047f4:	f7ff fc6c 	bl	80040d0 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e180      	b.n	8004b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004806:	4b1d      	ldr	r3, [pc, #116]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1f0      	bne.n	80047f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0308 	and.w	r3, r3, #8
 800481a:	2b00      	cmp	r3, #0
 800481c:	d03a      	beq.n	8004894 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d019      	beq.n	800485a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004826:	4b17      	ldr	r3, [pc, #92]	; (8004884 <HAL_RCC_OscConfig+0x274>)
 8004828:	2201      	movs	r2, #1
 800482a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800482c:	f7ff fc50 	bl	80040d0 <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004832:	e008      	b.n	8004846 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004834:	f7ff fc4c 	bl	80040d0 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b02      	cmp	r3, #2
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e160      	b.n	8004b08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004846:	4b0d      	ldr	r3, [pc, #52]	; (800487c <HAL_RCC_OscConfig+0x26c>)
 8004848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d0f0      	beq.n	8004834 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004852:	2001      	movs	r0, #1
 8004854:	f000 faea 	bl	8004e2c <RCC_Delay>
 8004858:	e01c      	b.n	8004894 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800485a:	4b0a      	ldr	r3, [pc, #40]	; (8004884 <HAL_RCC_OscConfig+0x274>)
 800485c:	2200      	movs	r2, #0
 800485e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004860:	f7ff fc36 	bl	80040d0 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004866:	e00f      	b.n	8004888 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004868:	f7ff fc32 	bl	80040d0 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d908      	bls.n	8004888 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e146      	b.n	8004b08 <HAL_RCC_OscConfig+0x4f8>
 800487a:	bf00      	nop
 800487c:	40021000 	.word	0x40021000
 8004880:	42420000 	.word	0x42420000
 8004884:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004888:	4b92      	ldr	r3, [pc, #584]	; (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 800488a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1e9      	bne.n	8004868 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 80a6 	beq.w	80049ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048a2:	2300      	movs	r3, #0
 80048a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048a6:	4b8b      	ldr	r3, [pc, #556]	; (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10d      	bne.n	80048ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048b2:	4b88      	ldr	r3, [pc, #544]	; (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	4a87      	ldr	r2, [pc, #540]	; (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 80048b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048bc:	61d3      	str	r3, [r2, #28]
 80048be:	4b85      	ldr	r3, [pc, #532]	; (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c6:	60bb      	str	r3, [r7, #8]
 80048c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048ca:	2301      	movs	r3, #1
 80048cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ce:	4b82      	ldr	r3, [pc, #520]	; (8004ad8 <HAL_RCC_OscConfig+0x4c8>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d118      	bne.n	800490c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048da:	4b7f      	ldr	r3, [pc, #508]	; (8004ad8 <HAL_RCC_OscConfig+0x4c8>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a7e      	ldr	r2, [pc, #504]	; (8004ad8 <HAL_RCC_OscConfig+0x4c8>)
 80048e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048e6:	f7ff fbf3 	bl	80040d0 <HAL_GetTick>
 80048ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ec:	e008      	b.n	8004900 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ee:	f7ff fbef 	bl	80040d0 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b64      	cmp	r3, #100	; 0x64
 80048fa:	d901      	bls.n	8004900 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e103      	b.n	8004b08 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004900:	4b75      	ldr	r3, [pc, #468]	; (8004ad8 <HAL_RCC_OscConfig+0x4c8>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004908:	2b00      	cmp	r3, #0
 800490a:	d0f0      	beq.n	80048ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d106      	bne.n	8004922 <HAL_RCC_OscConfig+0x312>
 8004914:	4b6f      	ldr	r3, [pc, #444]	; (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	4a6e      	ldr	r2, [pc, #440]	; (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 800491a:	f043 0301 	orr.w	r3, r3, #1
 800491e:	6213      	str	r3, [r2, #32]
 8004920:	e02d      	b.n	800497e <HAL_RCC_OscConfig+0x36e>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10c      	bne.n	8004944 <HAL_RCC_OscConfig+0x334>
 800492a:	4b6a      	ldr	r3, [pc, #424]	; (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	4a69      	ldr	r2, [pc, #420]	; (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 8004930:	f023 0301 	bic.w	r3, r3, #1
 8004934:	6213      	str	r3, [r2, #32]
 8004936:	4b67      	ldr	r3, [pc, #412]	; (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	4a66      	ldr	r2, [pc, #408]	; (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 800493c:	f023 0304 	bic.w	r3, r3, #4
 8004940:	6213      	str	r3, [r2, #32]
 8004942:	e01c      	b.n	800497e <HAL_RCC_OscConfig+0x36e>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	2b05      	cmp	r3, #5
 800494a:	d10c      	bne.n	8004966 <HAL_RCC_OscConfig+0x356>
 800494c:	4b61      	ldr	r3, [pc, #388]	; (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	4a60      	ldr	r2, [pc, #384]	; (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 8004952:	f043 0304 	orr.w	r3, r3, #4
 8004956:	6213      	str	r3, [r2, #32]
 8004958:	4b5e      	ldr	r3, [pc, #376]	; (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	4a5d      	ldr	r2, [pc, #372]	; (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 800495e:	f043 0301 	orr.w	r3, r3, #1
 8004962:	6213      	str	r3, [r2, #32]
 8004964:	e00b      	b.n	800497e <HAL_RCC_OscConfig+0x36e>
 8004966:	4b5b      	ldr	r3, [pc, #364]	; (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	4a5a      	ldr	r2, [pc, #360]	; (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 800496c:	f023 0301 	bic.w	r3, r3, #1
 8004970:	6213      	str	r3, [r2, #32]
 8004972:	4b58      	ldr	r3, [pc, #352]	; (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	4a57      	ldr	r2, [pc, #348]	; (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 8004978:	f023 0304 	bic.w	r3, r3, #4
 800497c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d015      	beq.n	80049b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004986:	f7ff fba3 	bl	80040d0 <HAL_GetTick>
 800498a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800498c:	e00a      	b.n	80049a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800498e:	f7ff fb9f 	bl	80040d0 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	f241 3288 	movw	r2, #5000	; 0x1388
 800499c:	4293      	cmp	r3, r2
 800499e:	d901      	bls.n	80049a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e0b1      	b.n	8004b08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049a4:	4b4b      	ldr	r3, [pc, #300]	; (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d0ee      	beq.n	800498e <HAL_RCC_OscConfig+0x37e>
 80049b0:	e014      	b.n	80049dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049b2:	f7ff fb8d 	bl	80040d0 <HAL_GetTick>
 80049b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049b8:	e00a      	b.n	80049d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ba:	f7ff fb89 	bl	80040d0 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e09b      	b.n	8004b08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049d0:	4b40      	ldr	r3, [pc, #256]	; (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1ee      	bne.n	80049ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80049dc:	7dfb      	ldrb	r3, [r7, #23]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d105      	bne.n	80049ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049e2:	4b3c      	ldr	r3, [pc, #240]	; (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	4a3b      	ldr	r2, [pc, #236]	; (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 80049e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f000 8087 	beq.w	8004b06 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049f8:	4b36      	ldr	r3, [pc, #216]	; (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f003 030c 	and.w	r3, r3, #12
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d061      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	69db      	ldr	r3, [r3, #28]
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d146      	bne.n	8004a9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a0c:	4b33      	ldr	r3, [pc, #204]	; (8004adc <HAL_RCC_OscConfig+0x4cc>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a12:	f7ff fb5d 	bl	80040d0 <HAL_GetTick>
 8004a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a18:	e008      	b.n	8004a2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a1a:	f7ff fb59 	bl	80040d0 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d901      	bls.n	8004a2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e06d      	b.n	8004b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a2c:	4b29      	ldr	r3, [pc, #164]	; (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1f0      	bne.n	8004a1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a40:	d108      	bne.n	8004a54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004a42:	4b24      	ldr	r3, [pc, #144]	; (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	4921      	ldr	r1, [pc, #132]	; (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a54:	4b1f      	ldr	r3, [pc, #124]	; (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a19      	ldr	r1, [r3, #32]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	430b      	orrs	r3, r1
 8004a66:	491b      	ldr	r1, [pc, #108]	; (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a6c:	4b1b      	ldr	r3, [pc, #108]	; (8004adc <HAL_RCC_OscConfig+0x4cc>)
 8004a6e:	2201      	movs	r2, #1
 8004a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a72:	f7ff fb2d 	bl	80040d0 <HAL_GetTick>
 8004a76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a78:	e008      	b.n	8004a8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a7a:	f7ff fb29 	bl	80040d0 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e03d      	b.n	8004b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a8c:	4b11      	ldr	r3, [pc, #68]	; (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d0f0      	beq.n	8004a7a <HAL_RCC_OscConfig+0x46a>
 8004a98:	e035      	b.n	8004b06 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a9a:	4b10      	ldr	r3, [pc, #64]	; (8004adc <HAL_RCC_OscConfig+0x4cc>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa0:	f7ff fb16 	bl	80040d0 <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aa8:	f7ff fb12 	bl	80040d0 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e026      	b.n	8004b08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aba:	4b06      	ldr	r3, [pc, #24]	; (8004ad4 <HAL_RCC_OscConfig+0x4c4>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1f0      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x498>
 8004ac6:	e01e      	b.n	8004b06 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	69db      	ldr	r3, [r3, #28]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d107      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e019      	b.n	8004b08 <HAL_RCC_OscConfig+0x4f8>
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	40007000 	.word	0x40007000
 8004adc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	; (8004b10 <HAL_RCC_OscConfig+0x500>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d106      	bne.n	8004b02 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d001      	beq.n	8004b06 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e000      	b.n	8004b08 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3718      	adds	r7, #24
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	40021000 	.word	0x40021000

08004b14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e0d0      	b.n	8004cca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b28:	4b6a      	ldr	r3, [pc, #424]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d910      	bls.n	8004b58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b36:	4b67      	ldr	r3, [pc, #412]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f023 0207 	bic.w	r2, r3, #7
 8004b3e:	4965      	ldr	r1, [pc, #404]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b46:	4b63      	ldr	r3, [pc, #396]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0307 	and.w	r3, r3, #7
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d001      	beq.n	8004b58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e0b8      	b.n	8004cca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d020      	beq.n	8004ba6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0304 	and.w	r3, r3, #4
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d005      	beq.n	8004b7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b70:	4b59      	ldr	r3, [pc, #356]	; (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	4a58      	ldr	r2, [pc, #352]	; (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004b7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0308 	and.w	r3, r3, #8
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d005      	beq.n	8004b94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b88:	4b53      	ldr	r3, [pc, #332]	; (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	4a52      	ldr	r2, [pc, #328]	; (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b8e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004b92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b94:	4b50      	ldr	r3, [pc, #320]	; (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	494d      	ldr	r1, [pc, #308]	; (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d040      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d107      	bne.n	8004bca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bba:	4b47      	ldr	r3, [pc, #284]	; (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d115      	bne.n	8004bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e07f      	b.n	8004cca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d107      	bne.n	8004be2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bd2:	4b41      	ldr	r3, [pc, #260]	; (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d109      	bne.n	8004bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e073      	b.n	8004cca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be2:	4b3d      	ldr	r3, [pc, #244]	; (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e06b      	b.n	8004cca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bf2:	4b39      	ldr	r3, [pc, #228]	; (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f023 0203 	bic.w	r2, r3, #3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	4936      	ldr	r1, [pc, #216]	; (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c04:	f7ff fa64 	bl	80040d0 <HAL_GetTick>
 8004c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c0a:	e00a      	b.n	8004c22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c0c:	f7ff fa60 	bl	80040d0 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e053      	b.n	8004cca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c22:	4b2d      	ldr	r3, [pc, #180]	; (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f003 020c 	and.w	r2, r3, #12
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d1eb      	bne.n	8004c0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c34:	4b27      	ldr	r3, [pc, #156]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d210      	bcs.n	8004c64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c42:	4b24      	ldr	r3, [pc, #144]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f023 0207 	bic.w	r2, r3, #7
 8004c4a:	4922      	ldr	r1, [pc, #136]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c52:	4b20      	ldr	r3, [pc, #128]	; (8004cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0307 	and.w	r3, r3, #7
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d001      	beq.n	8004c64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e032      	b.n	8004cca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d008      	beq.n	8004c82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c70:	4b19      	ldr	r3, [pc, #100]	; (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	4916      	ldr	r1, [pc, #88]	; (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0308 	and.w	r3, r3, #8
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d009      	beq.n	8004ca2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c8e:	4b12      	ldr	r3, [pc, #72]	; (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	00db      	lsls	r3, r3, #3
 8004c9c:	490e      	ldr	r1, [pc, #56]	; (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ca2:	f000 f821 	bl	8004ce8 <HAL_RCC_GetSysClockFreq>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	4b0b      	ldr	r3, [pc, #44]	; (8004cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	091b      	lsrs	r3, r3, #4
 8004cae:	f003 030f 	and.w	r3, r3, #15
 8004cb2:	490a      	ldr	r1, [pc, #40]	; (8004cdc <HAL_RCC_ClockConfig+0x1c8>)
 8004cb4:	5ccb      	ldrb	r3, [r1, r3]
 8004cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cba:	4a09      	ldr	r2, [pc, #36]	; (8004ce0 <HAL_RCC_ClockConfig+0x1cc>)
 8004cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004cbe:	4b09      	ldr	r3, [pc, #36]	; (8004ce4 <HAL_RCC_ClockConfig+0x1d0>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7ff f8ba 	bl	8003e3c <HAL_InitTick>

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	40022000 	.word	0x40022000
 8004cd8:	40021000 	.word	0x40021000
 8004cdc:	0800884c 	.word	0x0800884c
 8004ce0:	20000000 	.word	0x20000000
 8004ce4:	20000004 	.word	0x20000004

08004ce8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	60bb      	str	r3, [r7, #8]
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	617b      	str	r3, [r7, #20]
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004d02:	4b1e      	ldr	r3, [pc, #120]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x94>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f003 030c 	and.w	r3, r3, #12
 8004d0e:	2b04      	cmp	r3, #4
 8004d10:	d002      	beq.n	8004d18 <HAL_RCC_GetSysClockFreq+0x30>
 8004d12:	2b08      	cmp	r3, #8
 8004d14:	d003      	beq.n	8004d1e <HAL_RCC_GetSysClockFreq+0x36>
 8004d16:	e027      	b.n	8004d68 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d18:	4b19      	ldr	r3, [pc, #100]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d1a:	613b      	str	r3, [r7, #16]
      break;
 8004d1c:	e027      	b.n	8004d6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	0c9b      	lsrs	r3, r3, #18
 8004d22:	f003 030f 	and.w	r3, r3, #15
 8004d26:	4a17      	ldr	r2, [pc, #92]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004d28:	5cd3      	ldrb	r3, [r2, r3]
 8004d2a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d010      	beq.n	8004d58 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d36:	4b11      	ldr	r3, [pc, #68]	; (8004d7c <HAL_RCC_GetSysClockFreq+0x94>)
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	0c5b      	lsrs	r3, r3, #17
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	4a11      	ldr	r2, [pc, #68]	; (8004d88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004d42:	5cd3      	ldrb	r3, [r2, r3]
 8004d44:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a0d      	ldr	r2, [pc, #52]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d4a:	fb03 f202 	mul.w	r2, r3, r2
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d54:	617b      	str	r3, [r7, #20]
 8004d56:	e004      	b.n	8004d62 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a0c      	ldr	r2, [pc, #48]	; (8004d8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004d5c:	fb02 f303 	mul.w	r3, r2, r3
 8004d60:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	613b      	str	r3, [r7, #16]
      break;
 8004d66:	e002      	b.n	8004d6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d68:	4b05      	ldr	r3, [pc, #20]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d6a:	613b      	str	r3, [r7, #16]
      break;
 8004d6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d6e:	693b      	ldr	r3, [r7, #16]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	371c      	adds	r7, #28
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bc80      	pop	{r7}
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	007a1200 	.word	0x007a1200
 8004d84:	08008864 	.word	0x08008864
 8004d88:	08008874 	.word	0x08008874
 8004d8c:	003d0900 	.word	0x003d0900

08004d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d94:	4b02      	ldr	r3, [pc, #8]	; (8004da0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004d96:	681b      	ldr	r3, [r3, #0]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bc80      	pop	{r7}
 8004d9e:	4770      	bx	lr
 8004da0:	20000000 	.word	0x20000000

08004da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004da8:	f7ff fff2 	bl	8004d90 <HAL_RCC_GetHCLKFreq>
 8004dac:	4602      	mov	r2, r0
 8004dae:	4b05      	ldr	r3, [pc, #20]	; (8004dc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	0a1b      	lsrs	r3, r3, #8
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	4903      	ldr	r1, [pc, #12]	; (8004dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dba:	5ccb      	ldrb	r3, [r1, r3]
 8004dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	40021000 	.word	0x40021000
 8004dc8:	0800885c 	.word	0x0800885c

08004dcc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	220f      	movs	r2, #15
 8004dda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ddc:	4b11      	ldr	r3, [pc, #68]	; (8004e24 <HAL_RCC_GetClockConfig+0x58>)
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f003 0203 	and.w	r2, r3, #3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004de8:	4b0e      	ldr	r3, [pc, #56]	; (8004e24 <HAL_RCC_GetClockConfig+0x58>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004df4:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <HAL_RCC_GetClockConfig+0x58>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004e00:	4b08      	ldr	r3, [pc, #32]	; (8004e24 <HAL_RCC_GetClockConfig+0x58>)
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	08db      	lsrs	r3, r3, #3
 8004e06:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004e0e:	4b06      	ldr	r3, [pc, #24]	; (8004e28 <HAL_RCC_GetClockConfig+0x5c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0207 	and.w	r2, r3, #7
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bc80      	pop	{r7}
 8004e22:	4770      	bx	lr
 8004e24:	40021000 	.word	0x40021000
 8004e28:	40022000 	.word	0x40022000

08004e2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004e34:	4b0a      	ldr	r3, [pc, #40]	; (8004e60 <RCC_Delay+0x34>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a0a      	ldr	r2, [pc, #40]	; (8004e64 <RCC_Delay+0x38>)
 8004e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3e:	0a5b      	lsrs	r3, r3, #9
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	fb02 f303 	mul.w	r3, r2, r3
 8004e46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004e48:	bf00      	nop
  }
  while (Delay --);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	1e5a      	subs	r2, r3, #1
 8004e4e:	60fa      	str	r2, [r7, #12]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1f9      	bne.n	8004e48 <RCC_Delay+0x1c>
}
 8004e54:	bf00      	nop
 8004e56:	bf00      	nop
 8004e58:	3714      	adds	r7, #20
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bc80      	pop	{r7}
 8004e5e:	4770      	bx	lr
 8004e60:	20000000 	.word	0x20000000
 8004e64:	10624dd3 	.word	0x10624dd3

08004e68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e041      	b.n	8004efe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d106      	bne.n	8004e94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f839 	bl	8004f06 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2202      	movs	r2, #2
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3304      	adds	r3, #4
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	4610      	mov	r0, r2
 8004ea8:	f000 f9b4 	bl	8005214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b083      	sub	sp, #12
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004f0e:	bf00      	nop
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bc80      	pop	{r7}
 8004f16:	4770      	bx	lr

08004f18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d001      	beq.n	8004f30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e03a      	b.n	8004fa6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68da      	ldr	r2, [r3, #12]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0201 	orr.w	r2, r2, #1
 8004f46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a18      	ldr	r2, [pc, #96]	; (8004fb0 <HAL_TIM_Base_Start_IT+0x98>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d00e      	beq.n	8004f70 <HAL_TIM_Base_Start_IT+0x58>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f5a:	d009      	beq.n	8004f70 <HAL_TIM_Base_Start_IT+0x58>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a14      	ldr	r2, [pc, #80]	; (8004fb4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d004      	beq.n	8004f70 <HAL_TIM_Base_Start_IT+0x58>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a13      	ldr	r2, [pc, #76]	; (8004fb8 <HAL_TIM_Base_Start_IT+0xa0>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d111      	bne.n	8004f94 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f003 0307 	and.w	r3, r3, #7
 8004f7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2b06      	cmp	r3, #6
 8004f80:	d010      	beq.n	8004fa4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f042 0201 	orr.w	r2, r2, #1
 8004f90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f92:	e007      	b.n	8004fa4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f042 0201 	orr.w	r2, r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bc80      	pop	{r7}
 8004fae:	4770      	bx	lr
 8004fb0:	40012c00 	.word	0x40012c00
 8004fb4:	40000400 	.word	0x40000400
 8004fb8:	40000800 	.word	0x40000800

08004fbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d122      	bne.n	8005018 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d11b      	bne.n	8005018 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f06f 0202 	mvn.w	r2, #2
 8004fe8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	f003 0303 	and.w	r3, r3, #3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f8ed 	bl	80051de <HAL_TIM_IC_CaptureCallback>
 8005004:	e005      	b.n	8005012 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f8e0 	bl	80051cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 f8ef 	bl	80051f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	f003 0304 	and.w	r3, r3, #4
 8005022:	2b04      	cmp	r3, #4
 8005024:	d122      	bne.n	800506c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f003 0304 	and.w	r3, r3, #4
 8005030:	2b04      	cmp	r3, #4
 8005032:	d11b      	bne.n	800506c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f06f 0204 	mvn.w	r2, #4
 800503c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2202      	movs	r2, #2
 8005042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f8c3 	bl	80051de <HAL_TIM_IC_CaptureCallback>
 8005058:	e005      	b.n	8005066 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f8b6 	bl	80051cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f8c5 	bl	80051f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	2b08      	cmp	r3, #8
 8005078:	d122      	bne.n	80050c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f003 0308 	and.w	r3, r3, #8
 8005084:	2b08      	cmp	r3, #8
 8005086:	d11b      	bne.n	80050c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f06f 0208 	mvn.w	r2, #8
 8005090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2204      	movs	r2, #4
 8005096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	f003 0303 	and.w	r3, r3, #3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f899 	bl	80051de <HAL_TIM_IC_CaptureCallback>
 80050ac:	e005      	b.n	80050ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f88c 	bl	80051cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 f89b 	bl	80051f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	f003 0310 	and.w	r3, r3, #16
 80050ca:	2b10      	cmp	r3, #16
 80050cc:	d122      	bne.n	8005114 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f003 0310 	and.w	r3, r3, #16
 80050d8:	2b10      	cmp	r3, #16
 80050da:	d11b      	bne.n	8005114 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f06f 0210 	mvn.w	r2, #16
 80050e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2208      	movs	r2, #8
 80050ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f86f 	bl	80051de <HAL_TIM_IC_CaptureCallback>
 8005100:	e005      	b.n	800510e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f862 	bl	80051cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f871 	bl	80051f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b01      	cmp	r3, #1
 8005120:	d10e      	bne.n	8005140 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	2b01      	cmp	r3, #1
 800512e:	d107      	bne.n	8005140 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f06f 0201 	mvn.w	r2, #1
 8005138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7fe fdc6 	bl	8003ccc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800514a:	2b80      	cmp	r3, #128	; 0x80
 800514c:	d10e      	bne.n	800516c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005158:	2b80      	cmp	r3, #128	; 0x80
 800515a:	d107      	bne.n	800516c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f8bf 	bl	80052ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005176:	2b40      	cmp	r3, #64	; 0x40
 8005178:	d10e      	bne.n	8005198 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005184:	2b40      	cmp	r3, #64	; 0x40
 8005186:	d107      	bne.n	8005198 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f835 	bl	8005202 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	f003 0320 	and.w	r3, r3, #32
 80051a2:	2b20      	cmp	r3, #32
 80051a4:	d10e      	bne.n	80051c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f003 0320 	and.w	r3, r3, #32
 80051b0:	2b20      	cmp	r3, #32
 80051b2:	d107      	bne.n	80051c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f06f 0220 	mvn.w	r2, #32
 80051bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f88a 	bl	80052d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051c4:	bf00      	nop
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	bc80      	pop	{r7}
 80051dc:	4770      	bx	lr

080051de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051de:	b480      	push	{r7}
 80051e0:	b083      	sub	sp, #12
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051e6:	bf00      	nop
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bc80      	pop	{r7}
 80051ee:	4770      	bx	lr

080051f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bc80      	pop	{r7}
 8005200:	4770      	bx	lr

08005202 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005202:	b480      	push	{r7}
 8005204:	b083      	sub	sp, #12
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800520a:	bf00      	nop
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	bc80      	pop	{r7}
 8005212:	4770      	bx	lr

08005214 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a29      	ldr	r2, [pc, #164]	; (80052cc <TIM_Base_SetConfig+0xb8>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d00b      	beq.n	8005244 <TIM_Base_SetConfig+0x30>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005232:	d007      	beq.n	8005244 <TIM_Base_SetConfig+0x30>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a26      	ldr	r2, [pc, #152]	; (80052d0 <TIM_Base_SetConfig+0xbc>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d003      	beq.n	8005244 <TIM_Base_SetConfig+0x30>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a25      	ldr	r2, [pc, #148]	; (80052d4 <TIM_Base_SetConfig+0xc0>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d108      	bne.n	8005256 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800524a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	4313      	orrs	r3, r2
 8005254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a1c      	ldr	r2, [pc, #112]	; (80052cc <TIM_Base_SetConfig+0xb8>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d00b      	beq.n	8005276 <TIM_Base_SetConfig+0x62>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005264:	d007      	beq.n	8005276 <TIM_Base_SetConfig+0x62>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a19      	ldr	r2, [pc, #100]	; (80052d0 <TIM_Base_SetConfig+0xbc>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d003      	beq.n	8005276 <TIM_Base_SetConfig+0x62>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a18      	ldr	r2, [pc, #96]	; (80052d4 <TIM_Base_SetConfig+0xc0>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d108      	bne.n	8005288 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800527c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	4313      	orrs	r3, r2
 8005286:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	4313      	orrs	r3, r2
 8005294:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	689a      	ldr	r2, [r3, #8]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a07      	ldr	r2, [pc, #28]	; (80052cc <TIM_Base_SetConfig+0xb8>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d103      	bne.n	80052bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	691a      	ldr	r2, [r3, #16]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	615a      	str	r2, [r3, #20]
}
 80052c2:	bf00      	nop
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bc80      	pop	{r7}
 80052ca:	4770      	bx	lr
 80052cc:	40012c00 	.word	0x40012c00
 80052d0:	40000400 	.word	0x40000400
 80052d4:	40000800 	.word	0x40000800

080052d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bc80      	pop	{r7}
 80052e8:	4770      	bx	lr

080052ea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b083      	sub	sp, #12
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052f2:	bf00      	nop
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bc80      	pop	{r7}
 80052fa:	4770      	bx	lr

080052fc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005302:	f3ef 8305 	mrs	r3, IPSR
 8005306:	60bb      	str	r3, [r7, #8]
  return(result);
 8005308:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800530a:	2b00      	cmp	r3, #0
 800530c:	d10f      	bne.n	800532e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800530e:	f3ef 8310 	mrs	r3, PRIMASK
 8005312:	607b      	str	r3, [r7, #4]
  return(result);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d109      	bne.n	800532e <osKernelInitialize+0x32>
 800531a:	4b10      	ldr	r3, [pc, #64]	; (800535c <osKernelInitialize+0x60>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2b02      	cmp	r3, #2
 8005320:	d109      	bne.n	8005336 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005322:	f3ef 8311 	mrs	r3, BASEPRI
 8005326:	603b      	str	r3, [r7, #0]
  return(result);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d003      	beq.n	8005336 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800532e:	f06f 0305 	mvn.w	r3, #5
 8005332:	60fb      	str	r3, [r7, #12]
 8005334:	e00c      	b.n	8005350 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005336:	4b09      	ldr	r3, [pc, #36]	; (800535c <osKernelInitialize+0x60>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d105      	bne.n	800534a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800533e:	4b07      	ldr	r3, [pc, #28]	; (800535c <osKernelInitialize+0x60>)
 8005340:	2201      	movs	r2, #1
 8005342:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005344:	2300      	movs	r3, #0
 8005346:	60fb      	str	r3, [r7, #12]
 8005348:	e002      	b.n	8005350 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800534a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800534e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005350:	68fb      	ldr	r3, [r7, #12]
}
 8005352:	4618      	mov	r0, r3
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	bc80      	pop	{r7}
 800535a:	4770      	bx	lr
 800535c:	20000750 	.word	0x20000750

08005360 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005366:	f3ef 8305 	mrs	r3, IPSR
 800536a:	60bb      	str	r3, [r7, #8]
  return(result);
 800536c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10f      	bne.n	8005392 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005372:	f3ef 8310 	mrs	r3, PRIMASK
 8005376:	607b      	str	r3, [r7, #4]
  return(result);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d109      	bne.n	8005392 <osKernelStart+0x32>
 800537e:	4b11      	ldr	r3, [pc, #68]	; (80053c4 <osKernelStart+0x64>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2b02      	cmp	r3, #2
 8005384:	d109      	bne.n	800539a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005386:	f3ef 8311 	mrs	r3, BASEPRI
 800538a:	603b      	str	r3, [r7, #0]
  return(result);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <osKernelStart+0x3a>
    stat = osErrorISR;
 8005392:	f06f 0305 	mvn.w	r3, #5
 8005396:	60fb      	str	r3, [r7, #12]
 8005398:	e00e      	b.n	80053b8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800539a:	4b0a      	ldr	r3, [pc, #40]	; (80053c4 <osKernelStart+0x64>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d107      	bne.n	80053b2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80053a2:	4b08      	ldr	r3, [pc, #32]	; (80053c4 <osKernelStart+0x64>)
 80053a4:	2202      	movs	r2, #2
 80053a6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80053a8:	f001 f952 	bl	8006650 <vTaskStartScheduler>
      stat = osOK;
 80053ac:	2300      	movs	r3, #0
 80053ae:	60fb      	str	r3, [r7, #12]
 80053b0:	e002      	b.n	80053b8 <osKernelStart+0x58>
    } else {
      stat = osError;
 80053b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80053b8:	68fb      	ldr	r3, [r7, #12]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	20000750 	.word	0x20000750

080053c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b092      	sub	sp, #72	; 0x48
 80053cc:	af04      	add	r7, sp, #16
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80053d4:	2300      	movs	r3, #0
 80053d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053d8:	f3ef 8305 	mrs	r3, IPSR
 80053dc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f040 8094 	bne.w	800550e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053e6:	f3ef 8310 	mrs	r3, PRIMASK
 80053ea:	623b      	str	r3, [r7, #32]
  return(result);
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	f040 808d 	bne.w	800550e <osThreadNew+0x146>
 80053f4:	4b48      	ldr	r3, [pc, #288]	; (8005518 <osThreadNew+0x150>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d106      	bne.n	800540a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053fc:	f3ef 8311 	mrs	r3, BASEPRI
 8005400:	61fb      	str	r3, [r7, #28]
  return(result);
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	2b00      	cmp	r3, #0
 8005406:	f040 8082 	bne.w	800550e <osThreadNew+0x146>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d07e      	beq.n	800550e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005410:	2380      	movs	r3, #128	; 0x80
 8005412:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005414:	2318      	movs	r3, #24
 8005416:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005418:	2300      	movs	r3, #0
 800541a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800541c:	f107 031b 	add.w	r3, r7, #27
 8005420:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005422:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005426:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d045      	beq.n	80054ba <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d002      	beq.n	800543c <osThreadNew+0x74>
        name = attr->name;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d002      	beq.n	800544a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800544a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544c:	2b00      	cmp	r3, #0
 800544e:	d008      	beq.n	8005462 <osThreadNew+0x9a>
 8005450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005452:	2b38      	cmp	r3, #56	; 0x38
 8005454:	d805      	bhi.n	8005462 <osThreadNew+0x9a>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <osThreadNew+0x9e>
        return (NULL);
 8005462:	2300      	movs	r3, #0
 8005464:	e054      	b.n	8005510 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	089b      	lsrs	r3, r3, #2
 8005474:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00e      	beq.n	800549c <osThreadNew+0xd4>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	2b5b      	cmp	r3, #91	; 0x5b
 8005484:	d90a      	bls.n	800549c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800548a:	2b00      	cmp	r3, #0
 800548c:	d006      	beq.n	800549c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d002      	beq.n	800549c <osThreadNew+0xd4>
        mem = 1;
 8005496:	2301      	movs	r3, #1
 8005498:	62bb      	str	r3, [r7, #40]	; 0x28
 800549a:	e010      	b.n	80054be <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10c      	bne.n	80054be <osThreadNew+0xf6>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d108      	bne.n	80054be <osThreadNew+0xf6>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d104      	bne.n	80054be <osThreadNew+0xf6>
          mem = 0;
 80054b4:	2300      	movs	r3, #0
 80054b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80054b8:	e001      	b.n	80054be <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80054ba:	2300      	movs	r3, #0
 80054bc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80054be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d110      	bne.n	80054e6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80054cc:	9202      	str	r2, [sp, #8]
 80054ce:	9301      	str	r3, [sp, #4]
 80054d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d2:	9300      	str	r3, [sp, #0]
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 feec 	bl	80062b8 <xTaskCreateStatic>
 80054e0:	4603      	mov	r3, r0
 80054e2:	617b      	str	r3, [r7, #20]
 80054e4:	e013      	b.n	800550e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80054e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d110      	bne.n	800550e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80054ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	f107 0314 	add.w	r3, r7, #20
 80054f4:	9301      	str	r3, [sp, #4]
 80054f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f000 ff36 	bl	8006370 <xTaskCreate>
 8005504:	4603      	mov	r3, r0
 8005506:	2b01      	cmp	r3, #1
 8005508:	d001      	beq.n	800550e <osThreadNew+0x146>
          hTask = NULL;
 800550a:	2300      	movs	r3, #0
 800550c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800550e:	697b      	ldr	r3, [r7, #20]
}
 8005510:	4618      	mov	r0, r3
 8005512:	3738      	adds	r7, #56	; 0x38
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	20000750 	.word	0x20000750

0800551c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005524:	f3ef 8305 	mrs	r3, IPSR
 8005528:	613b      	str	r3, [r7, #16]
  return(result);
 800552a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10f      	bne.n	8005550 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005530:	f3ef 8310 	mrs	r3, PRIMASK
 8005534:	60fb      	str	r3, [r7, #12]
  return(result);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d109      	bne.n	8005550 <osDelay+0x34>
 800553c:	4b0d      	ldr	r3, [pc, #52]	; (8005574 <osDelay+0x58>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2b02      	cmp	r3, #2
 8005542:	d109      	bne.n	8005558 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005544:	f3ef 8311 	mrs	r3, BASEPRI
 8005548:	60bb      	str	r3, [r7, #8]
  return(result);
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d003      	beq.n	8005558 <osDelay+0x3c>
    stat = osErrorISR;
 8005550:	f06f 0305 	mvn.w	r3, #5
 8005554:	617b      	str	r3, [r7, #20]
 8005556:	e007      	b.n	8005568 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005558:	2300      	movs	r3, #0
 800555a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d002      	beq.n	8005568 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f001 f840 	bl	80065e8 <vTaskDelay>
    }
  }

  return (stat);
 8005568:	697b      	ldr	r3, [r7, #20]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3718      	adds	r7, #24
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	20000750 	.word	0x20000750

08005578 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f002 f933 	bl	80077ec <pvTimerGetTimerID>
 8005586:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d005      	beq.n	800559a <TimerCallback+0x22>
    callb->func (callb->arg);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	6852      	ldr	r2, [r2, #4]
 8005596:	4610      	mov	r0, r2
 8005598:	4798      	blx	r3
  }
}
 800559a:	bf00      	nop
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
	...

080055a4 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b08e      	sub	sp, #56	; 0x38
 80055a8:	af02      	add	r7, sp, #8
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	607a      	str	r2, [r7, #4]
 80055ae:	603b      	str	r3, [r7, #0]
 80055b0:	460b      	mov	r3, r1
 80055b2:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80055b4:	2300      	movs	r3, #0
 80055b6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055b8:	f3ef 8305 	mrs	r3, IPSR
 80055bc:	61bb      	str	r3, [r7, #24]
  return(result);
 80055be:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d16a      	bne.n	800569a <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055c4:	f3ef 8310 	mrs	r3, PRIMASK
 80055c8:	617b      	str	r3, [r7, #20]
  return(result);
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d164      	bne.n	800569a <osTimerNew+0xf6>
 80055d0:	4b34      	ldr	r3, [pc, #208]	; (80056a4 <osTimerNew+0x100>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d105      	bne.n	80055e4 <osTimerNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80055d8:	f3ef 8311 	mrs	r3, BASEPRI
 80055dc:	613b      	str	r3, [r7, #16]
  return(result);
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d15a      	bne.n	800569a <osTimerNew+0xf6>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d057      	beq.n	800569a <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80055ea:	2008      	movs	r0, #8
 80055ec:	f002 fb0e 	bl	8007c0c <pvPortMalloc>
 80055f0:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d050      	beq.n	800569a <osTimerNew+0xf6>
      callb->func = func;
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8005604:	7afb      	ldrb	r3, [r7, #11]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d102      	bne.n	8005610 <osTimerNew+0x6c>
        reload = pdFALSE;
 800560a:	2300      	movs	r3, #0
 800560c:	627b      	str	r3, [r7, #36]	; 0x24
 800560e:	e001      	b.n	8005614 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8005610:	2301      	movs	r3, #1
 8005612:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8005614:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005618:	623b      	str	r3, [r7, #32]
      name = NULL;
 800561a:	2300      	movs	r3, #0
 800561c:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d01c      	beq.n	800565e <osTimerNew+0xba>
        if (attr->name != NULL) {
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d002      	beq.n	8005632 <osTimerNew+0x8e>
          name = attr->name;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d006      	beq.n	8005648 <osTimerNew+0xa4>
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	2b2f      	cmp	r3, #47	; 0x2f
 8005640:	d902      	bls.n	8005648 <osTimerNew+0xa4>
          mem = 1;
 8005642:	2301      	movs	r3, #1
 8005644:	623b      	str	r3, [r7, #32]
 8005646:	e00c      	b.n	8005662 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d108      	bne.n	8005662 <osTimerNew+0xbe>
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d104      	bne.n	8005662 <osTimerNew+0xbe>
            mem = 0;
 8005658:	2300      	movs	r3, #0
 800565a:	623b      	str	r3, [r7, #32]
 800565c:	e001      	b.n	8005662 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800565e:	2300      	movs	r3, #0
 8005660:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d10c      	bne.n	8005682 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	9301      	str	r3, [sp, #4]
 800566e:	4b0e      	ldr	r3, [pc, #56]	; (80056a8 <osTimerNew+0x104>)
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005676:	2101      	movs	r1, #1
 8005678:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800567a:	f001 fd7e 	bl	800717a <xTimerCreateStatic>
 800567e:	62b8      	str	r0, [r7, #40]	; 0x28
 8005680:	e00b      	b.n	800569a <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d108      	bne.n	800569a <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8005688:	4b07      	ldr	r3, [pc, #28]	; (80056a8 <osTimerNew+0x104>)
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005690:	2101      	movs	r1, #1
 8005692:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005694:	f001 fd50 	bl	8007138 <xTimerCreate>
 8005698:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800569a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800569c:	4618      	mov	r0, r3
 800569e:	3730      	adds	r7, #48	; 0x30
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	20000750 	.word	0x20000750
 80056a8:	08005579 	.word	0x08005579

080056ac <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b08a      	sub	sp, #40	; 0x28
 80056b0:	af02      	add	r7, sp, #8
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056ba:	f3ef 8305 	mrs	r3, IPSR
 80056be:	617b      	str	r3, [r7, #20]
  return(result);
 80056c0:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10f      	bne.n	80056e6 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056c6:	f3ef 8310 	mrs	r3, PRIMASK
 80056ca:	613b      	str	r3, [r7, #16]
  return(result);
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d109      	bne.n	80056e6 <osTimerStart+0x3a>
 80056d2:	4b15      	ldr	r3, [pc, #84]	; (8005728 <osTimerStart+0x7c>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d109      	bne.n	80056ee <osTimerStart+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80056da:	f3ef 8311 	mrs	r3, BASEPRI
 80056de:	60fb      	str	r3, [r7, #12]
  return(result);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d003      	beq.n	80056ee <osTimerStart+0x42>
    stat = osErrorISR;
 80056e6:	f06f 0305 	mvn.w	r3, #5
 80056ea:	61fb      	str	r3, [r7, #28]
 80056ec:	e017      	b.n	800571e <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d103      	bne.n	80056fc <osTimerStart+0x50>
    stat = osErrorParameter;
 80056f4:	f06f 0303 	mvn.w	r3, #3
 80056f8:	61fb      	str	r3, [r7, #28]
 80056fa:	e010      	b.n	800571e <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80056fc:	2300      	movs	r3, #0
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	2300      	movs	r3, #0
 8005702:	683a      	ldr	r2, [r7, #0]
 8005704:	2104      	movs	r1, #4
 8005706:	69b8      	ldr	r0, [r7, #24]
 8005708:	f001 fda6 	bl	8007258 <xTimerGenericCommand>
 800570c:	4603      	mov	r3, r0
 800570e:	2b01      	cmp	r3, #1
 8005710:	d102      	bne.n	8005718 <osTimerStart+0x6c>
      stat = osOK;
 8005712:	2300      	movs	r3, #0
 8005714:	61fb      	str	r3, [r7, #28]
 8005716:	e002      	b.n	800571e <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 8005718:	f06f 0302 	mvn.w	r3, #2
 800571c:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 800571e:	69fb      	ldr	r3, [r7, #28]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3720      	adds	r7, #32
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	20000750 	.word	0x20000750

0800572c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	4a06      	ldr	r2, [pc, #24]	; (8005754 <vApplicationGetIdleTaskMemory+0x28>)
 800573c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	4a05      	ldr	r2, [pc, #20]	; (8005758 <vApplicationGetIdleTaskMemory+0x2c>)
 8005742:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2280      	movs	r2, #128	; 0x80
 8005748:	601a      	str	r2, [r3, #0]
}
 800574a:	bf00      	nop
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	bc80      	pop	{r7}
 8005752:	4770      	bx	lr
 8005754:	20000754 	.word	0x20000754
 8005758:	200007b0 	.word	0x200007b0

0800575c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	4a07      	ldr	r2, [pc, #28]	; (8005788 <vApplicationGetTimerTaskMemory+0x2c>)
 800576c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	4a06      	ldr	r2, [pc, #24]	; (800578c <vApplicationGetTimerTaskMemory+0x30>)
 8005772:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f44f 7280 	mov.w	r2, #256	; 0x100
 800577a:	601a      	str	r2, [r3, #0]
}
 800577c:	bf00      	nop
 800577e:	3714      	adds	r7, #20
 8005780:	46bd      	mov	sp, r7
 8005782:	bc80      	pop	{r7}
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	200009b0 	.word	0x200009b0
 800578c:	20000a0c 	.word	0x20000a0c

08005790 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f103 0208 	add.w	r2, r3, #8
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f103 0208 	add.w	r2, r3, #8
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f103 0208 	add.w	r2, r3, #8
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bc80      	pop	{r7}
 80057cc:	4770      	bx	lr

080057ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80057ce:	b480      	push	{r7}
 80057d0:	b083      	sub	sp, #12
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bc80      	pop	{r7}
 80057e4:	4770      	bx	lr

080057e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057e6:	b480      	push	{r7}
 80057e8:	b085      	sub	sp, #20
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
 80057ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	683a      	ldr	r2, [r7, #0]
 800580a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	1c5a      	adds	r2, r3, #1
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	601a      	str	r2, [r3, #0]
}
 8005822:	bf00      	nop
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	bc80      	pop	{r7}
 800582a:	4770      	bx	lr

0800582c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005842:	d103      	bne.n	800584c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	60fb      	str	r3, [r7, #12]
 800584a:	e00c      	b.n	8005866 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	3308      	adds	r3, #8
 8005850:	60fb      	str	r3, [r7, #12]
 8005852:	e002      	b.n	800585a <vListInsert+0x2e>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	60fb      	str	r3, [r7, #12]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	429a      	cmp	r2, r3
 8005864:	d2f6      	bcs.n	8005854 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	683a      	ldr	r2, [r7, #0]
 8005880:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	1c5a      	adds	r2, r3, #1
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	601a      	str	r2, [r3, #0]
}
 8005892:	bf00      	nop
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	bc80      	pop	{r7}
 800589a:	4770      	bx	lr

0800589c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	6892      	ldr	r2, [r2, #8]
 80058b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	6852      	ldr	r2, [r2, #4]
 80058bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d103      	bne.n	80058d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689a      	ldr	r2, [r3, #8]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	1e5a      	subs	r2, r3, #1
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3714      	adds	r7, #20
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bc80      	pop	{r7}
 80058ec:	4770      	bx	lr
	...

080058f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10a      	bne.n	800591a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005916:	bf00      	nop
 8005918:	e7fe      	b.n	8005918 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800591a:	f002 f877 	bl	8007a0c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005926:	68f9      	ldr	r1, [r7, #12]
 8005928:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800592a:	fb01 f303 	mul.w	r3, r1, r3
 800592e:	441a      	add	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594a:	3b01      	subs	r3, #1
 800594c:	68f9      	ldr	r1, [r7, #12]
 800594e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005950:	fb01 f303 	mul.w	r3, r1, r3
 8005954:	441a      	add	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	22ff      	movs	r2, #255	; 0xff
 800595e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	22ff      	movs	r2, #255	; 0xff
 8005966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d114      	bne.n	800599a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d01a      	beq.n	80059ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	3310      	adds	r3, #16
 800597c:	4618      	mov	r0, r3
 800597e:	f001 f8f1 	bl	8006b64 <xTaskRemoveFromEventList>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d012      	beq.n	80059ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005988:	4b0c      	ldr	r3, [pc, #48]	; (80059bc <xQueueGenericReset+0xcc>)
 800598a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800598e:	601a      	str	r2, [r3, #0]
 8005990:	f3bf 8f4f 	dsb	sy
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	e009      	b.n	80059ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	3310      	adds	r3, #16
 800599e:	4618      	mov	r0, r3
 80059a0:	f7ff fef6 	bl	8005790 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	3324      	adds	r3, #36	; 0x24
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7ff fef1 	bl	8005790 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80059ae:	f002 f85d 	bl	8007a6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80059b2:	2301      	movs	r3, #1
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	e000ed04 	.word	0xe000ed04

080059c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b08e      	sub	sp, #56	; 0x38
 80059c4:	af02      	add	r7, sp, #8
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
 80059cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10a      	bne.n	80059ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80059d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d8:	f383 8811 	msr	BASEPRI, r3
 80059dc:	f3bf 8f6f 	isb	sy
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80059e6:	bf00      	nop
 80059e8:	e7fe      	b.n	80059e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10a      	bne.n	8005a06 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80059f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f4:	f383 8811 	msr	BASEPRI, r3
 80059f8:	f3bf 8f6f 	isb	sy
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a02:	bf00      	nop
 8005a04:	e7fe      	b.n	8005a04 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d002      	beq.n	8005a12 <xQueueGenericCreateStatic+0x52>
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d001      	beq.n	8005a16 <xQueueGenericCreateStatic+0x56>
 8005a12:	2301      	movs	r3, #1
 8005a14:	e000      	b.n	8005a18 <xQueueGenericCreateStatic+0x58>
 8005a16:	2300      	movs	r3, #0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10a      	bne.n	8005a32 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a20:	f383 8811 	msr	BASEPRI, r3
 8005a24:	f3bf 8f6f 	isb	sy
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	623b      	str	r3, [r7, #32]
}
 8005a2e:	bf00      	nop
 8005a30:	e7fe      	b.n	8005a30 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d102      	bne.n	8005a3e <xQueueGenericCreateStatic+0x7e>
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <xQueueGenericCreateStatic+0x82>
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e000      	b.n	8005a44 <xQueueGenericCreateStatic+0x84>
 8005a42:	2300      	movs	r3, #0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d10a      	bne.n	8005a5e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4c:	f383 8811 	msr	BASEPRI, r3
 8005a50:	f3bf 8f6f 	isb	sy
 8005a54:	f3bf 8f4f 	dsb	sy
 8005a58:	61fb      	str	r3, [r7, #28]
}
 8005a5a:	bf00      	nop
 8005a5c:	e7fe      	b.n	8005a5c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a5e:	2350      	movs	r3, #80	; 0x50
 8005a60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	2b50      	cmp	r3, #80	; 0x50
 8005a66:	d00a      	beq.n	8005a7e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6c:	f383 8811 	msr	BASEPRI, r3
 8005a70:	f3bf 8f6f 	isb	sy
 8005a74:	f3bf 8f4f 	dsb	sy
 8005a78:	61bb      	str	r3, [r7, #24]
}
 8005a7a:	bf00      	nop
 8005a7c:	e7fe      	b.n	8005a7c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00d      	beq.n	8005aa4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a90:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	4613      	mov	r3, r2
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	68b9      	ldr	r1, [r7, #8]
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f000 f805 	bl	8005aae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3730      	adds	r7, #48	; 0x30
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b084      	sub	sp, #16
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	60f8      	str	r0, [r7, #12]
 8005ab6:	60b9      	str	r1, [r7, #8]
 8005ab8:	607a      	str	r2, [r7, #4]
 8005aba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d103      	bne.n	8005aca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	601a      	str	r2, [r3, #0]
 8005ac8:	e002      	b.n	8005ad0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005adc:	2101      	movs	r1, #1
 8005ade:	69b8      	ldr	r0, [r7, #24]
 8005ae0:	f7ff ff06 	bl	80058f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	78fa      	ldrb	r2, [r7, #3]
 8005ae8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005aec:	bf00      	nop
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b08e      	sub	sp, #56	; 0x38
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
 8005b00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005b02:	2300      	movs	r3, #0
 8005b04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10a      	bne.n	8005b26 <xQueueGenericSend+0x32>
	__asm volatile
 8005b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b22:	bf00      	nop
 8005b24:	e7fe      	b.n	8005b24 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d103      	bne.n	8005b34 <xQueueGenericSend+0x40>
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d101      	bne.n	8005b38 <xQueueGenericSend+0x44>
 8005b34:	2301      	movs	r3, #1
 8005b36:	e000      	b.n	8005b3a <xQueueGenericSend+0x46>
 8005b38:	2300      	movs	r3, #0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10a      	bne.n	8005b54 <xQueueGenericSend+0x60>
	__asm volatile
 8005b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b42:	f383 8811 	msr	BASEPRI, r3
 8005b46:	f3bf 8f6f 	isb	sy
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b50:	bf00      	nop
 8005b52:	e7fe      	b.n	8005b52 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d103      	bne.n	8005b62 <xQueueGenericSend+0x6e>
 8005b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d101      	bne.n	8005b66 <xQueueGenericSend+0x72>
 8005b62:	2301      	movs	r3, #1
 8005b64:	e000      	b.n	8005b68 <xQueueGenericSend+0x74>
 8005b66:	2300      	movs	r3, #0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10a      	bne.n	8005b82 <xQueueGenericSend+0x8e>
	__asm volatile
 8005b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b70:	f383 8811 	msr	BASEPRI, r3
 8005b74:	f3bf 8f6f 	isb	sy
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	623b      	str	r3, [r7, #32]
}
 8005b7e:	bf00      	nop
 8005b80:	e7fe      	b.n	8005b80 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b82:	f001 f9b1 	bl	8006ee8 <xTaskGetSchedulerState>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d102      	bne.n	8005b92 <xQueueGenericSend+0x9e>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <xQueueGenericSend+0xa2>
 8005b92:	2301      	movs	r3, #1
 8005b94:	e000      	b.n	8005b98 <xQueueGenericSend+0xa4>
 8005b96:	2300      	movs	r3, #0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10a      	bne.n	8005bb2 <xQueueGenericSend+0xbe>
	__asm volatile
 8005b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba0:	f383 8811 	msr	BASEPRI, r3
 8005ba4:	f3bf 8f6f 	isb	sy
 8005ba8:	f3bf 8f4f 	dsb	sy
 8005bac:	61fb      	str	r3, [r7, #28]
}
 8005bae:	bf00      	nop
 8005bb0:	e7fe      	b.n	8005bb0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005bb2:	f001 ff2b 	bl	8007a0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d302      	bcc.n	8005bc8 <xQueueGenericSend+0xd4>
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d129      	bne.n	8005c1c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	68b9      	ldr	r1, [r7, #8]
 8005bcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bce:	f000 fa07 	bl	8005fe0 <prvCopyDataToQueue>
 8005bd2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d010      	beq.n	8005bfe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bde:	3324      	adds	r3, #36	; 0x24
 8005be0:	4618      	mov	r0, r3
 8005be2:	f000 ffbf 	bl	8006b64 <xTaskRemoveFromEventList>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d013      	beq.n	8005c14 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005bec:	4b3f      	ldr	r3, [pc, #252]	; (8005cec <xQueueGenericSend+0x1f8>)
 8005bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bf2:	601a      	str	r2, [r3, #0]
 8005bf4:	f3bf 8f4f 	dsb	sy
 8005bf8:	f3bf 8f6f 	isb	sy
 8005bfc:	e00a      	b.n	8005c14 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d007      	beq.n	8005c14 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005c04:	4b39      	ldr	r3, [pc, #228]	; (8005cec <xQueueGenericSend+0x1f8>)
 8005c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	f3bf 8f4f 	dsb	sy
 8005c10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005c14:	f001 ff2a 	bl	8007a6c <vPortExitCritical>
				return pdPASS;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e063      	b.n	8005ce4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d103      	bne.n	8005c2a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c22:	f001 ff23 	bl	8007a6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005c26:	2300      	movs	r3, #0
 8005c28:	e05c      	b.n	8005ce4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d106      	bne.n	8005c3e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c30:	f107 0314 	add.w	r3, r7, #20
 8005c34:	4618      	mov	r0, r3
 8005c36:	f000 fff9 	bl	8006c2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c3e:	f001 ff15 	bl	8007a6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c42:	f000 fd6b 	bl	800671c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c46:	f001 fee1 	bl	8007a0c <vPortEnterCritical>
 8005c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c50:	b25b      	sxtb	r3, r3
 8005c52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c56:	d103      	bne.n	8005c60 <xQueueGenericSend+0x16c>
 8005c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c66:	b25b      	sxtb	r3, r3
 8005c68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c6c:	d103      	bne.n	8005c76 <xQueueGenericSend+0x182>
 8005c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c76:	f001 fef9 	bl	8007a6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c7a:	1d3a      	adds	r2, r7, #4
 8005c7c:	f107 0314 	add.w	r3, r7, #20
 8005c80:	4611      	mov	r1, r2
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 ffe8 	bl	8006c58 <xTaskCheckForTimeOut>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d124      	bne.n	8005cd8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005c8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c90:	f000 fa9e 	bl	80061d0 <prvIsQueueFull>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d018      	beq.n	8005ccc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9c:	3310      	adds	r3, #16
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	4611      	mov	r1, r2
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f000 ff0e 	bl	8006ac4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ca8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005caa:	f000 fa29 	bl	8006100 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005cae:	f000 fd43 	bl	8006738 <xTaskResumeAll>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f47f af7c 	bne.w	8005bb2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005cba:	4b0c      	ldr	r3, [pc, #48]	; (8005cec <xQueueGenericSend+0x1f8>)
 8005cbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cc0:	601a      	str	r2, [r3, #0]
 8005cc2:	f3bf 8f4f 	dsb	sy
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	e772      	b.n	8005bb2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ccc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cce:	f000 fa17 	bl	8006100 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cd2:	f000 fd31 	bl	8006738 <xTaskResumeAll>
 8005cd6:	e76c      	b.n	8005bb2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005cd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cda:	f000 fa11 	bl	8006100 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cde:	f000 fd2b 	bl	8006738 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005ce2:	2300      	movs	r3, #0
		}
	}
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3738      	adds	r7, #56	; 0x38
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	e000ed04 	.word	0xe000ed04

08005cf0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b08e      	sub	sp, #56	; 0x38
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
 8005cfc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10a      	bne.n	8005d1e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0c:	f383 8811 	msr	BASEPRI, r3
 8005d10:	f3bf 8f6f 	isb	sy
 8005d14:	f3bf 8f4f 	dsb	sy
 8005d18:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d1a:	bf00      	nop
 8005d1c:	e7fe      	b.n	8005d1c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d103      	bne.n	8005d2c <xQueueGenericSendFromISR+0x3c>
 8005d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <xQueueGenericSendFromISR+0x40>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e000      	b.n	8005d32 <xQueueGenericSendFromISR+0x42>
 8005d30:	2300      	movs	r3, #0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10a      	bne.n	8005d4c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3a:	f383 8811 	msr	BASEPRI, r3
 8005d3e:	f3bf 8f6f 	isb	sy
 8005d42:	f3bf 8f4f 	dsb	sy
 8005d46:	623b      	str	r3, [r7, #32]
}
 8005d48:	bf00      	nop
 8005d4a:	e7fe      	b.n	8005d4a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d103      	bne.n	8005d5a <xQueueGenericSendFromISR+0x6a>
 8005d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d101      	bne.n	8005d5e <xQueueGenericSendFromISR+0x6e>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e000      	b.n	8005d60 <xQueueGenericSendFromISR+0x70>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10a      	bne.n	8005d7a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d68:	f383 8811 	msr	BASEPRI, r3
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	61fb      	str	r3, [r7, #28]
}
 8005d76:	bf00      	nop
 8005d78:	e7fe      	b.n	8005d78 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d7a:	f001 ff09 	bl	8007b90 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005d7e:	f3ef 8211 	mrs	r2, BASEPRI
 8005d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d86:	f383 8811 	msr	BASEPRI, r3
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	61ba      	str	r2, [r7, #24]
 8005d94:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005d96:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d302      	bcc.n	8005dac <xQueueGenericSendFromISR+0xbc>
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d12c      	bne.n	8005e06 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	68b9      	ldr	r1, [r7, #8]
 8005dba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dbc:	f000 f910 	bl	8005fe0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005dc0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005dc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dc8:	d112      	bne.n	8005df0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d016      	beq.n	8005e00 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd4:	3324      	adds	r3, #36	; 0x24
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 fec4 	bl	8006b64 <xTaskRemoveFromEventList>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00e      	beq.n	8005e00 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00b      	beq.n	8005e00 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	601a      	str	r2, [r3, #0]
 8005dee:	e007      	b.n	8005e00 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005df0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005df4:	3301      	adds	r3, #1
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	b25a      	sxtb	r2, r3
 8005dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005e00:	2301      	movs	r3, #1
 8005e02:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005e04:	e001      	b.n	8005e0a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e06:	2300      	movs	r3, #0
 8005e08:	637b      	str	r3, [r7, #52]	; 0x34
 8005e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005e14:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3738      	adds	r7, #56	; 0x38
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b08c      	sub	sp, #48	; 0x30
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10a      	bne.n	8005e50 <xQueueReceive+0x30>
	__asm volatile
 8005e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3e:	f383 8811 	msr	BASEPRI, r3
 8005e42:	f3bf 8f6f 	isb	sy
 8005e46:	f3bf 8f4f 	dsb	sy
 8005e4a:	623b      	str	r3, [r7, #32]
}
 8005e4c:	bf00      	nop
 8005e4e:	e7fe      	b.n	8005e4e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d103      	bne.n	8005e5e <xQueueReceive+0x3e>
 8005e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d101      	bne.n	8005e62 <xQueueReceive+0x42>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e000      	b.n	8005e64 <xQueueReceive+0x44>
 8005e62:	2300      	movs	r3, #0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10a      	bne.n	8005e7e <xQueueReceive+0x5e>
	__asm volatile
 8005e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6c:	f383 8811 	msr	BASEPRI, r3
 8005e70:	f3bf 8f6f 	isb	sy
 8005e74:	f3bf 8f4f 	dsb	sy
 8005e78:	61fb      	str	r3, [r7, #28]
}
 8005e7a:	bf00      	nop
 8005e7c:	e7fe      	b.n	8005e7c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e7e:	f001 f833 	bl	8006ee8 <xTaskGetSchedulerState>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d102      	bne.n	8005e8e <xQueueReceive+0x6e>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <xQueueReceive+0x72>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e000      	b.n	8005e94 <xQueueReceive+0x74>
 8005e92:	2300      	movs	r3, #0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10a      	bne.n	8005eae <xQueueReceive+0x8e>
	__asm volatile
 8005e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9c:	f383 8811 	msr	BASEPRI, r3
 8005ea0:	f3bf 8f6f 	isb	sy
 8005ea4:	f3bf 8f4f 	dsb	sy
 8005ea8:	61bb      	str	r3, [r7, #24]
}
 8005eaa:	bf00      	nop
 8005eac:	e7fe      	b.n	8005eac <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005eae:	f001 fdad 	bl	8007a0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d01f      	beq.n	8005efe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ebe:	68b9      	ldr	r1, [r7, #8]
 8005ec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ec2:	f000 f8f7 	bl	80060b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec8:	1e5a      	subs	r2, r3, #1
 8005eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ecc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00f      	beq.n	8005ef6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed8:	3310      	adds	r3, #16
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 fe42 	bl	8006b64 <xTaskRemoveFromEventList>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d007      	beq.n	8005ef6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ee6:	4b3d      	ldr	r3, [pc, #244]	; (8005fdc <xQueueReceive+0x1bc>)
 8005ee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eec:	601a      	str	r2, [r3, #0]
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ef6:	f001 fdb9 	bl	8007a6c <vPortExitCritical>
				return pdPASS;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e069      	b.n	8005fd2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d103      	bne.n	8005f0c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f04:	f001 fdb2 	bl	8007a6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	e062      	b.n	8005fd2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d106      	bne.n	8005f20 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f12:	f107 0310 	add.w	r3, r7, #16
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 fe88 	bl	8006c2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f20:	f001 fda4 	bl	8007a6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f24:	f000 fbfa 	bl	800671c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f28:	f001 fd70 	bl	8007a0c <vPortEnterCritical>
 8005f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f32:	b25b      	sxtb	r3, r3
 8005f34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f38:	d103      	bne.n	8005f42 <xQueueReceive+0x122>
 8005f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f48:	b25b      	sxtb	r3, r3
 8005f4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f4e:	d103      	bne.n	8005f58 <xQueueReceive+0x138>
 8005f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f58:	f001 fd88 	bl	8007a6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f5c:	1d3a      	adds	r2, r7, #4
 8005f5e:	f107 0310 	add.w	r3, r7, #16
 8005f62:	4611      	mov	r1, r2
 8005f64:	4618      	mov	r0, r3
 8005f66:	f000 fe77 	bl	8006c58 <xTaskCheckForTimeOut>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d123      	bne.n	8005fb8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f72:	f000 f917 	bl	80061a4 <prvIsQueueEmpty>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d017      	beq.n	8005fac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7e:	3324      	adds	r3, #36	; 0x24
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	4611      	mov	r1, r2
 8005f84:	4618      	mov	r0, r3
 8005f86:	f000 fd9d 	bl	8006ac4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f8c:	f000 f8b8 	bl	8006100 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f90:	f000 fbd2 	bl	8006738 <xTaskResumeAll>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d189      	bne.n	8005eae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005f9a:	4b10      	ldr	r3, [pc, #64]	; (8005fdc <xQueueReceive+0x1bc>)
 8005f9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fa0:	601a      	str	r2, [r3, #0]
 8005fa2:	f3bf 8f4f 	dsb	sy
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	e780      	b.n	8005eae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005fac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fae:	f000 f8a7 	bl	8006100 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fb2:	f000 fbc1 	bl	8006738 <xTaskResumeAll>
 8005fb6:	e77a      	b.n	8005eae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005fb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fba:	f000 f8a1 	bl	8006100 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fbe:	f000 fbbb 	bl	8006738 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fc4:	f000 f8ee 	bl	80061a4 <prvIsQueueEmpty>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f43f af6f 	beq.w	8005eae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005fd0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3730      	adds	r7, #48	; 0x30
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	e000ed04 	.word	0xe000ed04

08005fe0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005fec:	2300      	movs	r3, #0
 8005fee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10d      	bne.n	800601a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d14d      	bne.n	80060a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	4618      	mov	r0, r3
 800600c:	f000 ff8a 	bl	8006f24 <xTaskPriorityDisinherit>
 8006010:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	605a      	str	r2, [r3, #4]
 8006018:	e043      	b.n	80060a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d119      	bne.n	8006054 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6898      	ldr	r0, [r3, #8]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006028:	461a      	mov	r2, r3
 800602a:	68b9      	ldr	r1, [r7, #8]
 800602c:	f002 fb1e 	bl	800866c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006038:	441a      	add	r2, r3
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	689a      	ldr	r2, [r3, #8]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	429a      	cmp	r2, r3
 8006048:	d32b      	bcc.n	80060a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	609a      	str	r2, [r3, #8]
 8006052:	e026      	b.n	80060a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	68d8      	ldr	r0, [r3, #12]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605c:	461a      	mov	r2, r3
 800605e:	68b9      	ldr	r1, [r7, #8]
 8006060:	f002 fb04 	bl	800866c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	68da      	ldr	r2, [r3, #12]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606c:	425b      	negs	r3, r3
 800606e:	441a      	add	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	68da      	ldr	r2, [r3, #12]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	429a      	cmp	r2, r3
 800607e:	d207      	bcs.n	8006090 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006088:	425b      	negs	r3, r3
 800608a:	441a      	add	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2b02      	cmp	r3, #2
 8006094:	d105      	bne.n	80060a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d002      	beq.n	80060a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	3b01      	subs	r3, #1
 80060a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	1c5a      	adds	r2, r3, #1
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80060aa:	697b      	ldr	r3, [r7, #20]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3718      	adds	r7, #24
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d018      	beq.n	80060f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68da      	ldr	r2, [r3, #12]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	441a      	add	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	68da      	ldr	r2, [r3, #12]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d303      	bcc.n	80060e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68d9      	ldr	r1, [r3, #12]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f0:	461a      	mov	r2, r3
 80060f2:	6838      	ldr	r0, [r7, #0]
 80060f4:	f002 faba 	bl	800866c <memcpy>
	}
}
 80060f8:	bf00      	nop
 80060fa:	3708      	adds	r7, #8
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006108:	f001 fc80 	bl	8007a0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006112:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006114:	e011      	b.n	800613a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611a:	2b00      	cmp	r3, #0
 800611c:	d012      	beq.n	8006144 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	3324      	adds	r3, #36	; 0x24
 8006122:	4618      	mov	r0, r3
 8006124:	f000 fd1e 	bl	8006b64 <xTaskRemoveFromEventList>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d001      	beq.n	8006132 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800612e:	f000 fdf5 	bl	8006d1c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006132:	7bfb      	ldrb	r3, [r7, #15]
 8006134:	3b01      	subs	r3, #1
 8006136:	b2db      	uxtb	r3, r3
 8006138:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800613a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800613e:	2b00      	cmp	r3, #0
 8006140:	dce9      	bgt.n	8006116 <prvUnlockQueue+0x16>
 8006142:	e000      	b.n	8006146 <prvUnlockQueue+0x46>
					break;
 8006144:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	22ff      	movs	r2, #255	; 0xff
 800614a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800614e:	f001 fc8d 	bl	8007a6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006152:	f001 fc5b 	bl	8007a0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800615c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800615e:	e011      	b.n	8006184 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d012      	beq.n	800618e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	3310      	adds	r3, #16
 800616c:	4618      	mov	r0, r3
 800616e:	f000 fcf9 	bl	8006b64 <xTaskRemoveFromEventList>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d001      	beq.n	800617c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006178:	f000 fdd0 	bl	8006d1c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800617c:	7bbb      	ldrb	r3, [r7, #14]
 800617e:	3b01      	subs	r3, #1
 8006180:	b2db      	uxtb	r3, r3
 8006182:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006184:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006188:	2b00      	cmp	r3, #0
 800618a:	dce9      	bgt.n	8006160 <prvUnlockQueue+0x60>
 800618c:	e000      	b.n	8006190 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800618e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	22ff      	movs	r2, #255	; 0xff
 8006194:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006198:	f001 fc68 	bl	8007a6c <vPortExitCritical>
}
 800619c:	bf00      	nop
 800619e:	3710      	adds	r7, #16
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061ac:	f001 fc2e 	bl	8007a0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d102      	bne.n	80061be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80061b8:	2301      	movs	r3, #1
 80061ba:	60fb      	str	r3, [r7, #12]
 80061bc:	e001      	b.n	80061c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80061be:	2300      	movs	r3, #0
 80061c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80061c2:	f001 fc53 	bl	8007a6c <vPortExitCritical>

	return xReturn;
 80061c6:	68fb      	ldr	r3, [r7, #12]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061d8:	f001 fc18 	bl	8007a0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d102      	bne.n	80061ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80061e8:	2301      	movs	r3, #1
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	e001      	b.n	80061f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80061ee:	2300      	movs	r3, #0
 80061f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80061f2:	f001 fc3b 	bl	8007a6c <vPortExitCritical>

	return xReturn;
 80061f6:	68fb      	ldr	r3, [r7, #12]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3710      	adds	r7, #16
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800620a:	2300      	movs	r3, #0
 800620c:	60fb      	str	r3, [r7, #12]
 800620e:	e014      	b.n	800623a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006210:	4a0e      	ldr	r2, [pc, #56]	; (800624c <vQueueAddToRegistry+0x4c>)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10b      	bne.n	8006234 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800621c:	490b      	ldr	r1, [pc, #44]	; (800624c <vQueueAddToRegistry+0x4c>)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	683a      	ldr	r2, [r7, #0]
 8006222:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006226:	4a09      	ldr	r2, [pc, #36]	; (800624c <vQueueAddToRegistry+0x4c>)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	00db      	lsls	r3, r3, #3
 800622c:	4413      	add	r3, r2
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006232:	e006      	b.n	8006242 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	3301      	adds	r3, #1
 8006238:	60fb      	str	r3, [r7, #12]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2b07      	cmp	r3, #7
 800623e:	d9e7      	bls.n	8006210 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006240:	bf00      	nop
 8006242:	bf00      	nop
 8006244:	3714      	adds	r7, #20
 8006246:	46bd      	mov	sp, r7
 8006248:	bc80      	pop	{r7}
 800624a:	4770      	bx	lr
 800624c:	20000e0c 	.word	0x20000e0c

08006250 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006260:	f001 fbd4 	bl	8007a0c <vPortEnterCritical>
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800626a:	b25b      	sxtb	r3, r3
 800626c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006270:	d103      	bne.n	800627a <vQueueWaitForMessageRestricted+0x2a>
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006280:	b25b      	sxtb	r3, r3
 8006282:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006286:	d103      	bne.n	8006290 <vQueueWaitForMessageRestricted+0x40>
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006290:	f001 fbec 	bl	8007a6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006298:	2b00      	cmp	r3, #0
 800629a:	d106      	bne.n	80062aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	3324      	adds	r3, #36	; 0x24
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	68b9      	ldr	r1, [r7, #8]
 80062a4:	4618      	mov	r0, r3
 80062a6:	f000 fc31 	bl	8006b0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80062aa:	6978      	ldr	r0, [r7, #20]
 80062ac:	f7ff ff28 	bl	8006100 <prvUnlockQueue>
	}
 80062b0:	bf00      	nop
 80062b2:	3718      	adds	r7, #24
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b08e      	sub	sp, #56	; 0x38
 80062bc:	af04      	add	r7, sp, #16
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
 80062c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80062c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10a      	bne.n	80062e2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80062cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d0:	f383 8811 	msr	BASEPRI, r3
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	623b      	str	r3, [r7, #32]
}
 80062de:	bf00      	nop
 80062e0:	e7fe      	b.n	80062e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80062e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d10a      	bne.n	80062fe <xTaskCreateStatic+0x46>
	__asm volatile
 80062e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ec:	f383 8811 	msr	BASEPRI, r3
 80062f0:	f3bf 8f6f 	isb	sy
 80062f4:	f3bf 8f4f 	dsb	sy
 80062f8:	61fb      	str	r3, [r7, #28]
}
 80062fa:	bf00      	nop
 80062fc:	e7fe      	b.n	80062fc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80062fe:	235c      	movs	r3, #92	; 0x5c
 8006300:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	2b5c      	cmp	r3, #92	; 0x5c
 8006306:	d00a      	beq.n	800631e <xTaskCreateStatic+0x66>
	__asm volatile
 8006308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630c:	f383 8811 	msr	BASEPRI, r3
 8006310:	f3bf 8f6f 	isb	sy
 8006314:	f3bf 8f4f 	dsb	sy
 8006318:	61bb      	str	r3, [r7, #24]
}
 800631a:	bf00      	nop
 800631c:	e7fe      	b.n	800631c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800631e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006320:	2b00      	cmp	r3, #0
 8006322:	d01e      	beq.n	8006362 <xTaskCreateStatic+0xaa>
 8006324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006326:	2b00      	cmp	r3, #0
 8006328:	d01b      	beq.n	8006362 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800632a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800632e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006330:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006332:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006336:	2202      	movs	r2, #2
 8006338:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800633c:	2300      	movs	r3, #0
 800633e:	9303      	str	r3, [sp, #12]
 8006340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006342:	9302      	str	r3, [sp, #8]
 8006344:	f107 0314 	add.w	r3, r7, #20
 8006348:	9301      	str	r3, [sp, #4]
 800634a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634c:	9300      	str	r3, [sp, #0]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	68b9      	ldr	r1, [r7, #8]
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f000 f850 	bl	80063fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800635a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800635c:	f000 f8d4 	bl	8006508 <prvAddNewTaskToReadyList>
 8006360:	e001      	b.n	8006366 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006362:	2300      	movs	r3, #0
 8006364:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006366:	697b      	ldr	r3, [r7, #20]
	}
 8006368:	4618      	mov	r0, r3
 800636a:	3728      	adds	r7, #40	; 0x28
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006370:	b580      	push	{r7, lr}
 8006372:	b08c      	sub	sp, #48	; 0x30
 8006374:	af04      	add	r7, sp, #16
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	603b      	str	r3, [r7, #0]
 800637c:	4613      	mov	r3, r2
 800637e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006380:	88fb      	ldrh	r3, [r7, #6]
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	4618      	mov	r0, r3
 8006386:	f001 fc41 	bl	8007c0c <pvPortMalloc>
 800638a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00e      	beq.n	80063b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006392:	205c      	movs	r0, #92	; 0x5c
 8006394:	f001 fc3a 	bl	8007c0c <pvPortMalloc>
 8006398:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d003      	beq.n	80063a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	631a      	str	r2, [r3, #48]	; 0x30
 80063a6:	e005      	b.n	80063b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80063a8:	6978      	ldr	r0, [r7, #20]
 80063aa:	f001 fcf3 	bl	8007d94 <vPortFree>
 80063ae:	e001      	b.n	80063b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80063b0:	2300      	movs	r3, #0
 80063b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d017      	beq.n	80063ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80063c2:	88fa      	ldrh	r2, [r7, #6]
 80063c4:	2300      	movs	r3, #0
 80063c6:	9303      	str	r3, [sp, #12]
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	9302      	str	r3, [sp, #8]
 80063cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ce:	9301      	str	r3, [sp, #4]
 80063d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	68b9      	ldr	r1, [r7, #8]
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f000 f80e 	bl	80063fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063de:	69f8      	ldr	r0, [r7, #28]
 80063e0:	f000 f892 	bl	8006508 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80063e4:	2301      	movs	r3, #1
 80063e6:	61bb      	str	r3, [r7, #24]
 80063e8:	e002      	b.n	80063f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80063ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80063f0:	69bb      	ldr	r3, [r7, #24]
	}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3720      	adds	r7, #32
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b088      	sub	sp, #32
 80063fe:	af00      	add	r7, sp, #0
 8006400:	60f8      	str	r0, [r7, #12]
 8006402:	60b9      	str	r1, [r7, #8]
 8006404:	607a      	str	r2, [r7, #4]
 8006406:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	461a      	mov	r2, r3
 8006412:	21a5      	movs	r1, #165	; 0xa5
 8006414:	f002 f8a2 	bl	800855c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006422:	3b01      	subs	r3, #1
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	4413      	add	r3, r2
 8006428:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	f023 0307 	bic.w	r3, r3, #7
 8006430:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	f003 0307 	and.w	r3, r3, #7
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00a      	beq.n	8006452 <prvInitialiseNewTask+0x58>
	__asm volatile
 800643c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006440:	f383 8811 	msr	BASEPRI, r3
 8006444:	f3bf 8f6f 	isb	sy
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	617b      	str	r3, [r7, #20]
}
 800644e:	bf00      	nop
 8006450:	e7fe      	b.n	8006450 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006452:	2300      	movs	r3, #0
 8006454:	61fb      	str	r3, [r7, #28]
 8006456:	e012      	b.n	800647e <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	4413      	add	r3, r2
 800645e:	7819      	ldrb	r1, [r3, #0]
 8006460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	4413      	add	r3, r2
 8006466:	3334      	adds	r3, #52	; 0x34
 8006468:	460a      	mov	r2, r1
 800646a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800646c:	68ba      	ldr	r2, [r7, #8]
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	4413      	add	r3, r2
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d006      	beq.n	8006486 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	3301      	adds	r3, #1
 800647c:	61fb      	str	r3, [r7, #28]
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	2b0f      	cmp	r3, #15
 8006482:	d9e9      	bls.n	8006458 <prvInitialiseNewTask+0x5e>
 8006484:	e000      	b.n	8006488 <prvInitialiseNewTask+0x8e>
		{
			break;
 8006486:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648a:	2200      	movs	r2, #0
 800648c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006492:	2b37      	cmp	r3, #55	; 0x37
 8006494:	d901      	bls.n	800649a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006496:	2337      	movs	r3, #55	; 0x37
 8006498:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800649a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800649e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80064a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064a4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80064a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a8:	2200      	movs	r2, #0
 80064aa:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80064ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ae:	3304      	adds	r3, #4
 80064b0:	4618      	mov	r0, r3
 80064b2:	f7ff f98c 	bl	80057ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80064b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b8:	3318      	adds	r3, #24
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7ff f987 	bl	80057ce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80064c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064c4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80064cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80064d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064d4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80064d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d8:	2200      	movs	r2, #0
 80064da:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80064dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80064e4:	683a      	ldr	r2, [r7, #0]
 80064e6:	68f9      	ldr	r1, [r7, #12]
 80064e8:	69b8      	ldr	r0, [r7, #24]
 80064ea:	f001 f99f 	bl	800782c <pxPortInitialiseStack>
 80064ee:	4602      	mov	r2, r0
 80064f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80064f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d002      	beq.n	8006500 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80064fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006500:	bf00      	nop
 8006502:	3720      	adds	r7, #32
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006510:	f001 fa7c 	bl	8007a0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006514:	4b2d      	ldr	r3, [pc, #180]	; (80065cc <prvAddNewTaskToReadyList+0xc4>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	3301      	adds	r3, #1
 800651a:	4a2c      	ldr	r2, [pc, #176]	; (80065cc <prvAddNewTaskToReadyList+0xc4>)
 800651c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800651e:	4b2c      	ldr	r3, [pc, #176]	; (80065d0 <prvAddNewTaskToReadyList+0xc8>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d109      	bne.n	800653a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006526:	4a2a      	ldr	r2, [pc, #168]	; (80065d0 <prvAddNewTaskToReadyList+0xc8>)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800652c:	4b27      	ldr	r3, [pc, #156]	; (80065cc <prvAddNewTaskToReadyList+0xc4>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d110      	bne.n	8006556 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006534:	f000 fc16 	bl	8006d64 <prvInitialiseTaskLists>
 8006538:	e00d      	b.n	8006556 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800653a:	4b26      	ldr	r3, [pc, #152]	; (80065d4 <prvAddNewTaskToReadyList+0xcc>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d109      	bne.n	8006556 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006542:	4b23      	ldr	r3, [pc, #140]	; (80065d0 <prvAddNewTaskToReadyList+0xc8>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654c:	429a      	cmp	r2, r3
 800654e:	d802      	bhi.n	8006556 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006550:	4a1f      	ldr	r2, [pc, #124]	; (80065d0 <prvAddNewTaskToReadyList+0xc8>)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006556:	4b20      	ldr	r3, [pc, #128]	; (80065d8 <prvAddNewTaskToReadyList+0xd0>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	3301      	adds	r3, #1
 800655c:	4a1e      	ldr	r2, [pc, #120]	; (80065d8 <prvAddNewTaskToReadyList+0xd0>)
 800655e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006560:	4b1d      	ldr	r3, [pc, #116]	; (80065d8 <prvAddNewTaskToReadyList+0xd0>)
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800656c:	4b1b      	ldr	r3, [pc, #108]	; (80065dc <prvAddNewTaskToReadyList+0xd4>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	429a      	cmp	r2, r3
 8006572:	d903      	bls.n	800657c <prvAddNewTaskToReadyList+0x74>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006578:	4a18      	ldr	r2, [pc, #96]	; (80065dc <prvAddNewTaskToReadyList+0xd4>)
 800657a:	6013      	str	r3, [r2, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006580:	4613      	mov	r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4a15      	ldr	r2, [pc, #84]	; (80065e0 <prvAddNewTaskToReadyList+0xd8>)
 800658a:	441a      	add	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	3304      	adds	r3, #4
 8006590:	4619      	mov	r1, r3
 8006592:	4610      	mov	r0, r2
 8006594:	f7ff f927 	bl	80057e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006598:	f001 fa68 	bl	8007a6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800659c:	4b0d      	ldr	r3, [pc, #52]	; (80065d4 <prvAddNewTaskToReadyList+0xcc>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00e      	beq.n	80065c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80065a4:	4b0a      	ldr	r3, [pc, #40]	; (80065d0 <prvAddNewTaskToReadyList+0xc8>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d207      	bcs.n	80065c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80065b2:	4b0c      	ldr	r3, [pc, #48]	; (80065e4 <prvAddNewTaskToReadyList+0xdc>)
 80065b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065b8:	601a      	str	r2, [r3, #0]
 80065ba:	f3bf 8f4f 	dsb	sy
 80065be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065c2:	bf00      	nop
 80065c4:	3708      	adds	r7, #8
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	20001320 	.word	0x20001320
 80065d0:	20000e4c 	.word	0x20000e4c
 80065d4:	2000132c 	.word	0x2000132c
 80065d8:	2000133c 	.word	0x2000133c
 80065dc:	20001328 	.word	0x20001328
 80065e0:	20000e50 	.word	0x20000e50
 80065e4:	e000ed04 	.word	0xe000ed04

080065e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80065f0:	2300      	movs	r3, #0
 80065f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d017      	beq.n	800662a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80065fa:	4b13      	ldr	r3, [pc, #76]	; (8006648 <vTaskDelay+0x60>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00a      	beq.n	8006618 <vTaskDelay+0x30>
	__asm volatile
 8006602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006606:	f383 8811 	msr	BASEPRI, r3
 800660a:	f3bf 8f6f 	isb	sy
 800660e:	f3bf 8f4f 	dsb	sy
 8006612:	60bb      	str	r3, [r7, #8]
}
 8006614:	bf00      	nop
 8006616:	e7fe      	b.n	8006616 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006618:	f000 f880 	bl	800671c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800661c:	2100      	movs	r1, #0
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 fcee 	bl	8007000 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006624:	f000 f888 	bl	8006738 <xTaskResumeAll>
 8006628:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d107      	bne.n	8006640 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006630:	4b06      	ldr	r3, [pc, #24]	; (800664c <vTaskDelay+0x64>)
 8006632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006636:	601a      	str	r2, [r3, #0]
 8006638:	f3bf 8f4f 	dsb	sy
 800663c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006640:	bf00      	nop
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	20001348 	.word	0x20001348
 800664c:	e000ed04 	.word	0xe000ed04

08006650 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b08a      	sub	sp, #40	; 0x28
 8006654:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006656:	2300      	movs	r3, #0
 8006658:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800665a:	2300      	movs	r3, #0
 800665c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800665e:	463a      	mov	r2, r7
 8006660:	1d39      	adds	r1, r7, #4
 8006662:	f107 0308 	add.w	r3, r7, #8
 8006666:	4618      	mov	r0, r3
 8006668:	f7ff f860 	bl	800572c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800666c:	6839      	ldr	r1, [r7, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	9202      	str	r2, [sp, #8]
 8006674:	9301      	str	r3, [sp, #4]
 8006676:	2300      	movs	r3, #0
 8006678:	9300      	str	r3, [sp, #0]
 800667a:	2300      	movs	r3, #0
 800667c:	460a      	mov	r2, r1
 800667e:	4921      	ldr	r1, [pc, #132]	; (8006704 <vTaskStartScheduler+0xb4>)
 8006680:	4821      	ldr	r0, [pc, #132]	; (8006708 <vTaskStartScheduler+0xb8>)
 8006682:	f7ff fe19 	bl	80062b8 <xTaskCreateStatic>
 8006686:	4603      	mov	r3, r0
 8006688:	4a20      	ldr	r2, [pc, #128]	; (800670c <vTaskStartScheduler+0xbc>)
 800668a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800668c:	4b1f      	ldr	r3, [pc, #124]	; (800670c <vTaskStartScheduler+0xbc>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d002      	beq.n	800669a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006694:	2301      	movs	r3, #1
 8006696:	617b      	str	r3, [r7, #20]
 8006698:	e001      	b.n	800669e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800669a:	2300      	movs	r3, #0
 800669c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d102      	bne.n	80066aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80066a4:	f000 fd00 	bl	80070a8 <xTimerCreateTimerTask>
 80066a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d116      	bne.n	80066de <vTaskStartScheduler+0x8e>
	__asm volatile
 80066b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b4:	f383 8811 	msr	BASEPRI, r3
 80066b8:	f3bf 8f6f 	isb	sy
 80066bc:	f3bf 8f4f 	dsb	sy
 80066c0:	613b      	str	r3, [r7, #16]
}
 80066c2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80066c4:	4b12      	ldr	r3, [pc, #72]	; (8006710 <vTaskStartScheduler+0xc0>)
 80066c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80066cc:	4b11      	ldr	r3, [pc, #68]	; (8006714 <vTaskStartScheduler+0xc4>)
 80066ce:	2201      	movs	r2, #1
 80066d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80066d2:	4b11      	ldr	r3, [pc, #68]	; (8006718 <vTaskStartScheduler+0xc8>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80066d8:	f001 f926 	bl	8007928 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80066dc:	e00e      	b.n	80066fc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066e4:	d10a      	bne.n	80066fc <vTaskStartScheduler+0xac>
	__asm volatile
 80066e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ea:	f383 8811 	msr	BASEPRI, r3
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	f3bf 8f4f 	dsb	sy
 80066f6:	60fb      	str	r3, [r7, #12]
}
 80066f8:	bf00      	nop
 80066fa:	e7fe      	b.n	80066fa <vTaskStartScheduler+0xaa>
}
 80066fc:	bf00      	nop
 80066fe:	3718      	adds	r7, #24
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	080087b4 	.word	0x080087b4
 8006708:	08006d35 	.word	0x08006d35
 800670c:	20001344 	.word	0x20001344
 8006710:	20001340 	.word	0x20001340
 8006714:	2000132c 	.word	0x2000132c
 8006718:	20001324 	.word	0x20001324

0800671c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800671c:	b480      	push	{r7}
 800671e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006720:	4b04      	ldr	r3, [pc, #16]	; (8006734 <vTaskSuspendAll+0x18>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	3301      	adds	r3, #1
 8006726:	4a03      	ldr	r2, [pc, #12]	; (8006734 <vTaskSuspendAll+0x18>)
 8006728:	6013      	str	r3, [r2, #0]
}
 800672a:	bf00      	nop
 800672c:	46bd      	mov	sp, r7
 800672e:	bc80      	pop	{r7}
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	20001348 	.word	0x20001348

08006738 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800673e:	2300      	movs	r3, #0
 8006740:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006742:	2300      	movs	r3, #0
 8006744:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006746:	4b42      	ldr	r3, [pc, #264]	; (8006850 <xTaskResumeAll+0x118>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d10a      	bne.n	8006764 <xTaskResumeAll+0x2c>
	__asm volatile
 800674e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006752:	f383 8811 	msr	BASEPRI, r3
 8006756:	f3bf 8f6f 	isb	sy
 800675a:	f3bf 8f4f 	dsb	sy
 800675e:	603b      	str	r3, [r7, #0]
}
 8006760:	bf00      	nop
 8006762:	e7fe      	b.n	8006762 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006764:	f001 f952 	bl	8007a0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006768:	4b39      	ldr	r3, [pc, #228]	; (8006850 <xTaskResumeAll+0x118>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	3b01      	subs	r3, #1
 800676e:	4a38      	ldr	r2, [pc, #224]	; (8006850 <xTaskResumeAll+0x118>)
 8006770:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006772:	4b37      	ldr	r3, [pc, #220]	; (8006850 <xTaskResumeAll+0x118>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d162      	bne.n	8006840 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800677a:	4b36      	ldr	r3, [pc, #216]	; (8006854 <xTaskResumeAll+0x11c>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d05e      	beq.n	8006840 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006782:	e02f      	b.n	80067e4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006784:	4b34      	ldr	r3, [pc, #208]	; (8006858 <xTaskResumeAll+0x120>)
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	3318      	adds	r3, #24
 8006790:	4618      	mov	r0, r3
 8006792:	f7ff f883 	bl	800589c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	3304      	adds	r3, #4
 800679a:	4618      	mov	r0, r3
 800679c:	f7ff f87e 	bl	800589c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a4:	4b2d      	ldr	r3, [pc, #180]	; (800685c <xTaskResumeAll+0x124>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d903      	bls.n	80067b4 <xTaskResumeAll+0x7c>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b0:	4a2a      	ldr	r2, [pc, #168]	; (800685c <xTaskResumeAll+0x124>)
 80067b2:	6013      	str	r3, [r2, #0]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b8:	4613      	mov	r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	4413      	add	r3, r2
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	4a27      	ldr	r2, [pc, #156]	; (8006860 <xTaskResumeAll+0x128>)
 80067c2:	441a      	add	r2, r3
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	3304      	adds	r3, #4
 80067c8:	4619      	mov	r1, r3
 80067ca:	4610      	mov	r0, r2
 80067cc:	f7ff f80b 	bl	80057e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067d4:	4b23      	ldr	r3, [pc, #140]	; (8006864 <xTaskResumeAll+0x12c>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067da:	429a      	cmp	r2, r3
 80067dc:	d302      	bcc.n	80067e4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80067de:	4b22      	ldr	r3, [pc, #136]	; (8006868 <xTaskResumeAll+0x130>)
 80067e0:	2201      	movs	r2, #1
 80067e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80067e4:	4b1c      	ldr	r3, [pc, #112]	; (8006858 <xTaskResumeAll+0x120>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1cb      	bne.n	8006784 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80067f2:	f000 fb55 	bl	8006ea0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80067f6:	4b1d      	ldr	r3, [pc, #116]	; (800686c <xTaskResumeAll+0x134>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d010      	beq.n	8006824 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006802:	f000 f845 	bl	8006890 <xTaskIncrementTick>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d002      	beq.n	8006812 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800680c:	4b16      	ldr	r3, [pc, #88]	; (8006868 <xTaskResumeAll+0x130>)
 800680e:	2201      	movs	r2, #1
 8006810:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	3b01      	subs	r3, #1
 8006816:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1f1      	bne.n	8006802 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800681e:	4b13      	ldr	r3, [pc, #76]	; (800686c <xTaskResumeAll+0x134>)
 8006820:	2200      	movs	r2, #0
 8006822:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006824:	4b10      	ldr	r3, [pc, #64]	; (8006868 <xTaskResumeAll+0x130>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d009      	beq.n	8006840 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800682c:	2301      	movs	r3, #1
 800682e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006830:	4b0f      	ldr	r3, [pc, #60]	; (8006870 <xTaskResumeAll+0x138>)
 8006832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006836:	601a      	str	r2, [r3, #0]
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006840:	f001 f914 	bl	8007a6c <vPortExitCritical>

	return xAlreadyYielded;
 8006844:	68bb      	ldr	r3, [r7, #8]
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	20001348 	.word	0x20001348
 8006854:	20001320 	.word	0x20001320
 8006858:	200012e0 	.word	0x200012e0
 800685c:	20001328 	.word	0x20001328
 8006860:	20000e50 	.word	0x20000e50
 8006864:	20000e4c 	.word	0x20000e4c
 8006868:	20001334 	.word	0x20001334
 800686c:	20001330 	.word	0x20001330
 8006870:	e000ed04 	.word	0xe000ed04

08006874 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800687a:	4b04      	ldr	r3, [pc, #16]	; (800688c <xTaskGetTickCount+0x18>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006880:	687b      	ldr	r3, [r7, #4]
}
 8006882:	4618      	mov	r0, r3
 8006884:	370c      	adds	r7, #12
 8006886:	46bd      	mov	sp, r7
 8006888:	bc80      	pop	{r7}
 800688a:	4770      	bx	lr
 800688c:	20001324 	.word	0x20001324

08006890 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006896:	2300      	movs	r3, #0
 8006898:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800689a:	4b51      	ldr	r3, [pc, #324]	; (80069e0 <xTaskIncrementTick+0x150>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f040 808e 	bne.w	80069c0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80068a4:	4b4f      	ldr	r3, [pc, #316]	; (80069e4 <xTaskIncrementTick+0x154>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	3301      	adds	r3, #1
 80068aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80068ac:	4a4d      	ldr	r2, [pc, #308]	; (80069e4 <xTaskIncrementTick+0x154>)
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d120      	bne.n	80068fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80068b8:	4b4b      	ldr	r3, [pc, #300]	; (80069e8 <xTaskIncrementTick+0x158>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00a      	beq.n	80068d8 <xTaskIncrementTick+0x48>
	__asm volatile
 80068c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c6:	f383 8811 	msr	BASEPRI, r3
 80068ca:	f3bf 8f6f 	isb	sy
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	603b      	str	r3, [r7, #0]
}
 80068d4:	bf00      	nop
 80068d6:	e7fe      	b.n	80068d6 <xTaskIncrementTick+0x46>
 80068d8:	4b43      	ldr	r3, [pc, #268]	; (80069e8 <xTaskIncrementTick+0x158>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	60fb      	str	r3, [r7, #12]
 80068de:	4b43      	ldr	r3, [pc, #268]	; (80069ec <xTaskIncrementTick+0x15c>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a41      	ldr	r2, [pc, #260]	; (80069e8 <xTaskIncrementTick+0x158>)
 80068e4:	6013      	str	r3, [r2, #0]
 80068e6:	4a41      	ldr	r2, [pc, #260]	; (80069ec <xTaskIncrementTick+0x15c>)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6013      	str	r3, [r2, #0]
 80068ec:	4b40      	ldr	r3, [pc, #256]	; (80069f0 <xTaskIncrementTick+0x160>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	3301      	adds	r3, #1
 80068f2:	4a3f      	ldr	r2, [pc, #252]	; (80069f0 <xTaskIncrementTick+0x160>)
 80068f4:	6013      	str	r3, [r2, #0]
 80068f6:	f000 fad3 	bl	8006ea0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80068fa:	4b3e      	ldr	r3, [pc, #248]	; (80069f4 <xTaskIncrementTick+0x164>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	693a      	ldr	r2, [r7, #16]
 8006900:	429a      	cmp	r2, r3
 8006902:	d34e      	bcc.n	80069a2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006904:	4b38      	ldr	r3, [pc, #224]	; (80069e8 <xTaskIncrementTick+0x158>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d101      	bne.n	8006912 <xTaskIncrementTick+0x82>
 800690e:	2301      	movs	r3, #1
 8006910:	e000      	b.n	8006914 <xTaskIncrementTick+0x84>
 8006912:	2300      	movs	r3, #0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d004      	beq.n	8006922 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006918:	4b36      	ldr	r3, [pc, #216]	; (80069f4 <xTaskIncrementTick+0x164>)
 800691a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800691e:	601a      	str	r2, [r3, #0]
					break;
 8006920:	e03f      	b.n	80069a2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006922:	4b31      	ldr	r3, [pc, #196]	; (80069e8 <xTaskIncrementTick+0x158>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	429a      	cmp	r2, r3
 8006938:	d203      	bcs.n	8006942 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800693a:	4a2e      	ldr	r2, [pc, #184]	; (80069f4 <xTaskIncrementTick+0x164>)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6013      	str	r3, [r2, #0]
						break;
 8006940:	e02f      	b.n	80069a2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	3304      	adds	r3, #4
 8006946:	4618      	mov	r0, r3
 8006948:	f7fe ffa8 	bl	800589c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006950:	2b00      	cmp	r3, #0
 8006952:	d004      	beq.n	800695e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	3318      	adds	r3, #24
 8006958:	4618      	mov	r0, r3
 800695a:	f7fe ff9f 	bl	800589c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006962:	4b25      	ldr	r3, [pc, #148]	; (80069f8 <xTaskIncrementTick+0x168>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	429a      	cmp	r2, r3
 8006968:	d903      	bls.n	8006972 <xTaskIncrementTick+0xe2>
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696e:	4a22      	ldr	r2, [pc, #136]	; (80069f8 <xTaskIncrementTick+0x168>)
 8006970:	6013      	str	r3, [r2, #0]
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006976:	4613      	mov	r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	4a1f      	ldr	r2, [pc, #124]	; (80069fc <xTaskIncrementTick+0x16c>)
 8006980:	441a      	add	r2, r3
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	3304      	adds	r3, #4
 8006986:	4619      	mov	r1, r3
 8006988:	4610      	mov	r0, r2
 800698a:	f7fe ff2c 	bl	80057e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006992:	4b1b      	ldr	r3, [pc, #108]	; (8006a00 <xTaskIncrementTick+0x170>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006998:	429a      	cmp	r2, r3
 800699a:	d3b3      	bcc.n	8006904 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800699c:	2301      	movs	r3, #1
 800699e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069a0:	e7b0      	b.n	8006904 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80069a2:	4b17      	ldr	r3, [pc, #92]	; (8006a00 <xTaskIncrementTick+0x170>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069a8:	4914      	ldr	r1, [pc, #80]	; (80069fc <xTaskIncrementTick+0x16c>)
 80069aa:	4613      	mov	r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	4413      	add	r3, r2
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	440b      	add	r3, r1
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d907      	bls.n	80069ca <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80069ba:	2301      	movs	r3, #1
 80069bc:	617b      	str	r3, [r7, #20]
 80069be:	e004      	b.n	80069ca <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80069c0:	4b10      	ldr	r3, [pc, #64]	; (8006a04 <xTaskIncrementTick+0x174>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	3301      	adds	r3, #1
 80069c6:	4a0f      	ldr	r2, [pc, #60]	; (8006a04 <xTaskIncrementTick+0x174>)
 80069c8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80069ca:	4b0f      	ldr	r3, [pc, #60]	; (8006a08 <xTaskIncrementTick+0x178>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80069d2:	2301      	movs	r3, #1
 80069d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80069d6:	697b      	ldr	r3, [r7, #20]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3718      	adds	r7, #24
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	20001348 	.word	0x20001348
 80069e4:	20001324 	.word	0x20001324
 80069e8:	200012d8 	.word	0x200012d8
 80069ec:	200012dc 	.word	0x200012dc
 80069f0:	20001338 	.word	0x20001338
 80069f4:	20001340 	.word	0x20001340
 80069f8:	20001328 	.word	0x20001328
 80069fc:	20000e50 	.word	0x20000e50
 8006a00:	20000e4c 	.word	0x20000e4c
 8006a04:	20001330 	.word	0x20001330
 8006a08:	20001334 	.word	0x20001334

08006a0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006a12:	4b27      	ldr	r3, [pc, #156]	; (8006ab0 <vTaskSwitchContext+0xa4>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d003      	beq.n	8006a22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006a1a:	4b26      	ldr	r3, [pc, #152]	; (8006ab4 <vTaskSwitchContext+0xa8>)
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006a20:	e041      	b.n	8006aa6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006a22:	4b24      	ldr	r3, [pc, #144]	; (8006ab4 <vTaskSwitchContext+0xa8>)
 8006a24:	2200      	movs	r2, #0
 8006a26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006a28:	4b23      	ldr	r3, [pc, #140]	; (8006ab8 <vTaskSwitchContext+0xac>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	60fb      	str	r3, [r7, #12]
 8006a2e:	e010      	b.n	8006a52 <vTaskSwitchContext+0x46>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10a      	bne.n	8006a4c <vTaskSwitchContext+0x40>
	__asm volatile
 8006a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3a:	f383 8811 	msr	BASEPRI, r3
 8006a3e:	f3bf 8f6f 	isb	sy
 8006a42:	f3bf 8f4f 	dsb	sy
 8006a46:	607b      	str	r3, [r7, #4]
}
 8006a48:	bf00      	nop
 8006a4a:	e7fe      	b.n	8006a4a <vTaskSwitchContext+0x3e>
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	60fb      	str	r3, [r7, #12]
 8006a52:	491a      	ldr	r1, [pc, #104]	; (8006abc <vTaskSwitchContext+0xb0>)
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	4613      	mov	r3, r2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	4413      	add	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	440b      	add	r3, r1
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d0e4      	beq.n	8006a30 <vTaskSwitchContext+0x24>
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	4613      	mov	r3, r2
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4413      	add	r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	4a12      	ldr	r2, [pc, #72]	; (8006abc <vTaskSwitchContext+0xb0>)
 8006a72:	4413      	add	r3, r2
 8006a74:	60bb      	str	r3, [r7, #8]
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	605a      	str	r2, [r3, #4]
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	685a      	ldr	r2, [r3, #4]
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	3308      	adds	r3, #8
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d104      	bne.n	8006a96 <vTaskSwitchContext+0x8a>
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	685a      	ldr	r2, [r3, #4]
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	605a      	str	r2, [r3, #4]
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	4a08      	ldr	r2, [pc, #32]	; (8006ac0 <vTaskSwitchContext+0xb4>)
 8006a9e:	6013      	str	r3, [r2, #0]
 8006aa0:	4a05      	ldr	r2, [pc, #20]	; (8006ab8 <vTaskSwitchContext+0xac>)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6013      	str	r3, [r2, #0]
}
 8006aa6:	bf00      	nop
 8006aa8:	3714      	adds	r7, #20
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bc80      	pop	{r7}
 8006aae:	4770      	bx	lr
 8006ab0:	20001348 	.word	0x20001348
 8006ab4:	20001334 	.word	0x20001334
 8006ab8:	20001328 	.word	0x20001328
 8006abc:	20000e50 	.word	0x20000e50
 8006ac0:	20000e4c 	.word	0x20000e4c

08006ac4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10a      	bne.n	8006aea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad8:	f383 8811 	msr	BASEPRI, r3
 8006adc:	f3bf 8f6f 	isb	sy
 8006ae0:	f3bf 8f4f 	dsb	sy
 8006ae4:	60fb      	str	r3, [r7, #12]
}
 8006ae6:	bf00      	nop
 8006ae8:	e7fe      	b.n	8006ae8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006aea:	4b07      	ldr	r3, [pc, #28]	; (8006b08 <vTaskPlaceOnEventList+0x44>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	3318      	adds	r3, #24
 8006af0:	4619      	mov	r1, r3
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7fe fe9a 	bl	800582c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006af8:	2101      	movs	r1, #1
 8006afa:	6838      	ldr	r0, [r7, #0]
 8006afc:	f000 fa80 	bl	8007000 <prvAddCurrentTaskToDelayedList>
}
 8006b00:	bf00      	nop
 8006b02:	3710      	adds	r7, #16
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	20000e4c 	.word	0x20000e4c

08006b0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b086      	sub	sp, #24
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10a      	bne.n	8006b34 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b22:	f383 8811 	msr	BASEPRI, r3
 8006b26:	f3bf 8f6f 	isb	sy
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	617b      	str	r3, [r7, #20]
}
 8006b30:	bf00      	nop
 8006b32:	e7fe      	b.n	8006b32 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b34:	4b0a      	ldr	r3, [pc, #40]	; (8006b60 <vTaskPlaceOnEventListRestricted+0x54>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	3318      	adds	r3, #24
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f7fe fe52 	bl	80057e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d002      	beq.n	8006b4e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006b48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b4c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006b4e:	6879      	ldr	r1, [r7, #4]
 8006b50:	68b8      	ldr	r0, [r7, #8]
 8006b52:	f000 fa55 	bl	8007000 <prvAddCurrentTaskToDelayedList>
	}
 8006b56:	bf00      	nop
 8006b58:	3718      	adds	r7, #24
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	20000e4c 	.word	0x20000e4c

08006b64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b086      	sub	sp, #24
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10a      	bne.n	8006b90 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7e:	f383 8811 	msr	BASEPRI, r3
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	60fb      	str	r3, [r7, #12]
}
 8006b8c:	bf00      	nop
 8006b8e:	e7fe      	b.n	8006b8e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	3318      	adds	r3, #24
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7fe fe81 	bl	800589c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b9a:	4b1e      	ldr	r3, [pc, #120]	; (8006c14 <xTaskRemoveFromEventList+0xb0>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d11d      	bne.n	8006bde <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	3304      	adds	r3, #4
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7fe fe78 	bl	800589c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb0:	4b19      	ldr	r3, [pc, #100]	; (8006c18 <xTaskRemoveFromEventList+0xb4>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d903      	bls.n	8006bc0 <xTaskRemoveFromEventList+0x5c>
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbc:	4a16      	ldr	r2, [pc, #88]	; (8006c18 <xTaskRemoveFromEventList+0xb4>)
 8006bbe:	6013      	str	r3, [r2, #0]
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	4413      	add	r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4a13      	ldr	r2, [pc, #76]	; (8006c1c <xTaskRemoveFromEventList+0xb8>)
 8006bce:	441a      	add	r2, r3
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	3304      	adds	r3, #4
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	4610      	mov	r0, r2
 8006bd8:	f7fe fe05 	bl	80057e6 <vListInsertEnd>
 8006bdc:	e005      	b.n	8006bea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	3318      	adds	r3, #24
 8006be2:	4619      	mov	r1, r3
 8006be4:	480e      	ldr	r0, [pc, #56]	; (8006c20 <xTaskRemoveFromEventList+0xbc>)
 8006be6:	f7fe fdfe 	bl	80057e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bee:	4b0d      	ldr	r3, [pc, #52]	; (8006c24 <xTaskRemoveFromEventList+0xc0>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d905      	bls.n	8006c04 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006bfc:	4b0a      	ldr	r3, [pc, #40]	; (8006c28 <xTaskRemoveFromEventList+0xc4>)
 8006bfe:	2201      	movs	r2, #1
 8006c00:	601a      	str	r2, [r3, #0]
 8006c02:	e001      	b.n	8006c08 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006c04:	2300      	movs	r3, #0
 8006c06:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006c08:	697b      	ldr	r3, [r7, #20]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3718      	adds	r7, #24
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	20001348 	.word	0x20001348
 8006c18:	20001328 	.word	0x20001328
 8006c1c:	20000e50 	.word	0x20000e50
 8006c20:	200012e0 	.word	0x200012e0
 8006c24:	20000e4c 	.word	0x20000e4c
 8006c28:	20001334 	.word	0x20001334

08006c2c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006c34:	4b06      	ldr	r3, [pc, #24]	; (8006c50 <vTaskInternalSetTimeOutState+0x24>)
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006c3c:	4b05      	ldr	r3, [pc, #20]	; (8006c54 <vTaskInternalSetTimeOutState+0x28>)
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	605a      	str	r2, [r3, #4]
}
 8006c44:	bf00      	nop
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bc80      	pop	{r7}
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	20001338 	.word	0x20001338
 8006c54:	20001324 	.word	0x20001324

08006c58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b088      	sub	sp, #32
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10a      	bne.n	8006c7e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6c:	f383 8811 	msr	BASEPRI, r3
 8006c70:	f3bf 8f6f 	isb	sy
 8006c74:	f3bf 8f4f 	dsb	sy
 8006c78:	613b      	str	r3, [r7, #16]
}
 8006c7a:	bf00      	nop
 8006c7c:	e7fe      	b.n	8006c7c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10a      	bne.n	8006c9a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	60fb      	str	r3, [r7, #12]
}
 8006c96:	bf00      	nop
 8006c98:	e7fe      	b.n	8006c98 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006c9a:	f000 feb7 	bl	8007a0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006c9e:	4b1d      	ldr	r3, [pc, #116]	; (8006d14 <xTaskCheckForTimeOut+0xbc>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	69ba      	ldr	r2, [r7, #24]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cb6:	d102      	bne.n	8006cbe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	61fb      	str	r3, [r7, #28]
 8006cbc:	e023      	b.n	8006d06 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	4b15      	ldr	r3, [pc, #84]	; (8006d18 <xTaskCheckForTimeOut+0xc0>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d007      	beq.n	8006cda <xTaskCheckForTimeOut+0x82>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	69ba      	ldr	r2, [r7, #24]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d302      	bcc.n	8006cda <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	61fb      	str	r3, [r7, #28]
 8006cd8:	e015      	b.n	8006d06 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d20b      	bcs.n	8006cfc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	1ad2      	subs	r2, r2, r3
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f7ff ff9b 	bl	8006c2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	61fb      	str	r3, [r7, #28]
 8006cfa:	e004      	b.n	8006d06 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006d02:	2301      	movs	r3, #1
 8006d04:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006d06:	f000 feb1 	bl	8007a6c <vPortExitCritical>

	return xReturn;
 8006d0a:	69fb      	ldr	r3, [r7, #28]
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3720      	adds	r7, #32
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	20001324 	.word	0x20001324
 8006d18:	20001338 	.word	0x20001338

08006d1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006d20:	4b03      	ldr	r3, [pc, #12]	; (8006d30 <vTaskMissedYield+0x14>)
 8006d22:	2201      	movs	r2, #1
 8006d24:	601a      	str	r2, [r3, #0]
}
 8006d26:	bf00      	nop
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bc80      	pop	{r7}
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	20001334 	.word	0x20001334

08006d34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d3c:	f000 f852 	bl	8006de4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d40:	4b06      	ldr	r3, [pc, #24]	; (8006d5c <prvIdleTask+0x28>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d9f9      	bls.n	8006d3c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d48:	4b05      	ldr	r3, [pc, #20]	; (8006d60 <prvIdleTask+0x2c>)
 8006d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d4e:	601a      	str	r2, [r3, #0]
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d58:	e7f0      	b.n	8006d3c <prvIdleTask+0x8>
 8006d5a:	bf00      	nop
 8006d5c:	20000e50 	.word	0x20000e50
 8006d60:	e000ed04 	.word	0xe000ed04

08006d64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	607b      	str	r3, [r7, #4]
 8006d6e:	e00c      	b.n	8006d8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	4613      	mov	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	4a12      	ldr	r2, [pc, #72]	; (8006dc4 <prvInitialiseTaskLists+0x60>)
 8006d7c:	4413      	add	r3, r2
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fe fd06 	bl	8005790 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	3301      	adds	r3, #1
 8006d88:	607b      	str	r3, [r7, #4]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2b37      	cmp	r3, #55	; 0x37
 8006d8e:	d9ef      	bls.n	8006d70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d90:	480d      	ldr	r0, [pc, #52]	; (8006dc8 <prvInitialiseTaskLists+0x64>)
 8006d92:	f7fe fcfd 	bl	8005790 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d96:	480d      	ldr	r0, [pc, #52]	; (8006dcc <prvInitialiseTaskLists+0x68>)
 8006d98:	f7fe fcfa 	bl	8005790 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d9c:	480c      	ldr	r0, [pc, #48]	; (8006dd0 <prvInitialiseTaskLists+0x6c>)
 8006d9e:	f7fe fcf7 	bl	8005790 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006da2:	480c      	ldr	r0, [pc, #48]	; (8006dd4 <prvInitialiseTaskLists+0x70>)
 8006da4:	f7fe fcf4 	bl	8005790 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006da8:	480b      	ldr	r0, [pc, #44]	; (8006dd8 <prvInitialiseTaskLists+0x74>)
 8006daa:	f7fe fcf1 	bl	8005790 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006dae:	4b0b      	ldr	r3, [pc, #44]	; (8006ddc <prvInitialiseTaskLists+0x78>)
 8006db0:	4a05      	ldr	r2, [pc, #20]	; (8006dc8 <prvInitialiseTaskLists+0x64>)
 8006db2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006db4:	4b0a      	ldr	r3, [pc, #40]	; (8006de0 <prvInitialiseTaskLists+0x7c>)
 8006db6:	4a05      	ldr	r2, [pc, #20]	; (8006dcc <prvInitialiseTaskLists+0x68>)
 8006db8:	601a      	str	r2, [r3, #0]
}
 8006dba:	bf00      	nop
 8006dbc:	3708      	adds	r7, #8
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	20000e50 	.word	0x20000e50
 8006dc8:	200012b0 	.word	0x200012b0
 8006dcc:	200012c4 	.word	0x200012c4
 8006dd0:	200012e0 	.word	0x200012e0
 8006dd4:	200012f4 	.word	0x200012f4
 8006dd8:	2000130c 	.word	0x2000130c
 8006ddc:	200012d8 	.word	0x200012d8
 8006de0:	200012dc 	.word	0x200012dc

08006de4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006dea:	e019      	b.n	8006e20 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006dec:	f000 fe0e 	bl	8007a0c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006df0:	4b10      	ldr	r3, [pc, #64]	; (8006e34 <prvCheckTasksWaitingTermination+0x50>)
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	3304      	adds	r3, #4
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f7fe fd4d 	bl	800589c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006e02:	4b0d      	ldr	r3, [pc, #52]	; (8006e38 <prvCheckTasksWaitingTermination+0x54>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	3b01      	subs	r3, #1
 8006e08:	4a0b      	ldr	r2, [pc, #44]	; (8006e38 <prvCheckTasksWaitingTermination+0x54>)
 8006e0a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006e0c:	4b0b      	ldr	r3, [pc, #44]	; (8006e3c <prvCheckTasksWaitingTermination+0x58>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	3b01      	subs	r3, #1
 8006e12:	4a0a      	ldr	r2, [pc, #40]	; (8006e3c <prvCheckTasksWaitingTermination+0x58>)
 8006e14:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006e16:	f000 fe29 	bl	8007a6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f810 	bl	8006e40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e20:	4b06      	ldr	r3, [pc, #24]	; (8006e3c <prvCheckTasksWaitingTermination+0x58>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1e1      	bne.n	8006dec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e28:	bf00      	nop
 8006e2a:	bf00      	nop
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	200012f4 	.word	0x200012f4
 8006e38:	20001320 	.word	0x20001320
 8006e3c:	20001308 	.word	0x20001308

08006e40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d108      	bne.n	8006e64 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 ff9c 	bl	8007d94 <vPortFree>
				vPortFree( pxTCB );
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 ff99 	bl	8007d94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e62:	e018      	b.n	8006e96 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d103      	bne.n	8006e76 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 ff90 	bl	8007d94 <vPortFree>
	}
 8006e74:	e00f      	b.n	8006e96 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d00a      	beq.n	8006e96 <prvDeleteTCB+0x56>
	__asm volatile
 8006e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e84:	f383 8811 	msr	BASEPRI, r3
 8006e88:	f3bf 8f6f 	isb	sy
 8006e8c:	f3bf 8f4f 	dsb	sy
 8006e90:	60fb      	str	r3, [r7, #12]
}
 8006e92:	bf00      	nop
 8006e94:	e7fe      	b.n	8006e94 <prvDeleteTCB+0x54>
	}
 8006e96:	bf00      	nop
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
	...

08006ea0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ea6:	4b0e      	ldr	r3, [pc, #56]	; (8006ee0 <prvResetNextTaskUnblockTime+0x40>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d101      	bne.n	8006eb4 <prvResetNextTaskUnblockTime+0x14>
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e000      	b.n	8006eb6 <prvResetNextTaskUnblockTime+0x16>
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d004      	beq.n	8006ec4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006eba:	4b0a      	ldr	r3, [pc, #40]	; (8006ee4 <prvResetNextTaskUnblockTime+0x44>)
 8006ebc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ec0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ec2:	e008      	b.n	8006ed6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006ec4:	4b06      	ldr	r3, [pc, #24]	; (8006ee0 <prvResetNextTaskUnblockTime+0x40>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	4a04      	ldr	r2, [pc, #16]	; (8006ee4 <prvResetNextTaskUnblockTime+0x44>)
 8006ed4:	6013      	str	r3, [r2, #0]
}
 8006ed6:	bf00      	nop
 8006ed8:	370c      	adds	r7, #12
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bc80      	pop	{r7}
 8006ede:	4770      	bx	lr
 8006ee0:	200012d8 	.word	0x200012d8
 8006ee4:	20001340 	.word	0x20001340

08006ee8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006eee:	4b0b      	ldr	r3, [pc, #44]	; (8006f1c <xTaskGetSchedulerState+0x34>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d102      	bne.n	8006efc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	607b      	str	r3, [r7, #4]
 8006efa:	e008      	b.n	8006f0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006efc:	4b08      	ldr	r3, [pc, #32]	; (8006f20 <xTaskGetSchedulerState+0x38>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d102      	bne.n	8006f0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006f04:	2302      	movs	r3, #2
 8006f06:	607b      	str	r3, [r7, #4]
 8006f08:	e001      	b.n	8006f0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006f0e:	687b      	ldr	r3, [r7, #4]
	}
 8006f10:	4618      	mov	r0, r3
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bc80      	pop	{r7}
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	2000132c 	.word	0x2000132c
 8006f20:	20001348 	.word	0x20001348

08006f24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b086      	sub	sp, #24
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006f30:	2300      	movs	r3, #0
 8006f32:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d056      	beq.n	8006fe8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006f3a:	4b2e      	ldr	r3, [pc, #184]	; (8006ff4 <xTaskPriorityDisinherit+0xd0>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	693a      	ldr	r2, [r7, #16]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d00a      	beq.n	8006f5a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f48:	f383 8811 	msr	BASEPRI, r3
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	60fb      	str	r3, [r7, #12]
}
 8006f56:	bf00      	nop
 8006f58:	e7fe      	b.n	8006f58 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10a      	bne.n	8006f78 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f66:	f383 8811 	msr	BASEPRI, r3
 8006f6a:	f3bf 8f6f 	isb	sy
 8006f6e:	f3bf 8f4f 	dsb	sy
 8006f72:	60bb      	str	r3, [r7, #8]
}
 8006f74:	bf00      	nop
 8006f76:	e7fe      	b.n	8006f76 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f7c:	1e5a      	subs	r2, r3, #1
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d02c      	beq.n	8006fe8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d128      	bne.n	8006fe8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	3304      	adds	r3, #4
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7fe fc7e 	bl	800589c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb8:	4b0f      	ldr	r3, [pc, #60]	; (8006ff8 <xTaskPriorityDisinherit+0xd4>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d903      	bls.n	8006fc8 <xTaskPriorityDisinherit+0xa4>
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc4:	4a0c      	ldr	r2, [pc, #48]	; (8006ff8 <xTaskPriorityDisinherit+0xd4>)
 8006fc6:	6013      	str	r3, [r2, #0]
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fcc:	4613      	mov	r3, r2
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	4413      	add	r3, r2
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	4a09      	ldr	r2, [pc, #36]	; (8006ffc <xTaskPriorityDisinherit+0xd8>)
 8006fd6:	441a      	add	r2, r3
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	3304      	adds	r3, #4
 8006fdc:	4619      	mov	r1, r3
 8006fde:	4610      	mov	r0, r2
 8006fe0:	f7fe fc01 	bl	80057e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006fe8:	697b      	ldr	r3, [r7, #20]
	}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3718      	adds	r7, #24
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	20000e4c 	.word	0x20000e4c
 8006ff8:	20001328 	.word	0x20001328
 8006ffc:	20000e50 	.word	0x20000e50

08007000 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800700a:	4b21      	ldr	r3, [pc, #132]	; (8007090 <prvAddCurrentTaskToDelayedList+0x90>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007010:	4b20      	ldr	r3, [pc, #128]	; (8007094 <prvAddCurrentTaskToDelayedList+0x94>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	3304      	adds	r3, #4
 8007016:	4618      	mov	r0, r3
 8007018:	f7fe fc40 	bl	800589c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007022:	d10a      	bne.n	800703a <prvAddCurrentTaskToDelayedList+0x3a>
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d007      	beq.n	800703a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800702a:	4b1a      	ldr	r3, [pc, #104]	; (8007094 <prvAddCurrentTaskToDelayedList+0x94>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	3304      	adds	r3, #4
 8007030:	4619      	mov	r1, r3
 8007032:	4819      	ldr	r0, [pc, #100]	; (8007098 <prvAddCurrentTaskToDelayedList+0x98>)
 8007034:	f7fe fbd7 	bl	80057e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007038:	e026      	b.n	8007088 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4413      	add	r3, r2
 8007040:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007042:	4b14      	ldr	r3, [pc, #80]	; (8007094 <prvAddCurrentTaskToDelayedList+0x94>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	429a      	cmp	r2, r3
 8007050:	d209      	bcs.n	8007066 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007052:	4b12      	ldr	r3, [pc, #72]	; (800709c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	4b0f      	ldr	r3, [pc, #60]	; (8007094 <prvAddCurrentTaskToDelayedList+0x94>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	3304      	adds	r3, #4
 800705c:	4619      	mov	r1, r3
 800705e:	4610      	mov	r0, r2
 8007060:	f7fe fbe4 	bl	800582c <vListInsert>
}
 8007064:	e010      	b.n	8007088 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007066:	4b0e      	ldr	r3, [pc, #56]	; (80070a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	4b0a      	ldr	r3, [pc, #40]	; (8007094 <prvAddCurrentTaskToDelayedList+0x94>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	3304      	adds	r3, #4
 8007070:	4619      	mov	r1, r3
 8007072:	4610      	mov	r0, r2
 8007074:	f7fe fbda 	bl	800582c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007078:	4b0a      	ldr	r3, [pc, #40]	; (80070a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68ba      	ldr	r2, [r7, #8]
 800707e:	429a      	cmp	r2, r3
 8007080:	d202      	bcs.n	8007088 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007082:	4a08      	ldr	r2, [pc, #32]	; (80070a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	6013      	str	r3, [r2, #0]
}
 8007088:	bf00      	nop
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	20001324 	.word	0x20001324
 8007094:	20000e4c 	.word	0x20000e4c
 8007098:	2000130c 	.word	0x2000130c
 800709c:	200012dc 	.word	0x200012dc
 80070a0:	200012d8 	.word	0x200012d8
 80070a4:	20001340 	.word	0x20001340

080070a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b08a      	sub	sp, #40	; 0x28
 80070ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80070ae:	2300      	movs	r3, #0
 80070b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80070b2:	f000 fb5b 	bl	800776c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80070b6:	4b1c      	ldr	r3, [pc, #112]	; (8007128 <xTimerCreateTimerTask+0x80>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d021      	beq.n	8007102 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80070be:	2300      	movs	r3, #0
 80070c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80070c2:	2300      	movs	r3, #0
 80070c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80070c6:	1d3a      	adds	r2, r7, #4
 80070c8:	f107 0108 	add.w	r1, r7, #8
 80070cc:	f107 030c 	add.w	r3, r7, #12
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7fe fb43 	bl	800575c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80070d6:	6879      	ldr	r1, [r7, #4]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	9202      	str	r2, [sp, #8]
 80070de:	9301      	str	r3, [sp, #4]
 80070e0:	2302      	movs	r3, #2
 80070e2:	9300      	str	r3, [sp, #0]
 80070e4:	2300      	movs	r3, #0
 80070e6:	460a      	mov	r2, r1
 80070e8:	4910      	ldr	r1, [pc, #64]	; (800712c <xTimerCreateTimerTask+0x84>)
 80070ea:	4811      	ldr	r0, [pc, #68]	; (8007130 <xTimerCreateTimerTask+0x88>)
 80070ec:	f7ff f8e4 	bl	80062b8 <xTaskCreateStatic>
 80070f0:	4603      	mov	r3, r0
 80070f2:	4a10      	ldr	r2, [pc, #64]	; (8007134 <xTimerCreateTimerTask+0x8c>)
 80070f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80070f6:	4b0f      	ldr	r3, [pc, #60]	; (8007134 <xTimerCreateTimerTask+0x8c>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d001      	beq.n	8007102 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80070fe:	2301      	movs	r3, #1
 8007100:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d10a      	bne.n	800711e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710c:	f383 8811 	msr	BASEPRI, r3
 8007110:	f3bf 8f6f 	isb	sy
 8007114:	f3bf 8f4f 	dsb	sy
 8007118:	613b      	str	r3, [r7, #16]
}
 800711a:	bf00      	nop
 800711c:	e7fe      	b.n	800711c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800711e:	697b      	ldr	r3, [r7, #20]
}
 8007120:	4618      	mov	r0, r3
 8007122:	3718      	adds	r7, #24
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	2000137c 	.word	0x2000137c
 800712c:	080087bc 	.word	0x080087bc
 8007130:	08007375 	.word	0x08007375
 8007134:	20001380 	.word	0x20001380

08007138 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007138:	b580      	push	{r7, lr}
 800713a:	b088      	sub	sp, #32
 800713c:	af02      	add	r7, sp, #8
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]
 8007144:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8007146:	2030      	movs	r0, #48	; 0x30
 8007148:	f000 fd60 	bl	8007c0c <pvPortMalloc>
 800714c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00d      	beq.n	8007170 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	9301      	str	r3, [sp, #4]
 8007158:	6a3b      	ldr	r3, [r7, #32]
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	68b9      	ldr	r1, [r7, #8]
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f000 f846 	bl	80071f4 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8007170:	697b      	ldr	r3, [r7, #20]
	}
 8007172:	4618      	mov	r0, r3
 8007174:	3718      	adds	r7, #24
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800717a:	b580      	push	{r7, lr}
 800717c:	b08a      	sub	sp, #40	; 0x28
 800717e:	af02      	add	r7, sp, #8
 8007180:	60f8      	str	r0, [r7, #12]
 8007182:	60b9      	str	r1, [r7, #8]
 8007184:	607a      	str	r2, [r7, #4]
 8007186:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8007188:	2330      	movs	r3, #48	; 0x30
 800718a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	2b30      	cmp	r3, #48	; 0x30
 8007190:	d00a      	beq.n	80071a8 <xTimerCreateStatic+0x2e>
	__asm volatile
 8007192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	61bb      	str	r3, [r7, #24]
}
 80071a4:	bf00      	nop
 80071a6:	e7fe      	b.n	80071a6 <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80071a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10a      	bne.n	80071c4 <xTimerCreateStatic+0x4a>
	__asm volatile
 80071ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b2:	f383 8811 	msr	BASEPRI, r3
 80071b6:	f3bf 8f6f 	isb	sy
 80071ba:	f3bf 8f4f 	dsb	sy
 80071be:	617b      	str	r3, [r7, #20]
}
 80071c0:	bf00      	nop
 80071c2:	e7fe      	b.n	80071c2 <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80071c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c6:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00d      	beq.n	80071ea <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	9301      	str	r3, [sp, #4]
 80071d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d4:	9300      	str	r3, [sp, #0]
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	68b9      	ldr	r1, [r7, #8]
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f000 f809 	bl	80071f4 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 80071ea:	69fb      	ldr	r3, [r7, #28]
	}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3720      	adds	r7, #32
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b086      	sub	sp, #24
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
 8007200:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d10a      	bne.n	800721e <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8007208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720c:	f383 8811 	msr	BASEPRI, r3
 8007210:	f3bf 8f6f 	isb	sy
 8007214:	f3bf 8f4f 	dsb	sy
 8007218:	617b      	str	r3, [r7, #20]
}
 800721a:	bf00      	nop
 800721c:	e7fe      	b.n	800721c <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800721e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007220:	2b00      	cmp	r3, #0
 8007222:	d015      	beq.n	8007250 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007224:	f000 faa2 	bl	800776c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800722e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007230:	68ba      	ldr	r2, [r7, #8]
 8007232:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8007234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800723a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723c:	683a      	ldr	r2, [r7, #0]
 800723e:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007242:	6a3a      	ldr	r2, [r7, #32]
 8007244:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007248:	3304      	adds	r3, #4
 800724a:	4618      	mov	r0, r3
 800724c:	f7fe fabf 	bl	80057ce <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007250:	bf00      	nop
 8007252:	3718      	adds	r7, #24
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b08a      	sub	sp, #40	; 0x28
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
 8007264:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007266:	2300      	movs	r3, #0
 8007268:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10a      	bne.n	8007286 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007274:	f383 8811 	msr	BASEPRI, r3
 8007278:	f3bf 8f6f 	isb	sy
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	623b      	str	r3, [r7, #32]
}
 8007282:	bf00      	nop
 8007284:	e7fe      	b.n	8007284 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007286:	4b1a      	ldr	r3, [pc, #104]	; (80072f0 <xTimerGenericCommand+0x98>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d02a      	beq.n	80072e4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	2b05      	cmp	r3, #5
 800729e:	dc18      	bgt.n	80072d2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80072a0:	f7ff fe22 	bl	8006ee8 <xTaskGetSchedulerState>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d109      	bne.n	80072be <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80072aa:	4b11      	ldr	r3, [pc, #68]	; (80072f0 <xTimerGenericCommand+0x98>)
 80072ac:	6818      	ldr	r0, [r3, #0]
 80072ae:	f107 0110 	add.w	r1, r7, #16
 80072b2:	2300      	movs	r3, #0
 80072b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072b6:	f7fe fc1d 	bl	8005af4 <xQueueGenericSend>
 80072ba:	6278      	str	r0, [r7, #36]	; 0x24
 80072bc:	e012      	b.n	80072e4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80072be:	4b0c      	ldr	r3, [pc, #48]	; (80072f0 <xTimerGenericCommand+0x98>)
 80072c0:	6818      	ldr	r0, [r3, #0]
 80072c2:	f107 0110 	add.w	r1, r7, #16
 80072c6:	2300      	movs	r3, #0
 80072c8:	2200      	movs	r2, #0
 80072ca:	f7fe fc13 	bl	8005af4 <xQueueGenericSend>
 80072ce:	6278      	str	r0, [r7, #36]	; 0x24
 80072d0:	e008      	b.n	80072e4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80072d2:	4b07      	ldr	r3, [pc, #28]	; (80072f0 <xTimerGenericCommand+0x98>)
 80072d4:	6818      	ldr	r0, [r3, #0]
 80072d6:	f107 0110 	add.w	r1, r7, #16
 80072da:	2300      	movs	r3, #0
 80072dc:	683a      	ldr	r2, [r7, #0]
 80072de:	f7fe fd07 	bl	8005cf0 <xQueueGenericSendFromISR>
 80072e2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80072e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3728      	adds	r7, #40	; 0x28
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	2000137c 	.word	0x2000137c

080072f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b088      	sub	sp, #32
 80072f8:	af02      	add	r7, sp, #8
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072fe:	4b1c      	ldr	r3, [pc, #112]	; (8007370 <prvProcessExpiredTimer+0x7c>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	3304      	adds	r3, #4
 800730c:	4618      	mov	r0, r3
 800730e:	f7fe fac5 	bl	800589c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	69db      	ldr	r3, [r3, #28]
 8007316:	2b01      	cmp	r3, #1
 8007318:	d122      	bne.n	8007360 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	699a      	ldr	r2, [r3, #24]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	18d1      	adds	r1, r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	683a      	ldr	r2, [r7, #0]
 8007326:	6978      	ldr	r0, [r7, #20]
 8007328:	f000 f8c8 	bl	80074bc <prvInsertTimerInActiveList>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d016      	beq.n	8007360 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007332:	2300      	movs	r3, #0
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	2300      	movs	r3, #0
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	2100      	movs	r1, #0
 800733c:	6978      	ldr	r0, [r7, #20]
 800733e:	f7ff ff8b 	bl	8007258 <xTimerGenericCommand>
 8007342:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d10a      	bne.n	8007360 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800734a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734e:	f383 8811 	msr	BASEPRI, r3
 8007352:	f3bf 8f6f 	isb	sy
 8007356:	f3bf 8f4f 	dsb	sy
 800735a:	60fb      	str	r3, [r7, #12]
}
 800735c:	bf00      	nop
 800735e:	e7fe      	b.n	800735e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007364:	6978      	ldr	r0, [r7, #20]
 8007366:	4798      	blx	r3
}
 8007368:	bf00      	nop
 800736a:	3718      	adds	r7, #24
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	20001374 	.word	0x20001374

08007374 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800737c:	f107 0308 	add.w	r3, r7, #8
 8007380:	4618      	mov	r0, r3
 8007382:	f000 f857 	bl	8007434 <prvGetNextExpireTime>
 8007386:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	4619      	mov	r1, r3
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f000 f803 	bl	8007398 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007392:	f000 f8d5 	bl	8007540 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007396:	e7f1      	b.n	800737c <prvTimerTask+0x8>

08007398 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80073a2:	f7ff f9bb 	bl	800671c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80073a6:	f107 0308 	add.w	r3, r7, #8
 80073aa:	4618      	mov	r0, r3
 80073ac:	f000 f866 	bl	800747c <prvSampleTimeNow>
 80073b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d130      	bne.n	800741a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d10a      	bne.n	80073d4 <prvProcessTimerOrBlockTask+0x3c>
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d806      	bhi.n	80073d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80073c6:	f7ff f9b7 	bl	8006738 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80073ca:	68f9      	ldr	r1, [r7, #12]
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f7ff ff91 	bl	80072f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80073d2:	e024      	b.n	800741e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d008      	beq.n	80073ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80073da:	4b13      	ldr	r3, [pc, #76]	; (8007428 <prvProcessTimerOrBlockTask+0x90>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	bf0c      	ite	eq
 80073e4:	2301      	moveq	r3, #1
 80073e6:	2300      	movne	r3, #0
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80073ec:	4b0f      	ldr	r3, [pc, #60]	; (800742c <prvProcessTimerOrBlockTask+0x94>)
 80073ee:	6818      	ldr	r0, [r3, #0]
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	4619      	mov	r1, r3
 80073fa:	f7fe ff29 	bl	8006250 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80073fe:	f7ff f99b 	bl	8006738 <xTaskResumeAll>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d10a      	bne.n	800741e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007408:	4b09      	ldr	r3, [pc, #36]	; (8007430 <prvProcessTimerOrBlockTask+0x98>)
 800740a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800740e:	601a      	str	r2, [r3, #0]
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	f3bf 8f6f 	isb	sy
}
 8007418:	e001      	b.n	800741e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800741a:	f7ff f98d 	bl	8006738 <xTaskResumeAll>
}
 800741e:	bf00      	nop
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	20001378 	.word	0x20001378
 800742c:	2000137c 	.word	0x2000137c
 8007430:	e000ed04 	.word	0xe000ed04

08007434 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800743c:	4b0e      	ldr	r3, [pc, #56]	; (8007478 <prvGetNextExpireTime+0x44>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	bf0c      	ite	eq
 8007446:	2301      	moveq	r3, #1
 8007448:	2300      	movne	r3, #0
 800744a:	b2db      	uxtb	r3, r3
 800744c:	461a      	mov	r2, r3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d105      	bne.n	8007466 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800745a:	4b07      	ldr	r3, [pc, #28]	; (8007478 <prvGetNextExpireTime+0x44>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	60fb      	str	r3, [r7, #12]
 8007464:	e001      	b.n	800746a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007466:	2300      	movs	r3, #0
 8007468:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800746a:	68fb      	ldr	r3, [r7, #12]
}
 800746c:	4618      	mov	r0, r3
 800746e:	3714      	adds	r7, #20
 8007470:	46bd      	mov	sp, r7
 8007472:	bc80      	pop	{r7}
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	20001374 	.word	0x20001374

0800747c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007484:	f7ff f9f6 	bl	8006874 <xTaskGetTickCount>
 8007488:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800748a:	4b0b      	ldr	r3, [pc, #44]	; (80074b8 <prvSampleTimeNow+0x3c>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	429a      	cmp	r2, r3
 8007492:	d205      	bcs.n	80074a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007494:	f000 f908 	bl	80076a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	601a      	str	r2, [r3, #0]
 800749e:	e002      	b.n	80074a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80074a6:	4a04      	ldr	r2, [pc, #16]	; (80074b8 <prvSampleTimeNow+0x3c>)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80074ac:	68fb      	ldr	r3, [r7, #12]
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	20001384 	.word	0x20001384

080074bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b086      	sub	sp, #24
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
 80074c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80074ca:	2300      	movs	r3, #0
 80074cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80074da:	68ba      	ldr	r2, [r7, #8]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d812      	bhi.n	8007508 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	1ad2      	subs	r2, r2, r3
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	699b      	ldr	r3, [r3, #24]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d302      	bcc.n	80074f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80074f0:	2301      	movs	r3, #1
 80074f2:	617b      	str	r3, [r7, #20]
 80074f4:	e01b      	b.n	800752e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80074f6:	4b10      	ldr	r3, [pc, #64]	; (8007538 <prvInsertTimerInActiveList+0x7c>)
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	3304      	adds	r3, #4
 80074fe:	4619      	mov	r1, r3
 8007500:	4610      	mov	r0, r2
 8007502:	f7fe f993 	bl	800582c <vListInsert>
 8007506:	e012      	b.n	800752e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	429a      	cmp	r2, r3
 800750e:	d206      	bcs.n	800751e <prvInsertTimerInActiveList+0x62>
 8007510:	68ba      	ldr	r2, [r7, #8]
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	429a      	cmp	r2, r3
 8007516:	d302      	bcc.n	800751e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007518:	2301      	movs	r3, #1
 800751a:	617b      	str	r3, [r7, #20]
 800751c:	e007      	b.n	800752e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800751e:	4b07      	ldr	r3, [pc, #28]	; (800753c <prvInsertTimerInActiveList+0x80>)
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	3304      	adds	r3, #4
 8007526:	4619      	mov	r1, r3
 8007528:	4610      	mov	r0, r2
 800752a:	f7fe f97f 	bl	800582c <vListInsert>
		}
	}

	return xProcessTimerNow;
 800752e:	697b      	ldr	r3, [r7, #20]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3718      	adds	r7, #24
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	20001378 	.word	0x20001378
 800753c:	20001374 	.word	0x20001374

08007540 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b08e      	sub	sp, #56	; 0x38
 8007544:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007546:	e09d      	b.n	8007684 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2b00      	cmp	r3, #0
 800754c:	da18      	bge.n	8007580 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800754e:	1d3b      	adds	r3, r7, #4
 8007550:	3304      	adds	r3, #4
 8007552:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007556:	2b00      	cmp	r3, #0
 8007558:	d10a      	bne.n	8007570 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800755a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755e:	f383 8811 	msr	BASEPRI, r3
 8007562:	f3bf 8f6f 	isb	sy
 8007566:	f3bf 8f4f 	dsb	sy
 800756a:	61fb      	str	r3, [r7, #28]
}
 800756c:	bf00      	nop
 800756e:	e7fe      	b.n	800756e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007576:	6850      	ldr	r0, [r2, #4]
 8007578:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800757a:	6892      	ldr	r2, [r2, #8]
 800757c:	4611      	mov	r1, r2
 800757e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	db7e      	blt.n	8007684 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800758a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758c:	695b      	ldr	r3, [r3, #20]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d004      	beq.n	800759c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007594:	3304      	adds	r3, #4
 8007596:	4618      	mov	r0, r3
 8007598:	f7fe f980 	bl	800589c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800759c:	463b      	mov	r3, r7
 800759e:	4618      	mov	r0, r3
 80075a0:	f7ff ff6c 	bl	800747c <prvSampleTimeNow>
 80075a4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2b09      	cmp	r3, #9
 80075aa:	d86a      	bhi.n	8007682 <prvProcessReceivedCommands+0x142>
 80075ac:	a201      	add	r2, pc, #4	; (adr r2, 80075b4 <prvProcessReceivedCommands+0x74>)
 80075ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b2:	bf00      	nop
 80075b4:	080075dd 	.word	0x080075dd
 80075b8:	080075dd 	.word	0x080075dd
 80075bc:	080075dd 	.word	0x080075dd
 80075c0:	08007685 	.word	0x08007685
 80075c4:	08007639 	.word	0x08007639
 80075c8:	08007671 	.word	0x08007671
 80075cc:	080075dd 	.word	0x080075dd
 80075d0:	080075dd 	.word	0x080075dd
 80075d4:	08007685 	.word	0x08007685
 80075d8:	08007639 	.word	0x08007639
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	18d1      	adds	r1, r2, r3
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075ea:	f7ff ff67 	bl	80074bc <prvInsertTimerInActiveList>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d047      	beq.n	8007684 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075fa:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80075fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fe:	69db      	ldr	r3, [r3, #28]
 8007600:	2b01      	cmp	r3, #1
 8007602:	d13f      	bne.n	8007684 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007604:	68ba      	ldr	r2, [r7, #8]
 8007606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007608:	699b      	ldr	r3, [r3, #24]
 800760a:	441a      	add	r2, r3
 800760c:	2300      	movs	r3, #0
 800760e:	9300      	str	r3, [sp, #0]
 8007610:	2300      	movs	r3, #0
 8007612:	2100      	movs	r1, #0
 8007614:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007616:	f7ff fe1f 	bl	8007258 <xTimerGenericCommand>
 800761a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800761c:	6a3b      	ldr	r3, [r7, #32]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d130      	bne.n	8007684 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8007622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007626:	f383 8811 	msr	BASEPRI, r3
 800762a:	f3bf 8f6f 	isb	sy
 800762e:	f3bf 8f4f 	dsb	sy
 8007632:	61bb      	str	r3, [r7, #24]
}
 8007634:	bf00      	nop
 8007636:	e7fe      	b.n	8007636 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007638:	68ba      	ldr	r2, [r7, #8]
 800763a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800763c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800763e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d10a      	bne.n	800765c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8007646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764a:	f383 8811 	msr	BASEPRI, r3
 800764e:	f3bf 8f6f 	isb	sy
 8007652:	f3bf 8f4f 	dsb	sy
 8007656:	617b      	str	r3, [r7, #20]
}
 8007658:	bf00      	nop
 800765a:	e7fe      	b.n	800765a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800765c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765e:	699a      	ldr	r2, [r3, #24]
 8007660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007662:	18d1      	adds	r1, r2, r3
 8007664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007668:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800766a:	f7ff ff27 	bl	80074bc <prvInsertTimerInActiveList>
					break;
 800766e:	e009      	b.n	8007684 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007672:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007676:	2b00      	cmp	r3, #0
 8007678:	d104      	bne.n	8007684 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800767a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800767c:	f000 fb8a 	bl	8007d94 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007680:	e000      	b.n	8007684 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8007682:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007684:	4b07      	ldr	r3, [pc, #28]	; (80076a4 <prvProcessReceivedCommands+0x164>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	1d39      	adds	r1, r7, #4
 800768a:	2200      	movs	r2, #0
 800768c:	4618      	mov	r0, r3
 800768e:	f7fe fbc7 	bl	8005e20 <xQueueReceive>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	f47f af57 	bne.w	8007548 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800769a:	bf00      	nop
 800769c:	bf00      	nop
 800769e:	3730      	adds	r7, #48	; 0x30
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	2000137c 	.word	0x2000137c

080076a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b088      	sub	sp, #32
 80076ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076ae:	e045      	b.n	800773c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076b0:	4b2c      	ldr	r3, [pc, #176]	; (8007764 <prvSwitchTimerLists+0xbc>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076ba:	4b2a      	ldr	r3, [pc, #168]	; (8007764 <prvSwitchTimerLists+0xbc>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	3304      	adds	r3, #4
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7fe f8e7 	bl	800589c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	69db      	ldr	r3, [r3, #28]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d12e      	bne.n	800773c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	699b      	ldr	r3, [r3, #24]
 80076e2:	693a      	ldr	r2, [r7, #16]
 80076e4:	4413      	add	r3, r2
 80076e6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80076e8:	68ba      	ldr	r2, [r7, #8]
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d90e      	bls.n	800770e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80076fc:	4b19      	ldr	r3, [pc, #100]	; (8007764 <prvSwitchTimerLists+0xbc>)
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	3304      	adds	r3, #4
 8007704:	4619      	mov	r1, r3
 8007706:	4610      	mov	r0, r2
 8007708:	f7fe f890 	bl	800582c <vListInsert>
 800770c:	e016      	b.n	800773c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800770e:	2300      	movs	r3, #0
 8007710:	9300      	str	r3, [sp, #0]
 8007712:	2300      	movs	r3, #0
 8007714:	693a      	ldr	r2, [r7, #16]
 8007716:	2100      	movs	r1, #0
 8007718:	68f8      	ldr	r0, [r7, #12]
 800771a:	f7ff fd9d 	bl	8007258 <xTimerGenericCommand>
 800771e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d10a      	bne.n	800773c <prvSwitchTimerLists+0x94>
	__asm volatile
 8007726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772a:	f383 8811 	msr	BASEPRI, r3
 800772e:	f3bf 8f6f 	isb	sy
 8007732:	f3bf 8f4f 	dsb	sy
 8007736:	603b      	str	r3, [r7, #0]
}
 8007738:	bf00      	nop
 800773a:	e7fe      	b.n	800773a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800773c:	4b09      	ldr	r3, [pc, #36]	; (8007764 <prvSwitchTimerLists+0xbc>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1b4      	bne.n	80076b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007746:	4b07      	ldr	r3, [pc, #28]	; (8007764 <prvSwitchTimerLists+0xbc>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800774c:	4b06      	ldr	r3, [pc, #24]	; (8007768 <prvSwitchTimerLists+0xc0>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a04      	ldr	r2, [pc, #16]	; (8007764 <prvSwitchTimerLists+0xbc>)
 8007752:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007754:	4a04      	ldr	r2, [pc, #16]	; (8007768 <prvSwitchTimerLists+0xc0>)
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	6013      	str	r3, [r2, #0]
}
 800775a:	bf00      	nop
 800775c:	3718      	adds	r7, #24
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	20001374 	.word	0x20001374
 8007768:	20001378 	.word	0x20001378

0800776c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007772:	f000 f94b 	bl	8007a0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007776:	4b15      	ldr	r3, [pc, #84]	; (80077cc <prvCheckForValidListAndQueue+0x60>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d120      	bne.n	80077c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800777e:	4814      	ldr	r0, [pc, #80]	; (80077d0 <prvCheckForValidListAndQueue+0x64>)
 8007780:	f7fe f806 	bl	8005790 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007784:	4813      	ldr	r0, [pc, #76]	; (80077d4 <prvCheckForValidListAndQueue+0x68>)
 8007786:	f7fe f803 	bl	8005790 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800778a:	4b13      	ldr	r3, [pc, #76]	; (80077d8 <prvCheckForValidListAndQueue+0x6c>)
 800778c:	4a10      	ldr	r2, [pc, #64]	; (80077d0 <prvCheckForValidListAndQueue+0x64>)
 800778e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007790:	4b12      	ldr	r3, [pc, #72]	; (80077dc <prvCheckForValidListAndQueue+0x70>)
 8007792:	4a10      	ldr	r2, [pc, #64]	; (80077d4 <prvCheckForValidListAndQueue+0x68>)
 8007794:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007796:	2300      	movs	r3, #0
 8007798:	9300      	str	r3, [sp, #0]
 800779a:	4b11      	ldr	r3, [pc, #68]	; (80077e0 <prvCheckForValidListAndQueue+0x74>)
 800779c:	4a11      	ldr	r2, [pc, #68]	; (80077e4 <prvCheckForValidListAndQueue+0x78>)
 800779e:	2110      	movs	r1, #16
 80077a0:	200a      	movs	r0, #10
 80077a2:	f7fe f90d 	bl	80059c0 <xQueueGenericCreateStatic>
 80077a6:	4603      	mov	r3, r0
 80077a8:	4a08      	ldr	r2, [pc, #32]	; (80077cc <prvCheckForValidListAndQueue+0x60>)
 80077aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80077ac:	4b07      	ldr	r3, [pc, #28]	; (80077cc <prvCheckForValidListAndQueue+0x60>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d005      	beq.n	80077c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80077b4:	4b05      	ldr	r3, [pc, #20]	; (80077cc <prvCheckForValidListAndQueue+0x60>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	490b      	ldr	r1, [pc, #44]	; (80077e8 <prvCheckForValidListAndQueue+0x7c>)
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fe fd20 	bl	8006200 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80077c0:	f000 f954 	bl	8007a6c <vPortExitCritical>
}
 80077c4:	bf00      	nop
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	2000137c 	.word	0x2000137c
 80077d0:	2000134c 	.word	0x2000134c
 80077d4:	20001360 	.word	0x20001360
 80077d8:	20001374 	.word	0x20001374
 80077dc:	20001378 	.word	0x20001378
 80077e0:	20001428 	.word	0x20001428
 80077e4:	20001388 	.word	0x20001388
 80077e8:	080087c4 	.word	0x080087c4

080077ec <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b086      	sub	sp, #24
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d10a      	bne.n	8007814 <pvTimerGetTimerID+0x28>
	__asm volatile
 80077fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007802:	f383 8811 	msr	BASEPRI, r3
 8007806:	f3bf 8f6f 	isb	sy
 800780a:	f3bf 8f4f 	dsb	sy
 800780e:	60fb      	str	r3, [r7, #12]
}
 8007810:	bf00      	nop
 8007812:	e7fe      	b.n	8007812 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8007814:	f000 f8fa 	bl	8007a0c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	6a1b      	ldr	r3, [r3, #32]
 800781c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800781e:	f000 f925 	bl	8007a6c <vPortExitCritical>

	return pvReturn;
 8007822:	693b      	ldr	r3, [r7, #16]
}
 8007824:	4618      	mov	r0, r3
 8007826:	3718      	adds	r7, #24
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	3b04      	subs	r3, #4
 800783c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007844:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	3b04      	subs	r3, #4
 800784a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	f023 0201 	bic.w	r2, r3, #1
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	3b04      	subs	r3, #4
 800785a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800785c:	4a08      	ldr	r2, [pc, #32]	; (8007880 <pxPortInitialiseStack+0x54>)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	3b14      	subs	r3, #20
 8007866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	3b20      	subs	r3, #32
 8007872:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007874:	68fb      	ldr	r3, [r7, #12]
}
 8007876:	4618      	mov	r0, r3
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	bc80      	pop	{r7}
 800787e:	4770      	bx	lr
 8007880:	08007885 	.word	0x08007885

08007884 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007884:	b480      	push	{r7}
 8007886:	b085      	sub	sp, #20
 8007888:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800788a:	2300      	movs	r3, #0
 800788c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800788e:	4b12      	ldr	r3, [pc, #72]	; (80078d8 <prvTaskExitError+0x54>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007896:	d00a      	beq.n	80078ae <prvTaskExitError+0x2a>
	__asm volatile
 8007898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789c:	f383 8811 	msr	BASEPRI, r3
 80078a0:	f3bf 8f6f 	isb	sy
 80078a4:	f3bf 8f4f 	dsb	sy
 80078a8:	60fb      	str	r3, [r7, #12]
}
 80078aa:	bf00      	nop
 80078ac:	e7fe      	b.n	80078ac <prvTaskExitError+0x28>
	__asm volatile
 80078ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b2:	f383 8811 	msr	BASEPRI, r3
 80078b6:	f3bf 8f6f 	isb	sy
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	60bb      	str	r3, [r7, #8]
}
 80078c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80078c2:	bf00      	nop
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d0fc      	beq.n	80078c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80078ca:	bf00      	nop
 80078cc:	bf00      	nop
 80078ce:	3714      	adds	r7, #20
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bc80      	pop	{r7}
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	2000000c 	.word	0x2000000c
 80078dc:	00000000 	.word	0x00000000

080078e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80078e0:	4b07      	ldr	r3, [pc, #28]	; (8007900 <pxCurrentTCBConst2>)
 80078e2:	6819      	ldr	r1, [r3, #0]
 80078e4:	6808      	ldr	r0, [r1, #0]
 80078e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80078ea:	f380 8809 	msr	PSP, r0
 80078ee:	f3bf 8f6f 	isb	sy
 80078f2:	f04f 0000 	mov.w	r0, #0
 80078f6:	f380 8811 	msr	BASEPRI, r0
 80078fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80078fe:	4770      	bx	lr

08007900 <pxCurrentTCBConst2>:
 8007900:	20000e4c 	.word	0x20000e4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007904:	bf00      	nop
 8007906:	bf00      	nop

08007908 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007908:	4806      	ldr	r0, [pc, #24]	; (8007924 <prvPortStartFirstTask+0x1c>)
 800790a:	6800      	ldr	r0, [r0, #0]
 800790c:	6800      	ldr	r0, [r0, #0]
 800790e:	f380 8808 	msr	MSP, r0
 8007912:	b662      	cpsie	i
 8007914:	b661      	cpsie	f
 8007916:	f3bf 8f4f 	dsb	sy
 800791a:	f3bf 8f6f 	isb	sy
 800791e:	df00      	svc	0
 8007920:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007922:	bf00      	nop
 8007924:	e000ed08 	.word	0xe000ed08

08007928 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800792e:	4b32      	ldr	r3, [pc, #200]	; (80079f8 <xPortStartScheduler+0xd0>)
 8007930:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	b2db      	uxtb	r3, r3
 8007938:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	22ff      	movs	r2, #255	; 0xff
 800793e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	b2db      	uxtb	r3, r3
 8007946:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007948:	78fb      	ldrb	r3, [r7, #3]
 800794a:	b2db      	uxtb	r3, r3
 800794c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007950:	b2da      	uxtb	r2, r3
 8007952:	4b2a      	ldr	r3, [pc, #168]	; (80079fc <xPortStartScheduler+0xd4>)
 8007954:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007956:	4b2a      	ldr	r3, [pc, #168]	; (8007a00 <xPortStartScheduler+0xd8>)
 8007958:	2207      	movs	r2, #7
 800795a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800795c:	e009      	b.n	8007972 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800795e:	4b28      	ldr	r3, [pc, #160]	; (8007a00 <xPortStartScheduler+0xd8>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	3b01      	subs	r3, #1
 8007964:	4a26      	ldr	r2, [pc, #152]	; (8007a00 <xPortStartScheduler+0xd8>)
 8007966:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007968:	78fb      	ldrb	r3, [r7, #3]
 800796a:	b2db      	uxtb	r3, r3
 800796c:	005b      	lsls	r3, r3, #1
 800796e:	b2db      	uxtb	r3, r3
 8007970:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007972:	78fb      	ldrb	r3, [r7, #3]
 8007974:	b2db      	uxtb	r3, r3
 8007976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800797a:	2b80      	cmp	r3, #128	; 0x80
 800797c:	d0ef      	beq.n	800795e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800797e:	4b20      	ldr	r3, [pc, #128]	; (8007a00 <xPortStartScheduler+0xd8>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f1c3 0307 	rsb	r3, r3, #7
 8007986:	2b04      	cmp	r3, #4
 8007988:	d00a      	beq.n	80079a0 <xPortStartScheduler+0x78>
	__asm volatile
 800798a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798e:	f383 8811 	msr	BASEPRI, r3
 8007992:	f3bf 8f6f 	isb	sy
 8007996:	f3bf 8f4f 	dsb	sy
 800799a:	60bb      	str	r3, [r7, #8]
}
 800799c:	bf00      	nop
 800799e:	e7fe      	b.n	800799e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80079a0:	4b17      	ldr	r3, [pc, #92]	; (8007a00 <xPortStartScheduler+0xd8>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	021b      	lsls	r3, r3, #8
 80079a6:	4a16      	ldr	r2, [pc, #88]	; (8007a00 <xPortStartScheduler+0xd8>)
 80079a8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80079aa:	4b15      	ldr	r3, [pc, #84]	; (8007a00 <xPortStartScheduler+0xd8>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079b2:	4a13      	ldr	r2, [pc, #76]	; (8007a00 <xPortStartScheduler+0xd8>)
 80079b4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	b2da      	uxtb	r2, r3
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80079be:	4b11      	ldr	r3, [pc, #68]	; (8007a04 <xPortStartScheduler+0xdc>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a10      	ldr	r2, [pc, #64]	; (8007a04 <xPortStartScheduler+0xdc>)
 80079c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80079c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80079ca:	4b0e      	ldr	r3, [pc, #56]	; (8007a04 <xPortStartScheduler+0xdc>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a0d      	ldr	r2, [pc, #52]	; (8007a04 <xPortStartScheduler+0xdc>)
 80079d0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80079d4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80079d6:	f000 f8b9 	bl	8007b4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80079da:	4b0b      	ldr	r3, [pc, #44]	; (8007a08 <xPortStartScheduler+0xe0>)
 80079dc:	2200      	movs	r2, #0
 80079de:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80079e0:	f7ff ff92 	bl	8007908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80079e4:	f7ff f812 	bl	8006a0c <vTaskSwitchContext>
	prvTaskExitError();
 80079e8:	f7ff ff4c 	bl	8007884 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	e000e400 	.word	0xe000e400
 80079fc:	20001478 	.word	0x20001478
 8007a00:	2000147c 	.word	0x2000147c
 8007a04:	e000ed20 	.word	0xe000ed20
 8007a08:	2000000c 	.word	0x2000000c

08007a0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
	__asm volatile
 8007a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a16:	f383 8811 	msr	BASEPRI, r3
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	607b      	str	r3, [r7, #4]
}
 8007a24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a26:	4b0f      	ldr	r3, [pc, #60]	; (8007a64 <vPortEnterCritical+0x58>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	4a0d      	ldr	r2, [pc, #52]	; (8007a64 <vPortEnterCritical+0x58>)
 8007a2e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a30:	4b0c      	ldr	r3, [pc, #48]	; (8007a64 <vPortEnterCritical+0x58>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d10f      	bne.n	8007a58 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a38:	4b0b      	ldr	r3, [pc, #44]	; (8007a68 <vPortEnterCritical+0x5c>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00a      	beq.n	8007a58 <vPortEnterCritical+0x4c>
	__asm volatile
 8007a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a46:	f383 8811 	msr	BASEPRI, r3
 8007a4a:	f3bf 8f6f 	isb	sy
 8007a4e:	f3bf 8f4f 	dsb	sy
 8007a52:	603b      	str	r3, [r7, #0]
}
 8007a54:	bf00      	nop
 8007a56:	e7fe      	b.n	8007a56 <vPortEnterCritical+0x4a>
	}
}
 8007a58:	bf00      	nop
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bc80      	pop	{r7}
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	2000000c 	.word	0x2000000c
 8007a68:	e000ed04 	.word	0xe000ed04

08007a6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a72:	4b11      	ldr	r3, [pc, #68]	; (8007ab8 <vPortExitCritical+0x4c>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d10a      	bne.n	8007a90 <vPortExitCritical+0x24>
	__asm volatile
 8007a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7e:	f383 8811 	msr	BASEPRI, r3
 8007a82:	f3bf 8f6f 	isb	sy
 8007a86:	f3bf 8f4f 	dsb	sy
 8007a8a:	607b      	str	r3, [r7, #4]
}
 8007a8c:	bf00      	nop
 8007a8e:	e7fe      	b.n	8007a8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007a90:	4b09      	ldr	r3, [pc, #36]	; (8007ab8 <vPortExitCritical+0x4c>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	3b01      	subs	r3, #1
 8007a96:	4a08      	ldr	r2, [pc, #32]	; (8007ab8 <vPortExitCritical+0x4c>)
 8007a98:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a9a:	4b07      	ldr	r3, [pc, #28]	; (8007ab8 <vPortExitCritical+0x4c>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d105      	bne.n	8007aae <vPortExitCritical+0x42>
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	f383 8811 	msr	BASEPRI, r3
}
 8007aac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007aae:	bf00      	nop
 8007ab0:	370c      	adds	r7, #12
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bc80      	pop	{r7}
 8007ab6:	4770      	bx	lr
 8007ab8:	2000000c 	.word	0x2000000c
 8007abc:	00000000 	.word	0x00000000

08007ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ac0:	f3ef 8009 	mrs	r0, PSP
 8007ac4:	f3bf 8f6f 	isb	sy
 8007ac8:	4b0d      	ldr	r3, [pc, #52]	; (8007b00 <pxCurrentTCBConst>)
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007ad0:	6010      	str	r0, [r2, #0]
 8007ad2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007ad6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007ada:	f380 8811 	msr	BASEPRI, r0
 8007ade:	f7fe ff95 	bl	8006a0c <vTaskSwitchContext>
 8007ae2:	f04f 0000 	mov.w	r0, #0
 8007ae6:	f380 8811 	msr	BASEPRI, r0
 8007aea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007aee:	6819      	ldr	r1, [r3, #0]
 8007af0:	6808      	ldr	r0, [r1, #0]
 8007af2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007af6:	f380 8809 	msr	PSP, r0
 8007afa:	f3bf 8f6f 	isb	sy
 8007afe:	4770      	bx	lr

08007b00 <pxCurrentTCBConst>:
 8007b00:	20000e4c 	.word	0x20000e4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b04:	bf00      	nop
 8007b06:	bf00      	nop

08007b08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	607b      	str	r3, [r7, #4]
}
 8007b20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007b22:	f7fe feb5 	bl	8006890 <xTaskIncrementTick>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d003      	beq.n	8007b34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007b2c:	4b06      	ldr	r3, [pc, #24]	; (8007b48 <SysTick_Handler+0x40>)
 8007b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b32:	601a      	str	r2, [r3, #0]
 8007b34:	2300      	movs	r3, #0
 8007b36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	f383 8811 	msr	BASEPRI, r3
}
 8007b3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b40:	bf00      	nop
 8007b42:	3708      	adds	r7, #8
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	e000ed04 	.word	0xe000ed04

08007b4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b50:	4b0a      	ldr	r3, [pc, #40]	; (8007b7c <vPortSetupTimerInterrupt+0x30>)
 8007b52:	2200      	movs	r2, #0
 8007b54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b56:	4b0a      	ldr	r3, [pc, #40]	; (8007b80 <vPortSetupTimerInterrupt+0x34>)
 8007b58:	2200      	movs	r2, #0
 8007b5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b5c:	4b09      	ldr	r3, [pc, #36]	; (8007b84 <vPortSetupTimerInterrupt+0x38>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a09      	ldr	r2, [pc, #36]	; (8007b88 <vPortSetupTimerInterrupt+0x3c>)
 8007b62:	fba2 2303 	umull	r2, r3, r2, r3
 8007b66:	099b      	lsrs	r3, r3, #6
 8007b68:	4a08      	ldr	r2, [pc, #32]	; (8007b8c <vPortSetupTimerInterrupt+0x40>)
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b6e:	4b03      	ldr	r3, [pc, #12]	; (8007b7c <vPortSetupTimerInterrupt+0x30>)
 8007b70:	2207      	movs	r2, #7
 8007b72:	601a      	str	r2, [r3, #0]
}
 8007b74:	bf00      	nop
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bc80      	pop	{r7}
 8007b7a:	4770      	bx	lr
 8007b7c:	e000e010 	.word	0xe000e010
 8007b80:	e000e018 	.word	0xe000e018
 8007b84:	20000000 	.word	0x20000000
 8007b88:	10624dd3 	.word	0x10624dd3
 8007b8c:	e000e014 	.word	0xe000e014

08007b90 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007b90:	b480      	push	{r7}
 8007b92:	b085      	sub	sp, #20
 8007b94:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007b96:	f3ef 8305 	mrs	r3, IPSR
 8007b9a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2b0f      	cmp	r3, #15
 8007ba0:	d914      	bls.n	8007bcc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007ba2:	4a16      	ldr	r2, [pc, #88]	; (8007bfc <vPortValidateInterruptPriority+0x6c>)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007bac:	4b14      	ldr	r3, [pc, #80]	; (8007c00 <vPortValidateInterruptPriority+0x70>)
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	7afa      	ldrb	r2, [r7, #11]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d20a      	bcs.n	8007bcc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bba:	f383 8811 	msr	BASEPRI, r3
 8007bbe:	f3bf 8f6f 	isb	sy
 8007bc2:	f3bf 8f4f 	dsb	sy
 8007bc6:	607b      	str	r3, [r7, #4]
}
 8007bc8:	bf00      	nop
 8007bca:	e7fe      	b.n	8007bca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007bcc:	4b0d      	ldr	r3, [pc, #52]	; (8007c04 <vPortValidateInterruptPriority+0x74>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007bd4:	4b0c      	ldr	r3, [pc, #48]	; (8007c08 <vPortValidateInterruptPriority+0x78>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d90a      	bls.n	8007bf2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be0:	f383 8811 	msr	BASEPRI, r3
 8007be4:	f3bf 8f6f 	isb	sy
 8007be8:	f3bf 8f4f 	dsb	sy
 8007bec:	603b      	str	r3, [r7, #0]
}
 8007bee:	bf00      	nop
 8007bf0:	e7fe      	b.n	8007bf0 <vPortValidateInterruptPriority+0x60>
	}
 8007bf2:	bf00      	nop
 8007bf4:	3714      	adds	r7, #20
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bc80      	pop	{r7}
 8007bfa:	4770      	bx	lr
 8007bfc:	e000e3f0 	.word	0xe000e3f0
 8007c00:	20001478 	.word	0x20001478
 8007c04:	e000ed0c 	.word	0xe000ed0c
 8007c08:	2000147c 	.word	0x2000147c

08007c0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b08a      	sub	sp, #40	; 0x28
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007c14:	2300      	movs	r3, #0
 8007c16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007c18:	f7fe fd80 	bl	800671c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007c1c:	4b58      	ldr	r3, [pc, #352]	; (8007d80 <pvPortMalloc+0x174>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d101      	bne.n	8007c28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c24:	f000 f910 	bl	8007e48 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c28:	4b56      	ldr	r3, [pc, #344]	; (8007d84 <pvPortMalloc+0x178>)
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4013      	ands	r3, r2
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f040 808e 	bne.w	8007d52 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d01d      	beq.n	8007c78 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007c3c:	2208      	movs	r2, #8
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4413      	add	r3, r2
 8007c42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f003 0307 	and.w	r3, r3, #7
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d014      	beq.n	8007c78 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f023 0307 	bic.w	r3, r3, #7
 8007c54:	3308      	adds	r3, #8
 8007c56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f003 0307 	and.w	r3, r3, #7
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00a      	beq.n	8007c78 <pvPortMalloc+0x6c>
	__asm volatile
 8007c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c66:	f383 8811 	msr	BASEPRI, r3
 8007c6a:	f3bf 8f6f 	isb	sy
 8007c6e:	f3bf 8f4f 	dsb	sy
 8007c72:	617b      	str	r3, [r7, #20]
}
 8007c74:	bf00      	nop
 8007c76:	e7fe      	b.n	8007c76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d069      	beq.n	8007d52 <pvPortMalloc+0x146>
 8007c7e:	4b42      	ldr	r3, [pc, #264]	; (8007d88 <pvPortMalloc+0x17c>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d864      	bhi.n	8007d52 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c88:	4b40      	ldr	r3, [pc, #256]	; (8007d8c <pvPortMalloc+0x180>)
 8007c8a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c8c:	4b3f      	ldr	r3, [pc, #252]	; (8007d8c <pvPortMalloc+0x180>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c92:	e004      	b.n	8007c9e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c96:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d903      	bls.n	8007cb0 <pvPortMalloc+0xa4>
 8007ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d1f1      	bne.n	8007c94 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007cb0:	4b33      	ldr	r3, [pc, #204]	; (8007d80 <pvPortMalloc+0x174>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d04b      	beq.n	8007d52 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007cba:	6a3b      	ldr	r3, [r7, #32]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	2208      	movs	r2, #8
 8007cc0:	4413      	add	r3, r2
 8007cc2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	6a3b      	ldr	r3, [r7, #32]
 8007cca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cce:	685a      	ldr	r2, [r3, #4]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	1ad2      	subs	r2, r2, r3
 8007cd4:	2308      	movs	r3, #8
 8007cd6:	005b      	lsls	r3, r3, #1
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d91f      	bls.n	8007d1c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	f003 0307 	and.w	r3, r3, #7
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00a      	beq.n	8007d04 <pvPortMalloc+0xf8>
	__asm volatile
 8007cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf2:	f383 8811 	msr	BASEPRI, r3
 8007cf6:	f3bf 8f6f 	isb	sy
 8007cfa:	f3bf 8f4f 	dsb	sy
 8007cfe:	613b      	str	r3, [r7, #16]
}
 8007d00:	bf00      	nop
 8007d02:	e7fe      	b.n	8007d02 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d06:	685a      	ldr	r2, [r3, #4]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	1ad2      	subs	r2, r2, r3
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d16:	69b8      	ldr	r0, [r7, #24]
 8007d18:	f000 f8f8 	bl	8007f0c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d1c:	4b1a      	ldr	r3, [pc, #104]	; (8007d88 <pvPortMalloc+0x17c>)
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	1ad3      	subs	r3, r2, r3
 8007d26:	4a18      	ldr	r2, [pc, #96]	; (8007d88 <pvPortMalloc+0x17c>)
 8007d28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d2a:	4b17      	ldr	r3, [pc, #92]	; (8007d88 <pvPortMalloc+0x17c>)
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	4b18      	ldr	r3, [pc, #96]	; (8007d90 <pvPortMalloc+0x184>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d203      	bcs.n	8007d3e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d36:	4b14      	ldr	r3, [pc, #80]	; (8007d88 <pvPortMalloc+0x17c>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a15      	ldr	r2, [pc, #84]	; (8007d90 <pvPortMalloc+0x184>)
 8007d3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d40:	685a      	ldr	r2, [r3, #4]
 8007d42:	4b10      	ldr	r3, [pc, #64]	; (8007d84 <pvPortMalloc+0x178>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	431a      	orrs	r2, r3
 8007d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4e:	2200      	movs	r2, #0
 8007d50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007d52:	f7fe fcf1 	bl	8006738 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	f003 0307 	and.w	r3, r3, #7
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d00a      	beq.n	8007d76 <pvPortMalloc+0x16a>
	__asm volatile
 8007d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d64:	f383 8811 	msr	BASEPRI, r3
 8007d68:	f3bf 8f6f 	isb	sy
 8007d6c:	f3bf 8f4f 	dsb	sy
 8007d70:	60fb      	str	r3, [r7, #12]
}
 8007d72:	bf00      	nop
 8007d74:	e7fe      	b.n	8007d74 <pvPortMalloc+0x168>
	return pvReturn;
 8007d76:	69fb      	ldr	r3, [r7, #28]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3728      	adds	r7, #40	; 0x28
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}
 8007d80:	20002088 	.word	0x20002088
 8007d84:	20002094 	.word	0x20002094
 8007d88:	2000208c 	.word	0x2000208c
 8007d8c:	20002080 	.word	0x20002080
 8007d90:	20002090 	.word	0x20002090

08007d94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b086      	sub	sp, #24
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d048      	beq.n	8007e38 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007da6:	2308      	movs	r3, #8
 8007da8:	425b      	negs	r3, r3
 8007daa:	697a      	ldr	r2, [r7, #20]
 8007dac:	4413      	add	r3, r2
 8007dae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	685a      	ldr	r2, [r3, #4]
 8007db8:	4b21      	ldr	r3, [pc, #132]	; (8007e40 <vPortFree+0xac>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d10a      	bne.n	8007dd8 <vPortFree+0x44>
	__asm volatile
 8007dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc6:	f383 8811 	msr	BASEPRI, r3
 8007dca:	f3bf 8f6f 	isb	sy
 8007dce:	f3bf 8f4f 	dsb	sy
 8007dd2:	60fb      	str	r3, [r7, #12]
}
 8007dd4:	bf00      	nop
 8007dd6:	e7fe      	b.n	8007dd6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00a      	beq.n	8007df6 <vPortFree+0x62>
	__asm volatile
 8007de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de4:	f383 8811 	msr	BASEPRI, r3
 8007de8:	f3bf 8f6f 	isb	sy
 8007dec:	f3bf 8f4f 	dsb	sy
 8007df0:	60bb      	str	r3, [r7, #8]
}
 8007df2:	bf00      	nop
 8007df4:	e7fe      	b.n	8007df4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	685a      	ldr	r2, [r3, #4]
 8007dfa:	4b11      	ldr	r3, [pc, #68]	; (8007e40 <vPortFree+0xac>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4013      	ands	r3, r2
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d019      	beq.n	8007e38 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d115      	bne.n	8007e38 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	685a      	ldr	r2, [r3, #4]
 8007e10:	4b0b      	ldr	r3, [pc, #44]	; (8007e40 <vPortFree+0xac>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	43db      	mvns	r3, r3
 8007e16:	401a      	ands	r2, r3
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e1c:	f7fe fc7e 	bl	800671c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	685a      	ldr	r2, [r3, #4]
 8007e24:	4b07      	ldr	r3, [pc, #28]	; (8007e44 <vPortFree+0xb0>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4413      	add	r3, r2
 8007e2a:	4a06      	ldr	r2, [pc, #24]	; (8007e44 <vPortFree+0xb0>)
 8007e2c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e2e:	6938      	ldr	r0, [r7, #16]
 8007e30:	f000 f86c 	bl	8007f0c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007e34:	f7fe fc80 	bl	8006738 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007e38:	bf00      	nop
 8007e3a:	3718      	adds	r7, #24
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	20002094 	.word	0x20002094
 8007e44:	2000208c 	.word	0x2000208c

08007e48 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e4e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007e52:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007e54:	4b27      	ldr	r3, [pc, #156]	; (8007ef4 <prvHeapInit+0xac>)
 8007e56:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f003 0307 	and.w	r3, r3, #7
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d00c      	beq.n	8007e7c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	3307      	adds	r3, #7
 8007e66:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f023 0307 	bic.w	r3, r3, #7
 8007e6e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e70:	68ba      	ldr	r2, [r7, #8]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	1ad3      	subs	r3, r2, r3
 8007e76:	4a1f      	ldr	r2, [pc, #124]	; (8007ef4 <prvHeapInit+0xac>)
 8007e78:	4413      	add	r3, r2
 8007e7a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e80:	4a1d      	ldr	r2, [pc, #116]	; (8007ef8 <prvHeapInit+0xb0>)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e86:	4b1c      	ldr	r3, [pc, #112]	; (8007ef8 <prvHeapInit+0xb0>)
 8007e88:	2200      	movs	r2, #0
 8007e8a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	68ba      	ldr	r2, [r7, #8]
 8007e90:	4413      	add	r3, r2
 8007e92:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e94:	2208      	movs	r2, #8
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	1a9b      	subs	r3, r3, r2
 8007e9a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f023 0307 	bic.w	r3, r3, #7
 8007ea2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	4a15      	ldr	r2, [pc, #84]	; (8007efc <prvHeapInit+0xb4>)
 8007ea8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007eaa:	4b14      	ldr	r3, [pc, #80]	; (8007efc <prvHeapInit+0xb4>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007eb2:	4b12      	ldr	r3, [pc, #72]	; (8007efc <prvHeapInit+0xb4>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	1ad2      	subs	r2, r2, r3
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ec8:	4b0c      	ldr	r3, [pc, #48]	; (8007efc <prvHeapInit+0xb4>)
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	4a0a      	ldr	r2, [pc, #40]	; (8007f00 <prvHeapInit+0xb8>)
 8007ed6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	4a09      	ldr	r2, [pc, #36]	; (8007f04 <prvHeapInit+0xbc>)
 8007ede:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007ee0:	4b09      	ldr	r3, [pc, #36]	; (8007f08 <prvHeapInit+0xc0>)
 8007ee2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ee6:	601a      	str	r2, [r3, #0]
}
 8007ee8:	bf00      	nop
 8007eea:	3714      	adds	r7, #20
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bc80      	pop	{r7}
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	20001480 	.word	0x20001480
 8007ef8:	20002080 	.word	0x20002080
 8007efc:	20002088 	.word	0x20002088
 8007f00:	20002090 	.word	0x20002090
 8007f04:	2000208c 	.word	0x2000208c
 8007f08:	20002094 	.word	0x20002094

08007f0c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f14:	4b27      	ldr	r3, [pc, #156]	; (8007fb4 <prvInsertBlockIntoFreeList+0xa8>)
 8007f16:	60fb      	str	r3, [r7, #12]
 8007f18:	e002      	b.n	8007f20 <prvInsertBlockIntoFreeList+0x14>
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	60fb      	str	r3, [r7, #12]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d8f7      	bhi.n	8007f1a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	68ba      	ldr	r2, [r7, #8]
 8007f34:	4413      	add	r3, r2
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d108      	bne.n	8007f4e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	685a      	ldr	r2, [r3, #4]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	441a      	add	r2, r3
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	441a      	add	r2, r3
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d118      	bne.n	8007f94 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	4b14      	ldr	r3, [pc, #80]	; (8007fb8 <prvInsertBlockIntoFreeList+0xac>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d00d      	beq.n	8007f8a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	685a      	ldr	r2, [r3, #4]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	441a      	add	r2, r3
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	601a      	str	r2, [r3, #0]
 8007f88:	e008      	b.n	8007f9c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f8a:	4b0b      	ldr	r3, [pc, #44]	; (8007fb8 <prvInsertBlockIntoFreeList+0xac>)
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	601a      	str	r2, [r3, #0]
 8007f92:	e003      	b.n	8007f9c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d002      	beq.n	8007faa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007faa:	bf00      	nop
 8007fac:	3714      	adds	r7, #20
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bc80      	pop	{r7}
 8007fb2:	4770      	bx	lr
 8007fb4:	20002080 	.word	0x20002080
 8007fb8:	20002088 	.word	0x20002088

08007fbc <_ZdlPvj>:
 8007fbc:	f000 b963 	b.w	8008286 <_ZdlPv>

08007fc0 <_Znwj>:
 8007fc0:	2801      	cmp	r0, #1
 8007fc2:	bf38      	it	cc
 8007fc4:	2001      	movcc	r0, #1
 8007fc6:	b510      	push	{r4, lr}
 8007fc8:	4604      	mov	r4, r0
 8007fca:	4620      	mov	r0, r4
 8007fcc:	f000 f9f0 	bl	80083b0 <malloc>
 8007fd0:	b100      	cbz	r0, 8007fd4 <_Znwj+0x14>
 8007fd2:	bd10      	pop	{r4, pc}
 8007fd4:	f000 f95a 	bl	800828c <_ZSt15get_new_handlerv>
 8007fd8:	b908      	cbnz	r0, 8007fde <_Znwj+0x1e>
 8007fda:	f000 f9e1 	bl	80083a0 <abort>
 8007fde:	4780      	blx	r0
 8007fe0:	e7f3      	b.n	8007fca <_Znwj+0xa>

08007fe2 <_ZSt17__throw_bad_allocv>:
 8007fe2:	b508      	push	{r3, lr}
 8007fe4:	f000 f9dc 	bl	80083a0 <abort>

08007fe8 <_ZSt28__throw_bad_array_new_lengthv>:
 8007fe8:	b508      	push	{r3, lr}
 8007fea:	f000 f9d9 	bl	80083a0 <abort>

08007fee <_ZSt19__throw_logic_errorPKc>:
 8007fee:	b508      	push	{r3, lr}
 8007ff0:	f000 f9d6 	bl	80083a0 <abort>

08007ff4 <_ZSt20__throw_length_errorPKc>:
 8007ff4:	b508      	push	{r3, lr}
 8007ff6:	f000 f9d3 	bl	80083a0 <abort>

08007ffa <_ZSt24__throw_out_of_range_fmtPKcz>:
 8007ffa:	b40f      	push	{r0, r1, r2, r3}
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	f107 0410 	add.w	r4, r7, #16
 8008006:	f854 5b04 	ldr.w	r5, [r4], #4
 800800a:	4628      	mov	r0, r5
 800800c:	f7f8 f8a0 	bl	8000150 <strlen>
 8008010:	f200 2307 	addw	r3, r0, #519	; 0x207
 8008014:	f023 0307 	bic.w	r3, r3, #7
 8008018:	ebad 0d03 	sub.w	sp, sp, r3
 800801c:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8008020:	4623      	mov	r3, r4
 8008022:	462a      	mov	r2, r5
 8008024:	4668      	mov	r0, sp
 8008026:	607c      	str	r4, [r7, #4]
 8008028:	f000 f8ec 	bl	8008204 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 800802c:	f000 f9b8 	bl	80083a0 <abort>

08008030 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>:
 8008030:	290d      	cmp	r1, #13
 8008032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008034:	4605      	mov	r5, r0
 8008036:	d817      	bhi.n	8008068 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x38>
 8008038:	b389      	cbz	r1, 800809e <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x6e>
 800803a:	4b1a      	ldr	r3, [pc, #104]	; (80080a4 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x74>)
 800803c:	5c5c      	ldrb	r4, [r3, r1]
 800803e:	4620      	mov	r0, r4
 8008040:	f7f8 f9e0 	bl	8000404 <__aeabi_i2d>
 8008044:	4606      	mov	r6, r0
 8008046:	6828      	ldr	r0, [r5, #0]
 8008048:	460f      	mov	r7, r1
 800804a:	f7f8 f9ed 	bl	8000428 <__aeabi_f2d>
 800804e:	4602      	mov	r2, r0
 8008050:	460b      	mov	r3, r1
 8008052:	4630      	mov	r0, r6
 8008054:	4639      	mov	r1, r7
 8008056:	f7f8 fa3f 	bl	80004d8 <__aeabi_dmul>
 800805a:	f000 f921 	bl	80082a0 <floor>
 800805e:	f7f8 fcd5 	bl	8000a0c <__aeabi_d2uiz>
 8008062:	6068      	str	r0, [r5, #4]
 8008064:	4620      	mov	r0, r4
 8008066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008068:	23f9      	movs	r3, #249	; 0xf9
 800806a:	4a0f      	ldr	r2, [pc, #60]	; (80080a8 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x78>)
 800806c:	1058      	asrs	r0, r3, #1
 800806e:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8008072:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 8008076:	428e      	cmp	r6, r1
 8008078:	bf2f      	iteee	cs
 800807a:	4603      	movcs	r3, r0
 800807c:	1a1b      	subcc	r3, r3, r0
 800807e:	f103 33ff 	addcc.w	r3, r3, #4294967295	; 0xffffffff
 8008082:	1d22      	addcc	r2, r4, #4
 8008084:	2b00      	cmp	r3, #0
 8008086:	dcf1      	bgt.n	800806c <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x3c>
 8008088:	4b08      	ldr	r3, [pc, #32]	; (80080ac <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x7c>)
 800808a:	6814      	ldr	r4, [r2, #0]
 800808c:	429a      	cmp	r2, r3
 800808e:	d003      	beq.n	8008098 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x68>
 8008090:	4620      	mov	r0, r4
 8008092:	f7f8 f9a7 	bl	80003e4 <__aeabi_ui2d>
 8008096:	e7d5      	b.n	8008044 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x14>
 8008098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800809c:	e7e1      	b.n	8008062 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x32>
 800809e:	2401      	movs	r4, #1
 80080a0:	e7e0      	b.n	8008064 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x34>
 80080a2:	bf00      	nop
 80080a4:	08008c7c 	.word	0x08008c7c
 80080a8:	08008890 	.word	0x08008890
 80080ac:	08008c74 	.word	0x08008c74

080080b0 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>:
 80080b0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80080b4:	4692      	mov	sl, r2
 80080b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080b8:	4604      	mov	r4, r0
 80080ba:	eb03 0802 	add.w	r8, r3, r2
 80080be:	684b      	ldr	r3, [r1, #4]
 80080c0:	460d      	mov	r5, r1
 80080c2:	4598      	cmp	r8, r3
 80080c4:	d946      	bls.n	8008154 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0xa4>
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	6808      	ldr	r0, [r1, #0]
 80080ca:	bf14      	ite	ne
 80080cc:	f04f 0900 	movne.w	r9, #0
 80080d0:	f04f 090b 	moveq.w	r9, #11
 80080d4:	f7f8 f9a8 	bl	8000428 <__aeabi_f2d>
 80080d8:	4606      	mov	r6, r0
 80080da:	460f      	mov	r7, r1
 80080dc:	45c8      	cmp	r8, r9
 80080de:	4640      	mov	r0, r8
 80080e0:	bf38      	it	cc
 80080e2:	4648      	movcc	r0, r9
 80080e4:	f7f8 f97e 	bl	80003e4 <__aeabi_ui2d>
 80080e8:	4632      	mov	r2, r6
 80080ea:	463b      	mov	r3, r7
 80080ec:	f7f8 fb1e 	bl	800072c <__aeabi_ddiv>
 80080f0:	4680      	mov	r8, r0
 80080f2:	4650      	mov	r0, sl
 80080f4:	4689      	mov	r9, r1
 80080f6:	f7f8 f975 	bl	80003e4 <__aeabi_ui2d>
 80080fa:	4602      	mov	r2, r0
 80080fc:	460b      	mov	r3, r1
 80080fe:	e9cd 2300 	strd	r2, r3, [sp]
 8008102:	4642      	mov	r2, r8
 8008104:	464b      	mov	r3, r9
 8008106:	f7f8 fc63 	bl	80009d0 <__aeabi_dcmple>
 800810a:	b1c0      	cbz	r0, 800813e <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x8e>
 800810c:	4640      	mov	r0, r8
 800810e:	4649      	mov	r1, r9
 8008110:	f000 f8c6 	bl	80082a0 <floor>
 8008114:	4b11      	ldr	r3, [pc, #68]	; (800815c <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0xac>)
 8008116:	2200      	movs	r2, #0
 8008118:	f7f8 f828 	bl	800016c <__adddf3>
 800811c:	f7f8 fc76 	bl	8000a0c <__aeabi_d2uiz>
 8008120:	ea4f 014a 	mov.w	r1, sl, lsl #1
 8008124:	4281      	cmp	r1, r0
 8008126:	bf38      	it	cc
 8008128:	4601      	movcc	r1, r0
 800812a:	4628      	mov	r0, r5
 800812c:	f7ff ff80 	bl	8008030 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>
 8008130:	2301      	movs	r3, #1
 8008132:	6060      	str	r0, [r4, #4]
 8008134:	7023      	strb	r3, [r4, #0]
 8008136:	4620      	mov	r0, r4
 8008138:	b002      	add	sp, #8
 800813a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800813e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008142:	4630      	mov	r0, r6
 8008144:	4639      	mov	r1, r7
 8008146:	f7f8 f9c7 	bl	80004d8 <__aeabi_dmul>
 800814a:	f000 f8a9 	bl	80082a0 <floor>
 800814e:	f7f8 fc5d 	bl	8000a0c <__aeabi_d2uiz>
 8008152:	6068      	str	r0, [r5, #4]
 8008154:	2300      	movs	r3, #0
 8008156:	e9c4 3300 	strd	r3, r3, [r4]
 800815a:	e7ec      	b.n	8008136 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x86>
 800815c:	3ff00000 	.word	0x3ff00000

08008160 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8008160:	4606      	mov	r6, r0
 8008162:	460c      	mov	r4, r1
 8008164:	b580      	push	{r7, lr}
 8008166:	b09c      	sub	sp, #112	; 0x70
 8008168:	af00      	add	r7, sp, #0
 800816a:	1ba4      	subs	r4, r4, r6
 800816c:	2269      	movs	r2, #105	; 0x69
 800816e:	490e      	ldr	r1, [pc, #56]	; (80081a8 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8008170:	1d38      	adds	r0, r7, #4
 8008172:	f000 fa7b 	bl	800866c <memcpy>
 8008176:	f104 0370 	add.w	r3, r4, #112	; 0x70
 800817a:	f023 0307 	bic.w	r3, r3, #7
 800817e:	ebad 0d03 	sub.w	sp, sp, r3
 8008182:	466d      	mov	r5, sp
 8008184:	2268      	movs	r2, #104	; 0x68
 8008186:	1d39      	adds	r1, r7, #4
 8008188:	4628      	mov	r0, r5
 800818a:	f000 fa6f 	bl	800866c <memcpy>
 800818e:	4622      	mov	r2, r4
 8008190:	4631      	mov	r1, r6
 8008192:	f105 0068 	add.w	r0, r5, #104	; 0x68
 8008196:	f000 fa69 	bl	800866c <memcpy>
 800819a:	2300      	movs	r3, #0
 800819c:	442c      	add	r4, r5
 800819e:	4628      	mov	r0, r5
 80081a0:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80081a4:	f7ff ff23 	bl	8007fee <_ZSt19__throw_logic_errorPKc>
 80081a8:	08008c8a 	.word	0x08008c8a

080081ac <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 80081ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	b084      	sub	sp, #16
 80081b4:	466d      	mov	r5, sp
 80081b6:	f105 040c 	add.w	r4, r5, #12
 80081ba:	4623      	mov	r3, r4
 80081bc:	f04f 0c0a 	mov.w	ip, #10
 80081c0:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8008200 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 80081c4:	fbb2 f6fc 	udiv	r6, r2, ip
 80081c8:	fb0c 2e16 	mls	lr, ip, r6, r2
 80081cc:	f818 e00e 	ldrb.w	lr, [r8, lr]
 80081d0:	f803 ed01 	strb.w	lr, [r3, #-1]!
 80081d4:	4696      	mov	lr, r2
 80081d6:	f1be 0f09 	cmp.w	lr, #9
 80081da:	4632      	mov	r2, r6
 80081dc:	d8f2      	bhi.n	80081c4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 80081de:	1ae4      	subs	r4, r4, r3
 80081e0:	428c      	cmp	r4, r1
 80081e2:	d809      	bhi.n	80081f8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 80081e4:	f1c4 010c 	rsb	r1, r4, #12
 80081e8:	4622      	mov	r2, r4
 80081ea:	4429      	add	r1, r5
 80081ec:	f000 fa3e 	bl	800866c <memcpy>
 80081f0:	4620      	mov	r0, r4
 80081f2:	46bd      	mov	sp, r7
 80081f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80081fc:	e7f8      	b.n	80081f0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 80081fe:	bf00      	nop
 8008200:	08008cf3 	.word	0x08008cf3

08008204 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8008204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008208:	4607      	mov	r7, r0
 800820a:	4615      	mov	r5, r2
 800820c:	4604      	mov	r4, r0
 800820e:	3901      	subs	r1, #1
 8008210:	eb00 0801 	add.w	r8, r0, r1
 8008214:	782a      	ldrb	r2, [r5, #0]
 8008216:	b392      	cbz	r2, 800827e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 8008218:	4544      	cmp	r4, r8
 800821a:	d216      	bcs.n	800824a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x46>
 800821c:	2a25      	cmp	r2, #37	; 0x25
 800821e:	d107      	bne.n	8008230 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8008220:	786a      	ldrb	r2, [r5, #1]
 8008222:	2a73      	cmp	r2, #115	; 0x73
 8008224:	d009      	beq.n	800823a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 8008226:	2a7a      	cmp	r2, #122	; 0x7a
 8008228:	d016      	beq.n	8008258 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x54>
 800822a:	2a25      	cmp	r2, #37	; 0x25
 800822c:	d100      	bne.n	8008230 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800822e:	3501      	adds	r5, #1
 8008230:	f815 2b01 	ldrb.w	r2, [r5], #1
 8008234:	f804 2b01 	strb.w	r2, [r4], #1
 8008238:	e7ec      	b.n	8008214 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 800823a:	f853 2b04 	ldr.w	r2, [r3], #4
 800823e:	3a01      	subs	r2, #1
 8008240:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8008244:	b1c9      	cbz	r1, 800827a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 8008246:	4544      	cmp	r4, r8
 8008248:	d103      	bne.n	8008252 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4e>
 800824a:	4621      	mov	r1, r4
 800824c:	4638      	mov	r0, r7
 800824e:	f7ff ff87 	bl	8008160 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 8008252:	f804 1b01 	strb.w	r1, [r4], #1
 8008256:	e7f3      	b.n	8008240 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 8008258:	78aa      	ldrb	r2, [r5, #2]
 800825a:	2a75      	cmp	r2, #117	; 0x75
 800825c:	d1e8      	bne.n	8008230 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800825e:	461e      	mov	r6, r3
 8008260:	4620      	mov	r0, r4
 8008262:	f856 2b04 	ldr.w	r2, [r6], #4
 8008266:	eba8 0104 	sub.w	r1, r8, r4
 800826a:	f7ff ff9f 	bl	80081ac <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 800826e:	2800      	cmp	r0, #0
 8008270:	ddeb      	ble.n	800824a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x46>
 8008272:	4633      	mov	r3, r6
 8008274:	4404      	add	r4, r0
 8008276:	3503      	adds	r5, #3
 8008278:	e7cc      	b.n	8008214 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 800827a:	3502      	adds	r5, #2
 800827c:	e7ca      	b.n	8008214 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 800827e:	7022      	strb	r2, [r4, #0]
 8008280:	1be0      	subs	r0, r4, r7
 8008282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008286 <_ZdlPv>:
 8008286:	f000 b89b 	b.w	80083c0 <free>
	...

0800828c <_ZSt15get_new_handlerv>:
 800828c:	4b02      	ldr	r3, [pc, #8]	; (8008298 <_ZSt15get_new_handlerv+0xc>)
 800828e:	6818      	ldr	r0, [r3, #0]
 8008290:	f3bf 8f5b 	dmb	ish
 8008294:	4770      	bx	lr
 8008296:	bf00      	nop
 8008298:	20002098 	.word	0x20002098
 800829c:	00000000 	.word	0x00000000

080082a0 <floor>:
 80082a0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80082a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082a8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80082ac:	2e13      	cmp	r6, #19
 80082ae:	460b      	mov	r3, r1
 80082b0:	4607      	mov	r7, r0
 80082b2:	460c      	mov	r4, r1
 80082b4:	4605      	mov	r5, r0
 80082b6:	dc32      	bgt.n	800831e <floor+0x7e>
 80082b8:	2e00      	cmp	r6, #0
 80082ba:	da14      	bge.n	80082e6 <floor+0x46>
 80082bc:	a334      	add	r3, pc, #208	; (adr r3, 8008390 <floor+0xf0>)
 80082be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c2:	f7f7 ff53 	bl	800016c <__adddf3>
 80082c6:	2200      	movs	r2, #0
 80082c8:	2300      	movs	r3, #0
 80082ca:	f7f8 fb95 	bl	80009f8 <__aeabi_dcmpgt>
 80082ce:	b138      	cbz	r0, 80082e0 <floor+0x40>
 80082d0:	2c00      	cmp	r4, #0
 80082d2:	da56      	bge.n	8008382 <floor+0xe2>
 80082d4:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80082d8:	4325      	orrs	r5, r4
 80082da:	d055      	beq.n	8008388 <floor+0xe8>
 80082dc:	2500      	movs	r5, #0
 80082de:	4c2e      	ldr	r4, [pc, #184]	; (8008398 <floor+0xf8>)
 80082e0:	4623      	mov	r3, r4
 80082e2:	462f      	mov	r7, r5
 80082e4:	e025      	b.n	8008332 <floor+0x92>
 80082e6:	4a2d      	ldr	r2, [pc, #180]	; (800839c <floor+0xfc>)
 80082e8:	fa42 f806 	asr.w	r8, r2, r6
 80082ec:	ea01 0208 	and.w	r2, r1, r8
 80082f0:	4302      	orrs	r2, r0
 80082f2:	d01e      	beq.n	8008332 <floor+0x92>
 80082f4:	a326      	add	r3, pc, #152	; (adr r3, 8008390 <floor+0xf0>)
 80082f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fa:	f7f7 ff37 	bl	800016c <__adddf3>
 80082fe:	2200      	movs	r2, #0
 8008300:	2300      	movs	r3, #0
 8008302:	f7f8 fb79 	bl	80009f8 <__aeabi_dcmpgt>
 8008306:	2800      	cmp	r0, #0
 8008308:	d0ea      	beq.n	80082e0 <floor+0x40>
 800830a:	2c00      	cmp	r4, #0
 800830c:	bfbe      	ittt	lt
 800830e:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008312:	4133      	asrlt	r3, r6
 8008314:	18e4      	addlt	r4, r4, r3
 8008316:	2500      	movs	r5, #0
 8008318:	ea24 0408 	bic.w	r4, r4, r8
 800831c:	e7e0      	b.n	80082e0 <floor+0x40>
 800831e:	2e33      	cmp	r6, #51	; 0x33
 8008320:	dd0b      	ble.n	800833a <floor+0x9a>
 8008322:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008326:	d104      	bne.n	8008332 <floor+0x92>
 8008328:	4602      	mov	r2, r0
 800832a:	f7f7 ff1f 	bl	800016c <__adddf3>
 800832e:	4607      	mov	r7, r0
 8008330:	460b      	mov	r3, r1
 8008332:	4638      	mov	r0, r7
 8008334:	4619      	mov	r1, r3
 8008336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800833a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800833e:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8008342:	fa28 f802 	lsr.w	r8, r8, r2
 8008346:	ea10 0f08 	tst.w	r0, r8
 800834a:	d0f2      	beq.n	8008332 <floor+0x92>
 800834c:	a310      	add	r3, pc, #64	; (adr r3, 8008390 <floor+0xf0>)
 800834e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008352:	f7f7 ff0b 	bl	800016c <__adddf3>
 8008356:	2200      	movs	r2, #0
 8008358:	2300      	movs	r3, #0
 800835a:	f7f8 fb4d 	bl	80009f8 <__aeabi_dcmpgt>
 800835e:	2800      	cmp	r0, #0
 8008360:	d0be      	beq.n	80082e0 <floor+0x40>
 8008362:	2c00      	cmp	r4, #0
 8008364:	da0a      	bge.n	800837c <floor+0xdc>
 8008366:	2e14      	cmp	r6, #20
 8008368:	d101      	bne.n	800836e <floor+0xce>
 800836a:	3401      	adds	r4, #1
 800836c:	e006      	b.n	800837c <floor+0xdc>
 800836e:	2301      	movs	r3, #1
 8008370:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008374:	40b3      	lsls	r3, r6
 8008376:	441d      	add	r5, r3
 8008378:	42af      	cmp	r7, r5
 800837a:	d8f6      	bhi.n	800836a <floor+0xca>
 800837c:	ea25 0508 	bic.w	r5, r5, r8
 8008380:	e7ae      	b.n	80082e0 <floor+0x40>
 8008382:	2500      	movs	r5, #0
 8008384:	462c      	mov	r4, r5
 8008386:	e7ab      	b.n	80082e0 <floor+0x40>
 8008388:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800838c:	e7a8      	b.n	80082e0 <floor+0x40>
 800838e:	bf00      	nop
 8008390:	8800759c 	.word	0x8800759c
 8008394:	7e37e43c 	.word	0x7e37e43c
 8008398:	bff00000 	.word	0xbff00000
 800839c:	000fffff 	.word	0x000fffff

080083a0 <abort>:
 80083a0:	2006      	movs	r0, #6
 80083a2:	b508      	push	{r3, lr}
 80083a4:	f000 f90a 	bl	80085bc <raise>
 80083a8:	2001      	movs	r0, #1
 80083aa:	f7fb fdfc 	bl	8003fa6 <_exit>
	...

080083b0 <malloc>:
 80083b0:	4b02      	ldr	r3, [pc, #8]	; (80083bc <malloc+0xc>)
 80083b2:	4601      	mov	r1, r0
 80083b4:	6818      	ldr	r0, [r3, #0]
 80083b6:	f000 b82b 	b.w	8008410 <_malloc_r>
 80083ba:	bf00      	nop
 80083bc:	2000005c 	.word	0x2000005c

080083c0 <free>:
 80083c0:	4b02      	ldr	r3, [pc, #8]	; (80083cc <free+0xc>)
 80083c2:	4601      	mov	r1, r0
 80083c4:	6818      	ldr	r0, [r3, #0]
 80083c6:	f000 b95f 	b.w	8008688 <_free_r>
 80083ca:	bf00      	nop
 80083cc:	2000005c 	.word	0x2000005c

080083d0 <sbrk_aligned>:
 80083d0:	b570      	push	{r4, r5, r6, lr}
 80083d2:	4e0e      	ldr	r6, [pc, #56]	; (800840c <sbrk_aligned+0x3c>)
 80083d4:	460c      	mov	r4, r1
 80083d6:	6831      	ldr	r1, [r6, #0]
 80083d8:	4605      	mov	r5, r0
 80083da:	b911      	cbnz	r1, 80083e2 <sbrk_aligned+0x12>
 80083dc:	f000 f90a 	bl	80085f4 <_sbrk_r>
 80083e0:	6030      	str	r0, [r6, #0]
 80083e2:	4621      	mov	r1, r4
 80083e4:	4628      	mov	r0, r5
 80083e6:	f000 f905 	bl	80085f4 <_sbrk_r>
 80083ea:	1c43      	adds	r3, r0, #1
 80083ec:	d00a      	beq.n	8008404 <sbrk_aligned+0x34>
 80083ee:	1cc4      	adds	r4, r0, #3
 80083f0:	f024 0403 	bic.w	r4, r4, #3
 80083f4:	42a0      	cmp	r0, r4
 80083f6:	d007      	beq.n	8008408 <sbrk_aligned+0x38>
 80083f8:	1a21      	subs	r1, r4, r0
 80083fa:	4628      	mov	r0, r5
 80083fc:	f000 f8fa 	bl	80085f4 <_sbrk_r>
 8008400:	3001      	adds	r0, #1
 8008402:	d101      	bne.n	8008408 <sbrk_aligned+0x38>
 8008404:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008408:	4620      	mov	r0, r4
 800840a:	bd70      	pop	{r4, r5, r6, pc}
 800840c:	200020a0 	.word	0x200020a0

08008410 <_malloc_r>:
 8008410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008414:	1ccd      	adds	r5, r1, #3
 8008416:	f025 0503 	bic.w	r5, r5, #3
 800841a:	3508      	adds	r5, #8
 800841c:	2d0c      	cmp	r5, #12
 800841e:	bf38      	it	cc
 8008420:	250c      	movcc	r5, #12
 8008422:	2d00      	cmp	r5, #0
 8008424:	4607      	mov	r7, r0
 8008426:	db01      	blt.n	800842c <_malloc_r+0x1c>
 8008428:	42a9      	cmp	r1, r5
 800842a:	d905      	bls.n	8008438 <_malloc_r+0x28>
 800842c:	230c      	movs	r3, #12
 800842e:	2600      	movs	r6, #0
 8008430:	603b      	str	r3, [r7, #0]
 8008432:	4630      	mov	r0, r6
 8008434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008438:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800850c <_malloc_r+0xfc>
 800843c:	f000 f868 	bl	8008510 <__malloc_lock>
 8008440:	f8d8 3000 	ldr.w	r3, [r8]
 8008444:	461c      	mov	r4, r3
 8008446:	bb5c      	cbnz	r4, 80084a0 <_malloc_r+0x90>
 8008448:	4629      	mov	r1, r5
 800844a:	4638      	mov	r0, r7
 800844c:	f7ff ffc0 	bl	80083d0 <sbrk_aligned>
 8008450:	1c43      	adds	r3, r0, #1
 8008452:	4604      	mov	r4, r0
 8008454:	d155      	bne.n	8008502 <_malloc_r+0xf2>
 8008456:	f8d8 4000 	ldr.w	r4, [r8]
 800845a:	4626      	mov	r6, r4
 800845c:	2e00      	cmp	r6, #0
 800845e:	d145      	bne.n	80084ec <_malloc_r+0xdc>
 8008460:	2c00      	cmp	r4, #0
 8008462:	d048      	beq.n	80084f6 <_malloc_r+0xe6>
 8008464:	6823      	ldr	r3, [r4, #0]
 8008466:	4631      	mov	r1, r6
 8008468:	4638      	mov	r0, r7
 800846a:	eb04 0903 	add.w	r9, r4, r3
 800846e:	f000 f8c1 	bl	80085f4 <_sbrk_r>
 8008472:	4581      	cmp	r9, r0
 8008474:	d13f      	bne.n	80084f6 <_malloc_r+0xe6>
 8008476:	6821      	ldr	r1, [r4, #0]
 8008478:	4638      	mov	r0, r7
 800847a:	1a6d      	subs	r5, r5, r1
 800847c:	4629      	mov	r1, r5
 800847e:	f7ff ffa7 	bl	80083d0 <sbrk_aligned>
 8008482:	3001      	adds	r0, #1
 8008484:	d037      	beq.n	80084f6 <_malloc_r+0xe6>
 8008486:	6823      	ldr	r3, [r4, #0]
 8008488:	442b      	add	r3, r5
 800848a:	6023      	str	r3, [r4, #0]
 800848c:	f8d8 3000 	ldr.w	r3, [r8]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d038      	beq.n	8008506 <_malloc_r+0xf6>
 8008494:	685a      	ldr	r2, [r3, #4]
 8008496:	42a2      	cmp	r2, r4
 8008498:	d12b      	bne.n	80084f2 <_malloc_r+0xe2>
 800849a:	2200      	movs	r2, #0
 800849c:	605a      	str	r2, [r3, #4]
 800849e:	e00f      	b.n	80084c0 <_malloc_r+0xb0>
 80084a0:	6822      	ldr	r2, [r4, #0]
 80084a2:	1b52      	subs	r2, r2, r5
 80084a4:	d41f      	bmi.n	80084e6 <_malloc_r+0xd6>
 80084a6:	2a0b      	cmp	r2, #11
 80084a8:	d917      	bls.n	80084da <_malloc_r+0xca>
 80084aa:	1961      	adds	r1, r4, r5
 80084ac:	42a3      	cmp	r3, r4
 80084ae:	6025      	str	r5, [r4, #0]
 80084b0:	bf18      	it	ne
 80084b2:	6059      	strne	r1, [r3, #4]
 80084b4:	6863      	ldr	r3, [r4, #4]
 80084b6:	bf08      	it	eq
 80084b8:	f8c8 1000 	streq.w	r1, [r8]
 80084bc:	5162      	str	r2, [r4, r5]
 80084be:	604b      	str	r3, [r1, #4]
 80084c0:	4638      	mov	r0, r7
 80084c2:	f104 060b 	add.w	r6, r4, #11
 80084c6:	f000 f829 	bl	800851c <__malloc_unlock>
 80084ca:	f026 0607 	bic.w	r6, r6, #7
 80084ce:	1d23      	adds	r3, r4, #4
 80084d0:	1af2      	subs	r2, r6, r3
 80084d2:	d0ae      	beq.n	8008432 <_malloc_r+0x22>
 80084d4:	1b9b      	subs	r3, r3, r6
 80084d6:	50a3      	str	r3, [r4, r2]
 80084d8:	e7ab      	b.n	8008432 <_malloc_r+0x22>
 80084da:	42a3      	cmp	r3, r4
 80084dc:	6862      	ldr	r2, [r4, #4]
 80084de:	d1dd      	bne.n	800849c <_malloc_r+0x8c>
 80084e0:	f8c8 2000 	str.w	r2, [r8]
 80084e4:	e7ec      	b.n	80084c0 <_malloc_r+0xb0>
 80084e6:	4623      	mov	r3, r4
 80084e8:	6864      	ldr	r4, [r4, #4]
 80084ea:	e7ac      	b.n	8008446 <_malloc_r+0x36>
 80084ec:	4634      	mov	r4, r6
 80084ee:	6876      	ldr	r6, [r6, #4]
 80084f0:	e7b4      	b.n	800845c <_malloc_r+0x4c>
 80084f2:	4613      	mov	r3, r2
 80084f4:	e7cc      	b.n	8008490 <_malloc_r+0x80>
 80084f6:	230c      	movs	r3, #12
 80084f8:	4638      	mov	r0, r7
 80084fa:	603b      	str	r3, [r7, #0]
 80084fc:	f000 f80e 	bl	800851c <__malloc_unlock>
 8008500:	e797      	b.n	8008432 <_malloc_r+0x22>
 8008502:	6025      	str	r5, [r4, #0]
 8008504:	e7dc      	b.n	80084c0 <_malloc_r+0xb0>
 8008506:	605b      	str	r3, [r3, #4]
 8008508:	deff      	udf	#255	; 0xff
 800850a:	bf00      	nop
 800850c:	2000209c 	.word	0x2000209c

08008510 <__malloc_lock>:
 8008510:	4801      	ldr	r0, [pc, #4]	; (8008518 <__malloc_lock+0x8>)
 8008512:	f000 b8a9 	b.w	8008668 <__retarget_lock_acquire_recursive>
 8008516:	bf00      	nop
 8008518:	200021e0 	.word	0x200021e0

0800851c <__malloc_unlock>:
 800851c:	4801      	ldr	r0, [pc, #4]	; (8008524 <__malloc_unlock+0x8>)
 800851e:	f000 b8a4 	b.w	800866a <__retarget_lock_release_recursive>
 8008522:	bf00      	nop
 8008524:	200021e0 	.word	0x200021e0

08008528 <memmove>:
 8008528:	4288      	cmp	r0, r1
 800852a:	b510      	push	{r4, lr}
 800852c:	eb01 0402 	add.w	r4, r1, r2
 8008530:	d902      	bls.n	8008538 <memmove+0x10>
 8008532:	4284      	cmp	r4, r0
 8008534:	4623      	mov	r3, r4
 8008536:	d807      	bhi.n	8008548 <memmove+0x20>
 8008538:	1e43      	subs	r3, r0, #1
 800853a:	42a1      	cmp	r1, r4
 800853c:	d008      	beq.n	8008550 <memmove+0x28>
 800853e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008542:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008546:	e7f8      	b.n	800853a <memmove+0x12>
 8008548:	4601      	mov	r1, r0
 800854a:	4402      	add	r2, r0
 800854c:	428a      	cmp	r2, r1
 800854e:	d100      	bne.n	8008552 <memmove+0x2a>
 8008550:	bd10      	pop	{r4, pc}
 8008552:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008556:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800855a:	e7f7      	b.n	800854c <memmove+0x24>

0800855c <memset>:
 800855c:	4603      	mov	r3, r0
 800855e:	4402      	add	r2, r0
 8008560:	4293      	cmp	r3, r2
 8008562:	d100      	bne.n	8008566 <memset+0xa>
 8008564:	4770      	bx	lr
 8008566:	f803 1b01 	strb.w	r1, [r3], #1
 800856a:	e7f9      	b.n	8008560 <memset+0x4>

0800856c <_raise_r>:
 800856c:	291f      	cmp	r1, #31
 800856e:	b538      	push	{r3, r4, r5, lr}
 8008570:	4604      	mov	r4, r0
 8008572:	460d      	mov	r5, r1
 8008574:	d904      	bls.n	8008580 <_raise_r+0x14>
 8008576:	2316      	movs	r3, #22
 8008578:	6003      	str	r3, [r0, #0]
 800857a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800857e:	bd38      	pop	{r3, r4, r5, pc}
 8008580:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008582:	b112      	cbz	r2, 800858a <_raise_r+0x1e>
 8008584:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008588:	b94b      	cbnz	r3, 800859e <_raise_r+0x32>
 800858a:	4620      	mov	r0, r4
 800858c:	f000 f830 	bl	80085f0 <_getpid_r>
 8008590:	462a      	mov	r2, r5
 8008592:	4601      	mov	r1, r0
 8008594:	4620      	mov	r0, r4
 8008596:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800859a:	f000 b817 	b.w	80085cc <_kill_r>
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d00a      	beq.n	80085b8 <_raise_r+0x4c>
 80085a2:	1c59      	adds	r1, r3, #1
 80085a4:	d103      	bne.n	80085ae <_raise_r+0x42>
 80085a6:	2316      	movs	r3, #22
 80085a8:	6003      	str	r3, [r0, #0]
 80085aa:	2001      	movs	r0, #1
 80085ac:	e7e7      	b.n	800857e <_raise_r+0x12>
 80085ae:	2400      	movs	r4, #0
 80085b0:	4628      	mov	r0, r5
 80085b2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80085b6:	4798      	blx	r3
 80085b8:	2000      	movs	r0, #0
 80085ba:	e7e0      	b.n	800857e <_raise_r+0x12>

080085bc <raise>:
 80085bc:	4b02      	ldr	r3, [pc, #8]	; (80085c8 <raise+0xc>)
 80085be:	4601      	mov	r1, r0
 80085c0:	6818      	ldr	r0, [r3, #0]
 80085c2:	f7ff bfd3 	b.w	800856c <_raise_r>
 80085c6:	bf00      	nop
 80085c8:	2000005c 	.word	0x2000005c

080085cc <_kill_r>:
 80085cc:	b538      	push	{r3, r4, r5, lr}
 80085ce:	2300      	movs	r3, #0
 80085d0:	4d06      	ldr	r5, [pc, #24]	; (80085ec <_kill_r+0x20>)
 80085d2:	4604      	mov	r4, r0
 80085d4:	4608      	mov	r0, r1
 80085d6:	4611      	mov	r1, r2
 80085d8:	602b      	str	r3, [r5, #0]
 80085da:	f7fb fcd4 	bl	8003f86 <_kill>
 80085de:	1c43      	adds	r3, r0, #1
 80085e0:	d102      	bne.n	80085e8 <_kill_r+0x1c>
 80085e2:	682b      	ldr	r3, [r5, #0]
 80085e4:	b103      	cbz	r3, 80085e8 <_kill_r+0x1c>
 80085e6:	6023      	str	r3, [r4, #0]
 80085e8:	bd38      	pop	{r3, r4, r5, pc}
 80085ea:	bf00      	nop
 80085ec:	200021dc 	.word	0x200021dc

080085f0 <_getpid_r>:
 80085f0:	f7fb bcc2 	b.w	8003f78 <_getpid>

080085f4 <_sbrk_r>:
 80085f4:	b538      	push	{r3, r4, r5, lr}
 80085f6:	2300      	movs	r3, #0
 80085f8:	4d05      	ldr	r5, [pc, #20]	; (8008610 <_sbrk_r+0x1c>)
 80085fa:	4604      	mov	r4, r0
 80085fc:	4608      	mov	r0, r1
 80085fe:	602b      	str	r3, [r5, #0]
 8008600:	f7fb fcdc 	bl	8003fbc <_sbrk>
 8008604:	1c43      	adds	r3, r0, #1
 8008606:	d102      	bne.n	800860e <_sbrk_r+0x1a>
 8008608:	682b      	ldr	r3, [r5, #0]
 800860a:	b103      	cbz	r3, 800860e <_sbrk_r+0x1a>
 800860c:	6023      	str	r3, [r4, #0]
 800860e:	bd38      	pop	{r3, r4, r5, pc}
 8008610:	200021dc 	.word	0x200021dc

08008614 <__errno>:
 8008614:	4b01      	ldr	r3, [pc, #4]	; (800861c <__errno+0x8>)
 8008616:	6818      	ldr	r0, [r3, #0]
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	2000005c 	.word	0x2000005c

08008620 <__libc_init_array>:
 8008620:	b570      	push	{r4, r5, r6, lr}
 8008622:	2600      	movs	r6, #0
 8008624:	4d0c      	ldr	r5, [pc, #48]	; (8008658 <__libc_init_array+0x38>)
 8008626:	4c0d      	ldr	r4, [pc, #52]	; (800865c <__libc_init_array+0x3c>)
 8008628:	1b64      	subs	r4, r4, r5
 800862a:	10a4      	asrs	r4, r4, #2
 800862c:	42a6      	cmp	r6, r4
 800862e:	d109      	bne.n	8008644 <__libc_init_array+0x24>
 8008630:	f000 f872 	bl	8008718 <_init>
 8008634:	2600      	movs	r6, #0
 8008636:	4d0a      	ldr	r5, [pc, #40]	; (8008660 <__libc_init_array+0x40>)
 8008638:	4c0a      	ldr	r4, [pc, #40]	; (8008664 <__libc_init_array+0x44>)
 800863a:	1b64      	subs	r4, r4, r5
 800863c:	10a4      	asrs	r4, r4, #2
 800863e:	42a6      	cmp	r6, r4
 8008640:	d105      	bne.n	800864e <__libc_init_array+0x2e>
 8008642:	bd70      	pop	{r4, r5, r6, pc}
 8008644:	f855 3b04 	ldr.w	r3, [r5], #4
 8008648:	4798      	blx	r3
 800864a:	3601      	adds	r6, #1
 800864c:	e7ee      	b.n	800862c <__libc_init_array+0xc>
 800864e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008652:	4798      	blx	r3
 8008654:	3601      	adds	r6, #1
 8008656:	e7f2      	b.n	800863e <__libc_init_array+0x1e>
 8008658:	08008d00 	.word	0x08008d00
 800865c:	08008d00 	.word	0x08008d00
 8008660:	08008d00 	.word	0x08008d00
 8008664:	08008d08 	.word	0x08008d08

08008668 <__retarget_lock_acquire_recursive>:
 8008668:	4770      	bx	lr

0800866a <__retarget_lock_release_recursive>:
 800866a:	4770      	bx	lr

0800866c <memcpy>:
 800866c:	440a      	add	r2, r1
 800866e:	4291      	cmp	r1, r2
 8008670:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008674:	d100      	bne.n	8008678 <memcpy+0xc>
 8008676:	4770      	bx	lr
 8008678:	b510      	push	{r4, lr}
 800867a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800867e:	4291      	cmp	r1, r2
 8008680:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008684:	d1f9      	bne.n	800867a <memcpy+0xe>
 8008686:	bd10      	pop	{r4, pc}

08008688 <_free_r>:
 8008688:	b538      	push	{r3, r4, r5, lr}
 800868a:	4605      	mov	r5, r0
 800868c:	2900      	cmp	r1, #0
 800868e:	d040      	beq.n	8008712 <_free_r+0x8a>
 8008690:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008694:	1f0c      	subs	r4, r1, #4
 8008696:	2b00      	cmp	r3, #0
 8008698:	bfb8      	it	lt
 800869a:	18e4      	addlt	r4, r4, r3
 800869c:	f7ff ff38 	bl	8008510 <__malloc_lock>
 80086a0:	4a1c      	ldr	r2, [pc, #112]	; (8008714 <_free_r+0x8c>)
 80086a2:	6813      	ldr	r3, [r2, #0]
 80086a4:	b933      	cbnz	r3, 80086b4 <_free_r+0x2c>
 80086a6:	6063      	str	r3, [r4, #4]
 80086a8:	6014      	str	r4, [r2, #0]
 80086aa:	4628      	mov	r0, r5
 80086ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086b0:	f7ff bf34 	b.w	800851c <__malloc_unlock>
 80086b4:	42a3      	cmp	r3, r4
 80086b6:	d908      	bls.n	80086ca <_free_r+0x42>
 80086b8:	6820      	ldr	r0, [r4, #0]
 80086ba:	1821      	adds	r1, r4, r0
 80086bc:	428b      	cmp	r3, r1
 80086be:	bf01      	itttt	eq
 80086c0:	6819      	ldreq	r1, [r3, #0]
 80086c2:	685b      	ldreq	r3, [r3, #4]
 80086c4:	1809      	addeq	r1, r1, r0
 80086c6:	6021      	streq	r1, [r4, #0]
 80086c8:	e7ed      	b.n	80086a6 <_free_r+0x1e>
 80086ca:	461a      	mov	r2, r3
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	b10b      	cbz	r3, 80086d4 <_free_r+0x4c>
 80086d0:	42a3      	cmp	r3, r4
 80086d2:	d9fa      	bls.n	80086ca <_free_r+0x42>
 80086d4:	6811      	ldr	r1, [r2, #0]
 80086d6:	1850      	adds	r0, r2, r1
 80086d8:	42a0      	cmp	r0, r4
 80086da:	d10b      	bne.n	80086f4 <_free_r+0x6c>
 80086dc:	6820      	ldr	r0, [r4, #0]
 80086de:	4401      	add	r1, r0
 80086e0:	1850      	adds	r0, r2, r1
 80086e2:	4283      	cmp	r3, r0
 80086e4:	6011      	str	r1, [r2, #0]
 80086e6:	d1e0      	bne.n	80086aa <_free_r+0x22>
 80086e8:	6818      	ldr	r0, [r3, #0]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	4408      	add	r0, r1
 80086ee:	6010      	str	r0, [r2, #0]
 80086f0:	6053      	str	r3, [r2, #4]
 80086f2:	e7da      	b.n	80086aa <_free_r+0x22>
 80086f4:	d902      	bls.n	80086fc <_free_r+0x74>
 80086f6:	230c      	movs	r3, #12
 80086f8:	602b      	str	r3, [r5, #0]
 80086fa:	e7d6      	b.n	80086aa <_free_r+0x22>
 80086fc:	6820      	ldr	r0, [r4, #0]
 80086fe:	1821      	adds	r1, r4, r0
 8008700:	428b      	cmp	r3, r1
 8008702:	bf01      	itttt	eq
 8008704:	6819      	ldreq	r1, [r3, #0]
 8008706:	685b      	ldreq	r3, [r3, #4]
 8008708:	1809      	addeq	r1, r1, r0
 800870a:	6021      	streq	r1, [r4, #0]
 800870c:	6063      	str	r3, [r4, #4]
 800870e:	6054      	str	r4, [r2, #4]
 8008710:	e7cb      	b.n	80086aa <_free_r+0x22>
 8008712:	bd38      	pop	{r3, r4, r5, pc}
 8008714:	2000209c 	.word	0x2000209c

08008718 <_init>:
 8008718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800871a:	bf00      	nop
 800871c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800871e:	bc08      	pop	{r3}
 8008720:	469e      	mov	lr, r3
 8008722:	4770      	bx	lr

08008724 <_fini>:
 8008724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008726:	bf00      	nop
 8008728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800872a:	bc08      	pop	{r3}
 800872c:	469e      	mov	lr, r3
 800872e:	4770      	bx	lr
