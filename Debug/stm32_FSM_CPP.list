
stm32_FSM_CPP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008840  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005dc  08008950  08008950  00018950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f2c  08008f2c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08008f2c  08008f2c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008f2c  08008f2c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008f2c  08008f2c  00018f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08008f34  08008f34  00018f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08008f3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000215c  20000060  08008f9c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200021bc  08008f9c  000221bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   000260d5  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fd0  00000000  00000000  000461a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ae0  00000000  00000000  0004a178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001484  00000000  00000000  0004bc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000066cb  00000000  00000000  0004d0dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015cdc  00000000  00000000  000537a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ac670  00000000  00000000  00069483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007df4  00000000  00000000  00115af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0011d8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08008938 	.word	0x08008938

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08008938 	.word	0x08008938

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <_ZSt17__size_to_integerj>:

  // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
  inline _GLIBCXX_CONSTEXPR int
  __size_to_integer(int __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR unsigned
  __size_to_integer(unsigned __n) { return __n; }
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr

08000a60 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr

08000a76 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a84:	d205      	bcs.n	8000a92 <_ZSt16__deque_buf_sizej+0x1c>
 8000a86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a90:	e000      	b.n	8000a94 <_ZSt16__deque_buf_sizej+0x1e>
 8000a92:	2301      	movs	r3, #1
 8000a94:	4618      	mov	r0, r3
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr

08000a9e <_ZNKSt4hashIaEclEa>:

  /// Explicit specialization for char.
  _Cxx_hashtable_define_trivial_hash(char)

  /// Explicit specialization for signed char.
  _Cxx_hashtable_define_trivial_hash(signed char)
 8000a9e:	b480      	push	{r7}
 8000aa0:	b083      	sub	sp, #12
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
 8000aa6:	460b      	mov	r3, r1
 8000aa8:	70fb      	strb	r3, [r7, #3]
 8000aaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <_ZNSt8__detail15_Hash_node_baseC1Ev>:
   */
  struct _Hash_node_base
  {
    _Hash_node_base* _M_nxt;

    _Hash_node_base() noexcept : _M_nxt() { }
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr

08000ad2 <_ZNKSt8__detail18_Mod_range_hashingclEjj>:
    typedef std::size_t first_argument_type;
    typedef std::size_t second_argument_type;
    typedef std::size_t result_type;

    result_type
    operator()(first_argument_type __num,
 8000ad2:	b480      	push	{r7}
 8000ad4:	b085      	sub	sp, #20
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	60f8      	str	r0, [r7, #12]
 8000ada:	60b9      	str	r1, [r7, #8]
 8000adc:	607a      	str	r2, [r7, #4]
	       second_argument_type __den) const noexcept
    { return __num % __den; }
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	fbb3 f2f2 	udiv	r2, r3, r2
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	fb01 f202 	mul.w	r2, r1, r2
 8000aec:	1a9b      	subs	r3, r3, r2
 8000aee:	4618      	mov	r0, r3
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <_ZNSt8__detail20_Prime_rehash_policyC1Ef>:
  /// smallest prime that keeps the load factor small enough.
  struct _Prime_rehash_policy
  {
    using __has_load_factor = true_type;

    _Prime_rehash_policy(float __z = 1.0) noexcept
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
    : _M_max_load_factor(__z), _M_next_resize(0) { }
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	683a      	ldr	r2, [r7, #0]
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4618      	mov	r0, r3
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr

08000b1a <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>:
		   std::size_t __n_ins) const;

    typedef std::size_t _State;

    _State
    _M_state() const
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
    { return _M_next_resize; }
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	4618      	mov	r0, r3
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr

08000b30 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d201      	bcs.n	8000b4a <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	e000      	b.n	8000b4c <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8000b4a:	687b      	ldr	r3, [r7, #4]
    }
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr

08000b56 <_ZNSt5queueIaSt5dequeIaSaIaEEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f000 fbfd 	bl	8001360 <_ZNSt5dequeIaSaIaEED1Ev>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <_ZN15TransitionTableC1Ev>:
}
*/
//DelayFunctionPtr delayFunctionPointer = bareMetalDelay;

// TransitionTable constructor
TransitionTable::TransitionTable() : num_states(NUM_STATES), num_events(NUM_EVENTS) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3328      	adds	r3, #40	; 0x28
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 fbdb 	bl	8001338 <_ZNSt5queueIaSt5dequeIaSaIaEEEC1IS2_vEEv>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	220a      	movs	r2, #10
 8000b86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	220a      	movs	r2, #10
 8000b8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    stateFunctions.fill(nullptr);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2200      	movs	r2, #0
 8000b96:	60fa      	str	r2, [r7, #12]
 8000b98:	f107 020c 	add.w	r2, r7, #12
 8000b9c:	4611      	mov	r1, r2
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 fc03 	bl	80013aa <_ZNSt5arrayIPFvvELj10EE4fillERKS1_>
}
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <_ZNSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EEC1Ev>:
    protected:
      typedef std::size_t 				__hash_code;

      // We need the default constructor for the local iterators and _Hashtable
      // default constructor.
      _Hash_code_base() = default;
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f000 fc0d 	bl	80013d6 <_ZNSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIaELb1EEC1Ev>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <_ZNSt8__detail15_Hashtable_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>:
      _S_node_equals(const _Hash_node_code_cache<true>& __lhn,
		     const _Hash_node_code_cache<true>& __rhn)
      { return __lhn._M_hash_code == __rhn._M_hash_code; }

    protected:
      _Hashtable_base() = default;
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff ffed 	bl	8000bae <_ZNSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EEC1Ev>
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f000 fc08 	bl	80013ea <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIaELb1EEC1Ev>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEELb1EED1Ev>:
    struct _Hashtable_ebo_helper<_Nm, _Tp, true>
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f000 fc12 	bl	8001416 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEED1Ev>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEEC1Ev>:
      using __buckets_alloc_type =
	__alloc_rebind<__node_alloc_type, __node_base_ptr>;
      using __buckets_alloc_traits = std::allocator_traits<__buckets_alloc_type>;
      using __buckets_ptr = __node_base_ptr*;

      _Hashtable_alloc() = default;
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f000 fbfa 	bl	80013fe <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEELb1EEC1Ev>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEED1Ev>:
    struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc>
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff ffe1 	bl	8000be4 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEELb1EED1Ev>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4618      	mov	r0, r3
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>:
		   const _Hash&, const _Equal&, const allocator_type&,
		   false_type __uks);

    public:
      // Constructor, destructor, assignment, swap
      _Hashtable() = default;
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f7ff ffc6 	bl	8000bc6 <_ZNSt8__detail15_Hashtable_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff ffde 	bl	8000bfc <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEEC1Ev>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f103 0218 	add.w	r2, r3, #24
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3308      	adds	r3, #8
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ff2f 	bl	8000ab8 <_ZNSt8__detail15_Hash_node_baseC1Ev>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3310      	adds	r3, #16
 8000c64:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff ff45 	bl	8000af8 <_ZNSt8__detail20_Prime_rehash_policyC1Ef>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <_ZNSt13unordered_mapIaP9BaseStateSt4hashIaESt8equal_toIaESaISt4pairIKaS1_EEEC1Ev>:
#endif

      //construct/destroy/copy

      /// Default constructor.
      unordered_map() = default;
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ffcf 	bl	8000c2c <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEEC1Ev>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <_ZNSt13unordered_mapIaP9BaseStateSt4hashIaESt8equal_toIaESaISt4pairIKaS1_EEED1Ev>:
    class unordered_map
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 fbc3 	bl	800142e <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <_ZN15TransitionTableD1Ev>:

// Инициализация указателя на функцию
//extern DelayFunctionPtr delayFunctionPointer;

// TransitionTable class definition
class TransitionTable {
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	3328      	adds	r3, #40	; 0x28
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff ff49 	bl	8000b56 <_ZNSt5queueIaSt5dequeIaSaIaEEED1Ev>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <_ZNSt5queueIaSt5dequeIaSaIaEEEaSEOS3_>:
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
 8000cd6:	6039      	str	r1, [r7, #0]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	683a      	ldr	r2, [r7, #0]
 8000cdc:	4611      	mov	r1, r2
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 fbb7 	bl	8001452 <_ZNSt5dequeIaSaIaEEaSEOS1_>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <_ZN15TransitionTableaSEOS_>:
 8000cee:	b5b0      	push	{r4, r5, r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
 8000cf6:	6039      	str	r1, [r7, #0]
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	4614      	mov	r4, r2
 8000cfe:	461d      	mov	r5, r3
 8000d00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d08:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d0c:	e884 0003 	stmia.w	r4, {r0, r1}
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	3328      	adds	r3, #40	; 0x28
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4610      	mov	r0, r2
 8000d1e:	f7ff ffd6 	bl	8000cce <_ZNSt5queueIaSt5dequeIaSaIaEEEaSEOS3_>
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	f993 2050 	ldrsb.w	r2, [r3, #80]	; 0x50
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	f993 2051 	ldrsb.w	r2, [r3, #81]	; 0x51
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bdb0      	pop	{r4, r5, r7, pc}

08000d44 <_ZN18FiniteStateMachineC1Ev>:

// FiniteStateMachine constructor
FiniteStateMachine::FiniteStateMachine() : thisState(-1), startState(-1) {
 8000d44:	b590      	push	{r4, r7, lr}
 8000d46:	b099      	sub	sp, #100	; 0x64
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3308      	adds	r3, #8
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff94 	bl	8000c7e <_ZNSt13unordered_mapIaP9BaseStateSt4hashIaESt8equal_toIaESaISt4pairIKaS1_EEEC1Ev>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	22ff      	movs	r2, #255	; 0xff
 8000d5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	22ff      	movs	r2, #255	; 0xff
 8000d62:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	3328      	adds	r3, #40	; 0x28
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff ff00 	bl	8000b70 <_ZN15TransitionTableC1Ev>
    transitionTable = TransitionTable();
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8000d76:	f107 030c 	add.w	r3, r7, #12
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fef8 	bl	8000b70 <_ZN15TransitionTableC1Ev>
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	4619      	mov	r1, r3
 8000d86:	4620      	mov	r0, r4
 8000d88:	f7ff ffb1 	bl	8000cee <_ZN15TransitionTableaSEOS_>
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ff8e 	bl	8000cb2 <_ZN15TransitionTableD1Ev>
    delayFunctionPointer = &bareMetalDelay;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a03      	ldr	r2, [pc, #12]	; (8000da8 <_ZN18FiniteStateMachineC1Ev+0x64>)
 8000d9a:	601a      	str	r2, [r3, #0]
}
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3764      	adds	r7, #100	; 0x64
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd90      	pop	{r4, r7, pc}
 8000da6:	bf00      	nop
 8000da8:	080012b7 	.word	0x080012b7

08000dac <_ZN18FiniteStateMachineD1Ev>:

// FiniteStateMachine destructor
FiniteStateMachine::~FiniteStateMachine() {}
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3328      	adds	r3, #40	; 0x28
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff ff7a 	bl	8000cb2 <_ZN15TransitionTableD1Ev>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3308      	adds	r3, #8
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff ff68 	bl	8000c98 <_ZNSt13unordered_mapIaP9BaseStateSt4hashIaESt8equal_toIaESaISt4pairIKaS1_EEED1Ev>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <_ZN9BaseStateC1EaaP18FiniteStateMachinePFvvE>:

// BaseState constructor
BaseState::BaseState(stateType initial, stateType new_state, FiniteStateMachine* pFSM, StateFunction funct)
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b088      	sub	sp, #32
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	460b      	mov	r3, r1
 8000de0:	72fb      	strb	r3, [r7, #11]
 8000de2:	4613      	mov	r3, r2
 8000de4:	72bb      	strb	r3, [r7, #10]
    : initial_state(initial), new_state(new_state), pFiniteStateMachine(pFSM), functPtr(funct) {
 8000de6:	4a11      	ldr	r2, [pc, #68]	; (8000e2c <_ZN9BaseStateC1EaaP18FiniteStateMachinePFvvE+0x58>)
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	711a      	strb	r2, [r3, #4]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	7aba      	ldrb	r2, [r7, #10]
 8000df8:	715a      	strb	r2, [r3, #5]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e04:	60da      	str	r2, [r3, #12]
	pFiniteStateMachine->stateDictionary.emplace(initial, this);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	f103 0108 	add.w	r1, r3, #8
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	61fb      	str	r3, [r7, #28]
 8000e12:	f107 0014 	add.w	r0, r7, #20
 8000e16:	f107 031c 	add.w	r3, r7, #28
 8000e1a:	f107 020b 	add.w	r2, r7, #11
 8000e1e:	f000 fb2b 	bl	8001478 <_ZNSt13unordered_mapIaP9BaseStateSt4hashIaESt8equal_toIaESaISt4pairIKaS1_EEE7emplaceIJRaS1_EEES6_INSt8__detail14_Node_iteratorIS8_Lb0ELb0EEEbEDpOT_>
}
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	4618      	mov	r0, r3
 8000e26:	3720      	adds	r7, #32
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	08008a1c 	.word	0x08008a1c

08000e30 <_ZN9BaseState4nextEv>:
void BaseState::next()
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]

}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr
	...

08000e44 <_ZN12ChoiseStatesC1EaP18FiniteStateMachinePFvvE>:

// ChoiseStates constructor
ChoiseStates::ChoiseStates(stateType initial_state, FiniteStateMachine* pFiniteStateMachine, StateFunction functPtr)
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b088      	sub	sp, #32
 8000e48:	af02      	add	r7, sp, #8
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	607a      	str	r2, [r7, #4]
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	460b      	mov	r3, r1
 8000e52:	72fb      	strb	r3, [r7, #11]
    : BaseState(initial_state, -1, pFiniteStateMachine, functPtr) {
 8000e54:	68f8      	ldr	r0, [r7, #12]
 8000e56:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	9300      	str	r3, [sp, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e64:	f7ff ffb6 	bl	8000dd4 <_ZN9BaseStateC1EaaP18FiniteStateMachinePFvvE>
 8000e68:	4a0e      	ldr	r2, [pc, #56]	; (8000ea4 <_ZN12ChoiseStatesC1EaP18FiniteStateMachinePFvvE+0x60>)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	601a      	str	r2, [r3, #0]
	pFiniteStateMachine->transitionTable.stateFunctions.at(initial_state) = functPtr;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	3328      	adds	r3, #40	; 0x28
 8000e72:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8000e76:	4611      	mov	r1, r2
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f000 fb17 	bl	80014ac <_ZNSt5arrayIPFvvELj10EE2atEj>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	6013      	str	r3, [r2, #0]
    stateChoise.fill(-1);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	3311      	adds	r3, #17
 8000e88:	22ff      	movs	r2, #255	; 0xff
 8000e8a:	75fa      	strb	r2, [r7, #23]
 8000e8c:	f107 0217 	add.w	r2, r7, #23
 8000e90:	4611      	mov	r1, r2
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 fb24 	bl	80014e0 <_ZNSt5arrayIaLj10EE4fillERKa>
}
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	08008a10 	.word	0x08008a10

08000ea8 <_ZN12ChoiseStates9addChoiseEaa>:

// ChoiseStates method: addChoise
void ChoiseStates::addChoise(stateType choise, stateType new_state) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	70fb      	strb	r3, [r7, #3]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	70bb      	strb	r3, [r7, #2]
    stateChoise.at(choise) = new_state;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3311      	adds	r3, #17
 8000ebc:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8000ec0:	4611      	mov	r1, r2
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 fb22 	bl	800150c <_ZNSt5arrayIaLj10EE2atEj>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	78bb      	ldrb	r3, [r7, #2]
 8000ecc:	7013      	strb	r3, [r2, #0]
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <_ZN12ChoiseStates9setChoiseEa>:

// ChoiseStates method: setChoise
void ChoiseStates::setChoise(stateType choise) {
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	70fb      	strb	r3, [r7, #3]
    thisChoise = choise;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	78fa      	ldrb	r2, [r7, #3]
 8000ee6:	741a      	strb	r2, [r3, #16]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr

08000ef2 <_ZN12ChoiseStates8goChoiseEv>:

// ChoiseStates method: goChoise
void ChoiseStates::goChoise() {
 8000ef2:	b590      	push	{r4, r7, lr}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
    if (pFiniteStateMachine->thisState == stateChoise.at(thisChoise))
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	f993 4024 	ldrsb.w	r4, [r3, #36]	; 0x24
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f103 0211 	add.w	r2, r3, #17
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4610      	mov	r0, r2
 8000f12:	f000 fafb 	bl	800150c <_ZNSt5arrayIaLj10EE2atEj>
 8000f16:	4603      	mov	r3, r0
 8000f18:	f993 3000 	ldrsb.w	r3, [r3]
 8000f1c:	429c      	cmp	r4, r3
 8000f1e:	bf0c      	ite	eq
 8000f20:	2301      	moveq	r3, #1
 8000f22:	2300      	movne	r3, #0
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d111      	bne.n	8000f4e <_ZN12ChoiseStates8goChoiseEv+0x5c>
        return;

    pFiniteStateMachine->thisState = stateChoise.at(thisChoise);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f103 0211 	add.w	r2, r3, #17
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000f36:	4619      	mov	r1, r3
 8000f38:	4610      	mov	r0, r2
 8000f3a:	f000 fae7 	bl	800150c <_ZNSt5arrayIaLj10EE2atEj>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	f992 2000 	ldrsb.w	r2, [r2]
 8000f48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000f4c:	e000      	b.n	8000f50 <_ZN12ChoiseStates8goChoiseEv+0x5e>
        return;
 8000f4e:	bf00      	nop
}
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd90      	pop	{r4, r7, pc}

08000f56 <_ZN12ChoiseStates4nextEv>:

void ChoiseStates::next()
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
	goChoise();
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff ffc7 	bl	8000ef2 <_ZN12ChoiseStates8goChoiseEv>
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <_ZN14StandardStatesC1EaaP18FiniteStateMachinePFvvE>:
// StandardStates constructor
StandardStates::StandardStates(stateType initial_state, stateType new_state, FiniteStateMachine* pFiniteStateMachine, StateFunction functPtr)
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af02      	add	r7, sp, #8
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	460b      	mov	r3, r1
 8000f78:	72fb      	strb	r3, [r7, #11]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	72bb      	strb	r3, [r7, #10]
    : BaseState(initial_state, new_state, pFiniteStateMachine, functPtr) {
 8000f7e:	68f8      	ldr	r0, [r7, #12]
 8000f80:	f997 200a 	ldrsb.w	r2, [r7, #10]
 8000f84:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f7ff ff21 	bl	8000dd4 <_ZN9BaseStateC1EaaP18FiniteStateMachinePFvvE>
 8000f92:	4a09      	ldr	r2, [pc, #36]	; (8000fb8 <_ZN14StandardStatesC1EaaP18FiniteStateMachinePFvvE+0x4c>)
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	601a      	str	r2, [r3, #0]
    pFiniteStateMachine->transitionTable.stateFunctions.at(initial_state) = functPtr;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3328      	adds	r3, #40	; 0x28
 8000f9c:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 fa82 	bl	80014ac <_ZNSt5arrayIPFvvELj10EE2atEj>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	6013      	str	r3, [r2, #0]
}
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	08008a04 	.word	0x08008a04

08000fbc <_ZN14StandardStates3endEv>:

// StandardStates method: end
void StandardStates::end() {
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]

    pFiniteStateMachine->thisState = new_state;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	f992 2005 	ldrsb.w	r2, [r2, #5]
 8000fce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr

08000fdc <_ZN14StandardStates4nextEv>:

void StandardStates::next ()
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	end();
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff ffe9 	bl	8000fbc <_ZN14StandardStates3endEv>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <_ZN11EventStatesC1EaP18FiniteStateMachinePFvvE>:
void FiniteStateMachine::next() {
    this->thisState = new_state;
}
*/
// EventStates constructor
EventStates::EventStates(stateType initial_state, FiniteStateMachine* pFiniteStateMachine, StateFunction functPtr)
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af02      	add	r7, sp, #8
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	607a      	str	r2, [r7, #4]
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	460b      	mov	r3, r1
 8001002:	72fb      	strb	r3, [r7, #11]
    : BaseState(initial_state, -1, pFiniteStateMachine, functPtr) {
 8001004:	68f8      	ldr	r0, [r7, #12]
 8001006:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001014:	f7ff fede 	bl	8000dd4 <_ZN9BaseStateC1EaaP18FiniteStateMachinePFvvE>
 8001018:	4a10      	ldr	r2, [pc, #64]	; (800105c <_ZN11EventStatesC1EaP18FiniteStateMachinePFvvE+0x68>)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	601a      	str	r2, [r3, #0]
    transitionEvent.fill(-1);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	3310      	adds	r3, #16
 8001022:	22ff      	movs	r2, #255	; 0xff
 8001024:	75fa      	strb	r2, [r7, #23]
 8001026:	f107 0217 	add.w	r2, r7, #23
 800102a:	4611      	mov	r1, r2
 800102c:	4618      	mov	r0, r3
 800102e:	f000 fa57 	bl	80014e0 <_ZNSt5arrayIaLj10EE4fillERKa>
    eventQueuePtr = &(pFiniteStateMachine->transitionTable.eventQueue);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	61da      	str	r2, [r3, #28]
    pFiniteStateMachine->transitionTable.stateFunctions.at(initial_state) = functPtr;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3328      	adds	r3, #40	; 0x28
 8001040:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8001044:	4611      	mov	r1, r2
 8001046:	4618      	mov	r0, r3
 8001048:	f000 fa30 	bl	80014ac <_ZNSt5arrayIPFvvELj10EE2atEj>
 800104c:	4602      	mov	r2, r0
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	6013      	str	r3, [r2, #0]
}
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	4618      	mov	r0, r3
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	080089f8 	.word	0x080089f8

08001060 <_ZN11EventStates8addEventEaa>:

// EventStates method: addEvent
void EventStates::addEvent(stateType event, stateType new_state) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	70fb      	strb	r3, [r7, #3]
 800106c:	4613      	mov	r3, r2
 800106e:	70bb      	strb	r3, [r7, #2]
    transitionEvent.at(event) = new_state;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3310      	adds	r3, #16
 8001074:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8001078:	4611      	mov	r1, r2
 800107a:	4618      	mov	r0, r3
 800107c:	f000 fa46 	bl	800150c <_ZNSt5arrayIaLj10EE2atEj>
 8001080:	4602      	mov	r2, r0
 8001082:	78bb      	ldrb	r3, [r7, #2]
 8001084:	7013      	strb	r3, [r2, #0]
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <_ZN11EventStates9waitEventEv>:

// EventStates method: waitEvent
void EventStates::waitEvent() {
 800108e:	b590      	push	{r4, r7, lr}
 8001090:	b085      	sub	sp, #20
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
	stateType currentEvent;
    while (1) {

        while (eventQueuePtr->empty()) {
 8001096:	e006      	b.n	80010a6 <_ZN11EventStates9waitEventEv+0x18>
        	(pFiniteStateMachine->*(&FiniteStateMachine::delayFunctionPointer))(1);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	2200      	movs	r2, #0
 800109e:	4413      	add	r3, r2
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2001      	movs	r0, #1
 80010a4:	4798      	blx	r3
        while (eventQueuePtr->empty()) {
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 fa48 	bl	8001540 <_ZNKSt5queueIaSt5dequeIaSaIaEEE5emptyEv>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1f0      	bne.n	8001098 <_ZN11EventStates9waitEventEv+0xa>
        }

       currentEvent = eventQueuePtr->front();
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 fa4d 	bl	800155a <_ZNSt5queueIaSt5dequeIaSaIaEEE5frontEv>
 80010c0:	4603      	mov	r3, r0
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	73fb      	strb	r3, [r7, #15]
        if (handleTransition(currentEvent) != -1) {
 80010c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ca:	4619      	mov	r1, r3
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f000 f831 	bl	8001134 <_ZN11EventStates16handleTransitionEa>
 80010d2:	4603      	mov	r3, r0
 80010d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010d8:	bf14      	ite	ne
 80010da:	2301      	movne	r3, #1
 80010dc:	2300      	moveq	r3, #0
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d005      	beq.n	80010f0 <_ZN11EventStates9waitEventEv+0x62>
            eventQueuePtr->pop();
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	69db      	ldr	r3, [r3, #28]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 fa43 	bl	8001574 <_ZNSt5queueIaSt5dequeIaSaIaEEE3popEv>
            break;
 80010ee:	e007      	b.n	8001100 <_ZN11EventStates9waitEventEv+0x72>
        } else {
        	(pFiniteStateMachine->*(&FiniteStateMachine::delayFunctionPointer))(1);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	2200      	movs	r2, #0
 80010f6:	4413      	add	r3, r2
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2001      	movs	r0, #1
 80010fc:	4798      	blx	r3
        while (eventQueuePtr->empty()) {
 80010fe:	e7d2      	b.n	80010a6 <_ZN11EventStates9waitEventEv+0x18>
        }
    }

    pFiniteStateMachine->thisState = handleTransition(currentEvent);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689c      	ldr	r4, [r3, #8]
 8001104:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001108:	4619      	mov	r1, r3
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f000 f812 	bl	8001134 <_ZN11EventStates16handleTransitionEa>
 8001110:	4603      	mov	r3, r0
 8001112:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8001116:	bf00      	nop
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	bd90      	pop	{r4, r7, pc}

0800111e <_ZN11EventStates4nextEv>:
void EventStates::next()
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
	waitEvent();
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ffb1 	bl	800108e <_ZN11EventStates9waitEventEv>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <_ZN11EventStates16handleTransitionEa>:
// EventStates method: handleTransition
stateType EventStates::handleTransition(stateType event) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	70fb      	strb	r3, [r7, #3]
    if (transitionEvent.at(event) != -1) {
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3310      	adds	r3, #16
 8001144:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8001148:	4611      	mov	r1, r2
 800114a:	4618      	mov	r0, r3
 800114c:	f000 f9de 	bl	800150c <_ZNSt5arrayIaLj10EE2atEj>
 8001150:	4603      	mov	r3, r0
 8001152:	f993 3000 	ldrsb.w	r3, [r3]
 8001156:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800115a:	bf14      	ite	ne
 800115c:	2301      	movne	r3, #1
 800115e:	2300      	moveq	r3, #0
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d00d      	beq.n	8001182 <_ZN11EventStates16handleTransitionEa+0x4e>
        stateType newState = transitionEvent.at(event);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3310      	adds	r3, #16
 800116a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800116e:	4611      	mov	r1, r2
 8001170:	4618      	mov	r0, r3
 8001172:	f000 f9cb 	bl	800150c <_ZNSt5arrayIaLj10EE2atEj>
 8001176:	4603      	mov	r3, r0
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	73fb      	strb	r3, [r7, #15]
        return newState;
 800117c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001180:	e001      	b.n	8001186 <_ZN11EventStates16handleTransitionEa+0x52>
    } else {
        return -1;
 8001182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <_ZN18FiniteStateMachine19createStateStandartEaaPFvvE>:


// FiniteStateMachine method: createStateStandart
StandardStates FiniteStateMachine::createStateStandart(stateType initial_state, stateType new_state, StateFunction functPtr) {
 800118e:	b580      	push	{r7, lr}
 8001190:	b086      	sub	sp, #24
 8001192:	af02      	add	r7, sp, #8
 8001194:	60f8      	str	r0, [r7, #12]
 8001196:	60b9      	str	r1, [r7, #8]
 8001198:	4611      	mov	r1, r2
 800119a:	461a      	mov	r2, r3
 800119c:	460b      	mov	r3, r1
 800119e:	71fb      	strb	r3, [r7, #7]
 80011a0:	4613      	mov	r3, r2
 80011a2:	71bb      	strb	r3, [r7, #6]
    return StandardStates(initial_state, new_state, this, functPtr);
 80011a4:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80011a8:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	68f8      	ldr	r0, [r7, #12]
 80011b4:	f7ff feda 	bl	8000f6c <_ZN14StandardStatesC1EaaP18FiniteStateMachinePFvvE>
}
 80011b8:	68f8      	ldr	r0, [r7, #12]
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <_ZN18FiniteStateMachine16createStateEventEaPFvvE>:



// FiniteStateMachine method: createStateEvent
EventStates FiniteStateMachine::createStateEvent(stateType initial_state, StateFunction functPtr) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	4613      	mov	r3, r2
 80011ce:	71fb      	strb	r3, [r7, #7]
    return EventStates(initial_state, this, functPtr);
 80011d0:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	68f8      	ldr	r0, [r7, #12]
 80011da:	f7ff ff0b 	bl	8000ff4 <_ZN11EventStatesC1EaP18FiniteStateMachinePFvvE>
}
 80011de:	68f8      	ldr	r0, [r7, #12]
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <_ZN18FiniteStateMachine17createStateChoiseEaPFvvE>:

// FiniteStateMachine method: createStateChoise
ChoiseStates FiniteStateMachine::createStateChoise(stateType initial_state, StateFunction functPtr) {
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b084      	sub	sp, #16
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	60f8      	str	r0, [r7, #12]
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	603b      	str	r3, [r7, #0]
 80011f2:	4613      	mov	r3, r2
 80011f4:	71fb      	strb	r3, [r7, #7]
    return ChoiseStates(initial_state, this, functPtr);
 80011f6:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	68ba      	ldr	r2, [r7, #8]
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f7ff fe20 	bl	8000e44 <_ZN12ChoiseStatesC1EaP18FiniteStateMachinePFvvE>
}
 8001204:	68f8      	ldr	r0, [r7, #12]
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <_ZN18FiniteStateMachine9sendEventEa>:

// FiniteStateMachine method: sendEvent
void FiniteStateMachine::sendEvent(stateType event) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	70fb      	strb	r3, [r7, #3]
    this->transitionTable.eventQueue.push(event);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3350      	adds	r3, #80	; 0x50
 800121c:	1cfa      	adds	r2, r7, #3
 800121e:	4611      	mov	r1, r2
 8001220:	4618      	mov	r0, r3
 8001222:	f000 f9b3 	bl	800158c <_ZNSt5queueIaSt5dequeIaSaIaEEE4pushERKa>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <_ZN18FiniteStateMachine13setStartStateEa>:

// FiniteStateMachine method: setStartState
void FiniteStateMachine::setStartState(stateType state) {
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
 8001236:	460b      	mov	r3, r1
 8001238:	70fb      	strb	r3, [r7, #3]
    startState = state;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	78fa      	ldrb	r2, [r7, #3]
 800123e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    //this->pState =
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr

0800124c <_ZN18FiniteStateMachine12stateMachineEv>:

// FiniteStateMachine method: stateMashine
void FiniteStateMachine::stateMachine()
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
    this->thisState = startState;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f993 2026 	ldrsb.w	r2, [r3, #38]	; 0x26
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    for(;;) {
    	this->pState = stateDictionary[thisState];
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f103 0208 	add.w	r2, r3, #8
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3324      	adds	r3, #36	; 0x24
 800126a:	4619      	mov	r1, r3
 800126c:	4610      	mov	r0, r2
 800126e:	f000 f99b 	bl	80015a8 <_ZNSt13unordered_mapIaP9BaseStateSt4hashIaESt8equal_toIaESaISt4pairIKaS1_EEEixERS7_>
 8001272:	4603      	mov	r3, r0
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	605a      	str	r2, [r3, #4]
    	this->transitionTable.stateFunctions[this->thisState]();
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8001286:	4619      	mov	r1, r3
 8001288:	4610      	mov	r0, r2
 800128a:	f000 f99c 	bl	80015c6 <_ZNSt5arrayIPFvvELj10EEixEj>
 800128e:	4603      	mov	r3, r0
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4798      	blx	r3
    	this->pState = stateDictionary[thisState];
 8001294:	e7e4      	b.n	8001260 <_ZN18FiniteStateMachine12stateMachineEv+0x14>

08001296 <_ZN18FiniteStateMachine4nextEv>:
    }
}
void FiniteStateMachine::next()
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
	pState->next();
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4610      	mov	r0, r2
 80012ac:	4798      	blx	r3
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <_Z14bareMetalDelaym>:

void bareMetalDelay(uint32_t delay_tik)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b085      	sub	sp, #20
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < delay_tik; ++i);
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	e002      	b.n	80012ca <_Z14bareMetalDelaym+0x14>
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	3301      	adds	r3, #1
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d3f8      	bcc.n	80012c4 <_Z14bareMetalDelaym+0xe>
}
 80012d2:	bf00      	nop
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr

080012de <_ZN18FiniteStateMachine23setDelayFunctionPointerEPFvmE>:

// Метод для изменения указателя на функцию задержки
void FiniteStateMachine::setDelayFunctionPointer(DelayFunctionPtr newPtr) {
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	6039      	str	r1, [r7, #0]
    delayFunctionPointer = newPtr;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	601a      	str	r2, [r3, #0]
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr

080012f8 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	429a      	cmp	r2, r3
 800130c:	d201      	bcs.n	8001312 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	e000      	b.n	8001314 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8001312:	687b      	ldr	r3, [r7, #4]
    }
 8001314:	4618      	mov	r0, r3
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr

0800131e <_ZNSt5dequeIaSaIaEEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4618      	mov	r0, r3
 800132a:	f000 f971 	bl	8001610 <_ZNSt11_Deque_baseIaSaIaEEC1Ev>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4618      	mov	r0, r3
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <_ZNSt5queueIaSt5dequeIaSaIaEEEC1IS2_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	: c() { }
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4618      	mov	r0, r3
 8001344:	2328      	movs	r3, #40	; 0x28
 8001346:	461a      	mov	r2, r3
 8001348:	2100      	movs	r1, #0
 800134a:	f007 fa17 	bl	800877c <memset>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ffe4 	bl	800131e <_ZNSt5dequeIaSaIaEEC1Ev>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <_ZNSt5dequeIaSaIaEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	; 0x28
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8001368:	f107 0308 	add.w	r3, r7, #8
 800136c:	6879      	ldr	r1, [r7, #4]
 800136e:	4618      	mov	r0, r3
 8001370:	f000 f981 	bl	8001676 <_ZNSt5dequeIaSaIaEE5beginEv>
 8001374:	f107 0318 	add.w	r3, r7, #24
 8001378:	6879      	ldr	r1, [r7, #4]
 800137a:	4618      	mov	r0, r3
 800137c:	f000 f98a 	bl	8001694 <_ZNSt5dequeIaSaIaEE3endEv>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4618      	mov	r0, r3
 8001384:	f000 f995 	bl	80016b2 <_ZNSt11_Deque_baseIaSaIaEE19_M_get_Tp_allocatorEv>
 8001388:	4603      	mov	r3, r0
 800138a:	f107 0218 	add.w	r2, r7, #24
 800138e:	f107 0108 	add.w	r1, r7, #8
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 f9b2 	bl	80016fc <_ZNSt5dequeIaSaIaEE15_M_destroy_dataESt15_Deque_iteratorIaRaPaES5_RKS0_>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4618      	mov	r0, r3
 800139c:	f000 f949 	bl	8001632 <_ZNSt11_Deque_baseIaSaIaEED1Ev>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4618      	mov	r0, r3
 80013a4:	3728      	adds	r7, #40	; 0x28
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <_ZNSt5arrayIPFvvELj10EE4fillERKS1_>:

      // No explicit construct/copy/destroy for aggregate type.

      // DR 776.
      _GLIBCXX20_CONSTEXPR void
      fill(const value_type& __u)
 80013aa:	b590      	push	{r4, r7, lr}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
 80013b2:	6039      	str	r1, [r7, #0]
      { std::fill_n(begin(), size(), __u); }
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f000 f9ad 	bl	8001714 <_ZNSt5arrayIPFvvELj10EE5beginEv>
 80013ba:	4604      	mov	r4, r0
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f000 f9b5 	bl	800172c <_ZNKSt5arrayIPFvvELj10EE4sizeEv>
 80013c2:	4603      	mov	r3, r0
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	4619      	mov	r1, r3
 80013c8:	4620      	mov	r0, r4
 80013ca:	f000 f9b9 	bl	8001740 <_ZSt6fill_nIPPFvvEjS1_ET_S3_T0_RKT1_>
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd90      	pop	{r4, r7, pc}

080013d6 <_ZNSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIaELb1EEC1Ev>:
      _Hashtable_ebo_helper() noexcept(noexcept(_Tp())) : _Tp() { }
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4618      	mov	r0, r3
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr

080013ea <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIaELb1EEC1Ev>:
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4618      	mov	r0, r3
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr

080013fe <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEELb1EEC1Ev>:
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 f9b5 	bl	8001776 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEC1Ev>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 f9b5 	bl	800178e <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEED1Ev>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEED1Ev>:

  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800142e:	b580      	push	{r7, lr}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    ~_Hashtable() noexcept
    {
      clear();
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 f9b3 	bl	80017a2 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>
      _M_deallocate_buckets();
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f000 f9d0 	bl	80017e2 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
    }
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff fbe6 	bl	8000c14 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEED1Ev>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <_ZNSt5dequeIaSaIaEEaSEOS1_>:
       *  The contents of @a __x are moved into this deque (without copying,
       *  if the allocators permit it).
       *  @a __x is a valid, but unspecified %deque.
       */
      deque&
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8001452:	b590      	push	{r4, r7, lr}
 8001454:	b083      	sub	sp, #12
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
 800145a:	6039      	str	r1, [r7, #0]
      {
	using __always_equal = typename _Alloc_traits::is_always_equal;
	_M_move_assign1(std::move(__x), __always_equal{});
 800145c:	6838      	ldr	r0, [r7, #0]
 800145e:	f000 f9d0 	bl	8001802 <_ZSt4moveIRSt5dequeIaSaIaEEEONSt16remove_referenceIT_E4typeEOS5_>
 8001462:	4603      	mov	r3, r0
 8001464:	4622      	mov	r2, r4
 8001466:	4619      	mov	r1, r3
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 f9d4 	bl	8001816 <_ZNSt5dequeIaSaIaEE15_M_move_assign1EOS1_St17integral_constantIbLb1EE>
	return *this;
 800146e:	687b      	ldr	r3, [r7, #4]
      }
 8001470:	4618      	mov	r0, r3
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	bd90      	pop	{r4, r7, pc}

08001478 <_ZNSt13unordered_mapIaP9BaseStateSt4hashIaESt8equal_toIaESaISt4pairIKaS1_EEE7emplaceIJRaS1_EEES6_INSt8__detail14_Node_iteratorIS8_Lb0ELb0EEEbEDpOT_>:
       *
       *  Insertion requires amortized constant time.
       */
      template<typename... _Args>
	std::pair<iterator, bool>
	emplace(_Args&&... __args)
 8001478:	b5b0      	push	{r4, r5, r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
 8001484:	603b      	str	r3, [r7, #0]
	{ return _M_h.emplace(std::forward<_Args>(__args)...); }
 8001486:	68bc      	ldr	r4, [r7, #8]
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 f9e5 	bl	8001858 <_ZSt7forwardIRaEOT_RNSt16remove_referenceIS1_E4typeE>
 800148e:	4605      	mov	r5, r0
 8001490:	6838      	ldr	r0, [r7, #0]
 8001492:	f000 f9eb 	bl	800186c <_ZSt7forwardIP9BaseStateEOT_RNSt16remove_referenceIS2_E4typeE>
 8001496:	4603      	mov	r3, r0
 8001498:	68f8      	ldr	r0, [r7, #12]
 800149a:	462a      	mov	r2, r5
 800149c:	4621      	mov	r1, r4
 800149e:	f000 f9ef 	bl	8001880 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE7emplaceIJRaS3_EEES0_INS6_14_Node_iteratorIS4_Lb0ELb0EEEbEDpOT_>
 80014a2:	bf00      	nop
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bdb0      	pop	{r4, r5, r7, pc}

080014ac <_ZNSt5arrayIPFvvELj10EE2atEj>:
#endif
	return _AT_Type::_S_ref(_M_elems, __n);
      }

      _GLIBCXX17_CONSTEXPR reference
      at(size_type __n)
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
      {
	if (__n >= _Nm)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	2b09      	cmp	r3, #9
 80014ba:	d904      	bls.n	80014c6 <_ZNSt5arrayIPFvvELj10EE2atEj+0x1a>
	  std::__throw_out_of_range_fmt(__N("array::at: __n (which is %zu) "
 80014bc:	220a      	movs	r2, #10
 80014be:	6839      	ldr	r1, [r7, #0]
 80014c0:	4806      	ldr	r0, [pc, #24]	; (80014dc <_ZNSt5arrayIPFvvELj10EE2atEj+0x30>)
 80014c2:	f006 feaa 	bl	800821a <_ZSt24__throw_out_of_range_fmtPKcz>
					    ">= _Nm (which is %zu)"),
					__n, _Nm);
	return _AT_Type::_S_ref(_M_elems, __n);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6839      	ldr	r1, [r7, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 f9f3 	bl	80018b6 <_ZNSt14__array_traitsIPFvvELj10EE6_S_refERA10_KS1_j>
 80014d0:	4603      	mov	r3, r0
      }
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	08008950 	.word	0x08008950

080014e0 <_ZNSt5arrayIaLj10EE4fillERKa>:
      fill(const value_type& __u)
 80014e0:	b590      	push	{r4, r7, lr}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
      { std::fill_n(begin(), size(), __u); }
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 f9f1 	bl	80018d2 <_ZNSt5arrayIaLj10EE5beginEv>
 80014f0:	4604      	mov	r4, r0
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 f9f9 	bl	80018ea <_ZNKSt5arrayIaLj10EE4sizeEv>
 80014f8:	4603      	mov	r3, r0
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	4619      	mov	r1, r3
 80014fe:	4620      	mov	r0, r4
 8001500:	f000 f9fd 	bl	80018fe <_ZSt6fill_nIPajaET_S1_T0_RKT1_>
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	bd90      	pop	{r4, r7, pc}

0800150c <_ZNSt5arrayIaLj10EE2atEj>:
      at(size_type __n)
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
	if (__n >= _Nm)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	2b09      	cmp	r3, #9
 800151a:	d904      	bls.n	8001526 <_ZNSt5arrayIaLj10EE2atEj+0x1a>
	  std::__throw_out_of_range_fmt(__N("array::at: __n (which is %zu) "
 800151c:	220a      	movs	r2, #10
 800151e:	6839      	ldr	r1, [r7, #0]
 8001520:	4806      	ldr	r0, [pc, #24]	; (800153c <_ZNSt5arrayIaLj10EE2atEj+0x30>)
 8001522:	f006 fe7a 	bl	800821a <_ZSt24__throw_out_of_range_fmtPKcz>
	return _AT_Type::_S_ref(_M_elems, __n);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6839      	ldr	r1, [r7, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f000 fa02 	bl	8001934 <_ZNSt14__array_traitsIaLj10EE6_S_refERA10_Kaj>
 8001530:	4603      	mov	r3, r0
      }
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	08008950 	.word	0x08008950

08001540 <_ZNKSt5queueIaSt5dequeIaSaIaEEE5emptyEv>:

      /**
       *  Returns true if the %queue is empty.
       */
      _GLIBCXX_NODISCARD bool
      empty() const
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4618      	mov	r0, r3
 800154c:	f000 f9ff 	bl	800194e <_ZNKSt5dequeIaSaIaEE5emptyEv>
 8001550:	4603      	mov	r3, r0
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <_ZNSt5queueIaSt5dequeIaSaIaEEE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %queue.
       */
      reference
      front()
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	return c.front();
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4618      	mov	r0, r3
 8001566:	f000 fa04 	bl	8001972 <_ZNSt5dequeIaSaIaEE5frontEv>
 800156a:	4603      	mov	r3, r0
      }
 800156c:	4618      	mov	r0, r3
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <_ZNSt5queueIaSt5dequeIaSaIaEEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4618      	mov	r0, r3
 8001580:	f000 fa0b 	bl	800199a <_ZNSt5dequeIaSaIaEE9pop_frontEv>
      }
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <_ZNSt5queueIaSt5dequeIaSaIaEEE4pushERKa>:
      push(const value_type& __x)
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
      { c.push_back(__x); }
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6839      	ldr	r1, [r7, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f000 fa20 	bl	80019e0 <_ZNSt5dequeIaSaIaEE9push_backERKa>
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <_ZNSt13unordered_mapIaP9BaseStateSt4hashIaESt8equal_toIaESaISt4pairIKaS1_EEEixERS7_>:
       *  is then returned.
       *
       *  Lookup requires constant time.
       */
      mapped_type&
      operator[](const key_type& __k)
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
      { return _M_h[__k]; }
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6839      	ldr	r1, [r7, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 fa34 	bl	8001a24 <_ZNSt8__detail9_Map_baseIaSt4pairIKaP9BaseStateESaIS5_ENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS2_>
 80015bc:	4603      	mov	r3, r0
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <_ZNSt5arrayIPFvvELj10EEixEj>:
      operator[](size_type __n) noexcept
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
 80015ce:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6839      	ldr	r1, [r7, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f000 f96e 	bl	80018b6 <_ZNSt14__array_traitsIPFvvELj10EE6_S_refERA10_KS1_j>
 80015da:	4603      	mov	r3, r0
      }
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <_ZNSt11_Deque_baseIaSaIaEE11_Deque_implD1Ev>:
      struct _Deque_impl
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f000 fa75 	bl	8001af0 <_ZNSaIaED1Ev>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <_ZNSt11_Deque_baseIaSaIaEEC1Ev>:
      _Deque_base()
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4618      	mov	r0, r3
 800161c:	f000 fa58 	bl	8001ad0 <_ZNSt11_Deque_baseIaSaIaEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8001620:	2100      	movs	r1, #0
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f000 fa70 	bl	8001b08 <_ZNSt11_Deque_baseIaSaIaEE17_M_initialize_mapEj>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <_ZNSt11_Deque_baseIaSaIaEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d010      	beq.n	8001664 <_ZNSt11_Deque_baseIaSaIaEED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800164a:	3304      	adds	r3, #4
 800164c:	461a      	mov	r2, r3
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 fabc 	bl	8001bcc <_ZNSt11_Deque_baseIaSaIaEE16_M_destroy_nodesEPPaS3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6819      	ldr	r1, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	461a      	mov	r2, r3
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 facf 	bl	8001c02 <_ZNSt11_Deque_baseIaSaIaEE17_M_deallocate_mapEPPaj>
    }
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff ffc6 	bl	80015f8 <_ZNSt11_Deque_baseIaSaIaEE11_Deque_implD1Ev>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <_ZNSt5dequeIaSaIaEE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	3308      	adds	r3, #8
 8001684:	4619      	mov	r1, r3
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 f81d 	bl	80016c6 <_ZNSt15_Deque_iteratorIaRaPaEC1ERKS2_>
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <_ZNSt5dequeIaSaIaEE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %deque.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	3318      	adds	r3, #24
 80016a2:	4619      	mov	r1, r3
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 f80e 	bl	80016c6 <_ZNSt15_Deque_iteratorIaRaPaEC1ERKS2_>
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <_ZNSt11_Deque_baseIaSaIaEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4618      	mov	r0, r3
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr

080016c6 <_ZNSt15_Deque_iteratorIaRaPaEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	605a      	str	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	68da      	ldr	r2, [r3, #12]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	60da      	str	r2, [r3, #12]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4618      	mov	r0, r3
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr

080016fc <_ZNSt5dequeIaSaIaEE15_M_destroy_dataESt15_Deque_iteratorIaRaPaES5_RKS0_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 80016fc:	b480      	push	{r7}
 80016fe:	b08d      	sub	sp, #52	; 0x34
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
 8001708:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 800170a:	bf00      	nop
 800170c:	3734      	adds	r7, #52	; 0x34
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <_ZNSt5arrayIPFvvELj10EE5beginEv>:
      begin() noexcept
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 fa8b 	bl	8001c38 <_ZNSt5arrayIPFvvELj10EE4dataEv>
 8001722:	4603      	mov	r3, r0
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <_ZNKSt5arrayIPFvvELj10EE4sizeEv>:
      size() const noexcept { return _Nm; }
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	230a      	movs	r3, #10
 8001736:	4618      	mov	r0, r3
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr

08001740 <_ZSt6fill_nIPPFvvEjS1_ET_S3_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 8001740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 800174c:	68fc      	ldr	r4, [r7, #12]
 800174e:	68b8      	ldr	r0, [r7, #8]
 8001750:	f7ff f97c 	bl	8000a4c <_ZSt17__size_to_integerj>
 8001754:	4605      	mov	r5, r0
			       std::__iterator_category(__first));
 8001756:	f107 030c 	add.w	r3, r7, #12
 800175a:	4618      	mov	r0, r3
 800175c:	f000 fa79 	bl	8001c52 <_ZSt19__iterator_categoryIPPFvvEENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8001760:	4633      	mov	r3, r6
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	4629      	mov	r1, r5
 8001766:	4620      	mov	r0, r4
 8001768:	f000 fa7d 	bl	8001c66 <_ZSt10__fill_n_aIPPFvvEjS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>
 800176c:	4603      	mov	r3, r0
    }
 800176e:	4618      	mov	r0, r3
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001776 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 fa8e 	bl	8001ca0 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEC1Ev>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4618      	mov	r0, r3
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr

080017a2 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE5clearEv>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    clear() noexcept
    {
      this->_M_deallocate_nodes(_M_begin());
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 fa82 	bl	8001cb4 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 80017b0:	4603      	mov	r3, r0
 80017b2:	4619      	mov	r1, r3
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 fa88 	bl	8001cca <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE19_M_deallocate_nodesEPS7_>
      __builtin_memset(_M_buckets, 0,
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681a      	ldr	r2, [r3, #0]
		       _M_bucket_count * sizeof(__node_base_ptr));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
      __builtin_memset(_M_buckets, 0,
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4610      	mov	r0, r2
 80017c6:	461a      	mov	r2, r3
 80017c8:	2100      	movs	r1, #0
 80017ca:	f006 ffd7 	bl	800877c <memset>
      _M_element_count = 0;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	60da      	str	r2, [r3, #12]
      _M_before_begin._M_nxt = nullptr;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
    }
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>:
      _M_deallocate_buckets()
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6819      	ldr	r1, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	461a      	mov	r2, r3
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 fa80 	bl	8001cfa <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS6_15_Hash_node_baseEj>
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <_ZSt4moveIRSt5dequeIaSaIaEEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4618      	mov	r0, r3
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr

08001816 <_ZNSt5dequeIaSaIaEE15_M_move_assign1EOS1_St17integral_constantIbLb1EE>:

#if __cplusplus >= 201103L
      // Constant-time, nothrow move assignment when source object's memory
      // can be moved because the allocators are equal.
      void
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 8001816:	b590      	push	{r4, r7, lr}
 8001818:	b085      	sub	sp, #20
 800181a:	af00      	add	r7, sp, #0
 800181c:	60f8      	str	r0, [r7, #12]
 800181e:	60b9      	str	r1, [r7, #8]
 8001820:	713a      	strb	r2, [r7, #4]
      {
	this->_M_impl._M_swap_data(__x._M_impl);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	68ba      	ldr	r2, [r7, #8]
 8001826:	4611      	mov	r1, r2
 8001828:	4618      	mov	r0, r3
 800182a:	f000 fa7d 	bl	8001d28 <_ZNSt11_Deque_baseIaSaIaEE16_Deque_impl_data12_M_swap_dataERS2_>
	__x.clear();
 800182e:	68b8      	ldr	r0, [r7, #8]
 8001830:	f000 fa87 	bl	8001d42 <_ZNSt5dequeIaSaIaEE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff ff3b 	bl	80016b2 <_ZNSt11_Deque_baseIaSaIaEE19_M_get_Tp_allocatorEv>
 800183c:	4604      	mov	r4, r0
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ff36 	bl	80016b2 <_ZNSt11_Deque_baseIaSaIaEE19_M_get_Tp_allocatorEv>
 8001846:	4603      	mov	r3, r0
 8001848:	4619      	mov	r1, r3
 800184a:	4620      	mov	r0, r4
 800184c:	f000 fa8d 	bl	8001d6a <_ZSt15__alloc_on_moveISaIaEEvRT_S2_>
      }
 8001850:	bf00      	nop
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	bd90      	pop	{r4, r7, pc}

08001858 <_ZSt7forwardIRaEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4618      	mov	r0, r3
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr

0800186c <_ZSt7forwardIP9BaseStateEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4618      	mov	r0, r3
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr

08001880 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE7emplaceIJRaS3_EEES0_INS6_14_Node_iteratorIS4_Lb0ELb0EEEbEDpOT_>:
	emplace(_Args&&... __args)
 8001880:	b5b0      	push	{r4, r5, r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af02      	add	r7, sp, #8
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
 800188c:	603b      	str	r3, [r7, #0]
	{ return _M_emplace(__unique_keys{}, std::forward<_Args>(__args)...); }
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff ffe2 	bl	8001858 <_ZSt7forwardIRaEOT_RNSt16remove_referenceIS1_E4typeE>
 8001894:	4604      	mov	r4, r0
 8001896:	6838      	ldr	r0, [r7, #0]
 8001898:	f7ff ffe8 	bl	800186c <_ZSt7forwardIP9BaseStateEOT_RNSt16remove_referenceIS2_E4typeE>
 800189c:	4603      	mov	r3, r0
 800189e:	68f8      	ldr	r0, [r7, #12]
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	4623      	mov	r3, r4
 80018a4:	462a      	mov	r2, r5
 80018a6:	68b9      	ldr	r1, [r7, #8]
 80018a8:	f000 fa6d 	bl	8001d86 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE10_M_emplaceIJRaS3_EEES0_INS6_14_Node_iteratorIS4_Lb0ELb0EEEbESt17integral_constantIbLb1EEDpOT_>
 80018ac:	bf00      	nop
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bdb0      	pop	{r4, r5, r7, pc}

080018b6 <_ZNSt14__array_traitsIPFvvELj10EE6_S_refERA10_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
 80018be:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	4413      	add	r3, r2
 80018c8:	4618      	mov	r0, r3
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr

080018d2 <_ZNSt5arrayIaLj10EE5beginEv>:
      begin() noexcept
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 fabb 	bl	8001e56 <_ZNSt5arrayIaLj10EE4dataEv>
 80018e0:	4603      	mov	r3, r0
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <_ZNKSt5arrayIaLj10EE4sizeEv>:
      size() const noexcept { return _Nm; }
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	230a      	movs	r3, #10
 80018f4:	4618      	mov	r0, r3
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr

080018fe <_ZSt6fill_nIPajaET_S1_T0_RKT1_>:
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 80018fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001900:	b085      	sub	sp, #20
 8001902:	af00      	add	r7, sp, #0
 8001904:	60f8      	str	r0, [r7, #12]
 8001906:	60b9      	str	r1, [r7, #8]
 8001908:	607a      	str	r2, [r7, #4]
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 800190a:	68fc      	ldr	r4, [r7, #12]
 800190c:	68b8      	ldr	r0, [r7, #8]
 800190e:	f7ff f89d 	bl	8000a4c <_ZSt17__size_to_integerj>
 8001912:	4605      	mov	r5, r0
			       std::__iterator_category(__first));
 8001914:	f107 030c 	add.w	r3, r7, #12
 8001918:	4618      	mov	r0, r3
 800191a:	f000 faa9 	bl	8001e70 <_ZSt19__iterator_categoryIPaENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 800191e:	4633      	mov	r3, r6
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	4629      	mov	r1, r5
 8001924:	4620      	mov	r0, r4
 8001926:	f000 faad 	bl	8001e84 <_ZSt10__fill_n_aIPajaET_S1_T0_RKT1_St26random_access_iterator_tag>
 800192a:	4603      	mov	r3, r0
    }
 800192c:	4618      	mov	r0, r3
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001934 <_ZNSt14__array_traitsIaLj10EE6_S_refERA10_Kaj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	4413      	add	r3, r2
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr

0800194e <_ZNKSt5dequeIaSaIaEE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f103 0218 	add.w	r2, r3, #24
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3308      	adds	r3, #8
 8001960:	4619      	mov	r1, r3
 8001962:	4610      	mov	r0, r2
 8001964:	f000 faa9 	bl	8001eba <_ZSteqRKSt15_Deque_iteratorIaRaPaES4_>
 8001968:	4603      	mov	r3, r0
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <_ZNSt5dequeIaSaIaEE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 8001972:	b580      	push	{r7, lr}
 8001974:	b086      	sub	sp, #24
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
	return *begin();
 800197a:	f107 0308 	add.w	r3, r7, #8
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fe78 	bl	8001676 <_ZNSt5dequeIaSaIaEE5beginEv>
 8001986:	f107 0308 	add.w	r3, r7, #8
 800198a:	4618      	mov	r0, r3
 800198c:	f000 faa8 	bl	8001ee0 <_ZNKSt15_Deque_iteratorIaRaPaEdeEv>
 8001990:	4603      	mov	r3, r0
      }
 8001992:	4618      	mov	r0, r3
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <_ZNSt5dequeIaSaIaEE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	3b01      	subs	r3, #1
	if (this->_M_impl._M_start._M_cur
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d010      	beq.n	80019d2 <_ZNSt5dequeIaSaIaEE9pop_frontEv+0x38>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff fe7d 	bl	80016b2 <_ZNSt11_Deque_baseIaSaIaEE19_M_get_Tp_allocatorEv>
 80019b8:	4602      	mov	r2, r0
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	4619      	mov	r1, r3
 80019c0:	4610      	mov	r0, r2
 80019c2:	f000 fa98 	bl	8001ef6 <_ZNSt16allocator_traitsISaIaEE7destroyIaEEvRS0_PT_>
	    ++this->_M_impl._M_start._M_cur;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	1c5a      	adds	r2, r3, #1
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	609a      	str	r2, [r3, #8]
      }
 80019d0:	e002      	b.n	80019d8 <_ZNSt5dequeIaSaIaEE9pop_frontEv+0x3e>
	  _M_pop_front_aux();
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 fa9c 	bl	8001f10 <_ZNSt5dequeIaSaIaEE16_M_pop_front_auxEv>
      }
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <_ZNSt5dequeIaSaIaEE9push_backERKa>:
      push_back(const value_type& __x)
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	3b01      	subs	r3, #1
	if (this->_M_impl._M_finish._M_cur
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d00c      	beq.n	8001a12 <_ZNSt5dequeIaSaIaEE9push_backERKa+0x32>
	    _Alloc_traits::construct(this->_M_impl,
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	4619      	mov	r1, r3
 8001a02:	f000 faad 	bl	8001f60 <_ZNSt16allocator_traitsISaIaEE9constructIaJRKaEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	1c5a      	adds	r2, r3, #1
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	619a      	str	r2, [r3, #24]
      }
 8001a10:	e003      	b.n	8001a1a <_ZNSt5dequeIaSaIaEE9push_backERKa+0x3a>
	  _M_push_back_aux(__x);
 8001a12:	6839      	ldr	r1, [r7, #0]
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 fab7 	bl	8001f88 <_ZNSt5dequeIaSaIaEE16_M_push_back_auxIJRKaEEEvDpOT_>
      }
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <_ZNSt8__detail9_Map_baseIaSt4pairIKaP9BaseStateESaIS5_ENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS2_>:
    _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
 8001a24:	b590      	push	{r4, r7, lr}
 8001a26:	b08f      	sub	sp, #60	; 0x3c
 8001a28:	af02      	add	r7, sp, #8
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
      __hashtable* __h = static_cast<__hashtable*>(this);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	62fb      	str	r3, [r7, #44]	; 0x2c
      __hash_code __code = __h->_M_hash_code(__k);
 8001a32:	6839      	ldr	r1, [r7, #0]
 8001a34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a36:	f000 faeb 	bl	8002010 <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS2_>
 8001a3a:	62b8      	str	r0, [r7, #40]	; 0x28
      std::size_t __bkt = __h->_M_bucket_index(__code);
 8001a3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a40:	f000 fafb 	bl	800203a <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 8001a44:	6278      	str	r0, [r7, #36]	; 0x24
      if (auto __node = __h->_M_find_node(__bkt, __k, __code))
 8001a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a4e:	f000 fb05 	bl	800205c <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS1_j>
 8001a52:	6238      	str	r0, [r7, #32]
 8001a54:	6a3b      	ldr	r3, [r7, #32]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d007      	beq.n	8001a6a <_ZNSt8__detail9_Map_baseIaSt4pairIKaP9BaseStateESaIS5_ENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS2_+0x46>
	return __node->_M_v().second;
 8001a5a:	6a3b      	ldr	r3, [r7, #32]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f000 fb15 	bl	800208e <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE4_M_vEv>
 8001a64:	4603      	mov	r3, r0
 8001a66:	1d1c      	adds	r4, r3, #4
 8001a68:	e02a      	b.n	8001ac0 <_ZNSt8__detail9_Map_baseIaSt4pairIKaP9BaseStateESaIS5_ENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS2_+0x9c>
      typename __hashtable::_Scoped_node __node {
 8001a6a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
	std::tuple<const key_type&>(__k),
 8001a6c:	f107 0318 	add.w	r3, r7, #24
 8001a70:	6839      	ldr	r1, [r7, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 fb17 	bl	80020a6 <_ZNSt5tupleIJRKaEEC1ILb1ELb1EEES1_>
      typename __hashtable::_Scoped_node __node {
 8001a78:	f107 0218 	add.w	r2, r7, #24
 8001a7c:	f107 0010 	add.w	r0, r7, #16
 8001a80:	f107 031c 	add.w	r3, r7, #28
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	4613      	mov	r3, r2
 8001a88:	4a10      	ldr	r2, [pc, #64]	; (8001acc <_ZNSt8__detail9_Map_baseIaSt4pairIKaP9BaseStateESaIS5_ENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS2_+0xa8>)
 8001a8a:	4621      	mov	r1, r4
 8001a8c:	f000 fb1a 	bl	80020c4 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS1_EESN_IJEEEEEPNS6_16_Hashtable_allocISaINS6_10_Hash_nodeIS4_Lb0EEEEEEDpOT_>
	= __h->_M_insert_unique_node(__bkt, __code, __node._M_node);
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	2201      	movs	r2, #1
 8001a94:	9200      	str	r2, [sp, #0]
 8001a96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a9c:	f000 fb4b 	bl	8002136 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS6_10_Hash_nodeIS4_Lb0EEEj>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	60fb      	str	r3, [r7, #12]
      __node._M_node = nullptr;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
      return __pos->second;
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	4618      	mov	r0, r3
 8001aae:	f000 fb8b 	bl	80021c8 <_ZNKSt8__detail14_Node_iteratorISt4pairIKaP9BaseStateELb0ELb0EEptEv>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	1d1c      	adds	r4, r3, #4
    }
 8001ab6:	f107 0310 	add.w	r3, r7, #16
 8001aba:	4618      	mov	r0, r3
 8001abc:	f000 fb26 	bl	800210c <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>
 8001ac0:	4623      	mov	r3, r4
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3734      	adds	r7, #52	; 0x34
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd90      	pop	{r4, r7, pc}
 8001aca:	bf00      	nop
 8001acc:	080089ec 	.word	0x080089ec

08001ad0 <_ZNSt11_Deque_baseIaSaIaEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 fb84 	bl	80021e6 <_ZNSaIaEC1Ev>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f000 fb8c 	bl	80021fe <_ZNSt11_Deque_baseIaSaIaEE16_Deque_impl_dataC1Ev>
	{ }
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <_ZNSaIaED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 fb99 	bl	8002230 <_ZN9__gnu_cxx13new_allocatorIaED1Ev>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <_ZNSt11_Deque_baseIaSaIaEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8001b08:	b590      	push	{r4, r7, lr}
 8001b0a:	b089      	sub	sp, #36	; 0x24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8001b12:	2001      	movs	r0, #1
 8001b14:	f7fe ffaf 	bl	8000a76 <_ZSt16__deque_buf_sizej>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b20:	3301      	adds	r3, #1
 8001b22:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8001b24:	2308      	movs	r3, #8
 8001b26:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	3302      	adds	r3, #2
 8001b2c:	613b      	str	r3, [r7, #16]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8001b2e:	f107 0210 	add.w	r2, r7, #16
 8001b32:	f107 030c 	add.w	r3, r7, #12
 8001b36:	4611      	mov	r1, r2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fbdd 	bl	80012f8 <_ZSt3maxIjERKT_S2_S2_>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 fb79 	bl	8002244 <_ZNSt11_Deque_baseIaSaIaEE15_M_allocate_mapEj>
 8001b52:	4602      	mov	r2, r0
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6859      	ldr	r1, [r3, #4]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	1acb      	subs	r3, r1, r3
 8001b64:	085b      	lsrs	r3, r3, #1
 8001b66:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8001b68:	4413      	add	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4413      	add	r3, r2
 8001b74:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	69b9      	ldr	r1, [r7, #24]
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 fb7f 	bl	800227e <_ZNSt11_Deque_baseIaSaIaEE15_M_create_nodesEPPaS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3308      	adds	r3, #8
 8001b84:	69b9      	ldr	r1, [r7, #24]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 fb94 	bl	80022b4 <_ZNSt15_Deque_iteratorIaRaPaE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f103 0218 	add.w	r2, r3, #24
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	3b04      	subs	r3, #4
 8001b96:	4619      	mov	r1, r3
 8001b98:	4610      	mov	r0, r2
 8001b9a:	f000 fb8b 	bl	80022b4 <_ZNSt15_Deque_iteratorIaRaPaE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8001baa:	2001      	movs	r0, #1
 8001bac:	f7fe ff63 	bl	8000a76 <_ZSt16__deque_buf_sizej>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	fbb3 f1f2 	udiv	r1, r3, r2
 8001bb8:	fb01 f202 	mul.w	r2, r1, r2
 8001bbc:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8001bbe:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	619a      	str	r2, [r3, #24]
    }
 8001bc4:	bf00      	nop
 8001bc6:	3724      	adds	r7, #36	; 0x24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd90      	pop	{r4, r7, pc}

08001bcc <_ZNSt11_Deque_baseIaSaIaEE16_M_destroy_nodesEPPaS3_>:
    _Deque_base<_Tp, _Alloc>::
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	e008      	b.n	8001bf0 <_ZNSt11_Deque_baseIaSaIaEE16_M_destroy_nodesEPPaS3_+0x24>
	_M_deallocate_node(*__n);
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4619      	mov	r1, r3
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f000 fb7d 	bl	80022e4 <_ZNSt11_Deque_baseIaSaIaEE18_M_deallocate_nodeEPa>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	3304      	adds	r3, #4
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d3f2      	bcc.n	8001bde <_ZNSt11_Deque_baseIaSaIaEE16_M_destroy_nodesEPPaS3_+0x12>
    }
 8001bf8:	bf00      	nop
 8001bfa:	bf00      	nop
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <_ZNSt11_Deque_baseIaSaIaEE17_M_deallocate_mapEPPaj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b086      	sub	sp, #24
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	60f8      	str	r0, [r7, #12]
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8001c0e:	f107 0314 	add.w	r3, r7, #20
 8001c12:	68f9      	ldr	r1, [r7, #12]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 fb78 	bl	800230a <_ZNKSt11_Deque_baseIaSaIaEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8001c1a:	f107 0314 	add.w	r3, r7, #20
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	68b9      	ldr	r1, [r7, #8]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f000 fb8e 	bl	8002344 <_ZNSt16allocator_traitsISaIPaEE10deallocateERS1_PS0_j>
      }
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f000 fb7d 	bl	800232c <_ZNSaIPaED1Ev>
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <_ZNSt5arrayIPFvvELj10EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 fb8d 	bl	8002362 <_ZNSt14__array_traitsIPFvvELj10EE6_S_ptrERA10_KS1_>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <_ZSt19__iterator_categoryIPPFvvEENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001c5a:	bf00      	nop
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr

08001c66 <_ZSt10__fill_n_aIPPFvvEjS1_ET_S3_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b084      	sub	sp, #16
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	60f8      	str	r0, [r7, #12]
 8001c6e:	60b9      	str	r1, [r7, #8]
 8001c70:	607a      	str	r2, [r7, #4]
 8001c72:	703b      	strb	r3, [r7, #0]
      if (__n <= 0)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <_ZSt10__fill_n_aIPPFvvEjS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x18>
	return __first;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	e00c      	b.n	8001c98 <_ZSt10__fill_n_aIPPFvvEjS1_ET_S3_T0_RKT1_St26random_access_iterator_tag+0x32>
      std::__fill_a(__first, __first + __n, __value);
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	4413      	add	r3, r2
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	68f8      	ldr	r0, [r7, #12]
 8001c8c:	f000 fb73 	bl	8002376 <_ZSt8__fill_aIPPFvvES1_EvT_S3_RKT0_>
      return __first + __n;
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	4413      	add	r3, r2
    }
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4618      	mov	r0, r3
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr

08001cb4 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>:
      _M_begin() const
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr

08001cca <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE19_M_deallocate_nodesEPS7_>:
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
    }

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_ptr __n)
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b084      	sub	sp, #16
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	6039      	str	r1, [r7, #0]
    {
      while (__n)
 8001cd4:	e009      	b.n	8001cea <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE19_M_deallocate_nodesEPS7_+0x20>
	{
	  __node_ptr __tmp = __n;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	60fb      	str	r3, [r7, #12]
	  __n = __n->_M_next();
 8001cda:	6838      	ldr	r0, [r7, #0]
 8001cdc:	f000 fb5a 	bl	8002394 <_ZNKSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EE7_M_nextEv>
 8001ce0:	6038      	str	r0, [r7, #0]
	  _M_deallocate_node(__tmp);
 8001ce2:	68f9      	ldr	r1, [r7, #12]
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 fb60 	bl	80023aa <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE18_M_deallocate_nodeEPS7_>
      while (__n)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1f2      	bne.n	8001cd6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE19_M_deallocate_nodesEPS7_+0xc>
	}
    }
 8001cf0:	bf00      	nop
 8001cf2:	bf00      	nop
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS6_15_Hash_node_baseEj>:
      _M_deallocate_buckets(__buckets_ptr __bkts, size_type __bkt_count)
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b084      	sub	sp, #16
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
	if (_M_uses_single_bucket(__bkts))
 8001d06:	68b9      	ldr	r1, [r7, #8]
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f000 fb69 	bl	80023e0 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS6_15_Hash_node_baseE>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d105      	bne.n	8001d20 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS6_15_Hash_node_baseEj+0x26>
	__hashtable_alloc::_M_deallocate_buckets(__bkts, __bkt_count);
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	68b9      	ldr	r1, [r7, #8]
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f000 fb78 	bl	800240e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>
 8001d1e:	e000      	b.n	8001d22 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEPPNS6_15_Hash_node_baseEj+0x28>
	  return;
 8001d20:	bf00      	nop
      }
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <_ZNSt11_Deque_baseIaSaIaEE16_Deque_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8001d32:	6839      	ldr	r1, [r7, #0]
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 fb8d 	bl	8002454 <_ZSt4swapINSt11_Deque_baseIaSaIaEE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>
	}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <_ZNSt5dequeIaSaIaEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b086      	sub	sp, #24
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8001d4a:	f107 0308 	add.w	r3, r7, #8
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff fc90 	bl	8001676 <_ZNSt5dequeIaSaIaEE5beginEv>
 8001d56:	f107 0308 	add.w	r3, r7, #8
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 fbac 	bl	80024ba <_ZNSt5dequeIaSaIaEE15_M_erase_at_endESt15_Deque_iteratorIaRaPaE>
 8001d62:	bf00      	nop
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <_ZSt15__alloc_on_moveISaIaEEvRT_S2_>:
    { }
#endif

  template<typename _Alloc>
    _GLIBCXX14_CONSTEXPR inline void
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	6039      	str	r1, [r7, #0]
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
#if __cplusplus >= 201703L
      if constexpr (__pocma::value)
	__one = std::move(__two);
#else
      __do_alloc_on_move(__one, __two, __pocma());
 8001d74:	461a      	mov	r2, r3
 8001d76:	6839      	ldr	r1, [r7, #0]
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 fbd1 	bl	8002520 <_ZSt18__do_alloc_on_moveISaIaEEvRT_S2_St17integral_constantIbLb1EE>
#endif
    }
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE10_M_emplaceIJRaS3_EEES0_INS6_14_Node_iteratorIS4_Lb0ELb0EEEbESt17integral_constantIbLb1EEDpOT_>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8001d86:	b590      	push	{r4, r7, lr}
 8001d88:	b091      	sub	sp, #68	; 0x44
 8001d8a:	af02      	add	r7, sp, #8
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	713a      	strb	r2, [r7, #4]
 8001d92:	603b      	str	r3, [r7, #0]
	_Scoped_node __node { this, std::forward<_Args>(__args)...  };
 8001d94:	6838      	ldr	r0, [r7, #0]
 8001d96:	f7ff fd5f 	bl	8001858 <_ZSt7forwardIRaEOT_RNSt16remove_referenceIS1_E4typeE>
 8001d9a:	4604      	mov	r4, r0
 8001d9c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001d9e:	f7ff fd65 	bl	800186c <_ZSt7forwardIP9BaseStateEOT_RNSt16remove_referenceIS2_E4typeE>
 8001da2:	4603      	mov	r3, r0
 8001da4:	f107 0014 	add.w	r0, r7, #20
 8001da8:	4622      	mov	r2, r4
 8001daa:	68b9      	ldr	r1, [r7, #8]
 8001dac:	f000 fbc5 	bl	800253a <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1IJRaS3_EEEPNS6_16_Hashtable_allocISaINS6_10_Hash_nodeIS4_Lb0EEEEEEDpOT_>
	const key_type& __k = _ExtractKey{}(__node._M_node->_M_v());
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	3304      	adds	r3, #4
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 f96a 	bl	800208e <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE4_M_vEv>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	f107 031c 	add.w	r3, r7, #28
 8001dc0:	4611      	mov	r1, r2
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 fbd9 	bl	800257a <_ZNKSt8__detail10_Select1stclIRSt4pairIKaP9BaseStateEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS8_>
 8001dc8:	6378      	str	r0, [r7, #52]	; 0x34
	__hash_code __code = this->_M_hash_code(__k);
 8001dca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001dcc:	68b8      	ldr	r0, [r7, #8]
 8001dce:	f000 f91f 	bl	8002010 <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS2_>
 8001dd2:	6338      	str	r0, [r7, #48]	; 0x30
	size_type __bkt = _M_bucket_index(__code);
 8001dd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001dd6:	68b8      	ldr	r0, [r7, #8]
 8001dd8:	f000 f92f 	bl	800203a <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 8001ddc:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (__node_ptr __p = _M_find_node(__bkt, __k, __code))
 8001dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001de2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001de4:	68b8      	ldr	r0, [r7, #8]
 8001de6:	f000 f939 	bl	800205c <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS1_j>
 8001dea:	62b8      	str	r0, [r7, #40]	; 0x28
 8001dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d011      	beq.n	8001e16 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE10_M_emplaceIJRaS3_EEES0_INS6_14_Node_iteratorIS4_Lb0ELb0EEEbESt17integral_constantIbLb1EEDpOT_+0x90>
	  return std::make_pair(iterator(__p), false);
 8001df2:	f107 0320 	add.w	r3, r7, #32
 8001df6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f000 fbcf 	bl	800259c <_ZNSt8__detail14_Node_iteratorISt4pairIKaP9BaseStateELb0ELb0EEC1EPNS_10_Hash_nodeIS5_Lb0EEE>
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8001e0a:	f107 0120 	add.w	r1, r7, #32
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 fbd3 	bl	80025ba <_ZSt9make_pairINSt8__detail14_Node_iteratorISt4pairIKaP9BaseStateELb0ELb0EEEbES2_INSt25__strip_reference_wrapperINSt5decayIT_E4typeEE6__typeENS8_INS9_IT0_E4typeEE6__typeEEOSA_OSF_>
 8001e14:	e016      	b.n	8001e44 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE10_M_emplaceIJRaS3_EEES0_INS6_14_Node_iteratorIS4_Lb0ELb0EEEbESt17integral_constantIbLb1EEDpOT_+0xbe>
	auto __pos = _M_insert_unique_node(__bkt, __code, __node._M_node);
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	9200      	str	r2, [sp, #0]
 8001e1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001e20:	68b8      	ldr	r0, [r7, #8]
 8001e22:	f000 f988 	bl	8002136 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS6_10_Hash_nodeIS4_Lb0EEEj>
 8001e26:	4603      	mov	r3, r0
 8001e28:	613b      	str	r3, [r7, #16]
	__node._M_node = nullptr;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61bb      	str	r3, [r7, #24]
	return { __pos, true };
 8001e2e:	2301      	movs	r3, #1
 8001e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e34:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8001e38:	f107 0310 	add.w	r3, r7, #16
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f000 fbd2 	bl	80025e8 <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKaP9BaseStateELb0ELb0EEEbEC1IRS6_bLb1EEEOT_OT0_>
      }
 8001e44:	f107 0314 	add.w	r3, r7, #20
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f000 f95f 	bl	800210c <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	373c      	adds	r7, #60	; 0x3c
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd90      	pop	{r4, r7, pc}

08001e56 <_ZNSt5arrayIaLj10EE4dataEv>:
      data() noexcept
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f000 fbda 	bl	800261a <_ZNSt14__array_traitsIaLj10EE6_S_ptrERA10_Ka>
 8001e66:	4603      	mov	r3, r0
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <_ZSt19__iterator_categoryIPaENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
    __iterator_category(const _Iter&)
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001e78:	bf00      	nop
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr

08001e84 <_ZSt10__fill_n_aIPajaET_S1_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
 8001e90:	703b      	strb	r3, [r7, #0]
      if (__n <= 0)
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <_ZSt10__fill_n_aIPajaET_S1_T0_RKT1_St26random_access_iterator_tag+0x18>
	return __first;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	e00a      	b.n	8001eb2 <_ZSt10__fill_n_aIPajaET_S1_T0_RKT1_St26random_access_iterator_tag+0x2e>
      std::__fill_a(__first, __first + __n, __value);
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f000 fbc1 	bl	800262e <_ZSt8__fill_aIPaaEvT_S1_RKT0_>
      return __first + __n;
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	4413      	add	r3, r2
    }
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <_ZSteqRKSt15_Deque_iteratorIaRaPaES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
 8001ec2:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	bf0c      	ite	eq
 8001ed0:	2301      	moveq	r3, #1
 8001ed2:	2300      	movne	r3, #0
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr

08001ee0 <_ZNKSt15_Deque_iteratorIaRaPaEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr

08001ef6 <_ZNSt16allocator_traitsISaIaEE7destroyIaEEvRS0_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8001f00:	6839      	ldr	r1, [r7, #0]
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 fba2 	bl	800264c <_ZN9__gnu_cxx13new_allocatorIaE7destroyIaEEvPT_>
	}
 8001f08:	bf00      	nop
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <_ZNSt5dequeIaSaIaEE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff fbc9 	bl	80016b2 <_ZNSt11_Deque_baseIaSaIaEE19_M_get_Tp_allocatorEv>
 8001f20:	4602      	mov	r2, r0
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	4619      	mov	r1, r3
 8001f28:	4610      	mov	r0, r2
 8001f2a:	f7ff ffe4 	bl	8001ef6 <_ZNSt16allocator_traitsISaIaEE7destroyIaEEvRS0_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	4619      	mov	r1, r3
 8001f36:	4610      	mov	r0, r2
 8001f38:	f000 f9d4 	bl	80022e4 <_ZNSt11_Deque_baseIaSaIaEE18_M_deallocate_nodeEPa>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f103 0208 	add.w	r2, r3, #8
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	3304      	adds	r3, #4
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	f000 f9b2 	bl	80022b4 <_ZNSt15_Deque_iteratorIaRaPaE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	609a      	str	r2, [r3, #8]
    }
 8001f58:	bf00      	nop
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <_ZNSt16allocator_traitsISaIaEE9constructIaJRKaEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 fb77 	bl	8002660 <_ZSt7forwardIRKaEOT_RNSt16remove_referenceIS2_E4typeE>
 8001f72:	4603      	mov	r3, r0
 8001f74:	461a      	mov	r2, r3
 8001f76:	68b9      	ldr	r1, [r7, #8]
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f000 fb7b 	bl	8002674 <_ZN9__gnu_cxx13new_allocatorIaE9constructIaJRKaEEEvPT_DpOT0_>
	}
 8001f7e:	bf00      	nop
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <_ZNSt5dequeIaSaIaEE16_M_push_back_auxIJRKaEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8001f88:	b5b0      	push	{r4, r5, r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 fb86 	bl	80026a4 <_ZNKSt5dequeIaSaIaEE4sizeEv>
 8001f98:	4604      	mov	r4, r0
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 fb94 	bl	80026c8 <_ZNKSt5dequeIaSaIaEE8max_sizeEv>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	429c      	cmp	r4, r3
 8001fa4:	bf0c      	ite	eq
 8001fa6:	2301      	moveq	r3, #1
 8001fa8:	2300      	movne	r3, #0
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d002      	beq.n	8001fb6 <_ZNSt5dequeIaSaIaEE16_M_push_back_auxIJRKaEEEvDpOT_+0x2e>
	  __throw_length_error(
 8001fb0:	4816      	ldr	r0, [pc, #88]	; (800200c <_ZNSt5dequeIaSaIaEE16_M_push_back_auxIJRKaEEEvDpOT_+0x84>)
 8001fb2:	f006 f92f 	bl	8008214 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 fb96 	bl	80026ea <_ZNSt5dequeIaSaIaEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	1d1c      	adds	r4, r3, #4
 8001fc6:	4610      	mov	r0, r2
 8001fc8:	f000 fbaa 	bl	8002720 <_ZNSt11_Deque_baseIaSaIaEE16_M_allocate_nodeEv>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8001fd0:	687c      	ldr	r4, [r7, #4]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699d      	ldr	r5, [r3, #24]
 8001fd6:	6838      	ldr	r0, [r7, #0]
 8001fd8:	f000 fb42 	bl	8002660 <_ZSt7forwardIRKaEOT_RNSt16remove_referenceIS2_E4typeE>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	461a      	mov	r2, r3
 8001fe0:	4629      	mov	r1, r5
 8001fe2:	4620      	mov	r0, r4
 8001fe4:	f7ff ffbc 	bl	8001f60 <_ZNSt16allocator_traitsISaIaEE9constructIaJRKaEEEvRS0_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f103 0218 	add.w	r2, r3, #24
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff2:	3304      	adds	r3, #4
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4610      	mov	r0, r2
 8001ff8:	f000 f95c 	bl	80022b4 <_ZNSt15_Deque_iteratorIaRaPaE11_M_set_nodeEPS1_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	69da      	ldr	r2, [r3, #28]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	619a      	str	r2, [r3, #24]
      }
 8002004:	bf00      	nop
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bdb0      	pop	{r4, r5, r7, pc}
 800200c:	08008984 	.word	0x08008984

08002010 <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS2_>:
      _M_hash_code(const _Key& __k) const
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
	return _M_hash()(__k);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 fb92 	bl	8002744 <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv>
 8002020:	4602      	mov	r2, r0
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	f993 3000 	ldrsb.w	r3, [r3]
 8002028:	4619      	mov	r1, r3
 800202a:	4610      	mov	r0, r2
 800202c:	f7fe fd37 	bl	8000a9e <_ZNKSt4hashIaEclEa>
 8002030:	4603      	mov	r3, r0
      }
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>:
      _M_bucket_index(__hash_code __c) const
 800203a:	b580      	push	{r7, lr}
 800203c:	b082      	sub	sp, #8
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__c, _M_bucket_count); }
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	461a      	mov	r2, r3
 800204a:	6839      	ldr	r1, [r7, #0]
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 fb85 	bl	800275c <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEjj>
 8002052:	4603      	mov	r3, r0
 8002054:	4618      	mov	r0, r3
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS1_j>:
      _M_find_node(size_type __bkt, const key_type& __key,
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
 8002068:	603b      	str	r3, [r7, #0]
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	68b9      	ldr	r1, [r7, #8]
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f000 fb85 	bl	8002780 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j>
 8002076:	6178      	str	r0, [r7, #20]
	if (__before_n)
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d002      	beq.n	8002084 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS1_j+0x28>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	e000      	b.n	8002086 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_M_find_nodeEjRS1_j+0x2a>
	return nullptr;
 8002084:	2300      	movs	r3, #0
      }
 8002086:	4618      	mov	r0, r3
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE4_M_vEv>:
      _M_v() noexcept
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 fbb7 	bl	800280a <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE9_M_valptrEv>
 800209c:	4603      	mov	r3, r0
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <_ZNSt5tupleIJRKaEEC1ILb1ELb1EEES1_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
 80020ae:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6839      	ldr	r1, [r7, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f000 fbb5 	bl	8002824 <_ZNSt11_Tuple_implILj0EJRKaEEC1ES1_>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4618      	mov	r0, r3
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS1_EESN_IJEEEEEPNS6_16_Hashtable_allocISaINS6_10_Hash_nodeIS4_Lb0EEEEEEDpOT_>:
	  _Scoped_node(__hashtable_alloc* __h, _Args&&... __args)
 80020c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
 80020d0:	603b      	str	r3, [r7, #0]
	  : _M_h(__h),
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	68ba      	ldr	r2, [r7, #8]
 80020d6:	601a      	str	r2, [r3, #0]
	    _M_node(__h->_M_allocate_node(std::forward<_Args>(__args)...))
 80020d8:	68bc      	ldr	r4, [r7, #8]
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 fbb1 	bl	8002842 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80020e0:	4605      	mov	r5, r0
 80020e2:	6838      	ldr	r0, [r7, #0]
 80020e4:	f000 fbb7 	bl	8002856 <_ZSt7forwardISt5tupleIJRKaEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80020e8:	4606      	mov	r6, r0
 80020ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020ec:	f000 fbbd 	bl	800286a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80020f0:	4603      	mov	r3, r0
 80020f2:	4632      	mov	r2, r6
 80020f4:	4629      	mov	r1, r5
 80020f6:	4620      	mov	r0, r4
 80020f8:	f000 fbce 	bl	8002898 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE16_M_allocate_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESE_IJEEEEEPS7_DpOT_>
 80020fc:	4602      	mov	r2, r0
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	605a      	str	r2, [r3, #4]
	  { }
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	4618      	mov	r0, r3
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800210c <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev>:
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d007      	beq.n	800212c <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeD1Ev+0x20>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	4619      	mov	r1, r3
 8002126:	4610      	mov	r0, r2
 8002128:	f000 f93f 	bl	80023aa <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE18_M_deallocate_nodeEPS7_>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS6_10_Hash_nodeIS4_Lb0EEEj>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8002136:	b590      	push	{r4, r7, lr}
 8002138:	b08d      	sub	sp, #52	; 0x34
 800213a:	af02      	add	r7, sp, #8
 800213c:	60f8      	str	r0, [r7, #12]
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	607a      	str	r2, [r7, #4]
 8002142:	603b      	str	r3, [r7, #0]
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	3310      	adds	r3, #16
 8002148:	4618      	mov	r0, r3
 800214a:	f7fe fce6 	bl	8000b1a <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>
 800214e:	4603      	mov	r3, r0
 8002150:	61fb      	str	r3, [r7, #28]
 8002152:	f107 031c 	add.w	r3, r7, #28
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f103 0110 	add.w	r1, r3, #16
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	68dc      	ldr	r4, [r3, #12]
 8002166:	f107 0014 	add.w	r0, r7, #20
 800216a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	4623      	mov	r3, r4
 8002170:	f006 f8ae 	bl	80082d0 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>
      if (__do_rehash.first)
 8002174:	7d3b      	ldrb	r3, [r7, #20]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00a      	beq.n	8002190 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNS6_10_Hash_nodeIS4_Lb0EEEj+0x5a>
	  _M_rehash(__do_rehash.second, __saved_state);
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800217e:	4619      	mov	r1, r3
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f000 fbca 	bl	800291a <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>
	  __bkt = _M_bucket_index(__code);
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f7ff ff56 	bl	800203a <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexEj>
 800218e:	60b8      	str	r0, [r7, #8]
      this->_M_store_code(*__node, __code);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	3304      	adds	r3, #4
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	4619      	mov	r1, r3
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	f000 fbcd 	bl	8002938 <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeERNS_21_Hash_node_code_cacheILb0EEEj>
      _M_insert_bucket_begin(__bkt, __node);
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	68b9      	ldr	r1, [r7, #8]
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f000 fbd3 	bl	800294e <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS6_10_Hash_nodeIS4_Lb0EEE>
      ++_M_element_count;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	60da      	str	r2, [r3, #12]
      return iterator(__node);
 80021b2:	f107 0320 	add.w	r3, r7, #32
 80021b6:	6839      	ldr	r1, [r7, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f000 f9ef 	bl	800259c <_ZNSt8__detail14_Node_iteratorISt4pairIKaP9BaseStateELb0ELb0EEC1EPNS_10_Hash_nodeIS5_Lb0EEE>
 80021be:	6a3b      	ldr	r3, [r7, #32]
    }
 80021c0:	4618      	mov	r0, r3
 80021c2:	372c      	adds	r7, #44	; 0x2c
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd90      	pop	{r4, r7, pc}

080021c8 <_ZNKSt8__detail14_Node_iteratorISt4pairIKaP9BaseStateELb0ELb0EEptEv>:
      operator->() const noexcept
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
      { return this->_M_cur->_M_valptr(); }
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	3304      	adds	r3, #4
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 fb17 	bl	800280a <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE9_M_valptrEv>
 80021dc:	4603      	mov	r3, r0
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <_ZNSaIaEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 fbf4 	bl	80029dc <_ZN9__gnu_cxx13new_allocatorIaEC1Ev>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <_ZNSt11_Deque_baseIaSaIaEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 80021fe:	b580      	push	{r7, lr}
 8002200:	b082      	sub	sp, #8
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	3308      	adds	r3, #8
 8002216:	4618      	mov	r0, r3
 8002218:	f000 fbea 	bl	80029f0 <_ZNSt15_Deque_iteratorIaRaPaEC1Ev>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3318      	adds	r3, #24
 8002220:	4618      	mov	r0, r3
 8002222:	f000 fbe5 	bl	80029f0 <_ZNSt15_Deque_iteratorIaRaPaEC1Ev>
	{ }
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4618      	mov	r0, r3
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <_ZN9__gnu_cxx13new_allocatorIaED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4618      	mov	r0, r3
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr

08002244 <_ZNSt11_Deque_baseIaSaIaEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8002244:	b590      	push	{r4, r7, lr}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800224e:	f107 030c 	add.w	r3, r7, #12
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	4618      	mov	r0, r3
 8002256:	f000 f858 	bl	800230a <_ZNKSt11_Deque_baseIaSaIaEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800225a:	f107 030c 	add.w	r3, r7, #12
 800225e:	6839      	ldr	r1, [r7, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f000 fbdb 	bl	8002a1c <_ZNSt16allocator_traitsISaIPaEE8allocateERS1_j>
 8002266:	4604      	mov	r4, r0
 8002268:	bf00      	nop
      }
 800226a:	f107 030c 	add.w	r3, r7, #12
 800226e:	4618      	mov	r0, r3
 8002270:	f000 f85c 	bl	800232c <_ZNSaIPaED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8002274:	4623      	mov	r3, r4
      }
 8002276:	4618      	mov	r0, r3
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	bd90      	pop	{r4, r7, pc}

0800227e <_ZNSt11_Deque_baseIaSaIaEE15_M_create_nodesEPPaS3_>:
    _Deque_base<_Tp, _Alloc>::
 800227e:	b580      	push	{r7, lr}
 8002280:	b086      	sub	sp, #24
 8002282:	af00      	add	r7, sp, #0
 8002284:	60f8      	str	r0, [r7, #12]
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	617b      	str	r3, [r7, #20]
 800228e:	e008      	b.n	80022a2 <_ZNSt11_Deque_baseIaSaIaEE15_M_create_nodesEPPaS3_+0x24>
	    *__cur = this->_M_allocate_node();
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f000 fa45 	bl	8002720 <_ZNSt11_Deque_baseIaSaIaEE16_M_allocate_nodeEv>
 8002296:	4602      	mov	r2, r0
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	3304      	adds	r3, #4
 80022a0:	617b      	str	r3, [r7, #20]
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d3f2      	bcc.n	8002290 <_ZNSt11_Deque_baseIaSaIaEE15_M_create_nodesEPPaS3_+0x12>
    }
 80022aa:	bf00      	nop
 80022ac:	bf00      	nop
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <_ZNSt15_Deque_iteratorIaRaPaE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 80022b4:	b590      	push	{r4, r7, lr}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685c      	ldr	r4, [r3, #4]
 80022d0:	f000 fbb3 	bl	8002a3a <_ZNSt15_Deque_iteratorIaRaPaE14_S_buffer_sizeEv>
 80022d4:	4603      	mov	r3, r0
 80022d6:	18e2      	adds	r2, r4, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	609a      	str	r2, [r3, #8]
      }
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd90      	pop	{r4, r7, pc}

080022e4 <_ZNSt11_Deque_baseIaSaIaEE18_M_deallocate_nodeEPa>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 80022e4:	b590      	push	{r4, r7, lr}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 80022ee:	687c      	ldr	r4, [r7, #4]
 80022f0:	2001      	movs	r0, #1
 80022f2:	f7fe fbc0 	bl	8000a76 <_ZSt16__deque_buf_sizej>
 80022f6:	4603      	mov	r3, r0
 80022f8:	461a      	mov	r2, r3
 80022fa:	6839      	ldr	r1, [r7, #0]
 80022fc:	4620      	mov	r0, r4
 80022fe:	f000 fba4 	bl	8002a4a <_ZNSt16allocator_traitsISaIaEE10deallocateERS0_Paj>
      }
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	bd90      	pop	{r4, r7, pc}

0800230a <_ZNKSt11_Deque_baseIaSaIaEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
 8002312:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8002314:	6838      	ldr	r0, [r7, #0]
 8002316:	f000 fba7 	bl	8002a68 <_ZNKSt11_Deque_baseIaSaIaEE19_M_get_Tp_allocatorEv>
 800231a:	4603      	mov	r3, r0
 800231c:	4619      	mov	r1, r3
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 fbac 	bl	8002a7c <_ZNSaIPaEC1IaEERKSaIT_E>
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <_ZNSaIPaED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 fbae 	bl	8002a96 <_ZN9__gnu_cxx13new_allocatorIPaED1Ev>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4618      	mov	r0, r3
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <_ZNSt16allocator_traitsISaIPaEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	68b9      	ldr	r1, [r7, #8]
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 fba8 	bl	8002aaa <_ZN9__gnu_cxx13new_allocatorIPaE10deallocateEPS1_j>
 800235a:	bf00      	nop
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <_ZNSt14__array_traitsIPFvvELj10EE6_S_ptrERA10_KS1_>:
      _S_ptr(const _Type& __t) noexcept
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4618      	mov	r0, r3
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	bc80      	pop	{r7}
 8002374:	4770      	bx	lr

08002376 <_ZSt8__fill_aIPPFvvES1_EvT_S3_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8002376:	b580      	push	{r7, lr}
 8002378:	b084      	sub	sp, #16
 800237a:	af00      	add	r7, sp, #0
 800237c:	60f8      	str	r0, [r7, #12]
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68b9      	ldr	r1, [r7, #8]
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 fb9f 	bl	8002aca <_ZSt9__fill_a1IPPFvvES1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>
 800238c:	bf00      	nop
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <_ZNKSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EE7_M_nextEv>:
      _M_next() const noexcept
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Hash_node*>(this->_M_nxt); }
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr

080023aa <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE18_M_deallocate_nodeEPS7_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_ptr __n)
 80023aa:	b590      	push	{r4, r7, lr}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
 80023b2:	6039      	str	r1, [r7, #0]
      __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 fba2 	bl	8002afe <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE17_M_node_allocatorEv>
 80023ba:	4604      	mov	r4, r0
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	3304      	adds	r3, #4
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 fa22 	bl	800280a <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE9_M_valptrEv>
 80023c6:	4603      	mov	r3, r0
 80023c8:	4619      	mov	r1, r3
 80023ca:	4620      	mov	r0, r4
 80023cc:	f000 fba3 	bl	8002b16 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE7destroyIS6_EEvRS8_PT_>
      _M_deallocate_node_ptr(__n);
 80023d0:	6839      	ldr	r1, [r7, #0]
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 fbac 	bl	8002b30 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE22_M_deallocate_node_ptrEPS7_>
    }
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd90      	pop	{r4, r7, pc}

080023e0 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_uses_single_bucketEPPNS6_15_Hash_node_baseE>:
      _M_uses_single_bucket(__buckets_ptr __bkts) const
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3318      	adds	r3, #24
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	bf0c      	ite	eq
 80023f4:	2301      	moveq	r3, #1
 80023f6:	2300      	movne	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	bf14      	ite	ne
 80023fe:	2301      	movne	r3, #1
 8002400:	2300      	moveq	r3, #0
 8002402:	b2db      	uxtb	r3, r3
 8002404:	4618      	mov	r0, r3
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr

0800240e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>:
      return __p;
    }

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::
 800240e:	b580      	push	{r7, lr}
 8002410:	b086      	sub	sp, #24
 8002412:	af00      	add	r7, sp, #0
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	607a      	str	r2, [r7, #4]
    _M_deallocate_buckets(__buckets_ptr __bkts,
			  std::size_t __bkt_count)
    {
      typedef typename __buckets_alloc_traits::pointer _Ptr;
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
 800241a:	68b8      	ldr	r0, [r7, #8]
 800241c:	f000 fb9e 	bl	8002b5c <_ZNSt14pointer_traitsIPPNSt8__detail15_Hash_node_baseEE10pointer_toERS2_>
 8002420:	6178      	str	r0, [r7, #20]
      __buckets_alloc_type __alloc(_M_node_allocator());
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f000 fb6b 	bl	8002afe <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE17_M_node_allocatorEv>
 8002428:	4602      	mov	r2, r0
 800242a:	f107 0310 	add.w	r3, r7, #16
 800242e:	4611      	mov	r1, r2
 8002430:	4618      	mov	r0, r3
 8002432:	f000 fb9f 	bl	8002b74 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEERKSaIT_E>
      __buckets_alloc_traits::deallocate(__alloc, __ptr, __bkt_count);
 8002436:	f107 0310 	add.w	r3, r7, #16
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6979      	ldr	r1, [r7, #20]
 800243e:	4618      	mov	r0, r3
 8002440:	f000 fbb1 	bl	8002ba6 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>
    }
 8002444:	f107 0310 	add.w	r3, r7, #16
 8002448:	4618      	mov	r0, r3
 800244a:	f000 fba0 	bl	8002b8e <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <_ZSt4swapINSt11_Deque_baseIaSaIaEE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8002454:	b5b0      	push	{r4, r5, r7, lr}
 8002456:	b08c      	sub	sp, #48	; 0x30
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 fbb0 	bl	8002bc4 <_ZSt4moveIRNSt11_Deque_baseIaSaIaEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 8002464:	4602      	mov	r2, r0
 8002466:	f107 0308 	add.w	r3, r7, #8
 800246a:	4611      	mov	r1, r2
 800246c:	4618      	mov	r0, r3
 800246e:	f000 fbd7 	bl	8002c20 <_ZNSt11_Deque_baseIaSaIaEE16_Deque_impl_dataC1EOS2_>
      __a = _GLIBCXX_MOVE(__b);
 8002472:	6838      	ldr	r0, [r7, #0]
 8002474:	f000 fba6 	bl	8002bc4 <_ZSt4moveIRNSt11_Deque_baseIaSaIaEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 8002478:	4602      	mov	r2, r0
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	461c      	mov	r4, r3
 800247e:	4615      	mov	r5, r2
 8002480:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002482:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002484:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002488:	e895 0003 	ldmia.w	r5, {r0, r1}
 800248c:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8002490:	f107 0308 	add.w	r3, r7, #8
 8002494:	4618      	mov	r0, r3
 8002496:	f000 fb95 	bl	8002bc4 <_ZSt4moveIRNSt11_Deque_baseIaSaIaEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 800249a:	4602      	mov	r2, r0
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	461c      	mov	r4, r3
 80024a0:	4615      	mov	r5, r2
 80024a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80024ae:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 80024b2:	bf00      	nop
 80024b4:	3730      	adds	r7, #48	; 0x30
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bdb0      	pop	{r4, r5, r7, pc}

080024ba <_ZNSt5dequeIaSaIaEE15_M_erase_at_endESt15_Deque_iteratorIaRaPaE>:
      _M_erase_at_end(iterator __pos)
 80024ba:	b590      	push	{r4, r7, lr}
 80024bc:	b08b      	sub	sp, #44	; 0x2c
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 80024c4:	f107 0308 	add.w	r3, r7, #8
 80024c8:	6839      	ldr	r1, [r7, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff f8fb 	bl	80016c6 <_ZNSt15_Deque_iteratorIaRaPaEC1ERKS2_>
 80024d0:	f107 0318 	add.w	r3, r7, #24
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff f8dc 	bl	8001694 <_ZNSt5dequeIaSaIaEE3endEv>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff f8e7 	bl	80016b2 <_ZNSt11_Deque_baseIaSaIaEE19_M_get_Tp_allocatorEv>
 80024e4:	4603      	mov	r3, r0
 80024e6:	f107 0218 	add.w	r2, r7, #24
 80024ea:	f107 0108 	add.w	r1, r7, #8
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7ff f904 	bl	80016fc <_ZNSt5dequeIaSaIaEE15_M_destroy_dataESt15_Deque_iteratorIaRaPaES5_RKS0_>
	_M_destroy_nodes(__pos._M_node + 1,
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 8002500:	3304      	adds	r3, #4
 8002502:	461a      	mov	r2, r3
 8002504:	f7ff fb62 	bl	8001bcc <_ZNSt11_Deque_baseIaSaIaEE16_M_destroy_nodesEPPaS3_>
	this->_M_impl._M_finish = __pos;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	f103 0418 	add.w	r4, r3, #24
 8002510:	4613      	mov	r3, r2
 8002512:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002514:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8002518:	bf00      	nop
 800251a:	372c      	adds	r7, #44	; 0x2c
 800251c:	46bd      	mov	sp, r7
 800251e:	bd90      	pop	{r4, r7, pc}

08002520 <_ZSt18__do_alloc_on_moveISaIaEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 800252c:	68b8      	ldr	r0, [r7, #8]
 800252e:	f000 fb96 	bl	8002c5e <_ZSt4moveIRSaIaEEONSt16remove_referenceIT_E4typeEOS3_>
 8002532:	bf00      	nop
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE12_Scoped_nodeC1IJRaS3_EEEPNS6_16_Hashtable_allocISaINS6_10_Hash_nodeIS4_Lb0EEEEEEDpOT_>:
	  _Scoped_node(__hashtable_alloc* __h, _Args&&... __args)
 800253a:	b5b0      	push	{r4, r5, r7, lr}
 800253c:	b084      	sub	sp, #16
 800253e:	af00      	add	r7, sp, #0
 8002540:	60f8      	str	r0, [r7, #12]
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	607a      	str	r2, [r7, #4]
 8002546:	603b      	str	r3, [r7, #0]
	  : _M_h(__h),
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	601a      	str	r2, [r3, #0]
	    _M_node(__h->_M_allocate_node(std::forward<_Args>(__args)...))
 800254e:	68bc      	ldr	r4, [r7, #8]
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff f981 	bl	8001858 <_ZSt7forwardIRaEOT_RNSt16remove_referenceIS1_E4typeE>
 8002556:	4605      	mov	r5, r0
 8002558:	6838      	ldr	r0, [r7, #0]
 800255a:	f7ff f987 	bl	800186c <_ZSt7forwardIP9BaseStateEOT_RNSt16remove_referenceIS2_E4typeE>
 800255e:	4603      	mov	r3, r0
 8002560:	461a      	mov	r2, r3
 8002562:	4629      	mov	r1, r5
 8002564:	4620      	mov	r0, r4
 8002566:	f000 fb84 	bl	8002c72 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE16_M_allocate_nodeIJRaS5_EEEPS7_DpOT_>
 800256a:	4602      	mov	r2, r0
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	605a      	str	r2, [r3, #4]
	  { }
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bdb0      	pop	{r4, r5, r7, pc}

0800257a <_ZNKSt8__detail10_Select1stclIRSt4pairIKaP9BaseStateEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS8_>:
      operator()(_Tp&& __x) const noexcept
 800257a:	b580      	push	{r7, lr}
 800257c:	b082      	sub	sp, #8
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
 8002582:	6039      	str	r1, [r7, #0]
      { return std::get<0>(std::forward<_Tp>(__x)); }
 8002584:	6838      	ldr	r0, [r7, #0]
 8002586:	f000 fbac 	bl	8002ce2 <_ZSt7forwardIRSt4pairIKaP9BaseStateEEOT_RNSt16remove_referenceIS6_E4typeE>
 800258a:	4603      	mov	r3, r0
 800258c:	4618      	mov	r0, r3
 800258e:	f000 fbb2 	bl	8002cf6 <_ZSt3getILj0EKaP9BaseStateERNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERS7_>
 8002592:	4603      	mov	r3, r0
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <_ZNSt8__detail14_Node_iteratorISt4pairIKaP9BaseStateELb0ELb0EEC1EPNS_10_Hash_nodeIS5_Lb0EEE>:
      _Node_iterator(__node_type* __p) noexcept
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
      : __base_type(__p) { }
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6839      	ldr	r1, [r7, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 fbaf 	bl	8002d0e <_ZNSt8__detail19_Node_iterator_baseISt4pairIKaP9BaseStateELb0EEC1EPNS_10_Hash_nodeIS5_Lb0EEE>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <_ZSt9make_pairINSt8__detail14_Node_iteratorISt4pairIKaP9BaseStateELb0ELb0EEEbES2_INSt25__strip_reference_wrapperINSt5decayIT_E4typeEE6__typeENS8_INS9_IT0_E4typeEE6__typeEEOSA_OSF_>:
#if __cplusplus >= 201103L
  // NB: DR 706.
  template<typename _T1, typename _T2>
    constexpr pair<typename __decay_and_strip<_T1>::__type,
                   typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
 80025ba:	b590      	push	{r4, r7, lr}
 80025bc:	b085      	sub	sp, #20
 80025be:	af00      	add	r7, sp, #0
 80025c0:	60f8      	str	r0, [r7, #12]
 80025c2:	60b9      	str	r1, [r7, #8]
 80025c4:	607a      	str	r2, [r7, #4]
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> 	      __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
 80025c6:	68b8      	ldr	r0, [r7, #8]
 80025c8:	f000 fbaf 	bl	8002d2a <_ZSt7forwardINSt8__detail14_Node_iteratorISt4pairIKaP9BaseStateELb0ELb0EEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80025cc:	4604      	mov	r4, r0
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff f808 	bl	80015e4 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 80025d4:	4603      	mov	r3, r0
 80025d6:	461a      	mov	r2, r3
 80025d8:	4621      	mov	r1, r4
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 fbaf 	bl	8002d3e <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKaP9BaseStateELb0ELb0EEEbEC1IS6_bLb1EEEOT_OT0_>
    }
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd90      	pop	{r4, r7, pc}

080025e8 <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKaP9BaseStateELb0ELb0EEEbEC1IRS6_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80025f4:	68b8      	ldr	r0, [r7, #8]
 80025f6:	f000 fbbb 	bl	8002d70 <_ZSt7forwardIRNSt8__detail14_Node_iteratorISt4pairIKaP9BaseStateELb0ELb0EEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80025fa:	4602      	mov	r2, r0
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6812      	ldr	r2, [r2, #0]
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7fe ffee 	bl	80015e4 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8002608:	4603      	mov	r3, r0
 800260a:	781a      	ldrb	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	711a      	strb	r2, [r3, #4]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <_ZNSt14__array_traitsIaLj10EE6_S_ptrERA10_Ka>:
      _S_ptr(const _Type& __t) noexcept
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4618      	mov	r0, r3
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr

0800262e <_ZSt8__fill_aIPaaEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 800262e:	b580      	push	{r7, lr}
 8002630:	b084      	sub	sp, #16
 8002632:	af00      	add	r7, sp, #0
 8002634:	60f8      	str	r0, [r7, #12]
 8002636:	60b9      	str	r1, [r7, #8]
 8002638:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	68b9      	ldr	r1, [r7, #8]
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 fba0 	bl	8002d84 <_ZSt9__fill_a1IaEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>
 8002644:	bf00      	nop
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <_ZN9__gnu_cxx13new_allocatorIaE7destroyIaEEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <_ZSt7forwardIRKaEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4618      	mov	r0, r3
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr

08002674 <_ZN9__gnu_cxx13new_allocatorIaE9constructIaJRKaEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8002674:	b590      	push	{r4, r7, lr}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff ffed 	bl	8002660 <_ZSt7forwardIRKaEOT_RNSt16remove_referenceIS2_E4typeE>
 8002686:	4603      	mov	r3, r0
 8002688:	f993 4000 	ldrsb.w	r4, [r3]
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	4619      	mov	r1, r3
 8002690:	2001      	movs	r0, #1
 8002692:	f7fe f9e5 	bl	8000a60 <_ZnwjPv>
 8002696:	4603      	mov	r3, r0
 8002698:	4622      	mov	r2, r4
 800269a:	701a      	strb	r2, [r3, #0]
 800269c:	bf00      	nop
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd90      	pop	{r4, r7, pc}

080026a4 <_ZNKSt5dequeIaSaIaEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f103 0218 	add.w	r2, r3, #24
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3308      	adds	r3, #8
 80026b6:	4619      	mov	r1, r3
 80026b8:	4610      	mov	r0, r2
 80026ba:	f000 fb7d 	bl	8002db8 <_ZStmiRKSt15_Deque_iteratorIaRaPaES4_>
 80026be:	4603      	mov	r3, r0
 80026c0:	4618      	mov	r0, r3
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <_ZNKSt5dequeIaSaIaEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 f9c8 	bl	8002a68 <_ZNKSt11_Deque_baseIaSaIaEE19_M_get_Tp_allocatorEv>
 80026d8:	4603      	mov	r3, r0
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 fb96 	bl	8002e0c <_ZNSt5dequeIaSaIaEE11_S_max_sizeERKS0_>
 80026e0:	4603      	mov	r3, r0
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <_ZNSt5dequeIaSaIaEE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b082      	sub	sp, #8
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
 80026f2:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	1c5a      	adds	r2, r3, #1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	6809      	ldr	r1, [r1, #0]
 8002704:	1a41      	subs	r1, r0, r1
 8002706:	1089      	asrs	r1, r1, #2
 8002708:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800270a:	429a      	cmp	r2, r3
 800270c:	d904      	bls.n	8002718 <_ZNSt5dequeIaSaIaEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 800270e:	2200      	movs	r2, #0
 8002710:	6839      	ldr	r1, [r7, #0]
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 fb94 	bl	8002e40 <_ZNSt5dequeIaSaIaEE17_M_reallocate_mapEjb>
      }
 8002718:	bf00      	nop
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <_ZNSt11_Deque_baseIaSaIaEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8002720:	b590      	push	{r4, r7, lr}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8002728:	687c      	ldr	r4, [r7, #4]
 800272a:	2001      	movs	r0, #1
 800272c:	f7fe f9a3 	bl	8000a76 <_ZSt16__deque_buf_sizej>
 8002730:	4603      	mov	r3, r0
 8002732:	4619      	mov	r1, r3
 8002734:	4620      	mov	r0, r4
 8002736:	f000 fc1d 	bl	8002f74 <_ZNSt16allocator_traitsISaIaEE8allocateERS0_j>
 800273a:	4603      	mov	r3, r0
      }
 800273c:	4618      	mov	r0, r3
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	bd90      	pop	{r4, r7, pc}

08002744 <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv>:
      _M_hash() const { return __ebo_hash::_M_cget(); }
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 fc20 	bl	8002f92 <_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIaELb1EE7_M_cgetEv>
 8002752:	4603      	mov	r3, r0
 8002754:	4618      	mov	r0, r3
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEjj>:
      _M_bucket_index(__hash_code __c, std::size_t __bkt_count) const
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
      { return _RangeHash{}(__c, __bkt_count); }
 8002768:	f107 0314 	add.w	r3, r7, #20
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	68b9      	ldr	r1, [r7, #8]
 8002770:	4618      	mov	r0, r3
 8002772:	f7fe f9ae 	bl	8000ad2 <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 8002776:	4603      	mov	r3, r0
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
 800278c:	603b      	str	r3, [r7, #0]
      __node_base_ptr __prev_p = _M_buckets[__bkt];
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	617b      	str	r3, [r7, #20]
      if (!__prev_p)
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x26>
	return nullptr;
 80027a2:	2300      	movs	r3, #0
 80027a4:	e02d      	b.n	8002802 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x82>
      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	613b      	str	r3, [r7, #16]
	  if (this->_M_equals(__k, __code, *__p))
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	3304      	adds	r3, #4
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f000 fbf6 	bl	8002fa6 <_ZNKSt8__detail15_Hashtable_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS5_Lb0EEE>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x44>
	    return __prev_p;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	e01e      	b.n	8002802 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x82>
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00c      	beq.n	80027e6 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x66>
 80027cc:	6938      	ldr	r0, [r7, #16]
 80027ce:	f7ff fde1 	bl	8002394 <_ZNKSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EE7_M_nextEv>
 80027d2:	4603      	mov	r3, r0
 80027d4:	3304      	adds	r3, #4
 80027d6:	4619      	mov	r1, r3
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 fc11 	bl	8003000 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS6_16_Hash_node_valueIS4_Lb0EEE>
 80027de:	4602      	mov	r2, r0
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d001      	beq.n	80027ea <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x6a>
 80027e6:	2301      	movs	r3, #1
 80027e8:	e000      	b.n	80027ec <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x6c>
 80027ea:	2300      	movs	r3, #0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d106      	bne.n	80027fe <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x7e>
	  __prev_p = __p;
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	617b      	str	r3, [r7, #20]
	   __p = __p->_M_next())
 80027f4:	6938      	ldr	r0, [r7, #16]
 80027f6:	f7ff fdcd 	bl	8002394 <_ZNKSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EE7_M_nextEv>
 80027fa:	6138      	str	r0, [r7, #16]
	  if (this->_M_equals(__k, __code, *__p))
 80027fc:	e7d6      	b.n	80027ac <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_find_before_nodeEjRS1_j+0x2c>
	    break;
 80027fe:	bf00      	nop
      return nullptr;
 8002800:	2300      	movs	r3, #0
    }
 8002802:	4618      	mov	r0, r3
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE9_M_valptrEv>:
      _M_valptr() noexcept
 800280a:	b580      	push	{r7, lr}
 800280c:	b082      	sub	sp, #8
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4618      	mov	r0, r3
 8002816:	f000 fc04 	bl	8003022 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKaP9BaseStateEE6_M_ptrEv>
 800281a:	4603      	mov	r3, r0
 800281c:	4618      	mov	r0, r3
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <_ZNSt11_Tuple_implILj0EJRKaEEC1ES1_>:
      _Tuple_impl(const _Head& __head)
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
      : _Base(__head)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6839      	ldr	r1, [r7, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f000 fc01 	bl	800303a <_ZNSt10_Head_baseILj0ERKaLb0EEC1ES1_>
      { }
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4618      	mov	r0, r3
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr

08002856 <_ZSt7forwardISt5tupleIJRKaEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4618      	mov	r0, r3
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr

0800286a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr

0800287e <_ZNSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEC1Ev>:
    struct _Hash_node
 800287e:	b580      	push	{r7, lr}
 8002880:	b082      	sub	sp, #8
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4618      	mov	r0, r3
 800288a:	f7fe f915 	bl	8000ab8 <_ZNSt8__detail15_Hash_node_baseC1Ev>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4618      	mov	r0, r3
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE16_M_allocate_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESE_IJEEEEEPS7_DpOT_>:
      _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
 8002898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800289c:	b088      	sub	sp, #32
 800289e:	af02      	add	r7, sp, #8
 80028a0:	60f8      	str	r0, [r7, #12]
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	607a      	str	r2, [r7, #4]
 80028a6:	603b      	str	r3, [r7, #0]
	auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 f928 	bl	8002afe <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE17_M_node_allocatorEv>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2101      	movs	r1, #1
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 fbcf 	bl	8003056 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE8allocateERS8_j>
 80028b8:	6178      	str	r0, [r7, #20]
	__node_ptr __n = std::__to_address(__nptr);
 80028ba:	6978      	ldr	r0, [r7, #20]
 80028bc:	f000 fbda 	bl	8003074 <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEPT_S9_>
 80028c0:	6138      	str	r0, [r7, #16]
	    ::new ((void*)__n) __node_type;
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	4619      	mov	r1, r3
 80028c6:	200c      	movs	r0, #12
 80028c8:	f7fe f8ca 	bl	8000a60 <_ZnwjPv>
 80028cc:	4603      	mov	r3, r0
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff ffd5 	bl	800287e <_ZNSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEC1Ev>
	    __node_alloc_traits::construct(_M_node_allocator(),
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 f912 	bl	8002afe <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE17_M_node_allocatorEv>
 80028da:	4604      	mov	r4, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	3304      	adds	r3, #4
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff ff92 	bl	800280a <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE9_M_valptrEv>
 80028e6:	4605      	mov	r5, r0
 80028e8:	68b8      	ldr	r0, [r7, #8]
 80028ea:	f7ff ffaa 	bl	8002842 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80028ee:	4606      	mov	r6, r0
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f7ff ffb0 	bl	8002856 <_ZSt7forwardISt5tupleIJRKaEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80028f6:	4680      	mov	r8, r0
 80028f8:	6838      	ldr	r0, [r7, #0]
 80028fa:	f7ff ffb6 	bl	800286a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80028fe:	4603      	mov	r3, r0
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	4643      	mov	r3, r8
 8002904:	4632      	mov	r2, r6
 8002906:	4629      	mov	r1, r5
 8002908:	4620      	mov	r0, r4
 800290a:	f000 fbbd 	bl	8003088 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJRS3_EESE_IJEEEEEvRS8_PT_DpOT0_>
	    return __n;
 800290e:	693b      	ldr	r3, [r7, #16]
      }
 8002910:	4618      	mov	r0, r3
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800291a <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_rehashEjRKj>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800291a:	b580      	push	{r7, lr}
 800291c:	b084      	sub	sp, #16
 800291e:	af00      	add	r7, sp, #0
 8002920:	60f8      	str	r0, [r7, #12]
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	607a      	str	r2, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash(size_type __bkt_count, const __rehash_state& __state)
    {
      __try
	{
	  _M_rehash_aux(__bkt_count, __unique_keys{});
 8002926:	461a      	mov	r2, r3
 8002928:	68b9      	ldr	r1, [r7, #8]
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 fbd9 	bl	80030e2 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>
	  // A failure here means that buckets allocation failed.  We only
	  // have to restore hash policy previous state.
	  _M_rehash_policy._M_reset(__state);
	  __throw_exception_again;
	}
    }
 8002930:	bf00      	nop
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeERNS_21_Hash_node_code_cacheILb0EEEj>:
      _M_store_code(_Hash_node_code_cache<false>&, __hash_code) const
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
      { }
 8002944:	bf00      	nop
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr

0800294e <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS6_10_Hash_nodeIS4_Lb0EEE>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800294e:	b590      	push	{r4, r7, lr}
 8002950:	b085      	sub	sp, #20
 8002952:	af00      	add	r7, sp, #0
 8002954:	60f8      	str	r0, [r7, #12]
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	607a      	str	r2, [r7, #4]
      if (_M_buckets[__bkt])
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d011      	beq.n	800298e <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS6_10_Hash_nodeIS4_Lb0EEE+0x40>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt]->_M_nxt = __node;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	601a      	str	r2, [r3, #0]
    }
 800298c:	e022      	b.n	80029d4 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS6_10_Hash_nodeIS4_Lb0EEE+0x86>
	  __node->_M_nxt = _M_before_begin._M_nxt;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	601a      	str	r2, [r3, #0]
	  _M_before_begin._M_nxt = __node;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	609a      	str	r2, [r3, #8]
	  if (__node->_M_nxt)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00f      	beq.n	80029c4 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE22_M_insert_bucket_beginEjPNS6_10_Hash_nodeIS4_Lb0EEE+0x76>
	    _M_buckets[_M_bucket_index(*__node->_M_next())] = __node;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681c      	ldr	r4, [r3, #0]
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f7ff fcf3 	bl	8002394 <_ZNKSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EE7_M_nextEv>
 80029ae:	4603      	mov	r3, r0
 80029b0:	3304      	adds	r3, #4
 80029b2:	4619      	mov	r1, r3
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 fb23 	bl	8003000 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS6_16_Hash_node_valueIS4_Lb0EEE>
 80029ba:	4603      	mov	r3, r0
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4423      	add	r3, r4
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt] = &_M_before_begin;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	3208      	adds	r2, #8
 80029d2:	601a      	str	r2, [r3, #0]
    }
 80029d4:	bf00      	nop
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd90      	pop	{r4, r7, pc}

080029dc <_ZN9__gnu_cxx13new_allocatorIaEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4618      	mov	r0, r3
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr

080029f0 <_ZNSt15_Deque_iteratorIaRaPaEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	605a      	str	r2, [r3, #4]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	609a      	str	r2, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	60da      	str	r2, [r3, #12]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4618      	mov	r0, r3
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr

08002a1c <_ZNSt16allocator_traitsISaIPaEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002a26:	2200      	movs	r2, #0
 8002a28:	6839      	ldr	r1, [r7, #0]
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 fbc8 	bl	80031c0 <_ZN9__gnu_cxx13new_allocatorIPaE8allocateEjPKv>
 8002a30:	4603      	mov	r3, r0
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <_ZNSt15_Deque_iteratorIaRaPaE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8002a3e:	2001      	movs	r0, #1
 8002a40:	f7fe f819 	bl	8000a76 <_ZSt16__deque_buf_sizej>
 8002a44:	4603      	mov	r3, r0
 8002a46:	4618      	mov	r0, r3
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <_ZNSt16allocator_traitsISaIaEE10deallocateERS0_Paj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b084      	sub	sp, #16
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	60f8      	str	r0, [r7, #12]
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	68b9      	ldr	r1, [r7, #8]
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 fbd9 	bl	8003212 <_ZN9__gnu_cxx13new_allocatorIaE10deallocateEPaj>
 8002a60:	bf00      	nop
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <_ZNKSt11_Deque_baseIaSaIaEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4618      	mov	r0, r3
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr

08002a7c <_ZNSaIPaEC1IaEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 fbd1 	bl	800322e <_ZN9__gnu_cxx13new_allocatorIPaEC1Ev>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <_ZN9__gnu_cxx13new_allocatorIPaED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr

08002aaa <_ZN9__gnu_cxx13new_allocatorIPaE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b084      	sub	sp, #16
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	60f8      	str	r0, [r7, #12]
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4619      	mov	r1, r3
 8002abc:	68b8      	ldr	r0, [r7, #8]
 8002abe:	f005 fb8d 	bl	80081dc <_ZdlPvj>
      }
 8002ac2:	bf00      	nop
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <_ZSt9__fill_a1IPPFvvES1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 8002aca:	b480      	push	{r7}
 8002acc:	b087      	sub	sp, #28
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	60f8      	str	r0, [r7, #12]
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 8002adc:	e005      	b.n	8002aea <_ZSt9__fill_a1IPPFvvES1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x20>
	*__first = __tmp;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	601a      	str	r2, [r3, #0]
      for (; __first != __last; ++__first)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	3304      	adds	r3, #4
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d1f5      	bne.n	8002ade <_ZSt9__fill_a1IPPFvvES1_EN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SA_RKS6_+0x14>
    }
 8002af2:	bf00      	nop
 8002af4:	bf00      	nop
 8002af6:	371c      	adds	r7, #28
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr

08002afe <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE17_M_node_allocatorEv>:
      _M_node_allocator()
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b082      	sub	sp, #8
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
      { return __ebo_node_alloc::_M_get(); }
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 fb9b 	bl	8003242 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEELb1EE6_M_getEv>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE7destroyIS6_EEvRS8_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8002b20:	6839      	ldr	r1, [r7, #0]
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 fb97 	bl	8003256 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE7destroyIS7_EEvPT_>
	}
 8002b28:	bf00      	nop
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE22_M_deallocate_node_ptrEPS7_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_ptr __n)
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
 8002b3a:	6838      	ldr	r0, [r7, #0]
 8002b3c:	f000 fb95 	bl	800326a <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE10pointer_toERS7_>
 8002b40:	60f8      	str	r0, [r7, #12]
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7ff ffdb 	bl	8002afe <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE17_M_node_allocatorEv>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	68f9      	ldr	r1, [r7, #12]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 fab8 	bl	80030c4 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE10deallocateERS8_PS7_j>
    }
 8002b54:	bf00      	nop
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <_ZNSt14pointer_traitsIPPNSt8__detail15_Hash_node_baseEE10pointer_toERS2_>:
       *  @brief  Obtain a pointer to an object
       *  @param  __r  A reference to an object of type @c element_type
       *  @return @c addressof(__r)
      */
      static _GLIBCXX20_CONSTEXPR pointer
      pointer_to(__make_not_void<element_type>& __r) noexcept
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 fb8c 	bl	8003282 <_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEERKSaIT_E>:
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 fb8b 	bl	800329a <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4618      	mov	r0, r3
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b082      	sub	sp, #8
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 fb89 	bl	80032ae <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEED1Ev>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b084      	sub	sp, #16
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	60f8      	str	r0, [r7, #12]
 8002bae:	60b9      	str	r1, [r7, #8]
 8002bb0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	68b9      	ldr	r1, [r7, #8]
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 fb83 	bl	80032c2 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS3_j>
 8002bbc:	bf00      	nop
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <_ZSt4moveIRNSt11_Deque_baseIaSaIaEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <_ZNSt11_Deque_baseIaSaIaEE16_Deque_impl_dataC1ERKS2_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f103 0208 	add.w	r2, r3, #8
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	3308      	adds	r3, #8
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4610      	mov	r0, r2
 8002c00:	f7fe fd61 	bl	80016c6 <_ZNSt15_Deque_iteratorIaRaPaEC1ERKS2_>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f103 0218 	add.w	r2, r3, #24
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	3318      	adds	r3, #24
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4610      	mov	r0, r2
 8002c12:	f7fe fd58 	bl	80016c6 <_ZNSt15_Deque_iteratorIaRaPaEC1ERKS2_>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <_ZNSt11_Deque_baseIaSaIaEE16_Deque_impl_dataC1EOS2_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 8002c20:	b5b0      	push	{r4, r5, r7, lr}
 8002c22:	b08c      	sub	sp, #48	; 0x30
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 8002c2a:	6839      	ldr	r1, [r7, #0]
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7ff ffd3 	bl	8002bd8 <_ZNSt11_Deque_baseIaSaIaEE16_Deque_impl_dataC1ERKS2_>
	{ __x = _Deque_impl_data(); }
 8002c32:	f107 0308 	add.w	r3, r7, #8
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff fae1 	bl	80021fe <_ZNSt11_Deque_baseIaSaIaEE16_Deque_impl_dataC1Ev>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	461d      	mov	r5, r3
 8002c40:	f107 0408 	add.w	r4, r7, #8
 8002c44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c50:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4618      	mov	r0, r3
 8002c58:	3730      	adds	r7, #48	; 0x30
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bdb0      	pop	{r4, r5, r7, pc}

08002c5e <_ZSt4moveIRSaIaEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr

08002c72 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE16_M_allocate_nodeIJRaS5_EEEPS7_DpOT_>:
      _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
 8002c72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c74:	b087      	sub	sp, #28
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	60f8      	str	r0, [r7, #12]
 8002c7a:	60b9      	str	r1, [r7, #8]
 8002c7c:	607a      	str	r2, [r7, #4]
	auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f7ff ff3d 	bl	8002afe <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE17_M_node_allocatorEv>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2101      	movs	r1, #1
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f000 f9e4 	bl	8003056 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE8allocateERS8_j>
 8002c8e:	6178      	str	r0, [r7, #20]
	__node_ptr __n = std::__to_address(__nptr);
 8002c90:	6978      	ldr	r0, [r7, #20]
 8002c92:	f000 f9ef 	bl	8003074 <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEPT_S9_>
 8002c96:	6138      	str	r0, [r7, #16]
	    ::new ((void*)__n) __node_type;
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	200c      	movs	r0, #12
 8002c9e:	f7fd fedf 	bl	8000a60 <_ZnwjPv>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff fdea 	bl	800287e <_ZNSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEC1Ev>
	    __node_alloc_traits::construct(_M_node_allocator(),
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f7ff ff27 	bl	8002afe <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE17_M_node_allocatorEv>
 8002cb0:	4604      	mov	r4, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff fda7 	bl	800280a <_ZNSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE9_M_valptrEv>
 8002cbc:	4605      	mov	r5, r0
 8002cbe:	68b8      	ldr	r0, [r7, #8]
 8002cc0:	f7fe fdca 	bl	8001858 <_ZSt7forwardIRaEOT_RNSt16remove_referenceIS1_E4typeE>
 8002cc4:	4606      	mov	r6, r0
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7fe fdd0 	bl	800186c <_ZSt7forwardIP9BaseStateEOT_RNSt16remove_referenceIS2_E4typeE>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	4632      	mov	r2, r6
 8002cd0:	4629      	mov	r1, r5
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	f000 fb05 	bl	80032e2 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE9constructIS6_JRaS5_EEEvRS8_PT_DpOT0_>
	    return __n;
 8002cd8:	693b      	ldr	r3, [r7, #16]
      }
 8002cda:	4618      	mov	r0, r3
 8002cdc:	371c      	adds	r7, #28
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ce2 <_ZSt7forwardIRSt4pairIKaP9BaseStateEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4618      	mov	r0, r3
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr

08002cf6 <_ZSt3getILj0EKaP9BaseStateERNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERS7_>:
	{ return std::forward<const _Tp2>(__pair.second); }
    };

  template<size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&
    get(pair<_Tp1, _Tp2>& __in) noexcept
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
    { return __pair_get<_Int>::__get(__in); }
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fb07 	bl	8003312 <_ZNSt10__pair_getILj0EE5__getIKaP9BaseStateEERT_RSt4pairIS5_T0_E>
 8002d04:	4603      	mov	r3, r0
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <_ZNSt8__detail19_Node_iterator_baseISt4pairIKaP9BaseStateELb0EEC1EPNS_10_Hash_nodeIS5_Lb0EEE>:
      _Node_iterator_base(__node_type* __p) noexcept
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
 8002d16:	6039      	str	r1, [r7, #0]
      : _M_cur(__p) { }
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4618      	mov	r0, r3
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc80      	pop	{r7}
 8002d28:	4770      	bx	lr

08002d2a <_ZSt7forwardINSt8__detail14_Node_iteratorISt4pairIKaP9BaseStateELb0ELb0EEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4618      	mov	r0, r3
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bc80      	pop	{r7}
 8002d3c:	4770      	bx	lr

08002d3e <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IKaP9BaseStateELb0ELb0EEEbEC1IS6_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b084      	sub	sp, #16
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	60f8      	str	r0, [r7, #12]
 8002d46:	60b9      	str	r1, [r7, #8]
 8002d48:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8002d4a:	68b8      	ldr	r0, [r7, #8]
 8002d4c:	f7ff ffed 	bl	8002d2a <_ZSt7forwardINSt8__detail14_Node_iteratorISt4pairIKaP9BaseStateELb0ELb0EEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8002d50:	4602      	mov	r2, r0
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6812      	ldr	r2, [r2, #0]
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f7fe fc43 	bl	80015e4 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	781a      	ldrb	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	711a      	strb	r2, [r3, #4]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <_ZSt7forwardIRNSt8__detail14_Node_iteratorISt4pairIKaP9BaseStateELb0ELb0EEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr

08002d84 <_ZSt9__fill_a1IaEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>:
    __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __c;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	75fb      	strb	r3, [r7, #23]
      if (const size_t __len = __last - __first)
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	613b      	str	r3, [r7, #16]
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <_ZSt9__fill_a1IaEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x2c>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 8002da4:	7dfb      	ldrb	r3, [r7, #23]
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	4619      	mov	r1, r3
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f005 fce6 	bl	800877c <memset>
    }
 8002db0:	bf00      	nop
 8002db2:	3718      	adds	r7, #24
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <_ZStmiRKSt15_Deque_iteratorIaRaPaES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8002dc2:	f7ff fe3a 	bl	8002a3a <_ZNSt15_Deque_iteratorIaRaPaE14_S_buffer_sizeEv>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - bool(__x._M_node))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68da      	ldr	r2, [r3, #12]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	109b      	asrs	r3, r3, #2
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	bf14      	ite	ne
 8002de0:	2301      	movne	r3, #1
 8002de2:	2300      	moveq	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	fb03 f201 	mul.w	r2, r3, r1
	  + (__x._M_cur - __x._M_first)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6819      	ldr	r1, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	1acb      	subs	r3, r1, r3
 8002df6:	441a      	add	r2, r3
	  + (__y._M_last - __y._M_cur);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	6899      	ldr	r1, [r3, #8]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	1acb      	subs	r3, r1, r3
 8002e02:	4413      	add	r3, r2
      }
 8002e04:	4618      	mov	r0, r3
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <_ZNSt5dequeIaSaIaEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8002e14:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002e18:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 fa83 	bl	8003326 <_ZNSt16allocator_traitsISaIaEE8max_sizeERKS0_>
 8002e20:	4603      	mov	r3, r0
 8002e22:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002e24:	f107 0208 	add.w	r2, r7, #8
 8002e28:	f107 030c 	add.w	r3, r7, #12
 8002e2c:	4611      	mov	r1, r2
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fd fe7e 	bl	8000b30 <_ZSt3minIjERKT_S2_S2_>
 8002e34:	4603      	mov	r3, r0
 8002e36:	681b      	ldr	r3, [r3, #0]
      }
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <_ZNSt5dequeIaSaIaEE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8002e40:	b590      	push	{r4, r7, lr}
 8002e42:	b08b      	sub	sp, #44	; 0x2c
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	109b      	asrs	r3, r3, #2
 8002e5a:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8002e5c:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	6a3a      	ldr	r2, [r7, #32]
 8002e62:	4413      	add	r3, r2
 8002e64:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d92d      	bls.n	8002ece <_ZNSt5dequeIaSaIaEE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	1acb      	subs	r3, r1, r3
 8002e7e:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002e80:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8002e82:	79fb      	ldrb	r3, [r7, #7]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d002      	beq.n	8002e8e <_ZNSt5dequeIaSaIaEE17_M_reallocate_mapEjb+0x4e>
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	e000      	b.n	8002e90 <_ZNSt5dequeIaSaIaEE17_M_reallocate_mapEjb+0x50>
 8002e8e:	2300      	movs	r3, #0
 8002e90:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002e92:	4413      	add	r3, r2
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d209      	bcs.n	8002eb4 <_ZNSt5dequeIaSaIaEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eac:	4619      	mov	r1, r3
 8002eae:	f000 fa46 	bl	800333e <_ZSt4copyIPPaS1_ET0_T_S3_S2_>
 8002eb2:	e048      	b.n	8002f46 <_ZNSt5dequeIaSaIaEE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8002ebc:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8002ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec4:	4413      	add	r3, r2
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	f000 fa51 	bl	800336e <_ZSt13copy_backwardIPPaS1_ET0_T_S3_S2_>
 8002ecc:	e03b      	b.n	8002f46 <_ZNSt5dequeIaSaIaEE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	f107 0208 	add.w	r2, r7, #8
 8002eda:	4611      	mov	r1, r2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fe fa0b 	bl	80012f8 <_ZSt3maxIjERKT_S2_S2_>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8002ee8:	3302      	adds	r3, #2
 8002eea:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	69b9      	ldr	r1, [r7, #24]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff f9a7 	bl	8002244 <_ZNSt11_Deque_baseIaSaIaEE15_M_allocate_mapEj>
 8002ef6:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	085b      	lsrs	r3, r3, #1
 8002f00:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d002      	beq.n	8002f0e <_ZNSt5dequeIaSaIaEE17_M_reallocate_mapEjb+0xce>
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	e000      	b.n	8002f10 <_ZNSt5dequeIaSaIaEE17_M_reallocate_mapEjb+0xd0>
 8002f0e:	2300      	movs	r3, #0
 8002f10:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4413      	add	r3, r2
 8002f16:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8002f20:	3304      	adds	r3, #4
 8002f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f24:	4619      	mov	r1, r3
 8002f26:	f000 fa0a 	bl	800333e <_ZSt4copyIPPaS1_ET0_T_S3_S2_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6819      	ldr	r1, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	461a      	mov	r2, r3
 8002f36:	f7fe fe64 	bl	8001c02 <_ZNSt11_Deque_baseIaSaIaEE17_M_deallocate_mapEPPaj>

	  this->_M_impl._M_map = __new_map;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	3308      	adds	r3, #8
 8002f4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff f9b1 	bl	80022b4 <_ZNSt15_Deque_iteratorIaRaPaE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f103 0018 	add.w	r0, r3, #24
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f64:	4413      	add	r3, r2
 8002f66:	4619      	mov	r1, r3
 8002f68:	f7ff f9a4 	bl	80022b4 <_ZNSt15_Deque_iteratorIaRaPaE11_M_set_nodeEPS1_>
    }
 8002f6c:	bf00      	nop
 8002f6e:	372c      	adds	r7, #44	; 0x2c
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd90      	pop	{r4, r7, pc}

08002f74 <_ZNSt16allocator_traitsISaIaEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002f7e:	2200      	movs	r2, #0
 8002f80:	6839      	ldr	r1, [r7, #0]
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 fa16 	bl	80033b4 <_ZN9__gnu_cxx13new_allocatorIaE8allocateEjPKv>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIaELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 8002f92:	b480      	push	{r7}
 8002f94:	b083      	sub	sp, #12
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bc80      	pop	{r7}
 8002fa4:	4770      	bx	lr

08002fa6 <_ZNKSt8__detail15_Hashtable_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS5_Lb0EEE>:
      _M_equals(const _Key& __k, __hash_code __c,
 8002fa6:	b590      	push	{r4, r7, lr}
 8002fa8:	b087      	sub	sp, #28
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	60f8      	str	r0, [r7, #12]
 8002fae:	60b9      	str	r1, [r7, #8]
 8002fb0:	607a      	str	r2, [r7, #4]
 8002fb2:	603b      	str	r3, [r7, #0]
	return _S_equals(__c, __n) && _M_eq()(__k, _ExtractKey{}(__n._M_v()));
 8002fb4:	6839      	ldr	r1, [r7, #0]
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 fa1d 	bl	80033f6 <_ZNSt8__detail15_Hashtable_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb0EEE>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d019      	beq.n	8002ff6 <_ZNKSt8__detail15_Hashtable_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS5_Lb0EEE+0x50>
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 fa22 	bl	800340c <_ZNKSt8__detail15_Hashtable_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>
 8002fc8:	4604      	mov	r4, r0
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f000 fa29 	bl	8003424 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE4_M_vEv>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	f107 0314 	add.w	r3, r7, #20
 8002fd8:	4611      	mov	r1, r2
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 fa2e 	bl	800343c <_ZNKSt8__detail10_Select1stclIRKSt4pairIKaP9BaseStateEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS9_>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	68b9      	ldr	r1, [r7, #8]
 8002fe6:	4620      	mov	r0, r4
 8002fe8:	f000 fa39 	bl	800345e <_ZNKSt8equal_toIaEclERKaS2_>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <_ZNKSt8__detail15_Hashtable_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS5_Lb0EEE+0x50>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <_ZNKSt8__detail15_Hashtable_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_jRKNS_16_Hash_node_valueIS5_Lb0EEE+0x52>
 8002ff6:	2300      	movs	r3, #0
      }
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	371c      	adds	r7, #28
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd90      	pop	{r4, r7, pc}

08003000 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE15_M_bucket_indexERKNS6_16_Hash_node_valueIS4_Lb0EEE>:
      _M_bucket_index(const __node_value_type& __n) const noexcept
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__n, _M_bucket_count); }
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	461a      	mov	r2, r3
 8003010:	6839      	ldr	r1, [r7, #0]
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 fa39 	bl	800348a <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIS5_Lb0EEEj>
 8003018:	4603      	mov	r3, r0
 800301a:	4618      	mov	r0, r3
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKaP9BaseStateEE6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 8003022:	b580      	push	{r7, lr}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 fa4f 	bl	80034ce <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKaP9BaseStateEE7_M_addrEv>
 8003030:	4603      	mov	r3, r0
 8003032:	4618      	mov	r0, r3
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <_ZNSt10_Head_baseILj0ERKaLb0EEC1ES1_>:
      constexpr _Head_base(const _Head& __h)
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
 8003042:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4618      	mov	r0, r3
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	bc80      	pop	{r7}
 8003054:	4770      	bx	lr

08003056 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE8allocateERS8_j>:
      allocate(allocator_type& __a, size_type __n)
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
 800305e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003060:	2200      	movs	r2, #0
 8003062:	6839      	ldr	r1, [r7, #0]
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 fa49 	bl	80034fc <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE8allocateEjPKv>
 800306a:	4603      	mov	r3, r0
 800306c:	4618      	mov	r0, r3
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEPT_S9_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 800307c:	687b      	ldr	r3, [r7, #4]
    }
 800307e:	4618      	mov	r0, r3
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr

08003088 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJRS3_EESE_IJEEEEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003088:	b5b0      	push	{r4, r5, r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af02      	add	r7, sp, #8
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
 8003094:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7ff fbd3 	bl	8002842 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800309c:	4604      	mov	r4, r0
 800309e:	6838      	ldr	r0, [r7, #0]
 80030a0:	f7ff fbd9 	bl	8002856 <_ZSt7forwardISt5tupleIJRKaEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80030a4:	4605      	mov	r5, r0
 80030a6:	6a38      	ldr	r0, [r7, #32]
 80030a8:	f7ff fbdf 	bl	800286a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80030ac:	4603      	mov	r3, r0
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	462b      	mov	r3, r5
 80030b2:	4622      	mov	r2, r4
 80030b4:	68b9      	ldr	r1, [r7, #8]
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 fa5e 	bl	8003578 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvPT_DpOT0_>
	}
 80030bc:	bf00      	nop
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bdb0      	pop	{r4, r5, r7, pc}

080030c4 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE10deallocateERS8_PS7_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	68b9      	ldr	r1, [r7, #8]
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 fa76 	bl	80035c6 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE10deallocateEPS8_j>
 80030da:	bf00      	nop
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b08a      	sub	sp, #40	; 0x28
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	60f8      	str	r0, [r7, #12]
 80030ea:	60b9      	str	r1, [r7, #8]
 80030ec:	713a      	strb	r2, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash_aux(size_type __bkt_count, true_type /* __uks */)
    {
      __buckets_ptr __new_buckets = _M_allocate_buckets(__bkt_count);
 80030ee:	68b9      	ldr	r1, [r7, #8]
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 fa7b 	bl	80035ec <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>
 80030f6:	61f8      	str	r0, [r7, #28]
      __node_ptr __p = _M_begin();
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f7fe fddb 	bl	8001cb4 <_ZNKSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE8_M_beginEv>
 80030fe:	6278      	str	r0, [r7, #36]	; 0x24
      _M_before_begin._M_nxt = nullptr;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	609a      	str	r2, [r3, #8]
      std::size_t __bbegin_bkt = 0;
 8003106:	2300      	movs	r3, #0
 8003108:	623b      	str	r3, [r7, #32]
      while (__p)
 800310a:	e03e      	b.n	800318a <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xa8>
	{
	  __node_ptr __next = __p->_M_next();
 800310c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800310e:	f7ff f941 	bl	8002394 <_ZNKSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EE7_M_nextEv>
 8003112:	61b8      	str	r0, [r7, #24]
	  std::size_t __bkt
	    = __hash_code_base::_M_bucket_index(*__p, __bkt_count);
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	3304      	adds	r3, #4
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	4619      	mov	r1, r3
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 f9b4 	bl	800348a <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIS5_Lb0EEEj>
 8003122:	6178      	str	r0, [r7, #20]
	  if (!__new_buckets[__bkt])
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	69fa      	ldr	r2, [r7, #28]
 800312a:	4413      	add	r3, r2
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d11a      	bne.n	8003168 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x86>
	    {
	      __p->_M_nxt = _M_before_begin._M_nxt;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	601a      	str	r2, [r3, #0]
	      _M_before_begin._M_nxt = __p;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800313e:	609a      	str	r2, [r3, #8]
	      __new_buckets[__bkt] = &_M_before_begin;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	69fa      	ldr	r2, [r7, #28]
 8003146:	4413      	add	r3, r2
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	3208      	adds	r2, #8
 800314c:	601a      	str	r2, [r3, #0]
	      if (__p->_M_nxt)
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d005      	beq.n	8003162 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x80>
		__new_buckets[__bbegin_bkt] = __p;
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	69fa      	ldr	r2, [r7, #28]
 800315c:	4413      	add	r3, r2
 800315e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003160:	601a      	str	r2, [r3, #0]
	      __bbegin_bkt = __bkt;
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	623b      	str	r3, [r7, #32]
 8003166:	e00e      	b.n	8003186 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0xa4>
	    }
	  else
	    {
	      __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	69fa      	ldr	r2, [r7, #28]
 800316e:	4413      	add	r3, r2
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	601a      	str	r2, [r3, #0]
	      __new_buckets[__bkt]->_M_nxt = __p;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	69fa      	ldr	r2, [r7, #28]
 800317e:	4413      	add	r3, r2
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003184:	601a      	str	r2, [r3, #0]
	    }

	  __p = __next;
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	627b      	str	r3, [r7, #36]	; 0x24
      while (__p)
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1bd      	bne.n	800310c <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE13_M_rehash_auxEjSt17integral_constantIbLb1EE+0x2a>
	}

      _M_deallocate_buckets();
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f7fe fb26 	bl	80017e2 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE21_M_deallocate_bucketsEv>
      _M_bucket_count = __bkt_count;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	605a      	str	r2, [r3, #4]
      _M_buckets = __new_buckets;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	69fa      	ldr	r2, [r7, #28]
 80031a0:	601a      	str	r2, [r3, #0]
    }
 80031a2:	bf00      	nop
 80031a4:	3728      	adds	r7, #40	; 0x28
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <_ZNK9__gnu_cxx13new_allocatorIPaE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80031b2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 80031b6:	4618      	mov	r0, r3
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc80      	pop	{r7}
 80031be:	4770      	bx	lr

080031c0 <_ZN9__gnu_cxx13new_allocatorIPaE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f7ff ffec 	bl	80031aa <_ZNK9__gnu_cxx13new_allocatorIPaE11_M_max_sizeEv>
 80031d2:	4602      	mov	r2, r0
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	4293      	cmp	r3, r2
 80031d8:	bf8c      	ite	hi
 80031da:	2301      	movhi	r3, #1
 80031dc:	2300      	movls	r3, #0
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	bf14      	ite	ne
 80031e4:	2301      	movne	r3, #1
 80031e6:	2300      	moveq	r3, #0
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d007      	beq.n	80031fe <_ZN9__gnu_cxx13new_allocatorIPaE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f4:	d301      	bcc.n	80031fa <_ZN9__gnu_cxx13new_allocatorIPaE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80031f6:	f005 f807 	bl	8008208 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80031fa:	f005 f802 	bl	8008202 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4618      	mov	r0, r3
 8003204:	f004 ffec 	bl	80081e0 <_Znwj>
 8003208:	4603      	mov	r3, r0
      }
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <_ZN9__gnu_cxx13new_allocatorIaE10deallocateEPaj>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8003212:	b580      	push	{r7, lr}
 8003214:	b084      	sub	sp, #16
 8003216:	af00      	add	r7, sp, #0
 8003218:	60f8      	str	r0, [r7, #12]
 800321a:	60b9      	str	r1, [r7, #8]
 800321c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	68b8      	ldr	r0, [r7, #8]
 8003222:	f004 ffdb 	bl	80081dc <_ZdlPvj>
      }
 8003226:	bf00      	nop
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <_ZN9__gnu_cxx13new_allocatorIPaEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4618      	mov	r0, r3
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	bc80      	pop	{r7}
 8003240:	4770      	bx	lr

08003242 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEELb1EE6_M_getEv>:
      _Tp& _M_get() { return static_cast<_Tp&>(*this); }
 8003242:	b480      	push	{r7}
 8003244:	b083      	sub	sp, #12
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4618      	mov	r0, r3
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	bc80      	pop	{r7}
 8003254:	4770      	bx	lr

08003256 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE7destroyIS7_EEvPT_>:
	destroy(_Up* __p)
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
 800325e:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	bc80      	pop	{r7}
 8003268:	4770      	bx	lr

0800326a <_ZNSt14pointer_traitsIPNSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE10pointer_toERS7_>:
      pointer_to(__make_not_void<element_type>& __r) noexcept
 800326a:	b580      	push	{r7, lr}
 800326c:	b082      	sub	sp, #8
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f9d7 	bl	8003626 <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEPT_RS8_>
 8003278:	4603      	mov	r3, r0
 800327a:	4618      	mov	r0, r3
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>:
    addressof(_Tp& __r) noexcept
 8003282:	b580      	push	{r7, lr}
 8003284:	b082      	sub	sp, #8
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f9d7 	bl	800363e <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 8003290:	4603      	mov	r3, r0
 8003292:	4618      	mov	r0, r3
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4618      	mov	r0, r3
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bc80      	pop	{r7}
 80032ac:	4770      	bx	lr

080032ae <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4618      	mov	r0, r3
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	bc80      	pop	{r7}
 80032c0:	4770      	bx	lr

080032c2 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b084      	sub	sp, #16
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	60f8      	str	r0, [r7, #12]
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4619      	mov	r1, r3
 80032d4:	68b8      	ldr	r0, [r7, #8]
 80032d6:	f004 ff81 	bl	80081dc <_ZdlPvj>
      }
 80032da:	bf00      	nop
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE9constructIS6_JRaS5_EEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80032e2:	b590      	push	{r4, r7, lr}
 80032e4:	b085      	sub	sp, #20
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	60f8      	str	r0, [r7, #12]
 80032ea:	60b9      	str	r1, [r7, #8]
 80032ec:	607a      	str	r2, [r7, #4]
 80032ee:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7fe fab1 	bl	8001858 <_ZSt7forwardIRaEOT_RNSt16remove_referenceIS1_E4typeE>
 80032f6:	4604      	mov	r4, r0
 80032f8:	6838      	ldr	r0, [r7, #0]
 80032fa:	f7fe fab7 	bl	800186c <_ZSt7forwardIP9BaseStateEOT_RNSt16remove_referenceIS2_E4typeE>
 80032fe:	4603      	mov	r3, r0
 8003300:	4622      	mov	r2, r4
 8003302:	68b9      	ldr	r1, [r7, #8]
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 f9a4 	bl	8003652 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE9constructIS7_JRaS6_EEEvPT_DpOT0_>
	}
 800330a:	bf00      	nop
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	bd90      	pop	{r4, r7, pc}

08003312 <_ZNSt10__pair_getILj0EE5__getIKaP9BaseStateEERT_RSt4pairIS5_T0_E>:
	__get(pair<_Tp1, _Tp2>& __pair) noexcept
 8003312:	b480      	push	{r7}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
	{ return __pair.first; }
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4618      	mov	r0, r3
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	bc80      	pop	{r7}
 8003324:	4770      	bx	lr

08003326 <_ZNSt16allocator_traitsISaIaEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8003326:	b580      	push	{r7, lr}
 8003328:	b082      	sub	sp, #8
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f9ad 	bl	800368e <_ZNK9__gnu_cxx13new_allocatorIaE8max_sizeEv>
 8003334:	4603      	mov	r3, r0
      }
 8003336:	4618      	mov	r0, r3
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <_ZSt4copyIPPaS1_ET0_T_S3_S2_>:
    copy(_II __first, _II __last, _OI __result)
 800333e:	b590      	push	{r4, r7, lr}
 8003340:	b085      	sub	sp, #20
 8003342:	af00      	add	r7, sp, #0
 8003344:	60f8      	str	r0, [r7, #12]
 8003346:	60b9      	str	r1, [r7, #8]
 8003348:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f000 f9ab 	bl	80036a6 <_ZSt12__miter_baseIPPaET_S2_>
 8003350:	4604      	mov	r4, r0
 8003352:	68b8      	ldr	r0, [r7, #8]
 8003354:	f000 f9a7 	bl	80036a6 <_ZSt12__miter_baseIPPaET_S2_>
 8003358:	4603      	mov	r3, r0
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	4619      	mov	r1, r3
 800335e:	4620      	mov	r0, r4
 8003360:	f000 f9ab 	bl	80036ba <_ZSt13__copy_move_aILb0EPPaS1_ET1_T0_S3_S2_>
 8003364:	4603      	mov	r3, r0
    }
 8003366:	4618      	mov	r0, r3
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	bd90      	pop	{r4, r7, pc}

0800336e <_ZSt13copy_backwardIPPaS1_ET0_T_S3_S2_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800336e:	b590      	push	{r4, r7, lr}
 8003370:	b085      	sub	sp, #20
 8003372:	af00      	add	r7, sp, #0
 8003374:	60f8      	str	r0, [r7, #12]
 8003376:	60b9      	str	r1, [r7, #8]
 8003378:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 f993 	bl	80036a6 <_ZSt12__miter_baseIPPaET_S2_>
 8003380:	4604      	mov	r4, r0
 8003382:	68b8      	ldr	r0, [r7, #8]
 8003384:	f000 f98f 	bl	80036a6 <_ZSt12__miter_baseIPPaET_S2_>
 8003388:	4603      	mov	r3, r0
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	4619      	mov	r1, r3
 800338e:	4620      	mov	r0, r4
 8003390:	f000 f9b6 	bl	8003700 <_ZSt22__copy_move_backward_aILb0EPPaS1_ET1_T0_S3_S2_>
 8003394:	4603      	mov	r3, r0
    }
 8003396:	4618      	mov	r0, r3
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	bd90      	pop	{r4, r7, pc}

0800339e <_ZNK9__gnu_cxx13new_allocatorIaE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80033a6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
      }
 80033aa:	4618      	mov	r0, r3
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr

080033b4 <_ZN9__gnu_cxx13new_allocatorIaE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f7ff ffec 	bl	800339e <_ZNK9__gnu_cxx13new_allocatorIaE11_M_max_sizeEv>
 80033c6:	4602      	mov	r2, r0
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	4293      	cmp	r3, r2
 80033cc:	bf8c      	ite	hi
 80033ce:	2301      	movhi	r3, #1
 80033d0:	2300      	movls	r3, #0
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	bf14      	ite	ne
 80033d8:	2301      	movne	r3, #1
 80033da:	2300      	moveq	r3, #0
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <_ZN9__gnu_cxx13new_allocatorIaE8allocateEjPKv+0x32>
	    std::__throw_bad_alloc();
 80033e2:	f004 ff0e 	bl	8008202 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80033e6:	68b8      	ldr	r0, [r7, #8]
 80033e8:	f004 fefa 	bl	80081e0 <_Znwj>
 80033ec:	4603      	mov	r3, r0
      }
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <_ZNSt8__detail15_Hashtable_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb0EEE>:
      _S_equals(__hash_code, const _Hash_node_code_cache<false>&)
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	6039      	str	r1, [r7, #0]
      { return true; }
 8003400:	2301      	movs	r3, #1
 8003402:	4618      	mov	r0, r3
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr

0800340c <_ZNKSt8__detail15_Hashtable_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt8equal_toIaESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv>:
      _M_eq() const { return _EqualEBO::_M_cget(); }
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 f996 	bl	8003746 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIaELb1EE7_M_cgetEv>
 800341a:	4603      	mov	r3, r0
 800341c:	4618      	mov	r0, r3
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE4_M_vEv>:
      _M_v() const noexcept
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f994 	bl	800375a <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE9_M_valptrEv>
 8003432:	4603      	mov	r3, r0
 8003434:	4618      	mov	r0, r3
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <_ZNKSt8__detail10_Select1stclIRKSt4pairIKaP9BaseStateEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS9_>:
      operator()(_Tp&& __x) const noexcept
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
      { return std::get<0>(std::forward<_Tp>(__x)); }
 8003446:	6838      	ldr	r0, [r7, #0]
 8003448:	f000 f994 	bl	8003774 <_ZSt7forwardIRKSt4pairIKaP9BaseStateEEOT_RNSt16remove_referenceIS7_E4typeE>
 800344c:	4603      	mov	r3, r0
 800344e:	4618      	mov	r0, r3
 8003450:	f000 f99a 	bl	8003788 <_ZSt3getILj0EKaP9BaseStateERKNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERKS7_>
 8003454:	4603      	mov	r3, r0
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <_ZNKSt8equal_toIaEclERKaS2_>:
  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 800345e:	b480      	push	{r7}
 8003460:	b085      	sub	sp, #20
 8003462:	af00      	add	r7, sp, #0
 8003464:	60f8      	str	r0, [r7, #12]
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	607a      	str	r2, [r7, #4]
      { return __x == __y; }
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	f993 2000 	ldrsb.w	r2, [r3]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f993 3000 	ldrsb.w	r3, [r3]
 8003476:	429a      	cmp	r2, r3
 8003478:	bf0c      	ite	eq
 800347a:	2301      	moveq	r3, #1
 800347c:	2300      	movne	r3, #0
 800347e:	b2db      	uxtb	r3, r3
 8003480:	4618      	mov	r0, r3
 8003482:	3714      	adds	r7, #20
 8003484:	46bd      	mov	sp, r7
 8003486:	bc80      	pop	{r7}
 8003488:	4770      	bx	lr

0800348a <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIS5_Lb0EEEj>:
      _M_bucket_index(const _Hash_node_value<_Value, false>& __n,
 800348a:	b580      	push	{r7, lr}
 800348c:	b086      	sub	sp, #24
 800348e:	af00      	add	r7, sp, #0
 8003490:	60f8      	str	r0, [r7, #12]
 8003492:	60b9      	str	r1, [r7, #8]
 8003494:	607a      	str	r2, [r7, #4]
	return _RangeHash{}(_M_hash_code(_ExtractKey{}(__n._M_v())),
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff ffc3 	bl	8003424 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE4_M_vEv>
 800349e:	4602      	mov	r2, r0
 80034a0:	f107 0314 	add.w	r3, r7, #20
 80034a4:	4611      	mov	r1, r2
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff ffc8 	bl	800343c <_ZNKSt8__detail10_Select1stclIRKSt4pairIKaP9BaseStateEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS9_>
 80034ac:	4603      	mov	r3, r0
 80034ae:	4619      	mov	r1, r3
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f7fe fdad 	bl	8002010 <_ZNKSt8__detail15_Hash_code_baseIaSt4pairIKaP9BaseStateENS_10_Select1stESt4hashIaENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS2_>
 80034b6:	4601      	mov	r1, r0
 80034b8:	f107 0310 	add.w	r3, r7, #16
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	4618      	mov	r0, r3
 80034c0:	f7fd fb07 	bl	8000ad2 <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 80034c4:	4603      	mov	r3, r0
      }
 80034c6:	4618      	mov	r0, r3
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <_ZN9__gnu_cxx16__aligned_bufferISt4pairIKaP9BaseStateEE7_M_addrEv>:
      _M_addr() noexcept
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 80034d6:	687b      	ldr	r3, [r7, #4]
      }
 80034d8:	4618      	mov	r0, r3
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	bc80      	pop	{r7}
 80034e0:	4770      	bx	lr
	...

080034e4 <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80034ec:	4b02      	ldr	r3, [pc, #8]	; (80034f8 <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE11_M_max_sizeEv+0x14>)
      }
 80034ee:	4618      	mov	r0, r3
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bc80      	pop	{r7}
 80034f6:	4770      	bx	lr
 80034f8:	0aaaaaaa 	.word	0x0aaaaaaa

080034fc <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f7ff ffeb 	bl	80034e4 <_ZNK9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE11_M_max_sizeEv>
 800350e:	4602      	mov	r2, r0
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	4293      	cmp	r3, r2
 8003514:	bf8c      	ite	hi
 8003516:	2301      	movhi	r3, #1
 8003518:	2300      	movls	r3, #0
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	bf14      	ite	ne
 8003520:	2301      	movne	r3, #1
 8003522:	2300      	moveq	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d007      	beq.n	800353a <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	4a09      	ldr	r2, [pc, #36]	; (8003554 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE8allocateEjPKv+0x58>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d901      	bls.n	8003536 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8003532:	f004 fe69 	bl	8008208 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8003536:	f004 fe64 	bl	8008202 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	4613      	mov	r3, r2
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4618      	mov	r0, r3
 8003546:	f004 fe4b 	bl	80081e0 <_Znwj>
 800354a:	4603      	mov	r3, r0
      }
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	15555555 	.word	0x15555555

08003558 <_ZNSt5tupleIJRKaEEC1EOS2_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	4611      	mov	r1, r2
 8003568:	4618      	mov	r0, r3
 800356a:	f000 f919 	bl	80037a0 <_ZNSt11_Tuple_implILj0EJRKaEEC1EOS2_>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4618      	mov	r0, r3
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8003578:	b590      	push	{r4, r7, lr}
 800357a:	b089      	sub	sp, #36	; 0x24
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
 8003584:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7ff f95b 	bl	8002842 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800358c:	6838      	ldr	r0, [r7, #0]
 800358e:	f7ff f962 	bl	8002856 <_ZSt7forwardISt5tupleIJRKaEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8003592:	4602      	mov	r2, r0
 8003594:	f107 0318 	add.w	r3, r7, #24
 8003598:	4611      	mov	r1, r2
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff ffdc 	bl	8003558 <_ZNSt5tupleIJRKaEEC1EOS2_>
 80035a0:	f107 0418 	add.w	r4, r7, #24
 80035a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035a6:	f7ff f960 	bl	800286a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	4619      	mov	r1, r3
 80035ae:	2008      	movs	r0, #8
 80035b0:	f7fd fa56 	bl	8000a60 <_ZnwjPv>
 80035b4:	7f3b      	ldrb	r3, [r7, #28]
 80035b6:	4622      	mov	r2, r4
 80035b8:	7d39      	ldrb	r1, [r7, #20]
 80035ba:	f000 f900 	bl	80037be <_ZNSt4pairIKaP9BaseStateEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>
 80035be:	bf00      	nop
 80035c0:	3724      	adds	r7, #36	; 0x24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd90      	pop	{r4, r7, pc}

080035c6 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b084      	sub	sp, #16
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	60f8      	str	r0, [r7, #12]
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4619      	mov	r1, r3
 80035de:	68b8      	ldr	r0, [r7, #8]
 80035e0:	f004 fdfc 	bl	80081dc <_ZdlPvj>
      }
 80035e4:	bf00      	nop
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj>:
      _M_allocate_buckets(size_type __bkt_count)
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
	if (__builtin_expect(__bkt_count == 1, false))
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	bf0c      	ite	eq
 80035fc:	2301      	moveq	r3, #1
 80035fe:	2300      	movne	r3, #0
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d005      	beq.n	8003612 <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x26>
	    _M_single_bucket = nullptr;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	619a      	str	r2, [r3, #24]
	    return &_M_single_bucket;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3318      	adds	r3, #24
 8003610:	e005      	b.n	800361e <_ZNSt10_HashtableIaSt4pairIKaP9BaseStateESaIS4_ENSt8__detail10_Select1stESt8equal_toIaESt4hashIaENS6_18_Mod_range_hashingENS6_20_Default_ranged_hashENS6_20_Prime_rehash_policyENS6_17_Hashtable_traitsILb0ELb0ELb1EEEE19_M_allocate_bucketsEj+0x32>
	return __hashtable_alloc::_M_allocate_buckets(__bkt_count);
 8003612:	6839      	ldr	r1, [r7, #0]
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f8e6 	bl	80037e6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE19_M_allocate_bucketsEj>
 800361a:	4603      	mov	r3, r0
 800361c:	bf00      	nop
      }
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEPT_RS8_>:
    addressof(_Tp& __r) noexcept
 8003626:	b580      	push	{r7, lr}
 8003628:	b082      	sub	sp, #8
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f906 	bl	8003840 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEPT_RS8_>
 8003634:	4603      	mov	r3, r0
 8003636:	4618      	mov	r0, r3
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4618      	mov	r0, r3
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	bc80      	pop	{r7}
 8003650:	4770      	bx	lr

08003652 <_ZN9__gnu_cxx13new_allocatorINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEE9constructIS7_JRaS6_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8003652:	b5b0      	push	{r4, r5, r7, lr}
 8003654:	b084      	sub	sp, #16
 8003656:	af00      	add	r7, sp, #0
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	607a      	str	r2, [r7, #4]
 800365e:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7fe f8f9 	bl	8001858 <_ZSt7forwardIRaEOT_RNSt16remove_referenceIS1_E4typeE>
 8003666:	4604      	mov	r4, r0
 8003668:	6838      	ldr	r0, [r7, #0]
 800366a:	f7fe f8ff 	bl	800186c <_ZSt7forwardIP9BaseStateEOT_RNSt16remove_referenceIS2_E4typeE>
 800366e:	4605      	mov	r5, r0
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	4619      	mov	r1, r3
 8003674:	2008      	movs	r0, #8
 8003676:	f7fd f9f3 	bl	8000a60 <_ZnwjPv>
 800367a:	4603      	mov	r3, r0
 800367c:	462a      	mov	r2, r5
 800367e:	4621      	mov	r1, r4
 8003680:	4618      	mov	r0, r3
 8003682:	f000 f8e7 	bl	8003854 <_ZNSt4pairIKaP9BaseStateEC1IRaS2_Lb1EEEOT_OT0_>
 8003686:	bf00      	nop
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bdb0      	pop	{r4, r5, r7, pc}

0800368e <_ZNK9__gnu_cxx13new_allocatorIaE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800368e:	b580      	push	{r7, lr}
 8003690:	b082      	sub	sp, #8
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7ff fe81 	bl	800339e <_ZNK9__gnu_cxx13new_allocatorIaE11_M_max_sizeEv>
 800369c:	4603      	mov	r3, r0
 800369e:	4618      	mov	r0, r3
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <_ZSt12__miter_baseIPPaET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
    { return __it; }
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4618      	mov	r0, r3
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bc80      	pop	{r7}
 80036b8:	4770      	bx	lr

080036ba <_ZSt13__copy_move_aILb0EPPaS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80036ba:	b5b0      	push	{r4, r5, r7, lr}
 80036bc:	b084      	sub	sp, #16
 80036be:	af00      	add	r7, sp, #0
 80036c0:	60f8      	str	r0, [r7, #12]
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 f8de 	bl	8003888 <_ZSt12__niter_baseIPPaET_S2_>
 80036cc:	4604      	mov	r4, r0
 80036ce:	68b8      	ldr	r0, [r7, #8]
 80036d0:	f000 f8da 	bl	8003888 <_ZSt12__niter_baseIPPaET_S2_>
 80036d4:	4605      	mov	r5, r0
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4618      	mov	r0, r3
 80036da:	f000 f8d5 	bl	8003888 <_ZSt12__niter_baseIPPaET_S2_>
 80036de:	4603      	mov	r3, r0
 80036e0:	461a      	mov	r2, r3
 80036e2:	4629      	mov	r1, r5
 80036e4:	4620      	mov	r0, r4
 80036e6:	f000 f8d9 	bl	800389c <_ZSt14__copy_move_a1ILb0EPPaS1_ET1_T0_S3_S2_>
 80036ea:	4602      	mov	r2, r0
 80036ec:	1d3b      	adds	r3, r7, #4
 80036ee:	4611      	mov	r1, r2
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 f8e3 	bl	80038bc <_ZSt12__niter_wrapIPPaET_RKS2_S2_>
 80036f6:	4603      	mov	r3, r0
    }
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bdb0      	pop	{r4, r5, r7, pc}

08003700 <_ZSt22__copy_move_backward_aILb0EPPaS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8003700:	b5b0      	push	{r4, r5, r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 f8bb 	bl	8003888 <_ZSt12__niter_baseIPPaET_S2_>
 8003712:	4604      	mov	r4, r0
 8003714:	68b8      	ldr	r0, [r7, #8]
 8003716:	f000 f8b7 	bl	8003888 <_ZSt12__niter_baseIPPaET_S2_>
 800371a:	4605      	mov	r5, r0
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4618      	mov	r0, r3
 8003720:	f000 f8b2 	bl	8003888 <_ZSt12__niter_baseIPPaET_S2_>
 8003724:	4603      	mov	r3, r0
 8003726:	461a      	mov	r2, r3
 8003728:	4629      	mov	r1, r5
 800372a:	4620      	mov	r0, r4
 800372c:	f000 f8d1 	bl	80038d2 <_ZSt23__copy_move_backward_a1ILb0EPPaS1_ET1_T0_S3_S2_>
 8003730:	4602      	mov	r2, r0
 8003732:	1d3b      	adds	r3, r7, #4
 8003734:	4611      	mov	r1, r2
 8003736:	4618      	mov	r0, r3
 8003738:	f000 f8c0 	bl	80038bc <_ZSt12__niter_wrapIPPaET_RKS2_S2_>
 800373c:	4603      	mov	r3, r0
    }
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bdb0      	pop	{r4, r5, r7, pc}

08003746 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIaELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 8003746:	b480      	push	{r7}
 8003748:	b083      	sub	sp, #12
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4618      	mov	r0, r3
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr

0800375a <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKaP9BaseStateEE9_M_valptrEv>:
      _M_valptr() const noexcept
 800375a:	b580      	push	{r7, lr}
 800375c:	b082      	sub	sp, #8
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4618      	mov	r0, r3
 8003766:	f000 f8c4 	bl	80038f2 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKaP9BaseStateEE6_M_ptrEv>
 800376a:	4603      	mov	r3, r0
 800376c:	4618      	mov	r0, r3
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <_ZSt7forwardIRKSt4pairIKaP9BaseStateEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4618      	mov	r0, r3
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	bc80      	pop	{r7}
 8003786:	4770      	bx	lr

08003788 <_ZSt3getILj0EKaP9BaseStateERKNSt13tuple_elementIXT_ESt4pairIT0_T1_EE4typeERKS7_>:
    get(pair<_Tp1, _Tp2>&& __in) noexcept
    { return __pair_get<_Int>::__move_get(std::move(__in)); }

  template<size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&
    get(const pair<_Tp1, _Tp2>& __in) noexcept
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
    { return __pair_get<_Int>::__const_get(__in); }
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f8ba 	bl	800390a <_ZNSt10__pair_getILj0EE11__const_getIKaP9BaseStateEERKT_RKSt4pairIS5_T0_E>
 8003796:	4603      	mov	r3, r0
 8003798:	4618      	mov	r0, r3
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <_ZNSt11_Tuple_implILj0EJRKaEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	601a      	str	r2, [r3, #0]
      { }
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4618      	mov	r0, r3
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bc80      	pop	{r7}
 80037bc:	4770      	bx	lr

080037be <_ZNSt4pairIKaP9BaseStateEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>:
  */
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      _GLIBCXX20_CONSTEXPR
      inline
      pair<_T1, _T2>::
 80037be:	b5b0      	push	{r4, r5, r7, lr}
 80037c0:	b086      	sub	sp, #24
 80037c2:	af02      	add	r7, sp, #8
 80037c4:	60f8      	str	r0, [r7, #12]
 80037c6:	7239      	strb	r1, [r7, #8]
 80037c8:	607a      	str	r2, [r7, #4]
 80037ca:	703b      	strb	r3, [r7, #0]
      pair(piecewise_construct_t,
	   tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 80037cc:	463a      	mov	r2, r7
 80037ce:	f88d 4000 	strb.w	r4, [sp]
 80037d2:	462b      	mov	r3, r5
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 f8a1 	bl	800391e <_ZNSt4pairIKaP9BaseStateEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>
      { }
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bdb0      	pop	{r4, r5, r7, pc}

080037e6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE19_M_allocate_bucketsEj>:
    _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __bkt_count)
 80037e6:	b590      	push	{r4, r7, lr}
 80037e8:	b087      	sub	sp, #28
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
 80037ee:	6039      	str	r1, [r7, #0]
      __buckets_alloc_type __alloc(_M_node_allocator());
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7ff f984 	bl	8002afe <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEE17_M_node_allocatorEv>
 80037f6:	4602      	mov	r2, r0
 80037f8:	f107 030c 	add.w	r3, r7, #12
 80037fc:	4611      	mov	r1, r2
 80037fe:	4618      	mov	r0, r3
 8003800:	f7ff f9b8 	bl	8002b74 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEERKSaIT_E>
      auto __ptr = __buckets_alloc_traits::allocate(__alloc, __bkt_count);
 8003804:	f107 030c 	add.w	r3, r7, #12
 8003808:	6839      	ldr	r1, [r7, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f000 f8a2 	bl	8003954 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>
 8003810:	6178      	str	r0, [r7, #20]
      __buckets_ptr __p = std::__to_address(__ptr);
 8003812:	6978      	ldr	r0, [r7, #20]
 8003814:	f000 f8ad 	bl	8003972 <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>
 8003818:	6138      	str	r0, [r7, #16]
      __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	4610      	mov	r0, r2
 8003822:	461a      	mov	r2, r3
 8003824:	2100      	movs	r1, #0
 8003826:	f004 ffa9 	bl	800877c <memset>
      return __p;
 800382a:	693c      	ldr	r4, [r7, #16]
    }
 800382c:	f107 030c 	add.w	r3, r7, #12
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff f9ac 	bl	8002b8e <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
      return __p;
 8003836:	4623      	mov	r3, r4
    }
 8003838:	4618      	mov	r0, r3
 800383a:	371c      	adds	r7, #28
 800383c:	46bd      	mov	sp, r7
 800383e:	bd90      	pop	{r4, r7, pc}

08003840 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKaP9BaseStateELb0EEEEPT_RS8_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4618      	mov	r0, r3
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	bc80      	pop	{r7}
 8003852:	4770      	bx	lr

08003854 <_ZNSt4pairIKaP9BaseStateEC1IRaS2_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8003860:	68b8      	ldr	r0, [r7, #8]
 8003862:	f7fd fff9 	bl	8001858 <_ZSt7forwardIRaEOT_RNSt16remove_referenceIS1_E4typeE>
 8003866:	4603      	mov	r3, r0
 8003868:	f993 2000 	ldrsb.w	r2, [r3]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	701a      	strb	r2, [r3, #0]
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f7fd fffb 	bl	800186c <_ZSt7forwardIP9BaseStateEOT_RNSt16remove_referenceIS2_E4typeE>
 8003876:	4603      	mov	r3, r0
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	605a      	str	r2, [r3, #4]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <_ZSt12__niter_baseIPPaET_S2_>:
    __niter_base(_Iterator __it)
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4618      	mov	r0, r3
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	bc80      	pop	{r7}
 800389a:	4770      	bx	lr

0800389c <_ZSt14__copy_move_a1ILb0EPPaS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	68b9      	ldr	r1, [r7, #8]
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 f86a 	bl	8003986 <_ZSt14__copy_move_a2ILb0EPPaS1_ET1_T0_S3_S2_>
 80038b2:	4603      	mov	r3, r0
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <_ZSt12__niter_wrapIPPaET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
    { return __res; }
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bc80      	pop	{r7}
 80038d0:	4770      	bx	lr

080038d2 <_ZSt23__copy_move_backward_a1ILb0EPPaS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b084      	sub	sp, #16
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	60f8      	str	r0, [r7, #12]
 80038da:	60b9      	str	r1, [r7, #8]
 80038dc:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	68b9      	ldr	r1, [r7, #8]
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 f85f 	bl	80039a6 <_ZSt23__copy_move_backward_a2ILb0EPPaS1_ET1_T0_S3_S2_>
 80038e8:	4603      	mov	r3, r0
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKaP9BaseStateEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b082      	sub	sp, #8
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f863 	bl	80039c6 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKaP9BaseStateEE7_M_addrEv>
 8003900:	4603      	mov	r3, r0
 8003902:	4618      	mov	r0, r3
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <_ZNSt10__pair_getILj0EE11__const_getIKaP9BaseStateEERKT_RKSt4pairIS5_T0_E>:
	__const_get(const pair<_Tp1, _Tp2>& __pair) noexcept
 800390a:	b480      	push	{r7}
 800390c:	b083      	sub	sp, #12
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
	{ return __pair.first; }
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4618      	mov	r0, r3
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	bc80      	pop	{r7}
 800391c:	4770      	bx	lr

0800391e <_ZNSt4pairIKaP9BaseStateEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, size_t... _Indexes1,
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 800391e:	b580      	push	{r7, lr}
 8003920:	b084      	sub	sp, #16
 8003922:	af00      	add	r7, sp, #0
 8003924:	60f8      	str	r0, [r7, #12]
 8003926:	60b9      	str	r1, [r7, #8]
 8003928:	607a      	str	r2, [r7, #4]
 800392a:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 800392c:	68b8      	ldr	r0, [r7, #8]
 800392e:	f000 f854 	bl	80039da <_ZSt3getILj0EJRKaEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 8003932:	4603      	mov	r3, r0
 8003934:	4618      	mov	r0, r3
 8003936:	f7fe fe93 	bl	8002660 <_ZSt7forwardIRKaEOT_RNSt16remove_referenceIS2_E4typeE>
 800393a:	4603      	mov	r3, r0
 800393c:	f993 2000 	ldrsb.w	r2, [r3]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	701a      	strb	r2, [r3, #0]
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	605a      	str	r2, [r3, #4]
      { }
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	4618      	mov	r0, r3
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800395e:	2200      	movs	r2, #0
 8003960:	6839      	ldr	r1, [r7, #0]
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f851 	bl	8003a0a <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv>
 8003968:	4603      	mov	r3, r0
 800396a:	4618      	mov	r0, r3
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>:
    __to_address(_Tp* __ptr) noexcept
 8003972:	b480      	push	{r7}
 8003974:	b083      	sub	sp, #12
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
      return __ptr;
 800397a:	687b      	ldr	r3, [r7, #4]
    }
 800397c:	4618      	mov	r0, r3
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	bc80      	pop	{r7}
 8003984:	4770      	bx	lr

08003986 <_ZSt14__copy_move_a2ILb0EPPaS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8003986:	b580      	push	{r7, lr}
 8003988:	b084      	sub	sp, #16
 800398a:	af00      	add	r7, sp, #0
 800398c:	60f8      	str	r0, [r7, #12]
 800398e:	60b9      	str	r1, [r7, #8]
 8003990:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	68b9      	ldr	r1, [r7, #8]
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 f860 	bl	8003a5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPaEEPT_PKS4_S7_S5_>
 800399c:	4603      	mov	r3, r0
    }
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <_ZSt23__copy_move_backward_a2ILb0EPPaS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b084      	sub	sp, #16
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	60f8      	str	r0, [r7, #12]
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	68b9      	ldr	r1, [r7, #8]
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 f86d 	bl	8003a96 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPaEEPT_PKS4_S7_S5_>
 80039bc:	4603      	mov	r3, r0
    }
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIKaP9BaseStateEE7_M_addrEv>:
      _M_addr() const noexcept
 80039c6:	b480      	push	{r7}
 80039c8:	b083      	sub	sp, #12
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
        return static_cast<const void*>(&_M_storage);
 80039ce:	687b      	ldr	r3, [r7, #4]
      }
 80039d0:	4618      	mov	r0, r3
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bc80      	pop	{r7}
 80039d8:	4770      	bx	lr

080039da <_ZSt3getILj0EJRKaEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 80039da:	b580      	push	{r7, lr}
 80039dc:	b082      	sub	sp, #8
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 f878 	bl	8003ada <_ZSt12__get_helperILj0ERKaJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 80039ea:	4603      	mov	r3, r0
 80039ec:	4618      	mov	r0, r3
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <_ZNK9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80039fc:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8003a00:	4618      	mov	r0, r3
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bc80      	pop	{r7}
 8003a08:	4770      	bx	lr

08003a0a <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b084      	sub	sp, #16
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	60f8      	str	r0, [r7, #12]
 8003a12:	60b9      	str	r1, [r7, #8]
 8003a14:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f7ff ffec 	bl	80039f4 <_ZNK9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE11_M_max_sizeEv>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	4293      	cmp	r3, r2
 8003a22:	bf8c      	ite	hi
 8003a24:	2301      	movhi	r3, #1
 8003a26:	2300      	movls	r3, #0
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	bf14      	ite	ne
 8003a2e:	2301      	movne	r3, #1
 8003a30:	2300      	moveq	r3, #0
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d007      	beq.n	8003a48 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3e:	d301      	bcc.n	8003a44 <_ZN9__gnu_cxx13new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8003a40:	f004 fbe2 	bl	8008208 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8003a44:	f004 fbdd 	bl	8008202 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f004 fbc7 	bl	80081e0 <_Znwj>
 8003a52:	4603      	mov	r3, r0
      }
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPaEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	109b      	asrs	r3, r3, #2
 8003a70:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d006      	beq.n	8003a86 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPaEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	68f9      	ldr	r1, [r7, #12]
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f004 fe61 	bl	8008748 <memmove>
	  return __result + _Num;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	4413      	add	r3, r2
	}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPaEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b086      	sub	sp, #24
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	60f8      	str	r0, [r7, #12]
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	109b      	asrs	r3, r3, #2
 8003aaa:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPaEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	425b      	negs	r3, r3
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	18d0      	adds	r0, r2, r3
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	68f9      	ldr	r1, [r7, #12]
 8003ac4:	f004 fe40 	bl	8008748 <memmove>
	  return __result - _Num;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	425b      	negs	r3, r3
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	4413      	add	r3, r2
	}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3718      	adds	r7, #24
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <_ZSt12__get_helperILj0ERKaJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b082      	sub	sp, #8
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f805 	bl	8003af2 <_ZNSt11_Tuple_implILj0EJRKaEE7_M_headERS2_>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	4618      	mov	r0, r3
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <_ZNSt11_Tuple_implILj0EJRKaEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b082      	sub	sp, #8
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f000 f805 	bl	8003b0c <_ZNSt10_Head_baseILj0ERKaLb0EE7_M_headERS2_>
 8003b02:	4603      	mov	r3, r0
 8003b04:	4618      	mov	r0, r3
 8003b06:	3708      	adds	r7, #8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <_ZNSt10_Head_baseILj0ERKaLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bc80      	pop	{r7}
 8003b20:	4770      	bx	lr

08003b22 <_Z12stateOsDelaym>:
void f_stateWhaitTimer();

void f_choiseBlink();

void stateOsDelay(uint32_t delay)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b082      	sub	sp, #8
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
	osDelay(delay);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f001 fe04 	bl	8005738 <osDelay>
}
 8003b30:	bf00      	nop
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	fsm1.setDelayFunctionPointer(&stateOsDelay); // Установка указателя на внешнюю функцию
 8003b3c:	491f      	ldr	r1, [pc, #124]	; (8003bbc <main+0x84>)
 8003b3e:	4820      	ldr	r0, [pc, #128]	; (8003bc0 <main+0x88>)
 8003b40:	f7fd fbcd 	bl	80012de <_ZN18FiniteStateMachine23setDelayFunctionPointerEPFvmE>

	fsm1.setStartState(STATE_BLINK_SHORT);
 8003b44:	2102      	movs	r1, #2
 8003b46:	481e      	ldr	r0, [pc, #120]	; (8003bc0 <main+0x88>)
 8003b48:	f7fd fb71 	bl	800122e <_ZN18FiniteStateMachine13setStartStateEa>
	fsm2.setStartState(STATE_WHAIT_TIMER);
 8003b4c:	2105      	movs	r1, #5
 8003b4e:	481d      	ldr	r0, [pc, #116]	; (8003bc4 <main+0x8c>)
 8003b50:	f7fd fb6d 	bl	800122e <_ZN18FiniteStateMachine13setStartStateEa>
	stateWhaitTimer.addEvent(EVENT_TYMER_UPDATE, STATE_CHOISE_BLINK);
 8003b54:	2206      	movs	r2, #6
 8003b56:	2101      	movs	r1, #1
 8003b58:	481b      	ldr	r0, [pc, #108]	; (8003bc8 <main+0x90>)
 8003b5a:	f7fd fa81 	bl	8001060 <_ZN11EventStates8addEventEaa>
	stateChoiseBlink.addChoise(CHOISE_GO_BLINK, STATE_BLINK_REAL);
 8003b5e:	2204      	movs	r2, #4
 8003b60:	2100      	movs	r1, #0
 8003b62:	481a      	ldr	r0, [pc, #104]	; (8003bcc <main+0x94>)
 8003b64:	f7fd f9a0 	bl	8000ea8 <_ZN12ChoiseStates9addChoiseEaa>
	stateChoiseBlink.addChoise(CHOISE_WHAIT, STATE_WHAIT_TIMER);
 8003b68:	2205      	movs	r2, #5
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	4817      	ldr	r0, [pc, #92]	; (8003bcc <main+0x94>)
 8003b6e:	f7fd f99b 	bl	8000ea8 <_ZN12ChoiseStates9addChoiseEaa>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b72:	f000 fb93 	bl	800429c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b76:	f000 f83d 	bl	8003bf4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b7a:	f000 f881 	bl	8003c80 <_ZL12MX_GPIO_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003b7e:	f001 fccb 	bl	8005518 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of myTimer */
  myTimerHandle = osTimerNew(TimerCallback, osTimerPeriodic, NULL, &myTimer_attributes);
 8003b82:	4b13      	ldr	r3, [pc, #76]	; (8003bd0 <main+0x98>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	2101      	movs	r1, #1
 8003b88:	4812      	ldr	r0, [pc, #72]	; (8003bd4 <main+0x9c>)
 8003b8a:	f001 fe19 	bl	80057c0 <osTimerNew>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	4a11      	ldr	r2, [pc, #68]	; (8003bd8 <main+0xa0>)
 8003b92:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskFSM1 */
  TaskFSM1Handle = osThreadNew(fTaskFSM1, NULL, &TaskFSM1_attributes);
 8003b94:	4a11      	ldr	r2, [pc, #68]	; (8003bdc <main+0xa4>)
 8003b96:	2100      	movs	r1, #0
 8003b98:	4811      	ldr	r0, [pc, #68]	; (8003be0 <main+0xa8>)
 8003b9a:	f001 fd23 	bl	80055e4 <osThreadNew>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	4a10      	ldr	r2, [pc, #64]	; (8003be4 <main+0xac>)
 8003ba2:	6013      	str	r3, [r2, #0]

  /* creation of TaskFSM2 */
  TaskFSM2Handle = osThreadNew(fTaskFSM2, NULL, &TaskFSM2_attributes);
 8003ba4:	4a10      	ldr	r2, [pc, #64]	; (8003be8 <main+0xb0>)
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	4810      	ldr	r0, [pc, #64]	; (8003bec <main+0xb4>)
 8003baa:	f001 fd1b 	bl	80055e4 <osThreadNew>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	4a0f      	ldr	r2, [pc, #60]	; (8003bf0 <main+0xb8>)
 8003bb2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003bb4:	f001 fce2 	bl	800557c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003bb8:	e7fe      	b.n	8003bb8 <main+0x80>
 8003bba:	bf00      	nop
 8003bbc:	08003b23 	.word	0x08003b23
 8003bc0:	20000574 	.word	0x20000574
 8003bc4:	20000610 	.word	0x20000610
 8003bc8:	2000069c 	.word	0x2000069c
 8003bcc:	200006bc 	.word	0x200006bc
 8003bd0:	08008a68 	.word	0x08008a68
 8003bd4:	08003eb9 	.word	0x08003eb9
 8003bd8:	2000053c 	.word	0x2000053c
 8003bdc:	08008a20 	.word	0x08008a20
 8003be0:	08003e81 	.word	0x08003e81
 8003be4:	2000007c 	.word	0x2000007c
 8003be8:	08008a44 	.word	0x08008a44
 8003bec:	08003e9d 	.word	0x08003e9d
 8003bf0:	200002dc 	.word	0x200002dc

08003bf4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b090      	sub	sp, #64	; 0x40
 8003bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003bfa:	f107 0318 	add.w	r3, r7, #24
 8003bfe:	2228      	movs	r2, #40	; 0x28
 8003c00:	2100      	movs	r1, #0
 8003c02:	4618      	mov	r0, r3
 8003c04:	f004 fdba 	bl	800877c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c08:	1d3b      	adds	r3, r7, #4
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	605a      	str	r2, [r3, #4]
 8003c10:	609a      	str	r2, [r3, #8]
 8003c12:	60da      	str	r2, [r3, #12]
 8003c14:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003c16:	2302      	movs	r3, #2
 8003c18:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003c1e:	2310      	movs	r3, #16
 8003c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003c22:	2300      	movs	r3, #0
 8003c24:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c26:	f107 0318 	add.w	r3, r7, #24
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 fdfe 	bl	800482c <HAL_RCC_OscConfig>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	bf14      	ite	ne
 8003c36:	2301      	movne	r3, #1
 8003c38:	2300      	moveq	r3, #0
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <_Z18SystemClock_Configv+0x50>
  {
    Error_Handler();
 8003c40:	f000 f95a 	bl	8003ef8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c44:	230f      	movs	r3, #15
 8003c46:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003c50:	2300      	movs	r3, #0
 8003c52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c54:	2300      	movs	r3, #0
 8003c56:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003c58:	1d3b      	adds	r3, r7, #4
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f001 f867 	bl	8004d30 <HAL_RCC_ClockConfig>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	bf14      	ite	ne
 8003c68:	2301      	movne	r3, #1
 8003c6a:	2300      	moveq	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <_Z18SystemClock_Configv+0x82>
  {
    Error_Handler();
 8003c72:	f000 f941 	bl	8003ef8 <Error_Handler>
  }
}
 8003c76:	bf00      	nop
 8003c78:	3740      	adds	r7, #64	; 0x40
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
	...

08003c80 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c86:	f107 0308 	add.w	r3, r7, #8
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	605a      	str	r2, [r3, #4]
 8003c90:	609a      	str	r2, [r3, #8]
 8003c92:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c94:	4b18      	ldr	r3, [pc, #96]	; (8003cf8 <_ZL12MX_GPIO_Initv+0x78>)
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	4a17      	ldr	r2, [pc, #92]	; (8003cf8 <_ZL12MX_GPIO_Initv+0x78>)
 8003c9a:	f043 0310 	orr.w	r3, r3, #16
 8003c9e:	6193      	str	r3, [r2, #24]
 8003ca0:	4b15      	ldr	r3, [pc, #84]	; (8003cf8 <_ZL12MX_GPIO_Initv+0x78>)
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	f003 0310 	and.w	r3, r3, #16
 8003ca8:	607b      	str	r3, [r7, #4]
 8003caa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cac:	4b12      	ldr	r3, [pc, #72]	; (8003cf8 <_ZL12MX_GPIO_Initv+0x78>)
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	4a11      	ldr	r2, [pc, #68]	; (8003cf8 <_ZL12MX_GPIO_Initv+0x78>)
 8003cb2:	f043 0304 	orr.w	r3, r3, #4
 8003cb6:	6193      	str	r3, [r2, #24]
 8003cb8:	4b0f      	ldr	r3, [pc, #60]	; (8003cf8 <_ZL12MX_GPIO_Initv+0x78>)
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	603b      	str	r3, [r7, #0]
 8003cc2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003cca:	480c      	ldr	r0, [pc, #48]	; (8003cfc <_ZL12MX_GPIO_Initv+0x7c>)
 8003ccc:	f000 fd7c 	bl	80047c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003cd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cd4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cde:	2302      	movs	r3, #2
 8003ce0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ce2:	f107 0308 	add.w	r3, r7, #8
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	4804      	ldr	r0, [pc, #16]	; (8003cfc <_ZL12MX_GPIO_Initv+0x7c>)
 8003cea:	f000 fbe9 	bl	80044c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003cee:	bf00      	nop
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	40011000 	.word	0x40011000

08003d00 <_Z17f_stateBlinkShortv>:

/* USER CODE BEGIN 4 */
void f_stateBlinkShort()
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
	const uint32_t xFrequency = 500; // 500 миллисекунд
 8003d06:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003d0a:	60fb      	str	r3, [r7, #12]
	const TickType_t xTransitionTime = pdMS_TO_TICKS(6000); // 6 секунд
 8003d0c:	f241 7370 	movw	r3, #6000	; 0x1770
 8003d10:	60bb      	str	r3, [r7, #8]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8003d12:	f002 febd 	bl	8006a90 <xTaskGetTickCount>
 8003d16:	6078      	str	r0, [r7, #4]
	while((xTaskGetTickCount() - xLastWakeTime) < xTransitionTime)
 8003d18:	e008      	b.n	8003d2c <_Z17f_stateBlinkShortv+0x2c>
	{
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Выполнение действий для состояния 1
 8003d1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d1e:	480e      	ldr	r0, [pc, #56]	; (8003d58 <_Z17f_stateBlinkShortv+0x58>)
 8003d20:	f000 fd6a 	bl	80047f8 <HAL_GPIO_TogglePin>
	osDelay(xFrequency); // Задержка в тиках времени FreeRTOS
 8003d24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d28:	f001 fd06 	bl	8005738 <osDelay>
	while((xTaskGetTickCount() - xLastWakeTime) < xTransitionTime)
 8003d2c:	f002 feb0 	bl	8006a90 <xTaskGetTickCount>
 8003d30:	4602      	mov	r2, r0
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	f241 726f 	movw	r2, #5999	; 0x176f
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	bf94      	ite	ls
 8003d3e:	2301      	movls	r3, #1
 8003d40:	2300      	movhi	r3, #0
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1e8      	bne.n	8003d1a <_Z17f_stateBlinkShortv+0x1a>
	}
	fsm1.next();
 8003d48:	4804      	ldr	r0, [pc, #16]	; (8003d5c <_Z17f_stateBlinkShortv+0x5c>)
 8003d4a:	f7fd faa4 	bl	8001296 <_ZN18FiniteStateMachine4nextEv>
	//fsm1.pState->end();
}
 8003d4e:	bf00      	nop
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	40011000 	.word	0x40011000
 8003d5c:	20000574 	.word	0x20000574

08003d60 <_Z16f_stateBlinkLongv>:

void f_stateBlinkLong()
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
	const uint32_t xFrequency = 1000; // 500 миллисекунд
 8003d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d6a:	60fb      	str	r3, [r7, #12]
	const TickType_t xTransitionTime = pdMS_TO_TICKS(6000); // 6 секунд
 8003d6c:	f241 7370 	movw	r3, #6000	; 0x1770
 8003d70:	60bb      	str	r3, [r7, #8]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8003d72:	f002 fe8d 	bl	8006a90 <xTaskGetTickCount>
 8003d76:	6078      	str	r0, [r7, #4]
	while((xTaskGetTickCount() - xLastWakeTime) < xTransitionTime)
 8003d78:	e008      	b.n	8003d8c <_Z16f_stateBlinkLongv+0x2c>
	{
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Выполнение действий для состояния 1
 8003d7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d7e:	480e      	ldr	r0, [pc, #56]	; (8003db8 <_Z16f_stateBlinkLongv+0x58>)
 8003d80:	f000 fd3a 	bl	80047f8 <HAL_GPIO_TogglePin>
	osDelay(xFrequency); // Задержка в тиках времени FreeRTOS
 8003d84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d88:	f001 fcd6 	bl	8005738 <osDelay>
	while((xTaskGetTickCount() - xLastWakeTime) < xTransitionTime)
 8003d8c:	f002 fe80 	bl	8006a90 <xTaskGetTickCount>
 8003d90:	4602      	mov	r2, r0
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	f241 726f 	movw	r2, #5999	; 0x176f
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	bf94      	ite	ls
 8003d9e:	2301      	movls	r3, #1
 8003da0:	2300      	movhi	r3, #0
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1e8      	bne.n	8003d7a <_Z16f_stateBlinkLongv+0x1a>
	}
	fsm1.next();
 8003da8:	4804      	ldr	r0, [pc, #16]	; (8003dbc <_Z16f_stateBlinkLongv+0x5c>)
 8003daa:	f7fd fa74 	bl	8001296 <_ZN18FiniteStateMachine4nextEv>
}
 8003dae:	bf00      	nop
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40011000 	.word	0x40011000
 8003dbc:	20000574 	.word	0x20000574

08003dc0 <_Z16f_stateBlinkRealv>:

void f_stateBlinkReal()
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
	const uint32_t xFrequency = 100; // 100 миллисекунд
 8003dc6:	2364      	movs	r3, #100	; 0x64
 8003dc8:	60fb      	str	r3, [r7, #12]
	const TickType_t xTransitionTime = pdMS_TO_TICKS(2000); // 2 секунд
 8003dca:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003dce:	60bb      	str	r3, [r7, #8]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8003dd0:	f002 fe5e 	bl	8006a90 <xTaskGetTickCount>
 8003dd4:	6078      	str	r0, [r7, #4]
	  while((xTaskGetTickCount() - xLastWakeTime) < xTransitionTime)
 8003dd6:	e007      	b.n	8003de8 <_Z16f_stateBlinkRealv+0x28>
	  {
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Выполнение действий для состояния 1
 8003dd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ddc:	480d      	ldr	r0, [pc, #52]	; (8003e14 <_Z16f_stateBlinkRealv+0x54>)
 8003dde:	f000 fd0b 	bl	80047f8 <HAL_GPIO_TogglePin>
		  osDelay(xFrequency); // Задержка в тиках времени FreeRTOS
 8003de2:	2064      	movs	r0, #100	; 0x64
 8003de4:	f001 fca8 	bl	8005738 <osDelay>
	  while((xTaskGetTickCount() - xLastWakeTime) < xTransitionTime)
 8003de8:	f002 fe52 	bl	8006a90 <xTaskGetTickCount>
 8003dec:	4602      	mov	r2, r0
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003df6:	4293      	cmp	r3, r2
 8003df8:	bf94      	ite	ls
 8003dfa:	2301      	movls	r3, #1
 8003dfc:	2300      	movhi	r3, #0
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1e9      	bne.n	8003dd8 <_Z16f_stateBlinkRealv+0x18>
	  }
	 fsm2.next();
 8003e04:	4804      	ldr	r0, [pc, #16]	; (8003e18 <_Z16f_stateBlinkRealv+0x58>)
 8003e06:	f7fd fa46 	bl	8001296 <_ZN18FiniteStateMachine4nextEv>

}
 8003e0a:	bf00      	nop
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40011000 	.word	0x40011000
 8003e18:	20000610 	.word	0x20000610

08003e1c <_Z17f_stateWhaitTimerv>:

void f_stateWhaitTimer()
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
	osTimerStart(myTimerHandle, pdMS_TO_TICKS(10000));
 8003e20:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <_Z17f_stateWhaitTimerv+0x1c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f242 7110 	movw	r1, #10000	; 0x2710
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f001 fd4d 	bl	80058c8 <osTimerStart>


	fsm2.next();
 8003e2e:	4803      	ldr	r0, [pc, #12]	; (8003e3c <_Z17f_stateWhaitTimerv+0x20>)
 8003e30:	f7fd fa31 	bl	8001296 <_ZN18FiniteStateMachine4nextEv>

}
 8003e34:	bf00      	nop
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	2000053c 	.word	0x2000053c
 8003e3c:	20000610 	.word	0x20000610

08003e40 <_Z13f_choiseBlinkv>:

void f_choiseBlink()
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
	if(countRealBlink>3)
 8003e44:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <_Z13f_choiseBlinkv+0x34>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b03      	cmp	r3, #3
 8003e4a:	dd04      	ble.n	8003e56 <_Z13f_choiseBlinkv+0x16>
		stateChoiseBlink.setChoise(CHOISE_WHAIT);
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	480a      	ldr	r0, [pc, #40]	; (8003e78 <_Z13f_choiseBlinkv+0x38>)
 8003e50:	f7fd f841 	bl	8000ed6 <_ZN12ChoiseStates9setChoiseEa>
 8003e54:	e008      	b.n	8003e68 <_Z13f_choiseBlinkv+0x28>
	else
	{
		stateChoiseBlink.setChoise(CHOISE_GO_BLINK);
 8003e56:	2100      	movs	r1, #0
 8003e58:	4807      	ldr	r0, [pc, #28]	; (8003e78 <_Z13f_choiseBlinkv+0x38>)
 8003e5a:	f7fd f83c 	bl	8000ed6 <_ZN12ChoiseStates9setChoiseEa>
		++countRealBlink;
 8003e5e:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <_Z13f_choiseBlinkv+0x34>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	3301      	adds	r3, #1
 8003e64:	4a03      	ldr	r2, [pc, #12]	; (8003e74 <_Z13f_choiseBlinkv+0x34>)
 8003e66:	6013      	str	r3, [r2, #0]
	}
	fsm2.next();
 8003e68:	4804      	ldr	r0, [pc, #16]	; (8003e7c <_Z13f_choiseBlinkv+0x3c>)
 8003e6a:	f7fd fa14 	bl	8001296 <_ZN18FiniteStateMachine4nextEv>
}
 8003e6e:	bf00      	nop
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	20000570 	.word	0x20000570
 8003e78:	200006bc 	.word	0x200006bc
 8003e7c:	20000610 	.word	0x20000610

08003e80 <_Z9fTaskFSM1Pv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_fTaskFSM1 */
void fTaskFSM1(void *argument)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
fsm1.stateMachine();
 8003e88:	4803      	ldr	r0, [pc, #12]	; (8003e98 <_Z9fTaskFSM1Pv+0x18>)
 8003e8a:	f7fd f9df 	bl	800124c <_ZN18FiniteStateMachine12stateMachineEv>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8003e8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e92:	f001 fc51 	bl	8005738 <osDelay>
 8003e96:	e7fa      	b.n	8003e8e <_Z9fTaskFSM1Pv+0xe>
 8003e98:	20000574 	.word	0x20000574

08003e9c <_Z9fTaskFSM2Pv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTaskFSM2 */
void fTaskFSM2(void *argument)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTaskFSM2 */
fsm2.stateMachine();
 8003ea4:	4803      	ldr	r0, [pc, #12]	; (8003eb4 <_Z9fTaskFSM2Pv+0x18>)
 8003ea6:	f7fd f9d1 	bl	800124c <_ZN18FiniteStateMachine12stateMachineEv>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8003eaa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003eae:	f001 fc43 	bl	8005738 <osDelay>
 8003eb2:	e7fa      	b.n	8003eaa <_Z9fTaskFSM2Pv+0xe>
 8003eb4:	20000610 	.word	0x20000610

08003eb8 <_Z13TimerCallbackPv>:
  /* USER CODE END fTaskFSM2 */
}

/* TimerCallback function */
void TimerCallback(void *argument)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TimerCallback */
fsm2.sendEvent(EVENT_TYMER_UPDATE);
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	4803      	ldr	r0, [pc, #12]	; (8003ed0 <_Z13TimerCallbackPv+0x18>)
 8003ec4:	f7fd f9a2 	bl	800120c <_ZN18FiniteStateMachine9sendEventEa>
  /* USER CODE END TimerCallback */
}
 8003ec8:	bf00      	nop
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	20000610 	.word	0x20000610

08003ed4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a04      	ldr	r2, [pc, #16]	; (8003ef4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d101      	bne.n	8003eea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003ee6:	f000 f9ef 	bl	80042c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003eea:	bf00      	nop
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40000800 	.word	0x40000800

08003ef8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003efc:	b672      	cpsid	i
}
 8003efe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f00:	e7fe      	b.n	8003f00 <Error_Handler+0x8>
	...

08003f04 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af02      	add	r7, sp, #8
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d12e      	bne.n	8003f72 <_Z41__static_initialization_and_destruction_0ii+0x6e>
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d129      	bne.n	8003f72 <_Z41__static_initialization_and_destruction_0ii+0x6e>
FiniteStateMachine fsm1;
 8003f1e:	481e      	ldr	r0, [pc, #120]	; (8003f98 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8003f20:	f7fc ff10 	bl	8000d44 <_ZN18FiniteStateMachineC1Ev>
StandardStates stateBlinkShort= fsm1.createStateStandart(STATE_BLINK_SHORT, STATE_BLINK_LONG, f_stateBlinkShort);
 8003f24:	481d      	ldr	r0, [pc, #116]	; (8003f9c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8003f26:	4b1e      	ldr	r3, [pc, #120]	; (8003fa0 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	2202      	movs	r2, #2
 8003f2e:	491a      	ldr	r1, [pc, #104]	; (8003f98 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8003f30:	f7fd f92d 	bl	800118e <_ZN18FiniteStateMachine19createStateStandartEaaPFvvE>
StandardStates stateBlinkLong = fsm1.createStateStandart(STATE_BLINK_LONG, STATE_BLINK_SHORT, f_stateBlinkLong);
 8003f34:	481b      	ldr	r0, [pc, #108]	; (8003fa4 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8003f36:	4b1c      	ldr	r3, [pc, #112]	; (8003fa8 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	2203      	movs	r2, #3
 8003f3e:	4916      	ldr	r1, [pc, #88]	; (8003f98 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8003f40:	f7fd f925 	bl	800118e <_ZN18FiniteStateMachine19createStateStandartEaaPFvvE>
FiniteStateMachine fsm2;
 8003f44:	4819      	ldr	r0, [pc, #100]	; (8003fac <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8003f46:	f7fc fefd 	bl	8000d44 <_ZN18FiniteStateMachineC1Ev>
StandardStates stateBlinkReal= fsm2.createStateStandart(STATE_BLINK_REAL, STATE_WHAIT_TIMER, f_stateBlinkReal);
 8003f4a:	4819      	ldr	r0, [pc, #100]	; (8003fb0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8003f4c:	4b19      	ldr	r3, [pc, #100]	; (8003fb4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	2305      	movs	r3, #5
 8003f52:	2204      	movs	r2, #4
 8003f54:	4915      	ldr	r1, [pc, #84]	; (8003fac <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8003f56:	f7fd f91a 	bl	800118e <_ZN18FiniteStateMachine19createStateStandartEaaPFvvE>
EventStates stateWhaitTimer = fsm2.createStateEvent(STATE_WHAIT_TIMER, f_stateWhaitTimer);
 8003f5a:	4817      	ldr	r0, [pc, #92]	; (8003fb8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8003f5c:	4b17      	ldr	r3, [pc, #92]	; (8003fbc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8003f5e:	2205      	movs	r2, #5
 8003f60:	4912      	ldr	r1, [pc, #72]	; (8003fac <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8003f62:	f7fd f92d 	bl	80011c0 <_ZN18FiniteStateMachine16createStateEventEaPFvvE>
ChoiseStates stateChoiseBlink = fsm2.createStateChoise(STATE_CHOISE_BLINK, f_choiseBlink);
 8003f66:	4816      	ldr	r0, [pc, #88]	; (8003fc0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8003f68:	4b16      	ldr	r3, [pc, #88]	; (8003fc4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8003f6a:	2206      	movs	r2, #6
 8003f6c:	490f      	ldr	r1, [pc, #60]	; (8003fac <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8003f6e:	f7fd f93a 	bl	80011e6 <_ZN18FiniteStateMachine17createStateChoiseEaPFvvE>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10a      	bne.n	8003f8e <_Z41__static_initialization_and_destruction_0ii+0x8a>
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d105      	bne.n	8003f8e <_Z41__static_initialization_and_destruction_0ii+0x8a>
FiniteStateMachine fsm2;
 8003f82:	480a      	ldr	r0, [pc, #40]	; (8003fac <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8003f84:	f7fc ff12 	bl	8000dac <_ZN18FiniteStateMachineD1Ev>
FiniteStateMachine fsm1;
 8003f88:	4803      	ldr	r0, [pc, #12]	; (8003f98 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8003f8a:	f7fc ff0f 	bl	8000dac <_ZN18FiniteStateMachineD1Ev>
}
 8003f8e:	bf00      	nop
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	20000574 	.word	0x20000574
 8003f9c:	200005f0 	.word	0x200005f0
 8003fa0:	08003d01 	.word	0x08003d01
 8003fa4:	20000600 	.word	0x20000600
 8003fa8:	08003d61 	.word	0x08003d61
 8003fac:	20000610 	.word	0x20000610
 8003fb0:	2000068c 	.word	0x2000068c
 8003fb4:	08003dc1 	.word	0x08003dc1
 8003fb8:	2000069c 	.word	0x2000069c
 8003fbc:	08003e1d 	.word	0x08003e1d
 8003fc0:	200006bc 	.word	0x200006bc
 8003fc4:	08003e41 	.word	0x08003e41

08003fc8 <_GLOBAL__sub_I_TaskFSM1Handle>:
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003fd0:	2001      	movs	r0, #1
 8003fd2:	f7ff ff97 	bl	8003f04 <_Z41__static_initialization_and_destruction_0ii>
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <_GLOBAL__sub_D_TaskFSM1Handle>:
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003fe0:	2000      	movs	r0, #0
 8003fe2:	f7ff ff8f 	bl	8003f04 <_Z41__static_initialization_and_destruction_0ii>
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003fee:	4b18      	ldr	r3, [pc, #96]	; (8004050 <HAL_MspInit+0x68>)
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	4a17      	ldr	r2, [pc, #92]	; (8004050 <HAL_MspInit+0x68>)
 8003ff4:	f043 0301 	orr.w	r3, r3, #1
 8003ff8:	6193      	str	r3, [r2, #24]
 8003ffa:	4b15      	ldr	r3, [pc, #84]	; (8004050 <HAL_MspInit+0x68>)
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	60bb      	str	r3, [r7, #8]
 8004004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004006:	4b12      	ldr	r3, [pc, #72]	; (8004050 <HAL_MspInit+0x68>)
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	4a11      	ldr	r2, [pc, #68]	; (8004050 <HAL_MspInit+0x68>)
 800400c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004010:	61d3      	str	r3, [r2, #28]
 8004012:	4b0f      	ldr	r3, [pc, #60]	; (8004050 <HAL_MspInit+0x68>)
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800401a:	607b      	str	r3, [r7, #4]
 800401c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800401e:	2200      	movs	r2, #0
 8004020:	210f      	movs	r1, #15
 8004022:	f06f 0001 	mvn.w	r0, #1
 8004026:	f000 fa20 	bl	800446a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800402a:	4b0a      	ldr	r3, [pc, #40]	; (8004054 <HAL_MspInit+0x6c>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	4a04      	ldr	r2, [pc, #16]	; (8004054 <HAL_MspInit+0x6c>)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004046:	bf00      	nop
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40021000 	.word	0x40021000
 8004054:	40010000 	.word	0x40010000

08004058 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b08e      	sub	sp, #56	; 0x38
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004064:	2300      	movs	r3, #0
 8004066:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8004068:	2300      	movs	r3, #0
 800406a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800406e:	4b34      	ldr	r3, [pc, #208]	; (8004140 <HAL_InitTick+0xe8>)
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	4a33      	ldr	r2, [pc, #204]	; (8004140 <HAL_InitTick+0xe8>)
 8004074:	f043 0304 	orr.w	r3, r3, #4
 8004078:	61d3      	str	r3, [r2, #28]
 800407a:	4b31      	ldr	r3, [pc, #196]	; (8004140 <HAL_InitTick+0xe8>)
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	f003 0304 	and.w	r3, r3, #4
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004086:	f107 0210 	add.w	r2, r7, #16
 800408a:	f107 0314 	add.w	r3, r7, #20
 800408e:	4611      	mov	r1, r2
 8004090:	4618      	mov	r0, r3
 8004092:	f000 ffa9 	bl	8004fe8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004096:	6a3b      	ldr	r3, [r7, #32]
 8004098:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800409a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800409c:	2b00      	cmp	r3, #0
 800409e:	d103      	bne.n	80040a8 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80040a0:	f000 ff8e 	bl	8004fc0 <HAL_RCC_GetPCLK1Freq>
 80040a4:	6378      	str	r0, [r7, #52]	; 0x34
 80040a6:	e004      	b.n	80040b2 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80040a8:	f000 ff8a 	bl	8004fc0 <HAL_RCC_GetPCLK1Freq>
 80040ac:	4603      	mov	r3, r0
 80040ae:	005b      	lsls	r3, r3, #1
 80040b0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80040b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b4:	4a23      	ldr	r2, [pc, #140]	; (8004144 <HAL_InitTick+0xec>)
 80040b6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ba:	0c9b      	lsrs	r3, r3, #18
 80040bc:	3b01      	subs	r3, #1
 80040be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80040c0:	4b21      	ldr	r3, [pc, #132]	; (8004148 <HAL_InitTick+0xf0>)
 80040c2:	4a22      	ldr	r2, [pc, #136]	; (800414c <HAL_InitTick+0xf4>)
 80040c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80040c6:	4b20      	ldr	r3, [pc, #128]	; (8004148 <HAL_InitTick+0xf0>)
 80040c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80040cc:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80040ce:	4a1e      	ldr	r2, [pc, #120]	; (8004148 <HAL_InitTick+0xf0>)
 80040d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80040d4:	4b1c      	ldr	r3, [pc, #112]	; (8004148 <HAL_InitTick+0xf0>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040da:	4b1b      	ldr	r3, [pc, #108]	; (8004148 <HAL_InitTick+0xf0>)
 80040dc:	2200      	movs	r2, #0
 80040de:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040e0:	4b19      	ldr	r3, [pc, #100]	; (8004148 <HAL_InitTick+0xf0>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80040e6:	4818      	ldr	r0, [pc, #96]	; (8004148 <HAL_InitTick+0xf0>)
 80040e8:	f000 ffcc 	bl	8005084 <HAL_TIM_Base_Init>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80040f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d11b      	bne.n	8004132 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80040fa:	4813      	ldr	r0, [pc, #76]	; (8004148 <HAL_InitTick+0xf0>)
 80040fc:	f001 f81a 	bl	8005134 <HAL_TIM_Base_Start_IT>
 8004100:	4603      	mov	r3, r0
 8004102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8004106:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800410a:	2b00      	cmp	r3, #0
 800410c:	d111      	bne.n	8004132 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800410e:	201e      	movs	r0, #30
 8004110:	f000 f9c7 	bl	80044a2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b0f      	cmp	r3, #15
 8004118:	d808      	bhi.n	800412c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800411a:	2200      	movs	r2, #0
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	201e      	movs	r0, #30
 8004120:	f000 f9a3 	bl	800446a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004124:	4a0a      	ldr	r2, [pc, #40]	; (8004150 <HAL_InitTick+0xf8>)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6013      	str	r3, [r2, #0]
 800412a:	e002      	b.n	8004132 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004132:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8004136:	4618      	mov	r0, r3
 8004138:	3738      	adds	r7, #56	; 0x38
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	40021000 	.word	0x40021000
 8004144:	431bde83 	.word	0x431bde83
 8004148:	200006d8 	.word	0x200006d8
 800414c:	40000800 	.word	0x40000800
 8004150:	20000004 	.word	0x20000004

08004154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004158:	e7fe      	b.n	8004158 <NMI_Handler+0x4>

0800415a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800415a:	b480      	push	{r7}
 800415c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800415e:	e7fe      	b.n	800415e <HardFault_Handler+0x4>

08004160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004164:	e7fe      	b.n	8004164 <MemManage_Handler+0x4>

08004166 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004166:	b480      	push	{r7}
 8004168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800416a:	e7fe      	b.n	800416a <BusFault_Handler+0x4>

0800416c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004170:	e7fe      	b.n	8004170 <UsageFault_Handler+0x4>

08004172 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004172:	b480      	push	{r7}
 8004174:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004176:	bf00      	nop
 8004178:	46bd      	mov	sp, r7
 800417a:	bc80      	pop	{r7}
 800417c:	4770      	bx	lr
	...

08004180 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004184:	4802      	ldr	r0, [pc, #8]	; (8004190 <TIM4_IRQHandler+0x10>)
 8004186:	f001 f827 	bl	80051d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800418a:	bf00      	nop
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	200006d8 	.word	0x200006d8

08004194 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  return 1;
 8004198:	2301      	movs	r3, #1
}
 800419a:	4618      	mov	r0, r3
 800419c:	46bd      	mov	sp, r7
 800419e:	bc80      	pop	{r7}
 80041a0:	4770      	bx	lr

080041a2 <_kill>:

int _kill(int pid, int sig)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b082      	sub	sp, #8
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
 80041aa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80041ac:	f004 fb42 	bl	8008834 <__errno>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2216      	movs	r2, #22
 80041b4:	601a      	str	r2, [r3, #0]
  return -1;
 80041b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <_exit>:

void _exit (int status)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b082      	sub	sp, #8
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80041ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7ff ffe7 	bl	80041a2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80041d4:	e7fe      	b.n	80041d4 <_exit+0x12>
	...

080041d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041e0:	4a14      	ldr	r2, [pc, #80]	; (8004234 <_sbrk+0x5c>)
 80041e2:	4b15      	ldr	r3, [pc, #84]	; (8004238 <_sbrk+0x60>)
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041ec:	4b13      	ldr	r3, [pc, #76]	; (800423c <_sbrk+0x64>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d102      	bne.n	80041fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041f4:	4b11      	ldr	r3, [pc, #68]	; (800423c <_sbrk+0x64>)
 80041f6:	4a12      	ldr	r2, [pc, #72]	; (8004240 <_sbrk+0x68>)
 80041f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041fa:	4b10      	ldr	r3, [pc, #64]	; (800423c <_sbrk+0x64>)
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4413      	add	r3, r2
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	429a      	cmp	r2, r3
 8004206:	d207      	bcs.n	8004218 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004208:	f004 fb14 	bl	8008834 <__errno>
 800420c:	4603      	mov	r3, r0
 800420e:	220c      	movs	r2, #12
 8004210:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004216:	e009      	b.n	800422c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004218:	4b08      	ldr	r3, [pc, #32]	; (800423c <_sbrk+0x64>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800421e:	4b07      	ldr	r3, [pc, #28]	; (800423c <_sbrk+0x64>)
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4413      	add	r3, r2
 8004226:	4a05      	ldr	r2, [pc, #20]	; (800423c <_sbrk+0x64>)
 8004228:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800422a:	68fb      	ldr	r3, [r7, #12]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3718      	adds	r7, #24
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	20005000 	.word	0x20005000
 8004238:	00000400 	.word	0x00000400
 800423c:	20000720 	.word	0x20000720
 8004240:	200021c0 	.word	0x200021c0

08004244 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004248:	bf00      	nop
 800424a:	46bd      	mov	sp, r7
 800424c:	bc80      	pop	{r7}
 800424e:	4770      	bx	lr

08004250 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004250:	f7ff fff8 	bl	8004244 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004254:	480b      	ldr	r0, [pc, #44]	; (8004284 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004256:	490c      	ldr	r1, [pc, #48]	; (8004288 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004258:	4a0c      	ldr	r2, [pc, #48]	; (800428c <LoopFillZerobss+0x16>)
  movs r3, #0
 800425a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800425c:	e002      	b.n	8004264 <LoopCopyDataInit>

0800425e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800425e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004262:	3304      	adds	r3, #4

08004264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004268:	d3f9      	bcc.n	800425e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800426a:	4a09      	ldr	r2, [pc, #36]	; (8004290 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800426c:	4c09      	ldr	r4, [pc, #36]	; (8004294 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800426e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004270:	e001      	b.n	8004276 <LoopFillZerobss>

08004272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004274:	3204      	adds	r2, #4

08004276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004278:	d3fb      	bcc.n	8004272 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800427a:	f004 fae1 	bl	8008840 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800427e:	f7ff fc5b 	bl	8003b38 <main>
  bx lr
 8004282:	4770      	bx	lr
  ldr r0, =_sdata
 8004284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004288:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800428c:	08008f3c 	.word	0x08008f3c
  ldr r2, =_sbss
 8004290:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8004294:	200021bc 	.word	0x200021bc

08004298 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004298:	e7fe      	b.n	8004298 <ADC1_2_IRQHandler>
	...

0800429c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042a0:	4b08      	ldr	r3, [pc, #32]	; (80042c4 <HAL_Init+0x28>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a07      	ldr	r2, [pc, #28]	; (80042c4 <HAL_Init+0x28>)
 80042a6:	f043 0310 	orr.w	r3, r3, #16
 80042aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042ac:	2003      	movs	r0, #3
 80042ae:	f000 f8d1 	bl	8004454 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042b2:	200f      	movs	r0, #15
 80042b4:	f7ff fed0 	bl	8004058 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042b8:	f7ff fe96 	bl	8003fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	40022000 	.word	0x40022000

080042c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042cc:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <HAL_IncTick+0x1c>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	461a      	mov	r2, r3
 80042d2:	4b05      	ldr	r3, [pc, #20]	; (80042e8 <HAL_IncTick+0x20>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4413      	add	r3, r2
 80042d8:	4a03      	ldr	r2, [pc, #12]	; (80042e8 <HAL_IncTick+0x20>)
 80042da:	6013      	str	r3, [r2, #0]
}
 80042dc:	bf00      	nop
 80042de:	46bd      	mov	sp, r7
 80042e0:	bc80      	pop	{r7}
 80042e2:	4770      	bx	lr
 80042e4:	20000008 	.word	0x20000008
 80042e8:	20000724 	.word	0x20000724

080042ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
  return uwTick;
 80042f0:	4b02      	ldr	r3, [pc, #8]	; (80042fc <HAL_GetTick+0x10>)
 80042f2:	681b      	ldr	r3, [r3, #0]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bc80      	pop	{r7}
 80042fa:	4770      	bx	lr
 80042fc:	20000724 	.word	0x20000724

08004300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004310:	4b0c      	ldr	r3, [pc, #48]	; (8004344 <__NVIC_SetPriorityGrouping+0x44>)
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800431c:	4013      	ands	r3, r2
 800431e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004328:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800432c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004332:	4a04      	ldr	r2, [pc, #16]	; (8004344 <__NVIC_SetPriorityGrouping+0x44>)
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	60d3      	str	r3, [r2, #12]
}
 8004338:	bf00      	nop
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	bc80      	pop	{r7}
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	e000ed00 	.word	0xe000ed00

08004348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800434c:	4b04      	ldr	r3, [pc, #16]	; (8004360 <__NVIC_GetPriorityGrouping+0x18>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	0a1b      	lsrs	r3, r3, #8
 8004352:	f003 0307 	and.w	r3, r3, #7
}
 8004356:	4618      	mov	r0, r3
 8004358:	46bd      	mov	sp, r7
 800435a:	bc80      	pop	{r7}
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	e000ed00 	.word	0xe000ed00

08004364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	4603      	mov	r3, r0
 800436c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800436e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004372:	2b00      	cmp	r3, #0
 8004374:	db0b      	blt.n	800438e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004376:	79fb      	ldrb	r3, [r7, #7]
 8004378:	f003 021f 	and.w	r2, r3, #31
 800437c:	4906      	ldr	r1, [pc, #24]	; (8004398 <__NVIC_EnableIRQ+0x34>)
 800437e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004382:	095b      	lsrs	r3, r3, #5
 8004384:	2001      	movs	r0, #1
 8004386:	fa00 f202 	lsl.w	r2, r0, r2
 800438a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	bc80      	pop	{r7}
 8004396:	4770      	bx	lr
 8004398:	e000e100 	.word	0xe000e100

0800439c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	4603      	mov	r3, r0
 80043a4:	6039      	str	r1, [r7, #0]
 80043a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	db0a      	blt.n	80043c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	b2da      	uxtb	r2, r3
 80043b4:	490c      	ldr	r1, [pc, #48]	; (80043e8 <__NVIC_SetPriority+0x4c>)
 80043b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ba:	0112      	lsls	r2, r2, #4
 80043bc:	b2d2      	uxtb	r2, r2
 80043be:	440b      	add	r3, r1
 80043c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043c4:	e00a      	b.n	80043dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	4908      	ldr	r1, [pc, #32]	; (80043ec <__NVIC_SetPriority+0x50>)
 80043cc:	79fb      	ldrb	r3, [r7, #7]
 80043ce:	f003 030f 	and.w	r3, r3, #15
 80043d2:	3b04      	subs	r3, #4
 80043d4:	0112      	lsls	r2, r2, #4
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	440b      	add	r3, r1
 80043da:	761a      	strb	r2, [r3, #24]
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bc80      	pop	{r7}
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	e000e100 	.word	0xe000e100
 80043ec:	e000ed00 	.word	0xe000ed00

080043f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b089      	sub	sp, #36	; 0x24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f003 0307 	and.w	r3, r3, #7
 8004402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	f1c3 0307 	rsb	r3, r3, #7
 800440a:	2b04      	cmp	r3, #4
 800440c:	bf28      	it	cs
 800440e:	2304      	movcs	r3, #4
 8004410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	3304      	adds	r3, #4
 8004416:	2b06      	cmp	r3, #6
 8004418:	d902      	bls.n	8004420 <NVIC_EncodePriority+0x30>
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	3b03      	subs	r3, #3
 800441e:	e000      	b.n	8004422 <NVIC_EncodePriority+0x32>
 8004420:	2300      	movs	r3, #0
 8004422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004424:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	fa02 f303 	lsl.w	r3, r2, r3
 800442e:	43da      	mvns	r2, r3
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	401a      	ands	r2, r3
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004438:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	fa01 f303 	lsl.w	r3, r1, r3
 8004442:	43d9      	mvns	r1, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004448:	4313      	orrs	r3, r2
         );
}
 800444a:	4618      	mov	r0, r3
 800444c:	3724      	adds	r7, #36	; 0x24
 800444e:	46bd      	mov	sp, r7
 8004450:	bc80      	pop	{r7}
 8004452:	4770      	bx	lr

08004454 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7ff ff4f 	bl	8004300 <__NVIC_SetPriorityGrouping>
}
 8004462:	bf00      	nop
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800446a:	b580      	push	{r7, lr}
 800446c:	b086      	sub	sp, #24
 800446e:	af00      	add	r7, sp, #0
 8004470:	4603      	mov	r3, r0
 8004472:	60b9      	str	r1, [r7, #8]
 8004474:	607a      	str	r2, [r7, #4]
 8004476:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004478:	2300      	movs	r3, #0
 800447a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800447c:	f7ff ff64 	bl	8004348 <__NVIC_GetPriorityGrouping>
 8004480:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	68b9      	ldr	r1, [r7, #8]
 8004486:	6978      	ldr	r0, [r7, #20]
 8004488:	f7ff ffb2 	bl	80043f0 <NVIC_EncodePriority>
 800448c:	4602      	mov	r2, r0
 800448e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004492:	4611      	mov	r1, r2
 8004494:	4618      	mov	r0, r3
 8004496:	f7ff ff81 	bl	800439c <__NVIC_SetPriority>
}
 800449a:	bf00      	nop
 800449c:	3718      	adds	r7, #24
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b082      	sub	sp, #8
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	4603      	mov	r3, r0
 80044aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff ff57 	bl	8004364 <__NVIC_EnableIRQ>
}
 80044b6:	bf00      	nop
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
	...

080044c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b08b      	sub	sp, #44	; 0x2c
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044ca:	2300      	movs	r3, #0
 80044cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80044ce:	2300      	movs	r3, #0
 80044d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044d2:	e169      	b.n	80047a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80044d4:	2201      	movs	r2, #1
 80044d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d8:	fa02 f303 	lsl.w	r3, r2, r3
 80044dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	69fa      	ldr	r2, [r7, #28]
 80044e4:	4013      	ands	r3, r2
 80044e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	f040 8158 	bne.w	80047a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	4a9a      	ldr	r2, [pc, #616]	; (8004760 <HAL_GPIO_Init+0x2a0>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d05e      	beq.n	80045ba <HAL_GPIO_Init+0xfa>
 80044fc:	4a98      	ldr	r2, [pc, #608]	; (8004760 <HAL_GPIO_Init+0x2a0>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d875      	bhi.n	80045ee <HAL_GPIO_Init+0x12e>
 8004502:	4a98      	ldr	r2, [pc, #608]	; (8004764 <HAL_GPIO_Init+0x2a4>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d058      	beq.n	80045ba <HAL_GPIO_Init+0xfa>
 8004508:	4a96      	ldr	r2, [pc, #600]	; (8004764 <HAL_GPIO_Init+0x2a4>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d86f      	bhi.n	80045ee <HAL_GPIO_Init+0x12e>
 800450e:	4a96      	ldr	r2, [pc, #600]	; (8004768 <HAL_GPIO_Init+0x2a8>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d052      	beq.n	80045ba <HAL_GPIO_Init+0xfa>
 8004514:	4a94      	ldr	r2, [pc, #592]	; (8004768 <HAL_GPIO_Init+0x2a8>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d869      	bhi.n	80045ee <HAL_GPIO_Init+0x12e>
 800451a:	4a94      	ldr	r2, [pc, #592]	; (800476c <HAL_GPIO_Init+0x2ac>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d04c      	beq.n	80045ba <HAL_GPIO_Init+0xfa>
 8004520:	4a92      	ldr	r2, [pc, #584]	; (800476c <HAL_GPIO_Init+0x2ac>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d863      	bhi.n	80045ee <HAL_GPIO_Init+0x12e>
 8004526:	4a92      	ldr	r2, [pc, #584]	; (8004770 <HAL_GPIO_Init+0x2b0>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d046      	beq.n	80045ba <HAL_GPIO_Init+0xfa>
 800452c:	4a90      	ldr	r2, [pc, #576]	; (8004770 <HAL_GPIO_Init+0x2b0>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d85d      	bhi.n	80045ee <HAL_GPIO_Init+0x12e>
 8004532:	2b12      	cmp	r3, #18
 8004534:	d82a      	bhi.n	800458c <HAL_GPIO_Init+0xcc>
 8004536:	2b12      	cmp	r3, #18
 8004538:	d859      	bhi.n	80045ee <HAL_GPIO_Init+0x12e>
 800453a:	a201      	add	r2, pc, #4	; (adr r2, 8004540 <HAL_GPIO_Init+0x80>)
 800453c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004540:	080045bb 	.word	0x080045bb
 8004544:	08004595 	.word	0x08004595
 8004548:	080045a7 	.word	0x080045a7
 800454c:	080045e9 	.word	0x080045e9
 8004550:	080045ef 	.word	0x080045ef
 8004554:	080045ef 	.word	0x080045ef
 8004558:	080045ef 	.word	0x080045ef
 800455c:	080045ef 	.word	0x080045ef
 8004560:	080045ef 	.word	0x080045ef
 8004564:	080045ef 	.word	0x080045ef
 8004568:	080045ef 	.word	0x080045ef
 800456c:	080045ef 	.word	0x080045ef
 8004570:	080045ef 	.word	0x080045ef
 8004574:	080045ef 	.word	0x080045ef
 8004578:	080045ef 	.word	0x080045ef
 800457c:	080045ef 	.word	0x080045ef
 8004580:	080045ef 	.word	0x080045ef
 8004584:	0800459d 	.word	0x0800459d
 8004588:	080045b1 	.word	0x080045b1
 800458c:	4a79      	ldr	r2, [pc, #484]	; (8004774 <HAL_GPIO_Init+0x2b4>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d013      	beq.n	80045ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004592:	e02c      	b.n	80045ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	623b      	str	r3, [r7, #32]
          break;
 800459a:	e029      	b.n	80045f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	3304      	adds	r3, #4
 80045a2:	623b      	str	r3, [r7, #32]
          break;
 80045a4:	e024      	b.n	80045f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	3308      	adds	r3, #8
 80045ac:	623b      	str	r3, [r7, #32]
          break;
 80045ae:	e01f      	b.n	80045f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	330c      	adds	r3, #12
 80045b6:	623b      	str	r3, [r7, #32]
          break;
 80045b8:	e01a      	b.n	80045f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d102      	bne.n	80045c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80045c2:	2304      	movs	r3, #4
 80045c4:	623b      	str	r3, [r7, #32]
          break;
 80045c6:	e013      	b.n	80045f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d105      	bne.n	80045dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80045d0:	2308      	movs	r3, #8
 80045d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	69fa      	ldr	r2, [r7, #28]
 80045d8:	611a      	str	r2, [r3, #16]
          break;
 80045da:	e009      	b.n	80045f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80045dc:	2308      	movs	r3, #8
 80045de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	69fa      	ldr	r2, [r7, #28]
 80045e4:	615a      	str	r2, [r3, #20]
          break;
 80045e6:	e003      	b.n	80045f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80045e8:	2300      	movs	r3, #0
 80045ea:	623b      	str	r3, [r7, #32]
          break;
 80045ec:	e000      	b.n	80045f0 <HAL_GPIO_Init+0x130>
          break;
 80045ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	2bff      	cmp	r3, #255	; 0xff
 80045f4:	d801      	bhi.n	80045fa <HAL_GPIO_Init+0x13a>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	e001      	b.n	80045fe <HAL_GPIO_Init+0x13e>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	3304      	adds	r3, #4
 80045fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	2bff      	cmp	r3, #255	; 0xff
 8004604:	d802      	bhi.n	800460c <HAL_GPIO_Init+0x14c>
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	e002      	b.n	8004612 <HAL_GPIO_Init+0x152>
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	3b08      	subs	r3, #8
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	210f      	movs	r1, #15
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	fa01 f303 	lsl.w	r3, r1, r3
 8004620:	43db      	mvns	r3, r3
 8004622:	401a      	ands	r2, r3
 8004624:	6a39      	ldr	r1, [r7, #32]
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	fa01 f303 	lsl.w	r3, r1, r3
 800462c:	431a      	orrs	r2, r3
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800463a:	2b00      	cmp	r3, #0
 800463c:	f000 80b1 	beq.w	80047a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004640:	4b4d      	ldr	r3, [pc, #308]	; (8004778 <HAL_GPIO_Init+0x2b8>)
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	4a4c      	ldr	r2, [pc, #304]	; (8004778 <HAL_GPIO_Init+0x2b8>)
 8004646:	f043 0301 	orr.w	r3, r3, #1
 800464a:	6193      	str	r3, [r2, #24]
 800464c:	4b4a      	ldr	r3, [pc, #296]	; (8004778 <HAL_GPIO_Init+0x2b8>)
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	f003 0301 	and.w	r3, r3, #1
 8004654:	60bb      	str	r3, [r7, #8]
 8004656:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004658:	4a48      	ldr	r2, [pc, #288]	; (800477c <HAL_GPIO_Init+0x2bc>)
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	089b      	lsrs	r3, r3, #2
 800465e:	3302      	adds	r3, #2
 8004660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004664:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004668:	f003 0303 	and.w	r3, r3, #3
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	220f      	movs	r2, #15
 8004670:	fa02 f303 	lsl.w	r3, r2, r3
 8004674:	43db      	mvns	r3, r3
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	4013      	ands	r3, r2
 800467a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a40      	ldr	r2, [pc, #256]	; (8004780 <HAL_GPIO_Init+0x2c0>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d013      	beq.n	80046ac <HAL_GPIO_Init+0x1ec>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a3f      	ldr	r2, [pc, #252]	; (8004784 <HAL_GPIO_Init+0x2c4>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d00d      	beq.n	80046a8 <HAL_GPIO_Init+0x1e8>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a3e      	ldr	r2, [pc, #248]	; (8004788 <HAL_GPIO_Init+0x2c8>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d007      	beq.n	80046a4 <HAL_GPIO_Init+0x1e4>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a3d      	ldr	r2, [pc, #244]	; (800478c <HAL_GPIO_Init+0x2cc>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d101      	bne.n	80046a0 <HAL_GPIO_Init+0x1e0>
 800469c:	2303      	movs	r3, #3
 800469e:	e006      	b.n	80046ae <HAL_GPIO_Init+0x1ee>
 80046a0:	2304      	movs	r3, #4
 80046a2:	e004      	b.n	80046ae <HAL_GPIO_Init+0x1ee>
 80046a4:	2302      	movs	r3, #2
 80046a6:	e002      	b.n	80046ae <HAL_GPIO_Init+0x1ee>
 80046a8:	2301      	movs	r3, #1
 80046aa:	e000      	b.n	80046ae <HAL_GPIO_Init+0x1ee>
 80046ac:	2300      	movs	r3, #0
 80046ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b0:	f002 0203 	and.w	r2, r2, #3
 80046b4:	0092      	lsls	r2, r2, #2
 80046b6:	4093      	lsls	r3, r2
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80046be:	492f      	ldr	r1, [pc, #188]	; (800477c <HAL_GPIO_Init+0x2bc>)
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	089b      	lsrs	r3, r3, #2
 80046c4:	3302      	adds	r3, #2
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d006      	beq.n	80046e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80046d8:	4b2d      	ldr	r3, [pc, #180]	; (8004790 <HAL_GPIO_Init+0x2d0>)
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	492c      	ldr	r1, [pc, #176]	; (8004790 <HAL_GPIO_Init+0x2d0>)
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	608b      	str	r3, [r1, #8]
 80046e4:	e006      	b.n	80046f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80046e6:	4b2a      	ldr	r3, [pc, #168]	; (8004790 <HAL_GPIO_Init+0x2d0>)
 80046e8:	689a      	ldr	r2, [r3, #8]
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	43db      	mvns	r3, r3
 80046ee:	4928      	ldr	r1, [pc, #160]	; (8004790 <HAL_GPIO_Init+0x2d0>)
 80046f0:	4013      	ands	r3, r2
 80046f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d006      	beq.n	800470e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004700:	4b23      	ldr	r3, [pc, #140]	; (8004790 <HAL_GPIO_Init+0x2d0>)
 8004702:	68da      	ldr	r2, [r3, #12]
 8004704:	4922      	ldr	r1, [pc, #136]	; (8004790 <HAL_GPIO_Init+0x2d0>)
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	4313      	orrs	r3, r2
 800470a:	60cb      	str	r3, [r1, #12]
 800470c:	e006      	b.n	800471c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800470e:	4b20      	ldr	r3, [pc, #128]	; (8004790 <HAL_GPIO_Init+0x2d0>)
 8004710:	68da      	ldr	r2, [r3, #12]
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	43db      	mvns	r3, r3
 8004716:	491e      	ldr	r1, [pc, #120]	; (8004790 <HAL_GPIO_Init+0x2d0>)
 8004718:	4013      	ands	r3, r2
 800471a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d006      	beq.n	8004736 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004728:	4b19      	ldr	r3, [pc, #100]	; (8004790 <HAL_GPIO_Init+0x2d0>)
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	4918      	ldr	r1, [pc, #96]	; (8004790 <HAL_GPIO_Init+0x2d0>)
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	4313      	orrs	r3, r2
 8004732:	604b      	str	r3, [r1, #4]
 8004734:	e006      	b.n	8004744 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004736:	4b16      	ldr	r3, [pc, #88]	; (8004790 <HAL_GPIO_Init+0x2d0>)
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	43db      	mvns	r3, r3
 800473e:	4914      	ldr	r1, [pc, #80]	; (8004790 <HAL_GPIO_Init+0x2d0>)
 8004740:	4013      	ands	r3, r2
 8004742:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d021      	beq.n	8004794 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004750:	4b0f      	ldr	r3, [pc, #60]	; (8004790 <HAL_GPIO_Init+0x2d0>)
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	490e      	ldr	r1, [pc, #56]	; (8004790 <HAL_GPIO_Init+0x2d0>)
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	4313      	orrs	r3, r2
 800475a:	600b      	str	r3, [r1, #0]
 800475c:	e021      	b.n	80047a2 <HAL_GPIO_Init+0x2e2>
 800475e:	bf00      	nop
 8004760:	10320000 	.word	0x10320000
 8004764:	10310000 	.word	0x10310000
 8004768:	10220000 	.word	0x10220000
 800476c:	10210000 	.word	0x10210000
 8004770:	10120000 	.word	0x10120000
 8004774:	10110000 	.word	0x10110000
 8004778:	40021000 	.word	0x40021000
 800477c:	40010000 	.word	0x40010000
 8004780:	40010800 	.word	0x40010800
 8004784:	40010c00 	.word	0x40010c00
 8004788:	40011000 	.word	0x40011000
 800478c:	40011400 	.word	0x40011400
 8004790:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004794:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <HAL_GPIO_Init+0x304>)
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	43db      	mvns	r3, r3
 800479c:	4909      	ldr	r1, [pc, #36]	; (80047c4 <HAL_GPIO_Init+0x304>)
 800479e:	4013      	ands	r3, r2
 80047a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	3301      	adds	r3, #1
 80047a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ae:	fa22 f303 	lsr.w	r3, r2, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f47f ae8e 	bne.w	80044d4 <HAL_GPIO_Init+0x14>
  }
}
 80047b8:	bf00      	nop
 80047ba:	bf00      	nop
 80047bc:	372c      	adds	r7, #44	; 0x2c
 80047be:	46bd      	mov	sp, r7
 80047c0:	bc80      	pop	{r7}
 80047c2:	4770      	bx	lr
 80047c4:	40010400 	.word	0x40010400

080047c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	460b      	mov	r3, r1
 80047d2:	807b      	strh	r3, [r7, #2]
 80047d4:	4613      	mov	r3, r2
 80047d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047d8:	787b      	ldrb	r3, [r7, #1]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047de:	887a      	ldrh	r2, [r7, #2]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80047e4:	e003      	b.n	80047ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047e6:	887b      	ldrh	r3, [r7, #2]
 80047e8:	041a      	lsls	r2, r3, #16
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	611a      	str	r2, [r3, #16]
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bc80      	pop	{r7}
 80047f6:	4770      	bx	lr

080047f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	460b      	mov	r3, r1
 8004802:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800480a:	887a      	ldrh	r2, [r7, #2]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4013      	ands	r3, r2
 8004810:	041a      	lsls	r2, r3, #16
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	43d9      	mvns	r1, r3
 8004816:	887b      	ldrh	r3, [r7, #2]
 8004818:	400b      	ands	r3, r1
 800481a:	431a      	orrs	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	611a      	str	r2, [r3, #16]
}
 8004820:	bf00      	nop
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	bc80      	pop	{r7}
 8004828:	4770      	bx	lr
	...

0800482c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e272      	b.n	8004d24 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 8087 	beq.w	800495a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800484c:	4b92      	ldr	r3, [pc, #584]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f003 030c 	and.w	r3, r3, #12
 8004854:	2b04      	cmp	r3, #4
 8004856:	d00c      	beq.n	8004872 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004858:	4b8f      	ldr	r3, [pc, #572]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f003 030c 	and.w	r3, r3, #12
 8004860:	2b08      	cmp	r3, #8
 8004862:	d112      	bne.n	800488a <HAL_RCC_OscConfig+0x5e>
 8004864:	4b8c      	ldr	r3, [pc, #560]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800486c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004870:	d10b      	bne.n	800488a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004872:	4b89      	ldr	r3, [pc, #548]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d06c      	beq.n	8004958 <HAL_RCC_OscConfig+0x12c>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d168      	bne.n	8004958 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e24c      	b.n	8004d24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004892:	d106      	bne.n	80048a2 <HAL_RCC_OscConfig+0x76>
 8004894:	4b80      	ldr	r3, [pc, #512]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a7f      	ldr	r2, [pc, #508]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 800489a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800489e:	6013      	str	r3, [r2, #0]
 80048a0:	e02e      	b.n	8004900 <HAL_RCC_OscConfig+0xd4>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10c      	bne.n	80048c4 <HAL_RCC_OscConfig+0x98>
 80048aa:	4b7b      	ldr	r3, [pc, #492]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a7a      	ldr	r2, [pc, #488]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 80048b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048b4:	6013      	str	r3, [r2, #0]
 80048b6:	4b78      	ldr	r3, [pc, #480]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a77      	ldr	r2, [pc, #476]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 80048bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048c0:	6013      	str	r3, [r2, #0]
 80048c2:	e01d      	b.n	8004900 <HAL_RCC_OscConfig+0xd4>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048cc:	d10c      	bne.n	80048e8 <HAL_RCC_OscConfig+0xbc>
 80048ce:	4b72      	ldr	r3, [pc, #456]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a71      	ldr	r2, [pc, #452]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 80048d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048d8:	6013      	str	r3, [r2, #0]
 80048da:	4b6f      	ldr	r3, [pc, #444]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a6e      	ldr	r2, [pc, #440]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 80048e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048e4:	6013      	str	r3, [r2, #0]
 80048e6:	e00b      	b.n	8004900 <HAL_RCC_OscConfig+0xd4>
 80048e8:	4b6b      	ldr	r3, [pc, #428]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a6a      	ldr	r2, [pc, #424]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 80048ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048f2:	6013      	str	r3, [r2, #0]
 80048f4:	4b68      	ldr	r3, [pc, #416]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a67      	ldr	r2, [pc, #412]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 80048fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d013      	beq.n	8004930 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004908:	f7ff fcf0 	bl	80042ec <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800490e:	e008      	b.n	8004922 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004910:	f7ff fcec 	bl	80042ec <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b64      	cmp	r3, #100	; 0x64
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e200      	b.n	8004d24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004922:	4b5d      	ldr	r3, [pc, #372]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d0f0      	beq.n	8004910 <HAL_RCC_OscConfig+0xe4>
 800492e:	e014      	b.n	800495a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004930:	f7ff fcdc 	bl	80042ec <HAL_GetTick>
 8004934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004938:	f7ff fcd8 	bl	80042ec <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b64      	cmp	r3, #100	; 0x64
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e1ec      	b.n	8004d24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800494a:	4b53      	ldr	r3, [pc, #332]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1f0      	bne.n	8004938 <HAL_RCC_OscConfig+0x10c>
 8004956:	e000      	b.n	800495a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d063      	beq.n	8004a2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004966:	4b4c      	ldr	r3, [pc, #304]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f003 030c 	and.w	r3, r3, #12
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00b      	beq.n	800498a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004972:	4b49      	ldr	r3, [pc, #292]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f003 030c 	and.w	r3, r3, #12
 800497a:	2b08      	cmp	r3, #8
 800497c:	d11c      	bne.n	80049b8 <HAL_RCC_OscConfig+0x18c>
 800497e:	4b46      	ldr	r3, [pc, #280]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d116      	bne.n	80049b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800498a:	4b43      	ldr	r3, [pc, #268]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d005      	beq.n	80049a2 <HAL_RCC_OscConfig+0x176>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d001      	beq.n	80049a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e1c0      	b.n	8004d24 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049a2:	4b3d      	ldr	r3, [pc, #244]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	00db      	lsls	r3, r3, #3
 80049b0:	4939      	ldr	r1, [pc, #228]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049b6:	e03a      	b.n	8004a2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d020      	beq.n	8004a02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049c0:	4b36      	ldr	r3, [pc, #216]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 80049c2:	2201      	movs	r2, #1
 80049c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c6:	f7ff fc91 	bl	80042ec <HAL_GetTick>
 80049ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049cc:	e008      	b.n	80049e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049ce:	f7ff fc8d 	bl	80042ec <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e1a1      	b.n	8004d24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049e0:	4b2d      	ldr	r3, [pc, #180]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0f0      	beq.n	80049ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ec:	4b2a      	ldr	r3, [pc, #168]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	00db      	lsls	r3, r3, #3
 80049fa:	4927      	ldr	r1, [pc, #156]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	600b      	str	r3, [r1, #0]
 8004a00:	e015      	b.n	8004a2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a02:	4b26      	ldr	r3, [pc, #152]	; (8004a9c <HAL_RCC_OscConfig+0x270>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a08:	f7ff fc70 	bl	80042ec <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a0e:	e008      	b.n	8004a22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a10:	f7ff fc6c 	bl	80042ec <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e180      	b.n	8004d24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a22:	4b1d      	ldr	r3, [pc, #116]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1f0      	bne.n	8004a10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0308 	and.w	r3, r3, #8
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d03a      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d019      	beq.n	8004a76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a42:	4b17      	ldr	r3, [pc, #92]	; (8004aa0 <HAL_RCC_OscConfig+0x274>)
 8004a44:	2201      	movs	r2, #1
 8004a46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a48:	f7ff fc50 	bl	80042ec <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a50:	f7ff fc4c 	bl	80042ec <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e160      	b.n	8004d24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a62:	4b0d      	ldr	r3, [pc, #52]	; (8004a98 <HAL_RCC_OscConfig+0x26c>)
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0f0      	beq.n	8004a50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004a6e:	2001      	movs	r0, #1
 8004a70:	f000 faea 	bl	8005048 <RCC_Delay>
 8004a74:	e01c      	b.n	8004ab0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a76:	4b0a      	ldr	r3, [pc, #40]	; (8004aa0 <HAL_RCC_OscConfig+0x274>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a7c:	f7ff fc36 	bl	80042ec <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a82:	e00f      	b.n	8004aa4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a84:	f7ff fc32 	bl	80042ec <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d908      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e146      	b.n	8004d24 <HAL_RCC_OscConfig+0x4f8>
 8004a96:	bf00      	nop
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	42420000 	.word	0x42420000
 8004aa0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aa4:	4b92      	ldr	r3, [pc, #584]	; (8004cf0 <HAL_RCC_OscConfig+0x4c4>)
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1e9      	bne.n	8004a84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f000 80a6 	beq.w	8004c0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ac2:	4b8b      	ldr	r3, [pc, #556]	; (8004cf0 <HAL_RCC_OscConfig+0x4c4>)
 8004ac4:	69db      	ldr	r3, [r3, #28]
 8004ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10d      	bne.n	8004aea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ace:	4b88      	ldr	r3, [pc, #544]	; (8004cf0 <HAL_RCC_OscConfig+0x4c4>)
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	4a87      	ldr	r2, [pc, #540]	; (8004cf0 <HAL_RCC_OscConfig+0x4c4>)
 8004ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad8:	61d3      	str	r3, [r2, #28]
 8004ada:	4b85      	ldr	r3, [pc, #532]	; (8004cf0 <HAL_RCC_OscConfig+0x4c4>)
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae2:	60bb      	str	r3, [r7, #8]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aea:	4b82      	ldr	r3, [pc, #520]	; (8004cf4 <HAL_RCC_OscConfig+0x4c8>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d118      	bne.n	8004b28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004af6:	4b7f      	ldr	r3, [pc, #508]	; (8004cf4 <HAL_RCC_OscConfig+0x4c8>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a7e      	ldr	r2, [pc, #504]	; (8004cf4 <HAL_RCC_OscConfig+0x4c8>)
 8004afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b02:	f7ff fbf3 	bl	80042ec <HAL_GetTick>
 8004b06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b08:	e008      	b.n	8004b1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b0a:	f7ff fbef 	bl	80042ec <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b64      	cmp	r3, #100	; 0x64
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e103      	b.n	8004d24 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b1c:	4b75      	ldr	r3, [pc, #468]	; (8004cf4 <HAL_RCC_OscConfig+0x4c8>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0f0      	beq.n	8004b0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d106      	bne.n	8004b3e <HAL_RCC_OscConfig+0x312>
 8004b30:	4b6f      	ldr	r3, [pc, #444]	; (8004cf0 <HAL_RCC_OscConfig+0x4c4>)
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	4a6e      	ldr	r2, [pc, #440]	; (8004cf0 <HAL_RCC_OscConfig+0x4c4>)
 8004b36:	f043 0301 	orr.w	r3, r3, #1
 8004b3a:	6213      	str	r3, [r2, #32]
 8004b3c:	e02d      	b.n	8004b9a <HAL_RCC_OscConfig+0x36e>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10c      	bne.n	8004b60 <HAL_RCC_OscConfig+0x334>
 8004b46:	4b6a      	ldr	r3, [pc, #424]	; (8004cf0 <HAL_RCC_OscConfig+0x4c4>)
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	4a69      	ldr	r2, [pc, #420]	; (8004cf0 <HAL_RCC_OscConfig+0x4c4>)
 8004b4c:	f023 0301 	bic.w	r3, r3, #1
 8004b50:	6213      	str	r3, [r2, #32]
 8004b52:	4b67      	ldr	r3, [pc, #412]	; (8004cf0 <HAL_RCC_OscConfig+0x4c4>)
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	4a66      	ldr	r2, [pc, #408]	; (8004cf0 <HAL_RCC_OscConfig+0x4c4>)
 8004b58:	f023 0304 	bic.w	r3, r3, #4
 8004b5c:	6213      	str	r3, [r2, #32]
 8004b5e:	e01c      	b.n	8004b9a <HAL_RCC_OscConfig+0x36e>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	2b05      	cmp	r3, #5
 8004b66:	d10c      	bne.n	8004b82 <HAL_RCC_OscConfig+0x356>
 8004b68:	4b61      	ldr	r3, [pc, #388]	; (8004cf0 <HAL_RCC_OscConfig+0x4c4>)
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	4a60      	ldr	r2, [pc, #384]	; (8004cf0 <HAL_RCC_OscConfig+0x4c4>)
 8004b6e:	f043 0304 	orr.w	r3, r3, #4
 8004b72:	6213      	str	r3, [r2, #32]
 8004b74:	4b5e      	ldr	r3, [pc, #376]	; (8004cf0 <HAL_RCC_OscConfig+0x4c4>)
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	4a5d      	ldr	r2, [pc, #372]	; (8004cf0 <HAL_RCC_OscConfig+0x4c4>)
 8004b7a:	f043 0301 	orr.w	r3, r3, #1
 8004b7e:	6213      	str	r3, [r2, #32]
 8004b80:	e00b      	b.n	8004b9a <HAL_RCC_OscConfig+0x36e>
 8004b82:	4b5b      	ldr	r3, [pc, #364]	; (8004cf0 <HAL_RCC_OscConfig+0x4c4>)
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	4a5a      	ldr	r2, [pc, #360]	; (8004cf0 <HAL_RCC_OscConfig+0x4c4>)
 8004b88:	f023 0301 	bic.w	r3, r3, #1
 8004b8c:	6213      	str	r3, [r2, #32]
 8004b8e:	4b58      	ldr	r3, [pc, #352]	; (8004cf0 <HAL_RCC_OscConfig+0x4c4>)
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	4a57      	ldr	r2, [pc, #348]	; (8004cf0 <HAL_RCC_OscConfig+0x4c4>)
 8004b94:	f023 0304 	bic.w	r3, r3, #4
 8004b98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d015      	beq.n	8004bce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ba2:	f7ff fba3 	bl	80042ec <HAL_GetTick>
 8004ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ba8:	e00a      	b.n	8004bc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004baa:	f7ff fb9f 	bl	80042ec <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d901      	bls.n	8004bc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e0b1      	b.n	8004d24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bc0:	4b4b      	ldr	r3, [pc, #300]	; (8004cf0 <HAL_RCC_OscConfig+0x4c4>)
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0ee      	beq.n	8004baa <HAL_RCC_OscConfig+0x37e>
 8004bcc:	e014      	b.n	8004bf8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bce:	f7ff fb8d 	bl	80042ec <HAL_GetTick>
 8004bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bd4:	e00a      	b.n	8004bec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bd6:	f7ff fb89 	bl	80042ec <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d901      	bls.n	8004bec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e09b      	b.n	8004d24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bec:	4b40      	ldr	r3, [pc, #256]	; (8004cf0 <HAL_RCC_OscConfig+0x4c4>)
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1ee      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004bf8:	7dfb      	ldrb	r3, [r7, #23]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d105      	bne.n	8004c0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bfe:	4b3c      	ldr	r3, [pc, #240]	; (8004cf0 <HAL_RCC_OscConfig+0x4c4>)
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	4a3b      	ldr	r2, [pc, #236]	; (8004cf0 <HAL_RCC_OscConfig+0x4c4>)
 8004c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f000 8087 	beq.w	8004d22 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c14:	4b36      	ldr	r3, [pc, #216]	; (8004cf0 <HAL_RCC_OscConfig+0x4c4>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f003 030c 	and.w	r3, r3, #12
 8004c1c:	2b08      	cmp	r3, #8
 8004c1e:	d061      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	69db      	ldr	r3, [r3, #28]
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d146      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c28:	4b33      	ldr	r3, [pc, #204]	; (8004cf8 <HAL_RCC_OscConfig+0x4cc>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c2e:	f7ff fb5d 	bl	80042ec <HAL_GetTick>
 8004c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c34:	e008      	b.n	8004c48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c36:	f7ff fb59 	bl	80042ec <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d901      	bls.n	8004c48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e06d      	b.n	8004d24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c48:	4b29      	ldr	r3, [pc, #164]	; (8004cf0 <HAL_RCC_OscConfig+0x4c4>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1f0      	bne.n	8004c36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c5c:	d108      	bne.n	8004c70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004c5e:	4b24      	ldr	r3, [pc, #144]	; (8004cf0 <HAL_RCC_OscConfig+0x4c4>)
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	4921      	ldr	r1, [pc, #132]	; (8004cf0 <HAL_RCC_OscConfig+0x4c4>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c70:	4b1f      	ldr	r3, [pc, #124]	; (8004cf0 <HAL_RCC_OscConfig+0x4c4>)
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a19      	ldr	r1, [r3, #32]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c80:	430b      	orrs	r3, r1
 8004c82:	491b      	ldr	r1, [pc, #108]	; (8004cf0 <HAL_RCC_OscConfig+0x4c4>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c88:	4b1b      	ldr	r3, [pc, #108]	; (8004cf8 <HAL_RCC_OscConfig+0x4cc>)
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c8e:	f7ff fb2d 	bl	80042ec <HAL_GetTick>
 8004c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c94:	e008      	b.n	8004ca8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c96:	f7ff fb29 	bl	80042ec <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e03d      	b.n	8004d24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ca8:	4b11      	ldr	r3, [pc, #68]	; (8004cf0 <HAL_RCC_OscConfig+0x4c4>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d0f0      	beq.n	8004c96 <HAL_RCC_OscConfig+0x46a>
 8004cb4:	e035      	b.n	8004d22 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cb6:	4b10      	ldr	r3, [pc, #64]	; (8004cf8 <HAL_RCC_OscConfig+0x4cc>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cbc:	f7ff fb16 	bl	80042ec <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cc4:	f7ff fb12 	bl	80042ec <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e026      	b.n	8004d24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cd6:	4b06      	ldr	r3, [pc, #24]	; (8004cf0 <HAL_RCC_OscConfig+0x4c4>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1f0      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x498>
 8004ce2:	e01e      	b.n	8004d22 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	69db      	ldr	r3, [r3, #28]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d107      	bne.n	8004cfc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e019      	b.n	8004d24 <HAL_RCC_OscConfig+0x4f8>
 8004cf0:	40021000 	.word	0x40021000
 8004cf4:	40007000 	.word	0x40007000
 8004cf8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004cfc:	4b0b      	ldr	r3, [pc, #44]	; (8004d2c <HAL_RCC_OscConfig+0x500>)
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d106      	bne.n	8004d1e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d001      	beq.n	8004d22 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e000      	b.n	8004d24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3718      	adds	r7, #24
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	40021000 	.word	0x40021000

08004d30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e0d0      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d44:	4b6a      	ldr	r3, [pc, #424]	; (8004ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0307 	and.w	r3, r3, #7
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d910      	bls.n	8004d74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d52:	4b67      	ldr	r3, [pc, #412]	; (8004ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f023 0207 	bic.w	r2, r3, #7
 8004d5a:	4965      	ldr	r1, [pc, #404]	; (8004ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d62:	4b63      	ldr	r3, [pc, #396]	; (8004ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0307 	and.w	r3, r3, #7
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d001      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e0b8      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d020      	beq.n	8004dc2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0304 	and.w	r3, r3, #4
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d005      	beq.n	8004d98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d8c:	4b59      	ldr	r3, [pc, #356]	; (8004ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	4a58      	ldr	r2, [pc, #352]	; (8004ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004d96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0308 	and.w	r3, r3, #8
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d005      	beq.n	8004db0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004da4:	4b53      	ldr	r3, [pc, #332]	; (8004ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	4a52      	ldr	r2, [pc, #328]	; (8004ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8004daa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004dae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004db0:	4b50      	ldr	r3, [pc, #320]	; (8004ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	494d      	ldr	r1, [pc, #308]	; (8004ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d040      	beq.n	8004e50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d107      	bne.n	8004de6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dd6:	4b47      	ldr	r3, [pc, #284]	; (8004ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d115      	bne.n	8004e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e07f      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d107      	bne.n	8004dfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dee:	4b41      	ldr	r3, [pc, #260]	; (8004ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d109      	bne.n	8004e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e073      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dfe:	4b3d      	ldr	r3, [pc, #244]	; (8004ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e06b      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e0e:	4b39      	ldr	r3, [pc, #228]	; (8004ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f023 0203 	bic.w	r2, r3, #3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	4936      	ldr	r1, [pc, #216]	; (8004ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e20:	f7ff fa64 	bl	80042ec <HAL_GetTick>
 8004e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e26:	e00a      	b.n	8004e3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e28:	f7ff fa60 	bl	80042ec <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e053      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e3e:	4b2d      	ldr	r3, [pc, #180]	; (8004ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f003 020c 	and.w	r2, r3, #12
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d1eb      	bne.n	8004e28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e50:	4b27      	ldr	r3, [pc, #156]	; (8004ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	683a      	ldr	r2, [r7, #0]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d210      	bcs.n	8004e80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e5e:	4b24      	ldr	r3, [pc, #144]	; (8004ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f023 0207 	bic.w	r2, r3, #7
 8004e66:	4922      	ldr	r1, [pc, #136]	; (8004ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e6e:	4b20      	ldr	r3, [pc, #128]	; (8004ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0307 	and.w	r3, r3, #7
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d001      	beq.n	8004e80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e032      	b.n	8004ee6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0304 	and.w	r3, r3, #4
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d008      	beq.n	8004e9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e8c:	4b19      	ldr	r3, [pc, #100]	; (8004ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	4916      	ldr	r1, [pc, #88]	; (8004ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d009      	beq.n	8004ebe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004eaa:	4b12      	ldr	r3, [pc, #72]	; (8004ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	490e      	ldr	r1, [pc, #56]	; (8004ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ebe:	f000 f821 	bl	8004f04 <HAL_RCC_GetSysClockFreq>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	4b0b      	ldr	r3, [pc, #44]	; (8004ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	091b      	lsrs	r3, r3, #4
 8004eca:	f003 030f 	and.w	r3, r3, #15
 8004ece:	490a      	ldr	r1, [pc, #40]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ed0:	5ccb      	ldrb	r3, [r1, r3]
 8004ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ed6:	4a09      	ldr	r2, [pc, #36]	; (8004efc <HAL_RCC_ClockConfig+0x1cc>)
 8004ed8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004eda:	4b09      	ldr	r3, [pc, #36]	; (8004f00 <HAL_RCC_ClockConfig+0x1d0>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7ff f8ba 	bl	8004058 <HAL_InitTick>

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	40022000 	.word	0x40022000
 8004ef4:	40021000 	.word	0x40021000
 8004ef8:	08008a78 	.word	0x08008a78
 8004efc:	20000000 	.word	0x20000000
 8004f00:	20000004 	.word	0x20000004

08004f04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b087      	sub	sp, #28
 8004f08:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	60fb      	str	r3, [r7, #12]
 8004f0e:	2300      	movs	r3, #0
 8004f10:	60bb      	str	r3, [r7, #8]
 8004f12:	2300      	movs	r3, #0
 8004f14:	617b      	str	r3, [r7, #20]
 8004f16:	2300      	movs	r3, #0
 8004f18:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004f1e:	4b1e      	ldr	r3, [pc, #120]	; (8004f98 <HAL_RCC_GetSysClockFreq+0x94>)
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f003 030c 	and.w	r3, r3, #12
 8004f2a:	2b04      	cmp	r3, #4
 8004f2c:	d002      	beq.n	8004f34 <HAL_RCC_GetSysClockFreq+0x30>
 8004f2e:	2b08      	cmp	r3, #8
 8004f30:	d003      	beq.n	8004f3a <HAL_RCC_GetSysClockFreq+0x36>
 8004f32:	e027      	b.n	8004f84 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f34:	4b19      	ldr	r3, [pc, #100]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x98>)
 8004f36:	613b      	str	r3, [r7, #16]
      break;
 8004f38:	e027      	b.n	8004f8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	0c9b      	lsrs	r3, r3, #18
 8004f3e:	f003 030f 	and.w	r3, r3, #15
 8004f42:	4a17      	ldr	r2, [pc, #92]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004f44:	5cd3      	ldrb	r3, [r2, r3]
 8004f46:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d010      	beq.n	8004f74 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f52:	4b11      	ldr	r3, [pc, #68]	; (8004f98 <HAL_RCC_GetSysClockFreq+0x94>)
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	0c5b      	lsrs	r3, r3, #17
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	4a11      	ldr	r2, [pc, #68]	; (8004fa4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004f5e:	5cd3      	ldrb	r3, [r2, r3]
 8004f60:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a0d      	ldr	r2, [pc, #52]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x98>)
 8004f66:	fb03 f202 	mul.w	r2, r3, r2
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f70:	617b      	str	r3, [r7, #20]
 8004f72:	e004      	b.n	8004f7e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a0c      	ldr	r2, [pc, #48]	; (8004fa8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004f78:	fb02 f303 	mul.w	r3, r2, r3
 8004f7c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	613b      	str	r3, [r7, #16]
      break;
 8004f82:	e002      	b.n	8004f8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f84:	4b05      	ldr	r3, [pc, #20]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x98>)
 8004f86:	613b      	str	r3, [r7, #16]
      break;
 8004f88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f8a:	693b      	ldr	r3, [r7, #16]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	371c      	adds	r7, #28
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bc80      	pop	{r7}
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	40021000 	.word	0x40021000
 8004f9c:	007a1200 	.word	0x007a1200
 8004fa0:	08008a90 	.word	0x08008a90
 8004fa4:	08008aa0 	.word	0x08008aa0
 8004fa8:	003d0900 	.word	0x003d0900

08004fac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fac:	b480      	push	{r7}
 8004fae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fb0:	4b02      	ldr	r3, [pc, #8]	; (8004fbc <HAL_RCC_GetHCLKFreq+0x10>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bc80      	pop	{r7}
 8004fba:	4770      	bx	lr
 8004fbc:	20000000 	.word	0x20000000

08004fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004fc4:	f7ff fff2 	bl	8004fac <HAL_RCC_GetHCLKFreq>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	4b05      	ldr	r3, [pc, #20]	; (8004fe0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	0a1b      	lsrs	r3, r3, #8
 8004fd0:	f003 0307 	and.w	r3, r3, #7
 8004fd4:	4903      	ldr	r1, [pc, #12]	; (8004fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fd6:	5ccb      	ldrb	r3, [r1, r3]
 8004fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	08008a88 	.word	0x08008a88

08004fe8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	220f      	movs	r2, #15
 8004ff6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ff8:	4b11      	ldr	r3, [pc, #68]	; (8005040 <HAL_RCC_GetClockConfig+0x58>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f003 0203 	and.w	r2, r3, #3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005004:	4b0e      	ldr	r3, [pc, #56]	; (8005040 <HAL_RCC_GetClockConfig+0x58>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005010:	4b0b      	ldr	r3, [pc, #44]	; (8005040 <HAL_RCC_GetClockConfig+0x58>)
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800501c:	4b08      	ldr	r3, [pc, #32]	; (8005040 <HAL_RCC_GetClockConfig+0x58>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	08db      	lsrs	r3, r3, #3
 8005022:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800502a:	4b06      	ldr	r3, [pc, #24]	; (8005044 <HAL_RCC_GetClockConfig+0x5c>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0207 	and.w	r2, r3, #7
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	bc80      	pop	{r7}
 800503e:	4770      	bx	lr
 8005040:	40021000 	.word	0x40021000
 8005044:	40022000 	.word	0x40022000

08005048 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005050:	4b0a      	ldr	r3, [pc, #40]	; (800507c <RCC_Delay+0x34>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a0a      	ldr	r2, [pc, #40]	; (8005080 <RCC_Delay+0x38>)
 8005056:	fba2 2303 	umull	r2, r3, r2, r3
 800505a:	0a5b      	lsrs	r3, r3, #9
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	fb02 f303 	mul.w	r3, r2, r3
 8005062:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005064:	bf00      	nop
  }
  while (Delay --);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	1e5a      	subs	r2, r3, #1
 800506a:	60fa      	str	r2, [r7, #12]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1f9      	bne.n	8005064 <RCC_Delay+0x1c>
}
 8005070:	bf00      	nop
 8005072:	bf00      	nop
 8005074:	3714      	adds	r7, #20
 8005076:	46bd      	mov	sp, r7
 8005078:	bc80      	pop	{r7}
 800507a:	4770      	bx	lr
 800507c:	20000000 	.word	0x20000000
 8005080:	10624dd3 	.word	0x10624dd3

08005084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e041      	b.n	800511a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d106      	bne.n	80050b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f839 	bl	8005122 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2202      	movs	r2, #2
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3304      	adds	r3, #4
 80050c0:	4619      	mov	r1, r3
 80050c2:	4610      	mov	r0, r2
 80050c4:	f000 f9b4 	bl	8005430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005122:	b480      	push	{r7}
 8005124:	b083      	sub	sp, #12
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800512a:	bf00      	nop
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	bc80      	pop	{r7}
 8005132:	4770      	bx	lr

08005134 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b01      	cmp	r3, #1
 8005146:	d001      	beq.n	800514c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e03a      	b.n	80051c2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68da      	ldr	r2, [r3, #12]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f042 0201 	orr.w	r2, r2, #1
 8005162:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a18      	ldr	r2, [pc, #96]	; (80051cc <HAL_TIM_Base_Start_IT+0x98>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d00e      	beq.n	800518c <HAL_TIM_Base_Start_IT+0x58>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005176:	d009      	beq.n	800518c <HAL_TIM_Base_Start_IT+0x58>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a14      	ldr	r2, [pc, #80]	; (80051d0 <HAL_TIM_Base_Start_IT+0x9c>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d004      	beq.n	800518c <HAL_TIM_Base_Start_IT+0x58>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a13      	ldr	r2, [pc, #76]	; (80051d4 <HAL_TIM_Base_Start_IT+0xa0>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d111      	bne.n	80051b0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f003 0307 	and.w	r3, r3, #7
 8005196:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2b06      	cmp	r3, #6
 800519c:	d010      	beq.n	80051c0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f042 0201 	orr.w	r2, r2, #1
 80051ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ae:	e007      	b.n	80051c0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f042 0201 	orr.w	r2, r2, #1
 80051be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bc80      	pop	{r7}
 80051ca:	4770      	bx	lr
 80051cc:	40012c00 	.word	0x40012c00
 80051d0:	40000400 	.word	0x40000400
 80051d4:	40000800 	.word	0x40000800

080051d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d122      	bne.n	8005234 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d11b      	bne.n	8005234 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f06f 0202 	mvn.w	r2, #2
 8005204:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	f003 0303 	and.w	r3, r3, #3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f8ed 	bl	80053fa <HAL_TIM_IC_CaptureCallback>
 8005220:	e005      	b.n	800522e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f8e0 	bl	80053e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 f8ef 	bl	800540c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	f003 0304 	and.w	r3, r3, #4
 800523e:	2b04      	cmp	r3, #4
 8005240:	d122      	bne.n	8005288 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b04      	cmp	r3, #4
 800524e:	d11b      	bne.n	8005288 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f06f 0204 	mvn.w	r2, #4
 8005258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2202      	movs	r2, #2
 800525e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f8c3 	bl	80053fa <HAL_TIM_IC_CaptureCallback>
 8005274:	e005      	b.n	8005282 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f8b6 	bl	80053e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f8c5 	bl	800540c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	f003 0308 	and.w	r3, r3, #8
 8005292:	2b08      	cmp	r3, #8
 8005294:	d122      	bne.n	80052dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f003 0308 	and.w	r3, r3, #8
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d11b      	bne.n	80052dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f06f 0208 	mvn.w	r2, #8
 80052ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2204      	movs	r2, #4
 80052b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	f003 0303 	and.w	r3, r3, #3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d003      	beq.n	80052ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f899 	bl	80053fa <HAL_TIM_IC_CaptureCallback>
 80052c8:	e005      	b.n	80052d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f88c 	bl	80053e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 f89b 	bl	800540c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f003 0310 	and.w	r3, r3, #16
 80052e6:	2b10      	cmp	r3, #16
 80052e8:	d122      	bne.n	8005330 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f003 0310 	and.w	r3, r3, #16
 80052f4:	2b10      	cmp	r3, #16
 80052f6:	d11b      	bne.n	8005330 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f06f 0210 	mvn.w	r2, #16
 8005300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2208      	movs	r2, #8
 8005306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f86f 	bl	80053fa <HAL_TIM_IC_CaptureCallback>
 800531c:	e005      	b.n	800532a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f862 	bl	80053e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 f871 	bl	800540c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b01      	cmp	r3, #1
 800533c:	d10e      	bne.n	800535c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b01      	cmp	r3, #1
 800534a:	d107      	bne.n	800535c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f06f 0201 	mvn.w	r2, #1
 8005354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7fe fdbc 	bl	8003ed4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005366:	2b80      	cmp	r3, #128	; 0x80
 8005368:	d10e      	bne.n	8005388 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005374:	2b80      	cmp	r3, #128	; 0x80
 8005376:	d107      	bne.n	8005388 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f8bf 	bl	8005506 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005392:	2b40      	cmp	r3, #64	; 0x40
 8005394:	d10e      	bne.n	80053b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a0:	2b40      	cmp	r3, #64	; 0x40
 80053a2:	d107      	bne.n	80053b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f835 	bl	800541e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	f003 0320 	and.w	r3, r3, #32
 80053be:	2b20      	cmp	r3, #32
 80053c0:	d10e      	bne.n	80053e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f003 0320 	and.w	r3, r3, #32
 80053cc:	2b20      	cmp	r3, #32
 80053ce:	d107      	bne.n	80053e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f06f 0220 	mvn.w	r2, #32
 80053d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f88a 	bl	80054f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053e0:	bf00      	nop
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bc80      	pop	{r7}
 80053f8:	4770      	bx	lr

080053fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b083      	sub	sp, #12
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005402:	bf00      	nop
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	bc80      	pop	{r7}
 800540a:	4770      	bx	lr

0800540c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	bc80      	pop	{r7}
 800541c:	4770      	bx	lr

0800541e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800541e:	b480      	push	{r7}
 8005420:	b083      	sub	sp, #12
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	bc80      	pop	{r7}
 800542e:	4770      	bx	lr

08005430 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a29      	ldr	r2, [pc, #164]	; (80054e8 <TIM_Base_SetConfig+0xb8>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d00b      	beq.n	8005460 <TIM_Base_SetConfig+0x30>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800544e:	d007      	beq.n	8005460 <TIM_Base_SetConfig+0x30>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a26      	ldr	r2, [pc, #152]	; (80054ec <TIM_Base_SetConfig+0xbc>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d003      	beq.n	8005460 <TIM_Base_SetConfig+0x30>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a25      	ldr	r2, [pc, #148]	; (80054f0 <TIM_Base_SetConfig+0xc0>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d108      	bne.n	8005472 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005466:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	4313      	orrs	r3, r2
 8005470:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a1c      	ldr	r2, [pc, #112]	; (80054e8 <TIM_Base_SetConfig+0xb8>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d00b      	beq.n	8005492 <TIM_Base_SetConfig+0x62>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005480:	d007      	beq.n	8005492 <TIM_Base_SetConfig+0x62>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a19      	ldr	r2, [pc, #100]	; (80054ec <TIM_Base_SetConfig+0xbc>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d003      	beq.n	8005492 <TIM_Base_SetConfig+0x62>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a18      	ldr	r2, [pc, #96]	; (80054f0 <TIM_Base_SetConfig+0xc0>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d108      	bne.n	80054a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a07      	ldr	r2, [pc, #28]	; (80054e8 <TIM_Base_SetConfig+0xb8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d103      	bne.n	80054d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	691a      	ldr	r2, [r3, #16]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	615a      	str	r2, [r3, #20]
}
 80054de:	bf00      	nop
 80054e0:	3714      	adds	r7, #20
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bc80      	pop	{r7}
 80054e6:	4770      	bx	lr
 80054e8:	40012c00 	.word	0x40012c00
 80054ec:	40000400 	.word	0x40000400
 80054f0:	40000800 	.word	0x40000800

080054f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	bc80      	pop	{r7}
 8005504:	4770      	bx	lr

08005506 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800550e:	bf00      	nop
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	bc80      	pop	{r7}
 8005516:	4770      	bx	lr

08005518 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800551e:	f3ef 8305 	mrs	r3, IPSR
 8005522:	60bb      	str	r3, [r7, #8]
  return(result);
 8005524:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10f      	bne.n	800554a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800552a:	f3ef 8310 	mrs	r3, PRIMASK
 800552e:	607b      	str	r3, [r7, #4]
  return(result);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d109      	bne.n	800554a <osKernelInitialize+0x32>
 8005536:	4b10      	ldr	r3, [pc, #64]	; (8005578 <osKernelInitialize+0x60>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2b02      	cmp	r3, #2
 800553c:	d109      	bne.n	8005552 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800553e:	f3ef 8311 	mrs	r3, BASEPRI
 8005542:	603b      	str	r3, [r7, #0]
  return(result);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800554a:	f06f 0305 	mvn.w	r3, #5
 800554e:	60fb      	str	r3, [r7, #12]
 8005550:	e00c      	b.n	800556c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005552:	4b09      	ldr	r3, [pc, #36]	; (8005578 <osKernelInitialize+0x60>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d105      	bne.n	8005566 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800555a:	4b07      	ldr	r3, [pc, #28]	; (8005578 <osKernelInitialize+0x60>)
 800555c:	2201      	movs	r2, #1
 800555e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005560:	2300      	movs	r3, #0
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	e002      	b.n	800556c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005566:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800556a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800556c:	68fb      	ldr	r3, [r7, #12]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	bc80      	pop	{r7}
 8005576:	4770      	bx	lr
 8005578:	20000728 	.word	0x20000728

0800557c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005582:	f3ef 8305 	mrs	r3, IPSR
 8005586:	60bb      	str	r3, [r7, #8]
  return(result);
 8005588:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10f      	bne.n	80055ae <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800558e:	f3ef 8310 	mrs	r3, PRIMASK
 8005592:	607b      	str	r3, [r7, #4]
  return(result);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d109      	bne.n	80055ae <osKernelStart+0x32>
 800559a:	4b11      	ldr	r3, [pc, #68]	; (80055e0 <osKernelStart+0x64>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d109      	bne.n	80055b6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80055a2:	f3ef 8311 	mrs	r3, BASEPRI
 80055a6:	603b      	str	r3, [r7, #0]
  return(result);
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80055ae:	f06f 0305 	mvn.w	r3, #5
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	e00e      	b.n	80055d4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80055b6:	4b0a      	ldr	r3, [pc, #40]	; (80055e0 <osKernelStart+0x64>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d107      	bne.n	80055ce <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80055be:	4b08      	ldr	r3, [pc, #32]	; (80055e0 <osKernelStart+0x64>)
 80055c0:	2202      	movs	r2, #2
 80055c2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80055c4:	f001 f952 	bl	800686c <vTaskStartScheduler>
      stat = osOK;
 80055c8:	2300      	movs	r3, #0
 80055ca:	60fb      	str	r3, [r7, #12]
 80055cc:	e002      	b.n	80055d4 <osKernelStart+0x58>
    } else {
      stat = osError;
 80055ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80055d4:	68fb      	ldr	r3, [r7, #12]
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	20000728 	.word	0x20000728

080055e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b092      	sub	sp, #72	; 0x48
 80055e8:	af04      	add	r7, sp, #16
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80055f0:	2300      	movs	r3, #0
 80055f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055f4:	f3ef 8305 	mrs	r3, IPSR
 80055f8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f040 8094 	bne.w	800572a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005602:	f3ef 8310 	mrs	r3, PRIMASK
 8005606:	623b      	str	r3, [r7, #32]
  return(result);
 8005608:	6a3b      	ldr	r3, [r7, #32]
 800560a:	2b00      	cmp	r3, #0
 800560c:	f040 808d 	bne.w	800572a <osThreadNew+0x146>
 8005610:	4b48      	ldr	r3, [pc, #288]	; (8005734 <osThreadNew+0x150>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2b02      	cmp	r3, #2
 8005616:	d106      	bne.n	8005626 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005618:	f3ef 8311 	mrs	r3, BASEPRI
 800561c:	61fb      	str	r3, [r7, #28]
  return(result);
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	2b00      	cmp	r3, #0
 8005622:	f040 8082 	bne.w	800572a <osThreadNew+0x146>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d07e      	beq.n	800572a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800562c:	2380      	movs	r3, #128	; 0x80
 800562e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005630:	2318      	movs	r3, #24
 8005632:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005634:	2300      	movs	r3, #0
 8005636:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005638:	f107 031b 	add.w	r3, r7, #27
 800563c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800563e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005642:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d045      	beq.n	80056d6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d002      	beq.n	8005658 <osThreadNew+0x74>
        name = attr->name;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d002      	beq.n	8005666 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005668:	2b00      	cmp	r3, #0
 800566a:	d008      	beq.n	800567e <osThreadNew+0x9a>
 800566c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566e:	2b38      	cmp	r3, #56	; 0x38
 8005670:	d805      	bhi.n	800567e <osThreadNew+0x9a>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d001      	beq.n	8005682 <osThreadNew+0x9e>
        return (NULL);
 800567e:	2300      	movs	r3, #0
 8005680:	e054      	b.n	800572c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	089b      	lsrs	r3, r3, #2
 8005690:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00e      	beq.n	80056b8 <osThreadNew+0xd4>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	2b5b      	cmp	r3, #91	; 0x5b
 80056a0:	d90a      	bls.n	80056b8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d006      	beq.n	80056b8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d002      	beq.n	80056b8 <osThreadNew+0xd4>
        mem = 1;
 80056b2:	2301      	movs	r3, #1
 80056b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80056b6:	e010      	b.n	80056da <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10c      	bne.n	80056da <osThreadNew+0xf6>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d108      	bne.n	80056da <osThreadNew+0xf6>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d104      	bne.n	80056da <osThreadNew+0xf6>
          mem = 0;
 80056d0:	2300      	movs	r3, #0
 80056d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80056d4:	e001      	b.n	80056da <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80056d6:	2300      	movs	r3, #0
 80056d8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80056da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d110      	bne.n	8005702 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80056e8:	9202      	str	r2, [sp, #8]
 80056ea:	9301      	str	r3, [sp, #4]
 80056ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f000 feec 	bl	80064d4 <xTaskCreateStatic>
 80056fc:	4603      	mov	r3, r0
 80056fe:	617b      	str	r3, [r7, #20]
 8005700:	e013      	b.n	800572a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005704:	2b00      	cmp	r3, #0
 8005706:	d110      	bne.n	800572a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570a:	b29a      	uxth	r2, r3
 800570c:	f107 0314 	add.w	r3, r7, #20
 8005710:	9301      	str	r3, [sp, #4]
 8005712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f000 ff36 	bl	800658c <xTaskCreate>
 8005720:	4603      	mov	r3, r0
 8005722:	2b01      	cmp	r3, #1
 8005724:	d001      	beq.n	800572a <osThreadNew+0x146>
          hTask = NULL;
 8005726:	2300      	movs	r3, #0
 8005728:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800572a:	697b      	ldr	r3, [r7, #20]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3738      	adds	r7, #56	; 0x38
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	20000728 	.word	0x20000728

08005738 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005740:	f3ef 8305 	mrs	r3, IPSR
 8005744:	613b      	str	r3, [r7, #16]
  return(result);
 8005746:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10f      	bne.n	800576c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800574c:	f3ef 8310 	mrs	r3, PRIMASK
 8005750:	60fb      	str	r3, [r7, #12]
  return(result);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d109      	bne.n	800576c <osDelay+0x34>
 8005758:	4b0d      	ldr	r3, [pc, #52]	; (8005790 <osDelay+0x58>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2b02      	cmp	r3, #2
 800575e:	d109      	bne.n	8005774 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005760:	f3ef 8311 	mrs	r3, BASEPRI
 8005764:	60bb      	str	r3, [r7, #8]
  return(result);
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d003      	beq.n	8005774 <osDelay+0x3c>
    stat = osErrorISR;
 800576c:	f06f 0305 	mvn.w	r3, #5
 8005770:	617b      	str	r3, [r7, #20]
 8005772:	e007      	b.n	8005784 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005774:	2300      	movs	r3, #0
 8005776:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d002      	beq.n	8005784 <osDelay+0x4c>
      vTaskDelay(ticks);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f001 f840 	bl	8006804 <vTaskDelay>
    }
  }

  return (stat);
 8005784:	697b      	ldr	r3, [r7, #20]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3718      	adds	r7, #24
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	20000728 	.word	0x20000728

08005794 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f002 f933 	bl	8007a08 <pvTimerGetTimerID>
 80057a2:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d005      	beq.n	80057b6 <TimerCallback+0x22>
    callb->func (callb->arg);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	6852      	ldr	r2, [r2, #4]
 80057b2:	4610      	mov	r0, r2
 80057b4:	4798      	blx	r3
  }
}
 80057b6:	bf00      	nop
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
	...

080057c0 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b08e      	sub	sp, #56	; 0x38
 80057c4:	af02      	add	r7, sp, #8
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	607a      	str	r2, [r7, #4]
 80057ca:	603b      	str	r3, [r7, #0]
 80057cc:	460b      	mov	r3, r1
 80057ce:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80057d0:	2300      	movs	r3, #0
 80057d2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057d4:	f3ef 8305 	mrs	r3, IPSR
 80057d8:	61bb      	str	r3, [r7, #24]
  return(result);
 80057da:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d16a      	bne.n	80058b6 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057e0:	f3ef 8310 	mrs	r3, PRIMASK
 80057e4:	617b      	str	r3, [r7, #20]
  return(result);
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d164      	bne.n	80058b6 <osTimerNew+0xf6>
 80057ec:	4b34      	ldr	r3, [pc, #208]	; (80058c0 <osTimerNew+0x100>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d105      	bne.n	8005800 <osTimerNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80057f4:	f3ef 8311 	mrs	r3, BASEPRI
 80057f8:	613b      	str	r3, [r7, #16]
  return(result);
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d15a      	bne.n	80058b6 <osTimerNew+0xf6>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d057      	beq.n	80058b6 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8005806:	2008      	movs	r0, #8
 8005808:	f002 fb10 	bl	8007e2c <pvPortMalloc>
 800580c:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d050      	beq.n	80058b6 <osTimerNew+0xf6>
      callb->func = func;
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8005820:	7afb      	ldrb	r3, [r7, #11]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d102      	bne.n	800582c <osTimerNew+0x6c>
        reload = pdFALSE;
 8005826:	2300      	movs	r3, #0
 8005828:	627b      	str	r3, [r7, #36]	; 0x24
 800582a:	e001      	b.n	8005830 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 800582c:	2301      	movs	r3, #1
 800582e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8005830:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005834:	623b      	str	r3, [r7, #32]
      name = NULL;
 8005836:	2300      	movs	r3, #0
 8005838:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d01c      	beq.n	800587a <osTimerNew+0xba>
        if (attr->name != NULL) {
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <osTimerNew+0x8e>
          name = attr->name;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d006      	beq.n	8005864 <osTimerNew+0xa4>
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	2b2f      	cmp	r3, #47	; 0x2f
 800585c:	d902      	bls.n	8005864 <osTimerNew+0xa4>
          mem = 1;
 800585e:	2301      	movs	r3, #1
 8005860:	623b      	str	r3, [r7, #32]
 8005862:	e00c      	b.n	800587e <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d108      	bne.n	800587e <osTimerNew+0xbe>
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d104      	bne.n	800587e <osTimerNew+0xbe>
            mem = 0;
 8005874:	2300      	movs	r3, #0
 8005876:	623b      	str	r3, [r7, #32]
 8005878:	e001      	b.n	800587e <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800587a:	2300      	movs	r3, #0
 800587c:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800587e:	6a3b      	ldr	r3, [r7, #32]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d10c      	bne.n	800589e <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	9301      	str	r3, [sp, #4]
 800588a:	4b0e      	ldr	r3, [pc, #56]	; (80058c4 <osTimerNew+0x104>)
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005892:	2101      	movs	r1, #1
 8005894:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005896:	f001 fd7e 	bl	8007396 <xTimerCreateStatic>
 800589a:	62b8      	str	r0, [r7, #40]	; 0x28
 800589c:	e00b      	b.n	80058b6 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d108      	bne.n	80058b6 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80058a4:	4b07      	ldr	r3, [pc, #28]	; (80058c4 <osTimerNew+0x104>)
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ac:	2101      	movs	r1, #1
 80058ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80058b0:	f001 fd50 	bl	8007354 <xTimerCreate>
 80058b4:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80058b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3730      	adds	r7, #48	; 0x30
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	20000728 	.word	0x20000728
 80058c4:	08005795 	.word	0x08005795

080058c8 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b08a      	sub	sp, #40	; 0x28
 80058cc:	af02      	add	r7, sp, #8
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058d6:	f3ef 8305 	mrs	r3, IPSR
 80058da:	617b      	str	r3, [r7, #20]
  return(result);
 80058dc:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10f      	bne.n	8005902 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058e2:	f3ef 8310 	mrs	r3, PRIMASK
 80058e6:	613b      	str	r3, [r7, #16]
  return(result);
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d109      	bne.n	8005902 <osTimerStart+0x3a>
 80058ee:	4b15      	ldr	r3, [pc, #84]	; (8005944 <osTimerStart+0x7c>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d109      	bne.n	800590a <osTimerStart+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80058f6:	f3ef 8311 	mrs	r3, BASEPRI
 80058fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d003      	beq.n	800590a <osTimerStart+0x42>
    stat = osErrorISR;
 8005902:	f06f 0305 	mvn.w	r3, #5
 8005906:	61fb      	str	r3, [r7, #28]
 8005908:	e017      	b.n	800593a <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d103      	bne.n	8005918 <osTimerStart+0x50>
    stat = osErrorParameter;
 8005910:	f06f 0303 	mvn.w	r3, #3
 8005914:	61fb      	str	r3, [r7, #28]
 8005916:	e010      	b.n	800593a <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8005918:	2300      	movs	r3, #0
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	2300      	movs	r3, #0
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	2104      	movs	r1, #4
 8005922:	69b8      	ldr	r0, [r7, #24]
 8005924:	f001 fda6 	bl	8007474 <xTimerGenericCommand>
 8005928:	4603      	mov	r3, r0
 800592a:	2b01      	cmp	r3, #1
 800592c:	d102      	bne.n	8005934 <osTimerStart+0x6c>
      stat = osOK;
 800592e:	2300      	movs	r3, #0
 8005930:	61fb      	str	r3, [r7, #28]
 8005932:	e002      	b.n	800593a <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 8005934:	f06f 0302 	mvn.w	r3, #2
 8005938:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 800593a:	69fb      	ldr	r3, [r7, #28]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3720      	adds	r7, #32
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	20000728 	.word	0x20000728

08005948 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	4a06      	ldr	r2, [pc, #24]	; (8005970 <vApplicationGetIdleTaskMemory+0x28>)
 8005958:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	4a05      	ldr	r2, [pc, #20]	; (8005974 <vApplicationGetIdleTaskMemory+0x2c>)
 800595e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2280      	movs	r2, #128	; 0x80
 8005964:	601a      	str	r2, [r3, #0]
}
 8005966:	bf00      	nop
 8005968:	3714      	adds	r7, #20
 800596a:	46bd      	mov	sp, r7
 800596c:	bc80      	pop	{r7}
 800596e:	4770      	bx	lr
 8005970:	2000072c 	.word	0x2000072c
 8005974:	20000788 	.word	0x20000788

08005978 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	4a07      	ldr	r2, [pc, #28]	; (80059a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8005988:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	4a06      	ldr	r2, [pc, #24]	; (80059a8 <vApplicationGetTimerTaskMemory+0x30>)
 800598e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005996:	601a      	str	r2, [r3, #0]
}
 8005998:	bf00      	nop
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	bc80      	pop	{r7}
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	20000988 	.word	0x20000988
 80059a8:	200009e4 	.word	0x200009e4

080059ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f103 0208 	add.w	r2, r3, #8
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f103 0208 	add.w	r2, r3, #8
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f103 0208 	add.w	r2, r3, #8
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bc80      	pop	{r7}
 80059e8:	4770      	bx	lr

080059ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80059ea:	b480      	push	{r7}
 80059ec:	b083      	sub	sp, #12
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bc80      	pop	{r7}
 8005a00:	4770      	bx	lr

08005a02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a02:	b480      	push	{r7}
 8005a04:	b085      	sub	sp, #20
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
 8005a0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	1c5a      	adds	r2, r3, #1
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	601a      	str	r2, [r3, #0]
}
 8005a3e:	bf00      	nop
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bc80      	pop	{r7}
 8005a46:	4770      	bx	lr

08005a48 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a5e:	d103      	bne.n	8005a68 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	60fb      	str	r3, [r7, #12]
 8005a66:	e00c      	b.n	8005a82 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	3308      	adds	r3, #8
 8005a6c:	60fb      	str	r3, [r7, #12]
 8005a6e:	e002      	b.n	8005a76 <vListInsert+0x2e>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	60fb      	str	r3, [r7, #12]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d2f6      	bcs.n	8005a70 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	683a      	ldr	r2, [r7, #0]
 8005a90:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	1c5a      	adds	r2, r3, #1
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	601a      	str	r2, [r3, #0]
}
 8005aae:	bf00      	nop
 8005ab0:	3714      	adds	r7, #20
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bc80      	pop	{r7}
 8005ab6:	4770      	bx	lr

08005ab8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	6892      	ldr	r2, [r2, #8]
 8005ace:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	6852      	ldr	r2, [r2, #4]
 8005ad8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d103      	bne.n	8005aec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	689a      	ldr	r2, [r3, #8]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	1e5a      	subs	r2, r3, #1
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3714      	adds	r7, #20
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bc80      	pop	{r7}
 8005b08:	4770      	bx	lr
	...

08005b0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10a      	bne.n	8005b36 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b24:	f383 8811 	msr	BASEPRI, r3
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005b32:	bf00      	nop
 8005b34:	e7fe      	b.n	8005b34 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005b36:	f002 f879 	bl	8007c2c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b42:	68f9      	ldr	r1, [r7, #12]
 8005b44:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b46:	fb01 f303 	mul.w	r3, r1, r3
 8005b4a:	441a      	add	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b66:	3b01      	subs	r3, #1
 8005b68:	68f9      	ldr	r1, [r7, #12]
 8005b6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b6c:	fb01 f303 	mul.w	r3, r1, r3
 8005b70:	441a      	add	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	22ff      	movs	r2, #255	; 0xff
 8005b7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	22ff      	movs	r2, #255	; 0xff
 8005b82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d114      	bne.n	8005bb6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d01a      	beq.n	8005bca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	3310      	adds	r3, #16
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f001 f8f1 	bl	8006d80 <xTaskRemoveFromEventList>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d012      	beq.n	8005bca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ba4:	4b0c      	ldr	r3, [pc, #48]	; (8005bd8 <xQueueGenericReset+0xcc>)
 8005ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005baa:	601a      	str	r2, [r3, #0]
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	f3bf 8f6f 	isb	sy
 8005bb4:	e009      	b.n	8005bca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	3310      	adds	r3, #16
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7ff fef6 	bl	80059ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	3324      	adds	r3, #36	; 0x24
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7ff fef1 	bl	80059ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005bca:	f002 f85f 	bl	8007c8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005bce:	2301      	movs	r3, #1
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	e000ed04 	.word	0xe000ed04

08005bdc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b08e      	sub	sp, #56	; 0x38
 8005be0:	af02      	add	r7, sp, #8
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
 8005be8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10a      	bne.n	8005c06 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf4:	f383 8811 	msr	BASEPRI, r3
 8005bf8:	f3bf 8f6f 	isb	sy
 8005bfc:	f3bf 8f4f 	dsb	sy
 8005c00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c02:	bf00      	nop
 8005c04:	e7fe      	b.n	8005c04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10a      	bne.n	8005c22 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c10:	f383 8811 	msr	BASEPRI, r3
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c1e:	bf00      	nop
 8005c20:	e7fe      	b.n	8005c20 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d002      	beq.n	8005c2e <xQueueGenericCreateStatic+0x52>
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <xQueueGenericCreateStatic+0x56>
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e000      	b.n	8005c34 <xQueueGenericCreateStatic+0x58>
 8005c32:	2300      	movs	r3, #0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10a      	bne.n	8005c4e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3c:	f383 8811 	msr	BASEPRI, r3
 8005c40:	f3bf 8f6f 	isb	sy
 8005c44:	f3bf 8f4f 	dsb	sy
 8005c48:	623b      	str	r3, [r7, #32]
}
 8005c4a:	bf00      	nop
 8005c4c:	e7fe      	b.n	8005c4c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d102      	bne.n	8005c5a <xQueueGenericCreateStatic+0x7e>
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <xQueueGenericCreateStatic+0x82>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e000      	b.n	8005c60 <xQueueGenericCreateStatic+0x84>
 8005c5e:	2300      	movs	r3, #0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10a      	bne.n	8005c7a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c68:	f383 8811 	msr	BASEPRI, r3
 8005c6c:	f3bf 8f6f 	isb	sy
 8005c70:	f3bf 8f4f 	dsb	sy
 8005c74:	61fb      	str	r3, [r7, #28]
}
 8005c76:	bf00      	nop
 8005c78:	e7fe      	b.n	8005c78 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005c7a:	2350      	movs	r3, #80	; 0x50
 8005c7c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	2b50      	cmp	r3, #80	; 0x50
 8005c82:	d00a      	beq.n	8005c9a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c88:	f383 8811 	msr	BASEPRI, r3
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	61bb      	str	r3, [r7, #24]
}
 8005c96:	bf00      	nop
 8005c98:	e7fe      	b.n	8005c98 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00d      	beq.n	8005cc0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005cac:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	68b9      	ldr	r1, [r7, #8]
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f000 f805 	bl	8005cca <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3730      	adds	r7, #48	; 0x30
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b084      	sub	sp, #16
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	60f8      	str	r0, [r7, #12]
 8005cd2:	60b9      	str	r1, [r7, #8]
 8005cd4:	607a      	str	r2, [r7, #4]
 8005cd6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d103      	bne.n	8005ce6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	601a      	str	r2, [r3, #0]
 8005ce4:	e002      	b.n	8005cec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005cf8:	2101      	movs	r1, #1
 8005cfa:	69b8      	ldr	r0, [r7, #24]
 8005cfc:	f7ff ff06 	bl	8005b0c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	78fa      	ldrb	r2, [r7, #3]
 8005d04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005d08:	bf00      	nop
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b08e      	sub	sp, #56	; 0x38
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
 8005d1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10a      	bne.n	8005d42 <xQueueGenericSend+0x32>
	__asm volatile
 8005d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d30:	f383 8811 	msr	BASEPRI, r3
 8005d34:	f3bf 8f6f 	isb	sy
 8005d38:	f3bf 8f4f 	dsb	sy
 8005d3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d3e:	bf00      	nop
 8005d40:	e7fe      	b.n	8005d40 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d103      	bne.n	8005d50 <xQueueGenericSend+0x40>
 8005d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <xQueueGenericSend+0x44>
 8005d50:	2301      	movs	r3, #1
 8005d52:	e000      	b.n	8005d56 <xQueueGenericSend+0x46>
 8005d54:	2300      	movs	r3, #0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10a      	bne.n	8005d70 <xQueueGenericSend+0x60>
	__asm volatile
 8005d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d6c:	bf00      	nop
 8005d6e:	e7fe      	b.n	8005d6e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d103      	bne.n	8005d7e <xQueueGenericSend+0x6e>
 8005d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d101      	bne.n	8005d82 <xQueueGenericSend+0x72>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e000      	b.n	8005d84 <xQueueGenericSend+0x74>
 8005d82:	2300      	movs	r3, #0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d10a      	bne.n	8005d9e <xQueueGenericSend+0x8e>
	__asm volatile
 8005d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8c:	f383 8811 	msr	BASEPRI, r3
 8005d90:	f3bf 8f6f 	isb	sy
 8005d94:	f3bf 8f4f 	dsb	sy
 8005d98:	623b      	str	r3, [r7, #32]
}
 8005d9a:	bf00      	nop
 8005d9c:	e7fe      	b.n	8005d9c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d9e:	f001 f9b1 	bl	8007104 <xTaskGetSchedulerState>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d102      	bne.n	8005dae <xQueueGenericSend+0x9e>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <xQueueGenericSend+0xa2>
 8005dae:	2301      	movs	r3, #1
 8005db0:	e000      	b.n	8005db4 <xQueueGenericSend+0xa4>
 8005db2:	2300      	movs	r3, #0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10a      	bne.n	8005dce <xQueueGenericSend+0xbe>
	__asm volatile
 8005db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dbc:	f383 8811 	msr	BASEPRI, r3
 8005dc0:	f3bf 8f6f 	isb	sy
 8005dc4:	f3bf 8f4f 	dsb	sy
 8005dc8:	61fb      	str	r3, [r7, #28]
}
 8005dca:	bf00      	nop
 8005dcc:	e7fe      	b.n	8005dcc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005dce:	f001 ff2d 	bl	8007c2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d302      	bcc.n	8005de4 <xQueueGenericSend+0xd4>
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d129      	bne.n	8005e38 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	68b9      	ldr	r1, [r7, #8]
 8005de8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dea:	f000 fa07 	bl	80061fc <prvCopyDataToQueue>
 8005dee:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d010      	beq.n	8005e1a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfa:	3324      	adds	r3, #36	; 0x24
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f000 ffbf 	bl	8006d80 <xTaskRemoveFromEventList>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d013      	beq.n	8005e30 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005e08:	4b3f      	ldr	r3, [pc, #252]	; (8005f08 <xQueueGenericSend+0x1f8>)
 8005e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e0e:	601a      	str	r2, [r3, #0]
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	e00a      	b.n	8005e30 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d007      	beq.n	8005e30 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005e20:	4b39      	ldr	r3, [pc, #228]	; (8005f08 <xQueueGenericSend+0x1f8>)
 8005e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e26:	601a      	str	r2, [r3, #0]
 8005e28:	f3bf 8f4f 	dsb	sy
 8005e2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005e30:	f001 ff2c 	bl	8007c8c <vPortExitCritical>
				return pdPASS;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e063      	b.n	8005f00 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d103      	bne.n	8005e46 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e3e:	f001 ff25 	bl	8007c8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005e42:	2300      	movs	r3, #0
 8005e44:	e05c      	b.n	8005f00 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d106      	bne.n	8005e5a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e4c:	f107 0314 	add.w	r3, r7, #20
 8005e50:	4618      	mov	r0, r3
 8005e52:	f000 fff9 	bl	8006e48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e56:	2301      	movs	r3, #1
 8005e58:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e5a:	f001 ff17 	bl	8007c8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e5e:	f000 fd6b 	bl	8006938 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e62:	f001 fee3 	bl	8007c2c <vPortEnterCritical>
 8005e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e6c:	b25b      	sxtb	r3, r3
 8005e6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e72:	d103      	bne.n	8005e7c <xQueueGenericSend+0x16c>
 8005e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e82:	b25b      	sxtb	r3, r3
 8005e84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e88:	d103      	bne.n	8005e92 <xQueueGenericSend+0x182>
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e92:	f001 fefb 	bl	8007c8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e96:	1d3a      	adds	r2, r7, #4
 8005e98:	f107 0314 	add.w	r3, r7, #20
 8005e9c:	4611      	mov	r1, r2
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f000 ffe8 	bl	8006e74 <xTaskCheckForTimeOut>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d124      	bne.n	8005ef4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005eaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005eac:	f000 fa9e 	bl	80063ec <prvIsQueueFull>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d018      	beq.n	8005ee8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb8:	3310      	adds	r3, #16
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	4611      	mov	r1, r2
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 ff0e 	bl	8006ce0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ec6:	f000 fa29 	bl	800631c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005eca:	f000 fd43 	bl	8006954 <xTaskResumeAll>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f47f af7c 	bne.w	8005dce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005ed6:	4b0c      	ldr	r3, [pc, #48]	; (8005f08 <xQueueGenericSend+0x1f8>)
 8005ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005edc:	601a      	str	r2, [r3, #0]
 8005ede:	f3bf 8f4f 	dsb	sy
 8005ee2:	f3bf 8f6f 	isb	sy
 8005ee6:	e772      	b.n	8005dce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005eea:	f000 fa17 	bl	800631c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005eee:	f000 fd31 	bl	8006954 <xTaskResumeAll>
 8005ef2:	e76c      	b.n	8005dce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005ef4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ef6:	f000 fa11 	bl	800631c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005efa:	f000 fd2b 	bl	8006954 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005efe:	2300      	movs	r3, #0
		}
	}
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3738      	adds	r7, #56	; 0x38
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	e000ed04 	.word	0xe000ed04

08005f0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b08e      	sub	sp, #56	; 0x38
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
 8005f18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d10a      	bne.n	8005f3a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f28:	f383 8811 	msr	BASEPRI, r3
 8005f2c:	f3bf 8f6f 	isb	sy
 8005f30:	f3bf 8f4f 	dsb	sy
 8005f34:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f36:	bf00      	nop
 8005f38:	e7fe      	b.n	8005f38 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d103      	bne.n	8005f48 <xQueueGenericSendFromISR+0x3c>
 8005f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d101      	bne.n	8005f4c <xQueueGenericSendFromISR+0x40>
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e000      	b.n	8005f4e <xQueueGenericSendFromISR+0x42>
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10a      	bne.n	8005f68 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f56:	f383 8811 	msr	BASEPRI, r3
 8005f5a:	f3bf 8f6f 	isb	sy
 8005f5e:	f3bf 8f4f 	dsb	sy
 8005f62:	623b      	str	r3, [r7, #32]
}
 8005f64:	bf00      	nop
 8005f66:	e7fe      	b.n	8005f66 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d103      	bne.n	8005f76 <xQueueGenericSendFromISR+0x6a>
 8005f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d101      	bne.n	8005f7a <xQueueGenericSendFromISR+0x6e>
 8005f76:	2301      	movs	r3, #1
 8005f78:	e000      	b.n	8005f7c <xQueueGenericSendFromISR+0x70>
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10a      	bne.n	8005f96 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f84:	f383 8811 	msr	BASEPRI, r3
 8005f88:	f3bf 8f6f 	isb	sy
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	61fb      	str	r3, [r7, #28]
}
 8005f92:	bf00      	nop
 8005f94:	e7fe      	b.n	8005f94 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f96:	f001 ff0b 	bl	8007db0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005f9a:	f3ef 8211 	mrs	r2, BASEPRI
 8005f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa2:	f383 8811 	msr	BASEPRI, r3
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	61ba      	str	r2, [r7, #24]
 8005fb0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005fb2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d302      	bcc.n	8005fc8 <xQueueGenericSendFromISR+0xbc>
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d12c      	bne.n	8006022 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	68b9      	ldr	r1, [r7, #8]
 8005fd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fd8:	f000 f910 	bl	80061fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005fdc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fe4:	d112      	bne.n	800600c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d016      	beq.n	800601c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff0:	3324      	adds	r3, #36	; 0x24
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 fec4 	bl	8006d80 <xTaskRemoveFromEventList>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00e      	beq.n	800601c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00b      	beq.n	800601c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	601a      	str	r2, [r3, #0]
 800600a:	e007      	b.n	800601c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800600c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006010:	3301      	adds	r3, #1
 8006012:	b2db      	uxtb	r3, r3
 8006014:	b25a      	sxtb	r2, r3
 8006016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800601c:	2301      	movs	r3, #1
 800601e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006020:	e001      	b.n	8006026 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006022:	2300      	movs	r3, #0
 8006024:	637b      	str	r3, [r7, #52]	; 0x34
 8006026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006028:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006030:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006034:	4618      	mov	r0, r3
 8006036:	3738      	adds	r7, #56	; 0x38
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b08c      	sub	sp, #48	; 0x30
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006048:	2300      	movs	r3, #0
 800604a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10a      	bne.n	800606c <xQueueReceive+0x30>
	__asm volatile
 8006056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605a:	f383 8811 	msr	BASEPRI, r3
 800605e:	f3bf 8f6f 	isb	sy
 8006062:	f3bf 8f4f 	dsb	sy
 8006066:	623b      	str	r3, [r7, #32]
}
 8006068:	bf00      	nop
 800606a:	e7fe      	b.n	800606a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d103      	bne.n	800607a <xQueueReceive+0x3e>
 8006072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <xQueueReceive+0x42>
 800607a:	2301      	movs	r3, #1
 800607c:	e000      	b.n	8006080 <xQueueReceive+0x44>
 800607e:	2300      	movs	r3, #0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d10a      	bne.n	800609a <xQueueReceive+0x5e>
	__asm volatile
 8006084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006088:	f383 8811 	msr	BASEPRI, r3
 800608c:	f3bf 8f6f 	isb	sy
 8006090:	f3bf 8f4f 	dsb	sy
 8006094:	61fb      	str	r3, [r7, #28]
}
 8006096:	bf00      	nop
 8006098:	e7fe      	b.n	8006098 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800609a:	f001 f833 	bl	8007104 <xTaskGetSchedulerState>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d102      	bne.n	80060aa <xQueueReceive+0x6e>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d101      	bne.n	80060ae <xQueueReceive+0x72>
 80060aa:	2301      	movs	r3, #1
 80060ac:	e000      	b.n	80060b0 <xQueueReceive+0x74>
 80060ae:	2300      	movs	r3, #0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10a      	bne.n	80060ca <xQueueReceive+0x8e>
	__asm volatile
 80060b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b8:	f383 8811 	msr	BASEPRI, r3
 80060bc:	f3bf 8f6f 	isb	sy
 80060c0:	f3bf 8f4f 	dsb	sy
 80060c4:	61bb      	str	r3, [r7, #24]
}
 80060c6:	bf00      	nop
 80060c8:	e7fe      	b.n	80060c8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80060ca:	f001 fdaf 	bl	8007c2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d01f      	beq.n	800611a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80060da:	68b9      	ldr	r1, [r7, #8]
 80060dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060de:	f000 f8f7 	bl	80062d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	1e5a      	subs	r2, r3, #1
 80060e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00f      	beq.n	8006112 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f4:	3310      	adds	r3, #16
 80060f6:	4618      	mov	r0, r3
 80060f8:	f000 fe42 	bl	8006d80 <xTaskRemoveFromEventList>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d007      	beq.n	8006112 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006102:	4b3d      	ldr	r3, [pc, #244]	; (80061f8 <xQueueReceive+0x1bc>)
 8006104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006108:	601a      	str	r2, [r3, #0]
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006112:	f001 fdbb 	bl	8007c8c <vPortExitCritical>
				return pdPASS;
 8006116:	2301      	movs	r3, #1
 8006118:	e069      	b.n	80061ee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d103      	bne.n	8006128 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006120:	f001 fdb4 	bl	8007c8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006124:	2300      	movs	r3, #0
 8006126:	e062      	b.n	80061ee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612a:	2b00      	cmp	r3, #0
 800612c:	d106      	bne.n	800613c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800612e:	f107 0310 	add.w	r3, r7, #16
 8006132:	4618      	mov	r0, r3
 8006134:	f000 fe88 	bl	8006e48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006138:	2301      	movs	r3, #1
 800613a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800613c:	f001 fda6 	bl	8007c8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006140:	f000 fbfa 	bl	8006938 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006144:	f001 fd72 	bl	8007c2c <vPortEnterCritical>
 8006148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800614e:	b25b      	sxtb	r3, r3
 8006150:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006154:	d103      	bne.n	800615e <xQueueReceive+0x122>
 8006156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800615e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006160:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006164:	b25b      	sxtb	r3, r3
 8006166:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800616a:	d103      	bne.n	8006174 <xQueueReceive+0x138>
 800616c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616e:	2200      	movs	r2, #0
 8006170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006174:	f001 fd8a 	bl	8007c8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006178:	1d3a      	adds	r2, r7, #4
 800617a:	f107 0310 	add.w	r3, r7, #16
 800617e:	4611      	mov	r1, r2
 8006180:	4618      	mov	r0, r3
 8006182:	f000 fe77 	bl	8006e74 <xTaskCheckForTimeOut>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d123      	bne.n	80061d4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800618c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800618e:	f000 f917 	bl	80063c0 <prvIsQueueEmpty>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d017      	beq.n	80061c8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619a:	3324      	adds	r3, #36	; 0x24
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	4611      	mov	r1, r2
 80061a0:	4618      	mov	r0, r3
 80061a2:	f000 fd9d 	bl	8006ce0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80061a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061a8:	f000 f8b8 	bl	800631c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80061ac:	f000 fbd2 	bl	8006954 <xTaskResumeAll>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d189      	bne.n	80060ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80061b6:	4b10      	ldr	r3, [pc, #64]	; (80061f8 <xQueueReceive+0x1bc>)
 80061b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061bc:	601a      	str	r2, [r3, #0]
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	e780      	b.n	80060ca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80061c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061ca:	f000 f8a7 	bl	800631c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061ce:	f000 fbc1 	bl	8006954 <xTaskResumeAll>
 80061d2:	e77a      	b.n	80060ca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80061d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061d6:	f000 f8a1 	bl	800631c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061da:	f000 fbbb 	bl	8006954 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061e0:	f000 f8ee 	bl	80063c0 <prvIsQueueEmpty>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f43f af6f 	beq.w	80060ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80061ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3730      	adds	r7, #48	; 0x30
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	e000ed04 	.word	0xe000ed04

080061fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b086      	sub	sp, #24
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006208:	2300      	movs	r3, #0
 800620a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006210:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10d      	bne.n	8006236 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d14d      	bne.n	80062be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	4618      	mov	r0, r3
 8006228:	f000 ff8a 	bl	8007140 <xTaskPriorityDisinherit>
 800622c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	605a      	str	r2, [r3, #4]
 8006234:	e043      	b.n	80062be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d119      	bne.n	8006270 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6898      	ldr	r0, [r3, #8]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006244:	461a      	mov	r2, r3
 8006246:	68b9      	ldr	r1, [r7, #8]
 8006248:	f002 fb20 	bl	800888c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	689a      	ldr	r2, [r3, #8]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006254:	441a      	add	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	689a      	ldr	r2, [r3, #8]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	429a      	cmp	r2, r3
 8006264:	d32b      	bcc.n	80062be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	609a      	str	r2, [r3, #8]
 800626e:	e026      	b.n	80062be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	68d8      	ldr	r0, [r3, #12]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006278:	461a      	mov	r2, r3
 800627a:	68b9      	ldr	r1, [r7, #8]
 800627c:	f002 fb06 	bl	800888c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	68da      	ldr	r2, [r3, #12]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006288:	425b      	negs	r3, r3
 800628a:	441a      	add	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	68da      	ldr	r2, [r3, #12]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	429a      	cmp	r2, r3
 800629a:	d207      	bcs.n	80062ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	685a      	ldr	r2, [r3, #4]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a4:	425b      	negs	r3, r3
 80062a6:	441a      	add	r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d105      	bne.n	80062be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	3b01      	subs	r3, #1
 80062bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	1c5a      	adds	r2, r3, #1
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80062c6:	697b      	ldr	r3, [r7, #20]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3718      	adds	r7, #24
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d018      	beq.n	8006314 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	68da      	ldr	r2, [r3, #12]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ea:	441a      	add	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	68da      	ldr	r2, [r3, #12]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d303      	bcc.n	8006304 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	68d9      	ldr	r1, [r3, #12]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630c:	461a      	mov	r2, r3
 800630e:	6838      	ldr	r0, [r7, #0]
 8006310:	f002 fabc 	bl	800888c <memcpy>
	}
}
 8006314:	bf00      	nop
 8006316:	3708      	adds	r7, #8
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006324:	f001 fc82 	bl	8007c2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800632e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006330:	e011      	b.n	8006356 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006336:	2b00      	cmp	r3, #0
 8006338:	d012      	beq.n	8006360 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	3324      	adds	r3, #36	; 0x24
 800633e:	4618      	mov	r0, r3
 8006340:	f000 fd1e 	bl	8006d80 <xTaskRemoveFromEventList>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800634a:	f000 fdf5 	bl	8006f38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800634e:	7bfb      	ldrb	r3, [r7, #15]
 8006350:	3b01      	subs	r3, #1
 8006352:	b2db      	uxtb	r3, r3
 8006354:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800635a:	2b00      	cmp	r3, #0
 800635c:	dce9      	bgt.n	8006332 <prvUnlockQueue+0x16>
 800635e:	e000      	b.n	8006362 <prvUnlockQueue+0x46>
					break;
 8006360:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	22ff      	movs	r2, #255	; 0xff
 8006366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800636a:	f001 fc8f 	bl	8007c8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800636e:	f001 fc5d 	bl	8007c2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006378:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800637a:	e011      	b.n	80063a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d012      	beq.n	80063aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	3310      	adds	r3, #16
 8006388:	4618      	mov	r0, r3
 800638a:	f000 fcf9 	bl	8006d80 <xTaskRemoveFromEventList>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d001      	beq.n	8006398 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006394:	f000 fdd0 	bl	8006f38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006398:	7bbb      	ldrb	r3, [r7, #14]
 800639a:	3b01      	subs	r3, #1
 800639c:	b2db      	uxtb	r3, r3
 800639e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80063a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	dce9      	bgt.n	800637c <prvUnlockQueue+0x60>
 80063a8:	e000      	b.n	80063ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80063aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	22ff      	movs	r2, #255	; 0xff
 80063b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80063b4:	f001 fc6a 	bl	8007c8c <vPortExitCritical>
}
 80063b8:	bf00      	nop
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80063c8:	f001 fc30 	bl	8007c2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d102      	bne.n	80063da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80063d4:	2301      	movs	r3, #1
 80063d6:	60fb      	str	r3, [r7, #12]
 80063d8:	e001      	b.n	80063de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80063da:	2300      	movs	r3, #0
 80063dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80063de:	f001 fc55 	bl	8007c8c <vPortExitCritical>

	return xReturn;
 80063e2:	68fb      	ldr	r3, [r7, #12]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80063f4:	f001 fc1a 	bl	8007c2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006400:	429a      	cmp	r2, r3
 8006402:	d102      	bne.n	800640a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006404:	2301      	movs	r3, #1
 8006406:	60fb      	str	r3, [r7, #12]
 8006408:	e001      	b.n	800640e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800640a:	2300      	movs	r3, #0
 800640c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800640e:	f001 fc3d 	bl	8007c8c <vPortExitCritical>

	return xReturn;
 8006412:	68fb      	ldr	r3, [r7, #12]
}
 8006414:	4618      	mov	r0, r3
 8006416:	3710      	adds	r7, #16
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006426:	2300      	movs	r3, #0
 8006428:	60fb      	str	r3, [r7, #12]
 800642a:	e014      	b.n	8006456 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800642c:	4a0e      	ldr	r2, [pc, #56]	; (8006468 <vQueueAddToRegistry+0x4c>)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d10b      	bne.n	8006450 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006438:	490b      	ldr	r1, [pc, #44]	; (8006468 <vQueueAddToRegistry+0x4c>)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006442:	4a09      	ldr	r2, [pc, #36]	; (8006468 <vQueueAddToRegistry+0x4c>)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	00db      	lsls	r3, r3, #3
 8006448:	4413      	add	r3, r2
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800644e:	e006      	b.n	800645e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	3301      	adds	r3, #1
 8006454:	60fb      	str	r3, [r7, #12]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2b07      	cmp	r3, #7
 800645a:	d9e7      	bls.n	800642c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800645c:	bf00      	nop
 800645e:	bf00      	nop
 8006460:	3714      	adds	r7, #20
 8006462:	46bd      	mov	sp, r7
 8006464:	bc80      	pop	{r7}
 8006466:	4770      	bx	lr
 8006468:	20000de4 	.word	0x20000de4

0800646c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800646c:	b580      	push	{r7, lr}
 800646e:	b086      	sub	sp, #24
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800647c:	f001 fbd6 	bl	8007c2c <vPortEnterCritical>
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006486:	b25b      	sxtb	r3, r3
 8006488:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800648c:	d103      	bne.n	8006496 <vQueueWaitForMessageRestricted+0x2a>
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800649c:	b25b      	sxtb	r3, r3
 800649e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064a2:	d103      	bne.n	80064ac <vQueueWaitForMessageRestricted+0x40>
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064ac:	f001 fbee 	bl	8007c8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d106      	bne.n	80064c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	3324      	adds	r3, #36	; 0x24
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	68b9      	ldr	r1, [r7, #8]
 80064c0:	4618      	mov	r0, r3
 80064c2:	f000 fc31 	bl	8006d28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80064c6:	6978      	ldr	r0, [r7, #20]
 80064c8:	f7ff ff28 	bl	800631c <prvUnlockQueue>
	}
 80064cc:	bf00      	nop
 80064ce:	3718      	adds	r7, #24
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b08e      	sub	sp, #56	; 0x38
 80064d8:	af04      	add	r7, sp, #16
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]
 80064e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80064e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d10a      	bne.n	80064fe <xTaskCreateStatic+0x2a>
	__asm volatile
 80064e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ec:	f383 8811 	msr	BASEPRI, r3
 80064f0:	f3bf 8f6f 	isb	sy
 80064f4:	f3bf 8f4f 	dsb	sy
 80064f8:	623b      	str	r3, [r7, #32]
}
 80064fa:	bf00      	nop
 80064fc:	e7fe      	b.n	80064fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80064fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10a      	bne.n	800651a <xTaskCreateStatic+0x46>
	__asm volatile
 8006504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006508:	f383 8811 	msr	BASEPRI, r3
 800650c:	f3bf 8f6f 	isb	sy
 8006510:	f3bf 8f4f 	dsb	sy
 8006514:	61fb      	str	r3, [r7, #28]
}
 8006516:	bf00      	nop
 8006518:	e7fe      	b.n	8006518 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800651a:	235c      	movs	r3, #92	; 0x5c
 800651c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	2b5c      	cmp	r3, #92	; 0x5c
 8006522:	d00a      	beq.n	800653a <xTaskCreateStatic+0x66>
	__asm volatile
 8006524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006528:	f383 8811 	msr	BASEPRI, r3
 800652c:	f3bf 8f6f 	isb	sy
 8006530:	f3bf 8f4f 	dsb	sy
 8006534:	61bb      	str	r3, [r7, #24]
}
 8006536:	bf00      	nop
 8006538:	e7fe      	b.n	8006538 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800653a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800653c:	2b00      	cmp	r3, #0
 800653e:	d01e      	beq.n	800657e <xTaskCreateStatic+0xaa>
 8006540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006542:	2b00      	cmp	r3, #0
 8006544:	d01b      	beq.n	800657e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006548:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800654a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800654e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	2202      	movs	r2, #2
 8006554:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006558:	2300      	movs	r3, #0
 800655a:	9303      	str	r3, [sp, #12]
 800655c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655e:	9302      	str	r3, [sp, #8]
 8006560:	f107 0314 	add.w	r3, r7, #20
 8006564:	9301      	str	r3, [sp, #4]
 8006566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006568:	9300      	str	r3, [sp, #0]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	68b9      	ldr	r1, [r7, #8]
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f000 f850 	bl	8006616 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006576:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006578:	f000 f8d4 	bl	8006724 <prvAddNewTaskToReadyList>
 800657c:	e001      	b.n	8006582 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800657e:	2300      	movs	r3, #0
 8006580:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006582:	697b      	ldr	r3, [r7, #20]
	}
 8006584:	4618      	mov	r0, r3
 8006586:	3728      	adds	r7, #40	; 0x28
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800658c:	b580      	push	{r7, lr}
 800658e:	b08c      	sub	sp, #48	; 0x30
 8006590:	af04      	add	r7, sp, #16
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	603b      	str	r3, [r7, #0]
 8006598:	4613      	mov	r3, r2
 800659a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800659c:	88fb      	ldrh	r3, [r7, #6]
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4618      	mov	r0, r3
 80065a2:	f001 fc43 	bl	8007e2c <pvPortMalloc>
 80065a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00e      	beq.n	80065cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80065ae:	205c      	movs	r0, #92	; 0x5c
 80065b0:	f001 fc3c 	bl	8007e2c <pvPortMalloc>
 80065b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d003      	beq.n	80065c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	631a      	str	r2, [r3, #48]	; 0x30
 80065c2:	e005      	b.n	80065d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80065c4:	6978      	ldr	r0, [r7, #20]
 80065c6:	f001 fcf5 	bl	8007fb4 <vPortFree>
 80065ca:	e001      	b.n	80065d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80065cc:	2300      	movs	r3, #0
 80065ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d017      	beq.n	8006606 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80065de:	88fa      	ldrh	r2, [r7, #6]
 80065e0:	2300      	movs	r3, #0
 80065e2:	9303      	str	r3, [sp, #12]
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	9302      	str	r3, [sp, #8]
 80065e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ea:	9301      	str	r3, [sp, #4]
 80065ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	68b9      	ldr	r1, [r7, #8]
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f000 f80e 	bl	8006616 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065fa:	69f8      	ldr	r0, [r7, #28]
 80065fc:	f000 f892 	bl	8006724 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006600:	2301      	movs	r3, #1
 8006602:	61bb      	str	r3, [r7, #24]
 8006604:	e002      	b.n	800660c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006606:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800660a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800660c:	69bb      	ldr	r3, [r7, #24]
	}
 800660e:	4618      	mov	r0, r3
 8006610:	3720      	adds	r7, #32
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b088      	sub	sp, #32
 800661a:	af00      	add	r7, sp, #0
 800661c:	60f8      	str	r0, [r7, #12]
 800661e:	60b9      	str	r1, [r7, #8]
 8006620:	607a      	str	r2, [r7, #4]
 8006622:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006626:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	461a      	mov	r2, r3
 800662e:	21a5      	movs	r1, #165	; 0xa5
 8006630:	f002 f8a4 	bl	800877c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800663e:	3b01      	subs	r3, #1
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	4413      	add	r3, r2
 8006644:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	f023 0307 	bic.w	r3, r3, #7
 800664c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	f003 0307 	and.w	r3, r3, #7
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00a      	beq.n	800666e <prvInitialiseNewTask+0x58>
	__asm volatile
 8006658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665c:	f383 8811 	msr	BASEPRI, r3
 8006660:	f3bf 8f6f 	isb	sy
 8006664:	f3bf 8f4f 	dsb	sy
 8006668:	617b      	str	r3, [r7, #20]
}
 800666a:	bf00      	nop
 800666c:	e7fe      	b.n	800666c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800666e:	2300      	movs	r3, #0
 8006670:	61fb      	str	r3, [r7, #28]
 8006672:	e012      	b.n	800669a <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	4413      	add	r3, r2
 800667a:	7819      	ldrb	r1, [r3, #0]
 800667c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	4413      	add	r3, r2
 8006682:	3334      	adds	r3, #52	; 0x34
 8006684:	460a      	mov	r2, r1
 8006686:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	4413      	add	r3, r2
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d006      	beq.n	80066a2 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	3301      	adds	r3, #1
 8006698:	61fb      	str	r3, [r7, #28]
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	2b0f      	cmp	r3, #15
 800669e:	d9e9      	bls.n	8006674 <prvInitialiseNewTask+0x5e>
 80066a0:	e000      	b.n	80066a4 <prvInitialiseNewTask+0x8e>
		{
			break;
 80066a2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80066a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80066ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ae:	2b37      	cmp	r3, #55	; 0x37
 80066b0:	d901      	bls.n	80066b6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80066b2:	2337      	movs	r3, #55	; 0x37
 80066b4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80066b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066ba:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80066bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066c0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80066c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c4:	2200      	movs	r2, #0
 80066c6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80066c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ca:	3304      	adds	r3, #4
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7ff f98c 	bl	80059ea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80066d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d4:	3318      	adds	r3, #24
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7ff f987 	bl	80059ea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80066dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066e0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80066e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80066ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066f0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80066f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f4:	2200      	movs	r2, #0
 80066f6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80066f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006700:	683a      	ldr	r2, [r7, #0]
 8006702:	68f9      	ldr	r1, [r7, #12]
 8006704:	69b8      	ldr	r0, [r7, #24]
 8006706:	f001 f99f 	bl	8007a48 <pxPortInitialiseStack>
 800670a:	4602      	mov	r2, r0
 800670c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006712:	2b00      	cmp	r3, #0
 8006714:	d002      	beq.n	800671c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800671a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800671c:	bf00      	nop
 800671e:	3720      	adds	r7, #32
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800672c:	f001 fa7e 	bl	8007c2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006730:	4b2d      	ldr	r3, [pc, #180]	; (80067e8 <prvAddNewTaskToReadyList+0xc4>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	3301      	adds	r3, #1
 8006736:	4a2c      	ldr	r2, [pc, #176]	; (80067e8 <prvAddNewTaskToReadyList+0xc4>)
 8006738:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800673a:	4b2c      	ldr	r3, [pc, #176]	; (80067ec <prvAddNewTaskToReadyList+0xc8>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d109      	bne.n	8006756 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006742:	4a2a      	ldr	r2, [pc, #168]	; (80067ec <prvAddNewTaskToReadyList+0xc8>)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006748:	4b27      	ldr	r3, [pc, #156]	; (80067e8 <prvAddNewTaskToReadyList+0xc4>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d110      	bne.n	8006772 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006750:	f000 fc16 	bl	8006f80 <prvInitialiseTaskLists>
 8006754:	e00d      	b.n	8006772 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006756:	4b26      	ldr	r3, [pc, #152]	; (80067f0 <prvAddNewTaskToReadyList+0xcc>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d109      	bne.n	8006772 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800675e:	4b23      	ldr	r3, [pc, #140]	; (80067ec <prvAddNewTaskToReadyList+0xc8>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006768:	429a      	cmp	r2, r3
 800676a:	d802      	bhi.n	8006772 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800676c:	4a1f      	ldr	r2, [pc, #124]	; (80067ec <prvAddNewTaskToReadyList+0xc8>)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006772:	4b20      	ldr	r3, [pc, #128]	; (80067f4 <prvAddNewTaskToReadyList+0xd0>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	3301      	adds	r3, #1
 8006778:	4a1e      	ldr	r2, [pc, #120]	; (80067f4 <prvAddNewTaskToReadyList+0xd0>)
 800677a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800677c:	4b1d      	ldr	r3, [pc, #116]	; (80067f4 <prvAddNewTaskToReadyList+0xd0>)
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006788:	4b1b      	ldr	r3, [pc, #108]	; (80067f8 <prvAddNewTaskToReadyList+0xd4>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	429a      	cmp	r2, r3
 800678e:	d903      	bls.n	8006798 <prvAddNewTaskToReadyList+0x74>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006794:	4a18      	ldr	r2, [pc, #96]	; (80067f8 <prvAddNewTaskToReadyList+0xd4>)
 8006796:	6013      	str	r3, [r2, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800679c:	4613      	mov	r3, r2
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4413      	add	r3, r2
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	4a15      	ldr	r2, [pc, #84]	; (80067fc <prvAddNewTaskToReadyList+0xd8>)
 80067a6:	441a      	add	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	3304      	adds	r3, #4
 80067ac:	4619      	mov	r1, r3
 80067ae:	4610      	mov	r0, r2
 80067b0:	f7ff f927 	bl	8005a02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80067b4:	f001 fa6a 	bl	8007c8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80067b8:	4b0d      	ldr	r3, [pc, #52]	; (80067f0 <prvAddNewTaskToReadyList+0xcc>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00e      	beq.n	80067de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80067c0:	4b0a      	ldr	r3, [pc, #40]	; (80067ec <prvAddNewTaskToReadyList+0xc8>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d207      	bcs.n	80067de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80067ce:	4b0c      	ldr	r3, [pc, #48]	; (8006800 <prvAddNewTaskToReadyList+0xdc>)
 80067d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067d4:	601a      	str	r2, [r3, #0]
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067de:	bf00      	nop
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	200012f8 	.word	0x200012f8
 80067ec:	20000e24 	.word	0x20000e24
 80067f0:	20001304 	.word	0x20001304
 80067f4:	20001314 	.word	0x20001314
 80067f8:	20001300 	.word	0x20001300
 80067fc:	20000e28 	.word	0x20000e28
 8006800:	e000ed04 	.word	0xe000ed04

08006804 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800680c:	2300      	movs	r3, #0
 800680e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d017      	beq.n	8006846 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006816:	4b13      	ldr	r3, [pc, #76]	; (8006864 <vTaskDelay+0x60>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00a      	beq.n	8006834 <vTaskDelay+0x30>
	__asm volatile
 800681e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	60bb      	str	r3, [r7, #8]
}
 8006830:	bf00      	nop
 8006832:	e7fe      	b.n	8006832 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006834:	f000 f880 	bl	8006938 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006838:	2100      	movs	r1, #0
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fcee 	bl	800721c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006840:	f000 f888 	bl	8006954 <xTaskResumeAll>
 8006844:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d107      	bne.n	800685c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800684c:	4b06      	ldr	r3, [pc, #24]	; (8006868 <vTaskDelay+0x64>)
 800684e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006852:	601a      	str	r2, [r3, #0]
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800685c:	bf00      	nop
 800685e:	3710      	adds	r7, #16
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	20001320 	.word	0x20001320
 8006868:	e000ed04 	.word	0xe000ed04

0800686c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b08a      	sub	sp, #40	; 0x28
 8006870:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006872:	2300      	movs	r3, #0
 8006874:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006876:	2300      	movs	r3, #0
 8006878:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800687a:	463a      	mov	r2, r7
 800687c:	1d39      	adds	r1, r7, #4
 800687e:	f107 0308 	add.w	r3, r7, #8
 8006882:	4618      	mov	r0, r3
 8006884:	f7ff f860 	bl	8005948 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006888:	6839      	ldr	r1, [r7, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	9202      	str	r2, [sp, #8]
 8006890:	9301      	str	r3, [sp, #4]
 8006892:	2300      	movs	r3, #0
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	2300      	movs	r3, #0
 8006898:	460a      	mov	r2, r1
 800689a:	4921      	ldr	r1, [pc, #132]	; (8006920 <vTaskStartScheduler+0xb4>)
 800689c:	4821      	ldr	r0, [pc, #132]	; (8006924 <vTaskStartScheduler+0xb8>)
 800689e:	f7ff fe19 	bl	80064d4 <xTaskCreateStatic>
 80068a2:	4603      	mov	r3, r0
 80068a4:	4a20      	ldr	r2, [pc, #128]	; (8006928 <vTaskStartScheduler+0xbc>)
 80068a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80068a8:	4b1f      	ldr	r3, [pc, #124]	; (8006928 <vTaskStartScheduler+0xbc>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d002      	beq.n	80068b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80068b0:	2301      	movs	r3, #1
 80068b2:	617b      	str	r3, [r7, #20]
 80068b4:	e001      	b.n	80068ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80068b6:	2300      	movs	r3, #0
 80068b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d102      	bne.n	80068c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80068c0:	f000 fd00 	bl	80072c4 <xTimerCreateTimerTask>
 80068c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d116      	bne.n	80068fa <vTaskStartScheduler+0x8e>
	__asm volatile
 80068cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d0:	f383 8811 	msr	BASEPRI, r3
 80068d4:	f3bf 8f6f 	isb	sy
 80068d8:	f3bf 8f4f 	dsb	sy
 80068dc:	613b      	str	r3, [r7, #16]
}
 80068de:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80068e0:	4b12      	ldr	r3, [pc, #72]	; (800692c <vTaskStartScheduler+0xc0>)
 80068e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80068e8:	4b11      	ldr	r3, [pc, #68]	; (8006930 <vTaskStartScheduler+0xc4>)
 80068ea:	2201      	movs	r2, #1
 80068ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80068ee:	4b11      	ldr	r3, [pc, #68]	; (8006934 <vTaskStartScheduler+0xc8>)
 80068f0:	2200      	movs	r2, #0
 80068f2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80068f4:	f001 f928 	bl	8007b48 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80068f8:	e00e      	b.n	8006918 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006900:	d10a      	bne.n	8006918 <vTaskStartScheduler+0xac>
	__asm volatile
 8006902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006906:	f383 8811 	msr	BASEPRI, r3
 800690a:	f3bf 8f6f 	isb	sy
 800690e:	f3bf 8f4f 	dsb	sy
 8006912:	60fb      	str	r3, [r7, #12]
}
 8006914:	bf00      	nop
 8006916:	e7fe      	b.n	8006916 <vTaskStartScheduler+0xaa>
}
 8006918:	bf00      	nop
 800691a:	3718      	adds	r7, #24
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	080089d4 	.word	0x080089d4
 8006924:	08006f51 	.word	0x08006f51
 8006928:	2000131c 	.word	0x2000131c
 800692c:	20001318 	.word	0x20001318
 8006930:	20001304 	.word	0x20001304
 8006934:	200012fc 	.word	0x200012fc

08006938 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006938:	b480      	push	{r7}
 800693a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800693c:	4b04      	ldr	r3, [pc, #16]	; (8006950 <vTaskSuspendAll+0x18>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	3301      	adds	r3, #1
 8006942:	4a03      	ldr	r2, [pc, #12]	; (8006950 <vTaskSuspendAll+0x18>)
 8006944:	6013      	str	r3, [r2, #0]
}
 8006946:	bf00      	nop
 8006948:	46bd      	mov	sp, r7
 800694a:	bc80      	pop	{r7}
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	20001320 	.word	0x20001320

08006954 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800695a:	2300      	movs	r3, #0
 800695c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800695e:	2300      	movs	r3, #0
 8006960:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006962:	4b42      	ldr	r3, [pc, #264]	; (8006a6c <xTaskResumeAll+0x118>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10a      	bne.n	8006980 <xTaskResumeAll+0x2c>
	__asm volatile
 800696a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696e:	f383 8811 	msr	BASEPRI, r3
 8006972:	f3bf 8f6f 	isb	sy
 8006976:	f3bf 8f4f 	dsb	sy
 800697a:	603b      	str	r3, [r7, #0]
}
 800697c:	bf00      	nop
 800697e:	e7fe      	b.n	800697e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006980:	f001 f954 	bl	8007c2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006984:	4b39      	ldr	r3, [pc, #228]	; (8006a6c <xTaskResumeAll+0x118>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	3b01      	subs	r3, #1
 800698a:	4a38      	ldr	r2, [pc, #224]	; (8006a6c <xTaskResumeAll+0x118>)
 800698c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800698e:	4b37      	ldr	r3, [pc, #220]	; (8006a6c <xTaskResumeAll+0x118>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d162      	bne.n	8006a5c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006996:	4b36      	ldr	r3, [pc, #216]	; (8006a70 <xTaskResumeAll+0x11c>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d05e      	beq.n	8006a5c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800699e:	e02f      	b.n	8006a00 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80069a0:	4b34      	ldr	r3, [pc, #208]	; (8006a74 <xTaskResumeAll+0x120>)
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	3318      	adds	r3, #24
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7ff f883 	bl	8005ab8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	3304      	adds	r3, #4
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7ff f87e 	bl	8005ab8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c0:	4b2d      	ldr	r3, [pc, #180]	; (8006a78 <xTaskResumeAll+0x124>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d903      	bls.n	80069d0 <xTaskResumeAll+0x7c>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069cc:	4a2a      	ldr	r2, [pc, #168]	; (8006a78 <xTaskResumeAll+0x124>)
 80069ce:	6013      	str	r3, [r2, #0]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069d4:	4613      	mov	r3, r2
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4413      	add	r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4a27      	ldr	r2, [pc, #156]	; (8006a7c <xTaskResumeAll+0x128>)
 80069de:	441a      	add	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	3304      	adds	r3, #4
 80069e4:	4619      	mov	r1, r3
 80069e6:	4610      	mov	r0, r2
 80069e8:	f7ff f80b 	bl	8005a02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069f0:	4b23      	ldr	r3, [pc, #140]	; (8006a80 <xTaskResumeAll+0x12c>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d302      	bcc.n	8006a00 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80069fa:	4b22      	ldr	r3, [pc, #136]	; (8006a84 <xTaskResumeAll+0x130>)
 80069fc:	2201      	movs	r2, #1
 80069fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a00:	4b1c      	ldr	r3, [pc, #112]	; (8006a74 <xTaskResumeAll+0x120>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1cb      	bne.n	80069a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d001      	beq.n	8006a12 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006a0e:	f000 fb55 	bl	80070bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006a12:	4b1d      	ldr	r3, [pc, #116]	; (8006a88 <xTaskResumeAll+0x134>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d010      	beq.n	8006a40 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006a1e:	f000 f845 	bl	8006aac <xTaskIncrementTick>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d002      	beq.n	8006a2e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006a28:	4b16      	ldr	r3, [pc, #88]	; (8006a84 <xTaskResumeAll+0x130>)
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	3b01      	subs	r3, #1
 8006a32:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1f1      	bne.n	8006a1e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006a3a:	4b13      	ldr	r3, [pc, #76]	; (8006a88 <xTaskResumeAll+0x134>)
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a40:	4b10      	ldr	r3, [pc, #64]	; (8006a84 <xTaskResumeAll+0x130>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d009      	beq.n	8006a5c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a4c:	4b0f      	ldr	r3, [pc, #60]	; (8006a8c <xTaskResumeAll+0x138>)
 8006a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a52:	601a      	str	r2, [r3, #0]
 8006a54:	f3bf 8f4f 	dsb	sy
 8006a58:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a5c:	f001 f916 	bl	8007c8c <vPortExitCritical>

	return xAlreadyYielded;
 8006a60:	68bb      	ldr	r3, [r7, #8]
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	20001320 	.word	0x20001320
 8006a70:	200012f8 	.word	0x200012f8
 8006a74:	200012b8 	.word	0x200012b8
 8006a78:	20001300 	.word	0x20001300
 8006a7c:	20000e28 	.word	0x20000e28
 8006a80:	20000e24 	.word	0x20000e24
 8006a84:	2000130c 	.word	0x2000130c
 8006a88:	20001308 	.word	0x20001308
 8006a8c:	e000ed04 	.word	0xe000ed04

08006a90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006a96:	4b04      	ldr	r3, [pc, #16]	; (8006aa8 <xTaskGetTickCount+0x18>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006a9c:	687b      	ldr	r3, [r7, #4]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	370c      	adds	r7, #12
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bc80      	pop	{r7}
 8006aa6:	4770      	bx	lr
 8006aa8:	200012fc 	.word	0x200012fc

08006aac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b086      	sub	sp, #24
 8006ab0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ab6:	4b51      	ldr	r3, [pc, #324]	; (8006bfc <xTaskIncrementTick+0x150>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f040 808e 	bne.w	8006bdc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ac0:	4b4f      	ldr	r3, [pc, #316]	; (8006c00 <xTaskIncrementTick+0x154>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ac8:	4a4d      	ldr	r2, [pc, #308]	; (8006c00 <xTaskIncrementTick+0x154>)
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d120      	bne.n	8006b16 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006ad4:	4b4b      	ldr	r3, [pc, #300]	; (8006c04 <xTaskIncrementTick+0x158>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00a      	beq.n	8006af4 <xTaskIncrementTick+0x48>
	__asm volatile
 8006ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	603b      	str	r3, [r7, #0]
}
 8006af0:	bf00      	nop
 8006af2:	e7fe      	b.n	8006af2 <xTaskIncrementTick+0x46>
 8006af4:	4b43      	ldr	r3, [pc, #268]	; (8006c04 <xTaskIncrementTick+0x158>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	60fb      	str	r3, [r7, #12]
 8006afa:	4b43      	ldr	r3, [pc, #268]	; (8006c08 <xTaskIncrementTick+0x15c>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a41      	ldr	r2, [pc, #260]	; (8006c04 <xTaskIncrementTick+0x158>)
 8006b00:	6013      	str	r3, [r2, #0]
 8006b02:	4a41      	ldr	r2, [pc, #260]	; (8006c08 <xTaskIncrementTick+0x15c>)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6013      	str	r3, [r2, #0]
 8006b08:	4b40      	ldr	r3, [pc, #256]	; (8006c0c <xTaskIncrementTick+0x160>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	4a3f      	ldr	r2, [pc, #252]	; (8006c0c <xTaskIncrementTick+0x160>)
 8006b10:	6013      	str	r3, [r2, #0]
 8006b12:	f000 fad3 	bl	80070bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006b16:	4b3e      	ldr	r3, [pc, #248]	; (8006c10 <xTaskIncrementTick+0x164>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d34e      	bcc.n	8006bbe <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b20:	4b38      	ldr	r3, [pc, #224]	; (8006c04 <xTaskIncrementTick+0x158>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d101      	bne.n	8006b2e <xTaskIncrementTick+0x82>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e000      	b.n	8006b30 <xTaskIncrementTick+0x84>
 8006b2e:	2300      	movs	r3, #0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d004      	beq.n	8006b3e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b34:	4b36      	ldr	r3, [pc, #216]	; (8006c10 <xTaskIncrementTick+0x164>)
 8006b36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b3a:	601a      	str	r2, [r3, #0]
					break;
 8006b3c:	e03f      	b.n	8006bbe <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006b3e:	4b31      	ldr	r3, [pc, #196]	; (8006c04 <xTaskIncrementTick+0x158>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d203      	bcs.n	8006b5e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006b56:	4a2e      	ldr	r2, [pc, #184]	; (8006c10 <xTaskIncrementTick+0x164>)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6013      	str	r3, [r2, #0]
						break;
 8006b5c:	e02f      	b.n	8006bbe <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	3304      	adds	r3, #4
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7fe ffa8 	bl	8005ab8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d004      	beq.n	8006b7a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	3318      	adds	r3, #24
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7fe ff9f 	bl	8005ab8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b7e:	4b25      	ldr	r3, [pc, #148]	; (8006c14 <xTaskIncrementTick+0x168>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d903      	bls.n	8006b8e <xTaskIncrementTick+0xe2>
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8a:	4a22      	ldr	r2, [pc, #136]	; (8006c14 <xTaskIncrementTick+0x168>)
 8006b8c:	6013      	str	r3, [r2, #0]
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b92:	4613      	mov	r3, r2
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4413      	add	r3, r2
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	4a1f      	ldr	r2, [pc, #124]	; (8006c18 <xTaskIncrementTick+0x16c>)
 8006b9c:	441a      	add	r2, r3
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	3304      	adds	r3, #4
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	4610      	mov	r0, r2
 8006ba6:	f7fe ff2c 	bl	8005a02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bae:	4b1b      	ldr	r3, [pc, #108]	; (8006c1c <xTaskIncrementTick+0x170>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d3b3      	bcc.n	8006b20 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bbc:	e7b0      	b.n	8006b20 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006bbe:	4b17      	ldr	r3, [pc, #92]	; (8006c1c <xTaskIncrementTick+0x170>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc4:	4914      	ldr	r1, [pc, #80]	; (8006c18 <xTaskIncrementTick+0x16c>)
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	4413      	add	r3, r2
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	440b      	add	r3, r1
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d907      	bls.n	8006be6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	617b      	str	r3, [r7, #20]
 8006bda:	e004      	b.n	8006be6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006bdc:	4b10      	ldr	r3, [pc, #64]	; (8006c20 <xTaskIncrementTick+0x174>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	3301      	adds	r3, #1
 8006be2:	4a0f      	ldr	r2, [pc, #60]	; (8006c20 <xTaskIncrementTick+0x174>)
 8006be4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006be6:	4b0f      	ldr	r3, [pc, #60]	; (8006c24 <xTaskIncrementTick+0x178>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d001      	beq.n	8006bf2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006bf2:	697b      	ldr	r3, [r7, #20]
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3718      	adds	r7, #24
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	20001320 	.word	0x20001320
 8006c00:	200012fc 	.word	0x200012fc
 8006c04:	200012b0 	.word	0x200012b0
 8006c08:	200012b4 	.word	0x200012b4
 8006c0c:	20001310 	.word	0x20001310
 8006c10:	20001318 	.word	0x20001318
 8006c14:	20001300 	.word	0x20001300
 8006c18:	20000e28 	.word	0x20000e28
 8006c1c:	20000e24 	.word	0x20000e24
 8006c20:	20001308 	.word	0x20001308
 8006c24:	2000130c 	.word	0x2000130c

08006c28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c2e:	4b27      	ldr	r3, [pc, #156]	; (8006ccc <vTaskSwitchContext+0xa4>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d003      	beq.n	8006c3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006c36:	4b26      	ldr	r3, [pc, #152]	; (8006cd0 <vTaskSwitchContext+0xa8>)
 8006c38:	2201      	movs	r2, #1
 8006c3a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006c3c:	e041      	b.n	8006cc2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006c3e:	4b24      	ldr	r3, [pc, #144]	; (8006cd0 <vTaskSwitchContext+0xa8>)
 8006c40:	2200      	movs	r2, #0
 8006c42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006c44:	4b23      	ldr	r3, [pc, #140]	; (8006cd4 <vTaskSwitchContext+0xac>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	60fb      	str	r3, [r7, #12]
 8006c4a:	e010      	b.n	8006c6e <vTaskSwitchContext+0x46>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d10a      	bne.n	8006c68 <vTaskSwitchContext+0x40>
	__asm volatile
 8006c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c56:	f383 8811 	msr	BASEPRI, r3
 8006c5a:	f3bf 8f6f 	isb	sy
 8006c5e:	f3bf 8f4f 	dsb	sy
 8006c62:	607b      	str	r3, [r7, #4]
}
 8006c64:	bf00      	nop
 8006c66:	e7fe      	b.n	8006c66 <vTaskSwitchContext+0x3e>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	60fb      	str	r3, [r7, #12]
 8006c6e:	491a      	ldr	r1, [pc, #104]	; (8006cd8 <vTaskSwitchContext+0xb0>)
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	4613      	mov	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	440b      	add	r3, r1
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d0e4      	beq.n	8006c4c <vTaskSwitchContext+0x24>
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	4613      	mov	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4413      	add	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4a12      	ldr	r2, [pc, #72]	; (8006cd8 <vTaskSwitchContext+0xb0>)
 8006c8e:	4413      	add	r3, r2
 8006c90:	60bb      	str	r3, [r7, #8]
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	685a      	ldr	r2, [r3, #4]
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	605a      	str	r2, [r3, #4]
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	685a      	ldr	r2, [r3, #4]
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	3308      	adds	r3, #8
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d104      	bne.n	8006cb2 <vTaskSwitchContext+0x8a>
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	685a      	ldr	r2, [r3, #4]
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	605a      	str	r2, [r3, #4]
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	4a08      	ldr	r2, [pc, #32]	; (8006cdc <vTaskSwitchContext+0xb4>)
 8006cba:	6013      	str	r3, [r2, #0]
 8006cbc:	4a05      	ldr	r2, [pc, #20]	; (8006cd4 <vTaskSwitchContext+0xac>)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6013      	str	r3, [r2, #0]
}
 8006cc2:	bf00      	nop
 8006cc4:	3714      	adds	r7, #20
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bc80      	pop	{r7}
 8006cca:	4770      	bx	lr
 8006ccc:	20001320 	.word	0x20001320
 8006cd0:	2000130c 	.word	0x2000130c
 8006cd4:	20001300 	.word	0x20001300
 8006cd8:	20000e28 	.word	0x20000e28
 8006cdc:	20000e24 	.word	0x20000e24

08006ce0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d10a      	bne.n	8006d06 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf4:	f383 8811 	msr	BASEPRI, r3
 8006cf8:	f3bf 8f6f 	isb	sy
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	60fb      	str	r3, [r7, #12]
}
 8006d02:	bf00      	nop
 8006d04:	e7fe      	b.n	8006d04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d06:	4b07      	ldr	r3, [pc, #28]	; (8006d24 <vTaskPlaceOnEventList+0x44>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	3318      	adds	r3, #24
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7fe fe9a 	bl	8005a48 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d14:	2101      	movs	r1, #1
 8006d16:	6838      	ldr	r0, [r7, #0]
 8006d18:	f000 fa80 	bl	800721c <prvAddCurrentTaskToDelayedList>
}
 8006d1c:	bf00      	nop
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	20000e24 	.word	0x20000e24

08006d28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b086      	sub	sp, #24
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d10a      	bne.n	8006d50 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3e:	f383 8811 	msr	BASEPRI, r3
 8006d42:	f3bf 8f6f 	isb	sy
 8006d46:	f3bf 8f4f 	dsb	sy
 8006d4a:	617b      	str	r3, [r7, #20]
}
 8006d4c:	bf00      	nop
 8006d4e:	e7fe      	b.n	8006d4e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d50:	4b0a      	ldr	r3, [pc, #40]	; (8006d7c <vTaskPlaceOnEventListRestricted+0x54>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	3318      	adds	r3, #24
 8006d56:	4619      	mov	r1, r3
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	f7fe fe52 	bl	8005a02 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d002      	beq.n	8006d6a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006d64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d68:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006d6a:	6879      	ldr	r1, [r7, #4]
 8006d6c:	68b8      	ldr	r0, [r7, #8]
 8006d6e:	f000 fa55 	bl	800721c <prvAddCurrentTaskToDelayedList>
	}
 8006d72:	bf00      	nop
 8006d74:	3718      	adds	r7, #24
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	20000e24 	.word	0x20000e24

08006d80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d10a      	bne.n	8006dac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9a:	f383 8811 	msr	BASEPRI, r3
 8006d9e:	f3bf 8f6f 	isb	sy
 8006da2:	f3bf 8f4f 	dsb	sy
 8006da6:	60fb      	str	r3, [r7, #12]
}
 8006da8:	bf00      	nop
 8006daa:	e7fe      	b.n	8006daa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	3318      	adds	r3, #24
 8006db0:	4618      	mov	r0, r3
 8006db2:	f7fe fe81 	bl	8005ab8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006db6:	4b1e      	ldr	r3, [pc, #120]	; (8006e30 <xTaskRemoveFromEventList+0xb0>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d11d      	bne.n	8006dfa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	3304      	adds	r3, #4
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7fe fe78 	bl	8005ab8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dcc:	4b19      	ldr	r3, [pc, #100]	; (8006e34 <xTaskRemoveFromEventList+0xb4>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d903      	bls.n	8006ddc <xTaskRemoveFromEventList+0x5c>
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd8:	4a16      	ldr	r2, [pc, #88]	; (8006e34 <xTaskRemoveFromEventList+0xb4>)
 8006dda:	6013      	str	r3, [r2, #0]
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de0:	4613      	mov	r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4413      	add	r3, r2
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4a13      	ldr	r2, [pc, #76]	; (8006e38 <xTaskRemoveFromEventList+0xb8>)
 8006dea:	441a      	add	r2, r3
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	3304      	adds	r3, #4
 8006df0:	4619      	mov	r1, r3
 8006df2:	4610      	mov	r0, r2
 8006df4:	f7fe fe05 	bl	8005a02 <vListInsertEnd>
 8006df8:	e005      	b.n	8006e06 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	3318      	adds	r3, #24
 8006dfe:	4619      	mov	r1, r3
 8006e00:	480e      	ldr	r0, [pc, #56]	; (8006e3c <xTaskRemoveFromEventList+0xbc>)
 8006e02:	f7fe fdfe 	bl	8005a02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e0a:	4b0d      	ldr	r3, [pc, #52]	; (8006e40 <xTaskRemoveFromEventList+0xc0>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d905      	bls.n	8006e20 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006e14:	2301      	movs	r3, #1
 8006e16:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006e18:	4b0a      	ldr	r3, [pc, #40]	; (8006e44 <xTaskRemoveFromEventList+0xc4>)
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	601a      	str	r2, [r3, #0]
 8006e1e:	e001      	b.n	8006e24 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006e20:	2300      	movs	r3, #0
 8006e22:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006e24:	697b      	ldr	r3, [r7, #20]
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3718      	adds	r7, #24
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	20001320 	.word	0x20001320
 8006e34:	20001300 	.word	0x20001300
 8006e38:	20000e28 	.word	0x20000e28
 8006e3c:	200012b8 	.word	0x200012b8
 8006e40:	20000e24 	.word	0x20000e24
 8006e44:	2000130c 	.word	0x2000130c

08006e48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006e50:	4b06      	ldr	r3, [pc, #24]	; (8006e6c <vTaskInternalSetTimeOutState+0x24>)
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006e58:	4b05      	ldr	r3, [pc, #20]	; (8006e70 <vTaskInternalSetTimeOutState+0x28>)
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	605a      	str	r2, [r3, #4]
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bc80      	pop	{r7}
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	20001310 	.word	0x20001310
 8006e70:	200012fc 	.word	0x200012fc

08006e74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b088      	sub	sp, #32
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d10a      	bne.n	8006e9a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e88:	f383 8811 	msr	BASEPRI, r3
 8006e8c:	f3bf 8f6f 	isb	sy
 8006e90:	f3bf 8f4f 	dsb	sy
 8006e94:	613b      	str	r3, [r7, #16]
}
 8006e96:	bf00      	nop
 8006e98:	e7fe      	b.n	8006e98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10a      	bne.n	8006eb6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea4:	f383 8811 	msr	BASEPRI, r3
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	60fb      	str	r3, [r7, #12]
}
 8006eb2:	bf00      	nop
 8006eb4:	e7fe      	b.n	8006eb4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006eb6:	f000 feb9 	bl	8007c2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006eba:	4b1d      	ldr	r3, [pc, #116]	; (8006f30 <xTaskCheckForTimeOut+0xbc>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	69ba      	ldr	r2, [r7, #24]
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ed2:	d102      	bne.n	8006eda <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	61fb      	str	r3, [r7, #28]
 8006ed8:	e023      	b.n	8006f22 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	4b15      	ldr	r3, [pc, #84]	; (8006f34 <xTaskCheckForTimeOut+0xc0>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d007      	beq.n	8006ef6 <xTaskCheckForTimeOut+0x82>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	69ba      	ldr	r2, [r7, #24]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d302      	bcc.n	8006ef6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	61fb      	str	r3, [r7, #28]
 8006ef4:	e015      	b.n	8006f22 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	697a      	ldr	r2, [r7, #20]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d20b      	bcs.n	8006f18 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	1ad2      	subs	r2, r2, r3
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f7ff ff9b 	bl	8006e48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006f12:	2300      	movs	r3, #0
 8006f14:	61fb      	str	r3, [r7, #28]
 8006f16:	e004      	b.n	8006f22 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006f22:	f000 feb3 	bl	8007c8c <vPortExitCritical>

	return xReturn;
 8006f26:	69fb      	ldr	r3, [r7, #28]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3720      	adds	r7, #32
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	200012fc 	.word	0x200012fc
 8006f34:	20001310 	.word	0x20001310

08006f38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006f38:	b480      	push	{r7}
 8006f3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006f3c:	4b03      	ldr	r3, [pc, #12]	; (8006f4c <vTaskMissedYield+0x14>)
 8006f3e:	2201      	movs	r2, #1
 8006f40:	601a      	str	r2, [r3, #0]
}
 8006f42:	bf00      	nop
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bc80      	pop	{r7}
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	2000130c 	.word	0x2000130c

08006f50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006f58:	f000 f852 	bl	8007000 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006f5c:	4b06      	ldr	r3, [pc, #24]	; (8006f78 <prvIdleTask+0x28>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d9f9      	bls.n	8006f58 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006f64:	4b05      	ldr	r3, [pc, #20]	; (8006f7c <prvIdleTask+0x2c>)
 8006f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f6a:	601a      	str	r2, [r3, #0]
 8006f6c:	f3bf 8f4f 	dsb	sy
 8006f70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006f74:	e7f0      	b.n	8006f58 <prvIdleTask+0x8>
 8006f76:	bf00      	nop
 8006f78:	20000e28 	.word	0x20000e28
 8006f7c:	e000ed04 	.word	0xe000ed04

08006f80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f86:	2300      	movs	r3, #0
 8006f88:	607b      	str	r3, [r7, #4]
 8006f8a:	e00c      	b.n	8006fa6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4413      	add	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4a12      	ldr	r2, [pc, #72]	; (8006fe0 <prvInitialiseTaskLists+0x60>)
 8006f98:	4413      	add	r3, r2
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7fe fd06 	bl	80059ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	607b      	str	r3, [r7, #4]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2b37      	cmp	r3, #55	; 0x37
 8006faa:	d9ef      	bls.n	8006f8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006fac:	480d      	ldr	r0, [pc, #52]	; (8006fe4 <prvInitialiseTaskLists+0x64>)
 8006fae:	f7fe fcfd 	bl	80059ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006fb2:	480d      	ldr	r0, [pc, #52]	; (8006fe8 <prvInitialiseTaskLists+0x68>)
 8006fb4:	f7fe fcfa 	bl	80059ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006fb8:	480c      	ldr	r0, [pc, #48]	; (8006fec <prvInitialiseTaskLists+0x6c>)
 8006fba:	f7fe fcf7 	bl	80059ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006fbe:	480c      	ldr	r0, [pc, #48]	; (8006ff0 <prvInitialiseTaskLists+0x70>)
 8006fc0:	f7fe fcf4 	bl	80059ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006fc4:	480b      	ldr	r0, [pc, #44]	; (8006ff4 <prvInitialiseTaskLists+0x74>)
 8006fc6:	f7fe fcf1 	bl	80059ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006fca:	4b0b      	ldr	r3, [pc, #44]	; (8006ff8 <prvInitialiseTaskLists+0x78>)
 8006fcc:	4a05      	ldr	r2, [pc, #20]	; (8006fe4 <prvInitialiseTaskLists+0x64>)
 8006fce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006fd0:	4b0a      	ldr	r3, [pc, #40]	; (8006ffc <prvInitialiseTaskLists+0x7c>)
 8006fd2:	4a05      	ldr	r2, [pc, #20]	; (8006fe8 <prvInitialiseTaskLists+0x68>)
 8006fd4:	601a      	str	r2, [r3, #0]
}
 8006fd6:	bf00      	nop
 8006fd8:	3708      	adds	r7, #8
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	20000e28 	.word	0x20000e28
 8006fe4:	20001288 	.word	0x20001288
 8006fe8:	2000129c 	.word	0x2000129c
 8006fec:	200012b8 	.word	0x200012b8
 8006ff0:	200012cc 	.word	0x200012cc
 8006ff4:	200012e4 	.word	0x200012e4
 8006ff8:	200012b0 	.word	0x200012b0
 8006ffc:	200012b4 	.word	0x200012b4

08007000 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007006:	e019      	b.n	800703c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007008:	f000 fe10 	bl	8007c2c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800700c:	4b10      	ldr	r3, [pc, #64]	; (8007050 <prvCheckTasksWaitingTermination+0x50>)
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	3304      	adds	r3, #4
 8007018:	4618      	mov	r0, r3
 800701a:	f7fe fd4d 	bl	8005ab8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800701e:	4b0d      	ldr	r3, [pc, #52]	; (8007054 <prvCheckTasksWaitingTermination+0x54>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	3b01      	subs	r3, #1
 8007024:	4a0b      	ldr	r2, [pc, #44]	; (8007054 <prvCheckTasksWaitingTermination+0x54>)
 8007026:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007028:	4b0b      	ldr	r3, [pc, #44]	; (8007058 <prvCheckTasksWaitingTermination+0x58>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	3b01      	subs	r3, #1
 800702e:	4a0a      	ldr	r2, [pc, #40]	; (8007058 <prvCheckTasksWaitingTermination+0x58>)
 8007030:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007032:	f000 fe2b 	bl	8007c8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 f810 	bl	800705c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800703c:	4b06      	ldr	r3, [pc, #24]	; (8007058 <prvCheckTasksWaitingTermination+0x58>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d1e1      	bne.n	8007008 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007044:	bf00      	nop
 8007046:	bf00      	nop
 8007048:	3708      	adds	r7, #8
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	200012cc 	.word	0x200012cc
 8007054:	200012f8 	.word	0x200012f8
 8007058:	200012e0 	.word	0x200012e0

0800705c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800706a:	2b00      	cmp	r3, #0
 800706c:	d108      	bne.n	8007080 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007072:	4618      	mov	r0, r3
 8007074:	f000 ff9e 	bl	8007fb4 <vPortFree>
				vPortFree( pxTCB );
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 ff9b 	bl	8007fb4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800707e:	e018      	b.n	80070b2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007086:	2b01      	cmp	r3, #1
 8007088:	d103      	bne.n	8007092 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 ff92 	bl	8007fb4 <vPortFree>
	}
 8007090:	e00f      	b.n	80070b2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007098:	2b02      	cmp	r3, #2
 800709a:	d00a      	beq.n	80070b2 <prvDeleteTCB+0x56>
	__asm volatile
 800709c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a0:	f383 8811 	msr	BASEPRI, r3
 80070a4:	f3bf 8f6f 	isb	sy
 80070a8:	f3bf 8f4f 	dsb	sy
 80070ac:	60fb      	str	r3, [r7, #12]
}
 80070ae:	bf00      	nop
 80070b0:	e7fe      	b.n	80070b0 <prvDeleteTCB+0x54>
	}
 80070b2:	bf00      	nop
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
	...

080070bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070c2:	4b0e      	ldr	r3, [pc, #56]	; (80070fc <prvResetNextTaskUnblockTime+0x40>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d101      	bne.n	80070d0 <prvResetNextTaskUnblockTime+0x14>
 80070cc:	2301      	movs	r3, #1
 80070ce:	e000      	b.n	80070d2 <prvResetNextTaskUnblockTime+0x16>
 80070d0:	2300      	movs	r3, #0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d004      	beq.n	80070e0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80070d6:	4b0a      	ldr	r3, [pc, #40]	; (8007100 <prvResetNextTaskUnblockTime+0x44>)
 80070d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070dc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80070de:	e008      	b.n	80070f2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80070e0:	4b06      	ldr	r3, [pc, #24]	; (80070fc <prvResetNextTaskUnblockTime+0x40>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	4a04      	ldr	r2, [pc, #16]	; (8007100 <prvResetNextTaskUnblockTime+0x44>)
 80070f0:	6013      	str	r3, [r2, #0]
}
 80070f2:	bf00      	nop
 80070f4:	370c      	adds	r7, #12
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bc80      	pop	{r7}
 80070fa:	4770      	bx	lr
 80070fc:	200012b0 	.word	0x200012b0
 8007100:	20001318 	.word	0x20001318

08007104 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800710a:	4b0b      	ldr	r3, [pc, #44]	; (8007138 <xTaskGetSchedulerState+0x34>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d102      	bne.n	8007118 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007112:	2301      	movs	r3, #1
 8007114:	607b      	str	r3, [r7, #4]
 8007116:	e008      	b.n	800712a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007118:	4b08      	ldr	r3, [pc, #32]	; (800713c <xTaskGetSchedulerState+0x38>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d102      	bne.n	8007126 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007120:	2302      	movs	r3, #2
 8007122:	607b      	str	r3, [r7, #4]
 8007124:	e001      	b.n	800712a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007126:	2300      	movs	r3, #0
 8007128:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800712a:	687b      	ldr	r3, [r7, #4]
	}
 800712c:	4618      	mov	r0, r3
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	bc80      	pop	{r7}
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	20001304 	.word	0x20001304
 800713c:	20001320 	.word	0x20001320

08007140 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800714c:	2300      	movs	r3, #0
 800714e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d056      	beq.n	8007204 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007156:	4b2e      	ldr	r3, [pc, #184]	; (8007210 <xTaskPriorityDisinherit+0xd0>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	693a      	ldr	r2, [r7, #16]
 800715c:	429a      	cmp	r2, r3
 800715e:	d00a      	beq.n	8007176 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007164:	f383 8811 	msr	BASEPRI, r3
 8007168:	f3bf 8f6f 	isb	sy
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	60fb      	str	r3, [r7, #12]
}
 8007172:	bf00      	nop
 8007174:	e7fe      	b.n	8007174 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800717a:	2b00      	cmp	r3, #0
 800717c:	d10a      	bne.n	8007194 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800717e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007182:	f383 8811 	msr	BASEPRI, r3
 8007186:	f3bf 8f6f 	isb	sy
 800718a:	f3bf 8f4f 	dsb	sy
 800718e:	60bb      	str	r3, [r7, #8]
}
 8007190:	bf00      	nop
 8007192:	e7fe      	b.n	8007192 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007198:	1e5a      	subs	r2, r3, #1
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d02c      	beq.n	8007204 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d128      	bne.n	8007204 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	3304      	adds	r3, #4
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7fe fc7e 	bl	8005ab8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d4:	4b0f      	ldr	r3, [pc, #60]	; (8007214 <xTaskPriorityDisinherit+0xd4>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d903      	bls.n	80071e4 <xTaskPriorityDisinherit+0xa4>
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e0:	4a0c      	ldr	r2, [pc, #48]	; (8007214 <xTaskPriorityDisinherit+0xd4>)
 80071e2:	6013      	str	r3, [r2, #0]
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e8:	4613      	mov	r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4413      	add	r3, r2
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	4a09      	ldr	r2, [pc, #36]	; (8007218 <xTaskPriorityDisinherit+0xd8>)
 80071f2:	441a      	add	r2, r3
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	3304      	adds	r3, #4
 80071f8:	4619      	mov	r1, r3
 80071fa:	4610      	mov	r0, r2
 80071fc:	f7fe fc01 	bl	8005a02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007200:	2301      	movs	r3, #1
 8007202:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007204:	697b      	ldr	r3, [r7, #20]
	}
 8007206:	4618      	mov	r0, r3
 8007208:	3718      	adds	r7, #24
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	20000e24 	.word	0x20000e24
 8007214:	20001300 	.word	0x20001300
 8007218:	20000e28 	.word	0x20000e28

0800721c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007226:	4b21      	ldr	r3, [pc, #132]	; (80072ac <prvAddCurrentTaskToDelayedList+0x90>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800722c:	4b20      	ldr	r3, [pc, #128]	; (80072b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	3304      	adds	r3, #4
 8007232:	4618      	mov	r0, r3
 8007234:	f7fe fc40 	bl	8005ab8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800723e:	d10a      	bne.n	8007256 <prvAddCurrentTaskToDelayedList+0x3a>
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d007      	beq.n	8007256 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007246:	4b1a      	ldr	r3, [pc, #104]	; (80072b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	3304      	adds	r3, #4
 800724c:	4619      	mov	r1, r3
 800724e:	4819      	ldr	r0, [pc, #100]	; (80072b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007250:	f7fe fbd7 	bl	8005a02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007254:	e026      	b.n	80072a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4413      	add	r3, r2
 800725c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800725e:	4b14      	ldr	r3, [pc, #80]	; (80072b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68ba      	ldr	r2, [r7, #8]
 8007264:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	429a      	cmp	r2, r3
 800726c:	d209      	bcs.n	8007282 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800726e:	4b12      	ldr	r3, [pc, #72]	; (80072b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	4b0f      	ldr	r3, [pc, #60]	; (80072b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	3304      	adds	r3, #4
 8007278:	4619      	mov	r1, r3
 800727a:	4610      	mov	r0, r2
 800727c:	f7fe fbe4 	bl	8005a48 <vListInsert>
}
 8007280:	e010      	b.n	80072a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007282:	4b0e      	ldr	r3, [pc, #56]	; (80072bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	4b0a      	ldr	r3, [pc, #40]	; (80072b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	3304      	adds	r3, #4
 800728c:	4619      	mov	r1, r3
 800728e:	4610      	mov	r0, r2
 8007290:	f7fe fbda 	bl	8005a48 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007294:	4b0a      	ldr	r3, [pc, #40]	; (80072c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68ba      	ldr	r2, [r7, #8]
 800729a:	429a      	cmp	r2, r3
 800729c:	d202      	bcs.n	80072a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800729e:	4a08      	ldr	r2, [pc, #32]	; (80072c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	6013      	str	r3, [r2, #0]
}
 80072a4:	bf00      	nop
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	200012fc 	.word	0x200012fc
 80072b0:	20000e24 	.word	0x20000e24
 80072b4:	200012e4 	.word	0x200012e4
 80072b8:	200012b4 	.word	0x200012b4
 80072bc:	200012b0 	.word	0x200012b0
 80072c0:	20001318 	.word	0x20001318

080072c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b08a      	sub	sp, #40	; 0x28
 80072c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80072ca:	2300      	movs	r3, #0
 80072cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80072ce:	f000 fb5b 	bl	8007988 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80072d2:	4b1c      	ldr	r3, [pc, #112]	; (8007344 <xTimerCreateTimerTask+0x80>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d021      	beq.n	800731e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80072da:	2300      	movs	r3, #0
 80072dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80072de:	2300      	movs	r3, #0
 80072e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80072e2:	1d3a      	adds	r2, r7, #4
 80072e4:	f107 0108 	add.w	r1, r7, #8
 80072e8:	f107 030c 	add.w	r3, r7, #12
 80072ec:	4618      	mov	r0, r3
 80072ee:	f7fe fb43 	bl	8005978 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80072f2:	6879      	ldr	r1, [r7, #4]
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	9202      	str	r2, [sp, #8]
 80072fa:	9301      	str	r3, [sp, #4]
 80072fc:	2302      	movs	r3, #2
 80072fe:	9300      	str	r3, [sp, #0]
 8007300:	2300      	movs	r3, #0
 8007302:	460a      	mov	r2, r1
 8007304:	4910      	ldr	r1, [pc, #64]	; (8007348 <xTimerCreateTimerTask+0x84>)
 8007306:	4811      	ldr	r0, [pc, #68]	; (800734c <xTimerCreateTimerTask+0x88>)
 8007308:	f7ff f8e4 	bl	80064d4 <xTaskCreateStatic>
 800730c:	4603      	mov	r3, r0
 800730e:	4a10      	ldr	r2, [pc, #64]	; (8007350 <xTimerCreateTimerTask+0x8c>)
 8007310:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007312:	4b0f      	ldr	r3, [pc, #60]	; (8007350 <xTimerCreateTimerTask+0x8c>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d001      	beq.n	800731e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800731a:	2301      	movs	r3, #1
 800731c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d10a      	bne.n	800733a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007328:	f383 8811 	msr	BASEPRI, r3
 800732c:	f3bf 8f6f 	isb	sy
 8007330:	f3bf 8f4f 	dsb	sy
 8007334:	613b      	str	r3, [r7, #16]
}
 8007336:	bf00      	nop
 8007338:	e7fe      	b.n	8007338 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800733a:	697b      	ldr	r3, [r7, #20]
}
 800733c:	4618      	mov	r0, r3
 800733e:	3718      	adds	r7, #24
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	20001354 	.word	0x20001354
 8007348:	080089dc 	.word	0x080089dc
 800734c:	08007591 	.word	0x08007591
 8007350:	20001358 	.word	0x20001358

08007354 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007354:	b580      	push	{r7, lr}
 8007356:	b088      	sub	sp, #32
 8007358:	af02      	add	r7, sp, #8
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
 8007360:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8007362:	2030      	movs	r0, #48	; 0x30
 8007364:	f000 fd62 	bl	8007e2c <pvPortMalloc>
 8007368:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00d      	beq.n	800738c <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	9301      	str	r3, [sp, #4]
 8007374:	6a3b      	ldr	r3, [r7, #32]
 8007376:	9300      	str	r3, [sp, #0]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	68b9      	ldr	r1, [r7, #8]
 800737e:	68f8      	ldr	r0, [r7, #12]
 8007380:	f000 f846 	bl	8007410 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800738c:	697b      	ldr	r3, [r7, #20]
	}
 800738e:	4618      	mov	r0, r3
 8007390:	3718      	adds	r7, #24
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8007396:	b580      	push	{r7, lr}
 8007398:	b08a      	sub	sp, #40	; 0x28
 800739a:	af02      	add	r7, sp, #8
 800739c:	60f8      	str	r0, [r7, #12]
 800739e:	60b9      	str	r1, [r7, #8]
 80073a0:	607a      	str	r2, [r7, #4]
 80073a2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80073a4:	2330      	movs	r3, #48	; 0x30
 80073a6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	2b30      	cmp	r3, #48	; 0x30
 80073ac:	d00a      	beq.n	80073c4 <xTimerCreateStatic+0x2e>
	__asm volatile
 80073ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b2:	f383 8811 	msr	BASEPRI, r3
 80073b6:	f3bf 8f6f 	isb	sy
 80073ba:	f3bf 8f4f 	dsb	sy
 80073be:	61bb      	str	r3, [r7, #24]
}
 80073c0:	bf00      	nop
 80073c2:	e7fe      	b.n	80073c2 <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80073c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d10a      	bne.n	80073e0 <xTimerCreateStatic+0x4a>
	__asm volatile
 80073ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ce:	f383 8811 	msr	BASEPRI, r3
 80073d2:	f3bf 8f6f 	isb	sy
 80073d6:	f3bf 8f4f 	dsb	sy
 80073da:	617b      	str	r3, [r7, #20]
}
 80073dc:	bf00      	nop
 80073de:	e7fe      	b.n	80073de <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e2:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00d      	beq.n	8007406 <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	9301      	str	r3, [sp, #4]
 80073ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	68b9      	ldr	r1, [r7, #8]
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f000 f809 	bl	8007410 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	2201      	movs	r2, #1
 8007402:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8007406:	69fb      	ldr	r3, [r7, #28]
	}
 8007408:	4618      	mov	r0, r3
 800740a:	3720      	adds	r7, #32
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b086      	sub	sp, #24
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	607a      	str	r2, [r7, #4]
 800741c:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d10a      	bne.n	800743a <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8007424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007428:	f383 8811 	msr	BASEPRI, r3
 800742c:	f3bf 8f6f 	isb	sy
 8007430:	f3bf 8f4f 	dsb	sy
 8007434:	617b      	str	r3, [r7, #20]
}
 8007436:	bf00      	nop
 8007438:	e7fe      	b.n	8007438 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743c:	2b00      	cmp	r3, #0
 800743e:	d015      	beq.n	800746c <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007440:	f000 faa2 	bl	8007988 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8007450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8007456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007458:	683a      	ldr	r2, [r7, #0]
 800745a:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800745c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745e:	6a3a      	ldr	r2, [r7, #32]
 8007460:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007464:	3304      	adds	r3, #4
 8007466:	4618      	mov	r0, r3
 8007468:	f7fe fabf 	bl	80059ea <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800746c:	bf00      	nop
 800746e:	3718      	adds	r7, #24
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b08a      	sub	sp, #40	; 0x28
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
 8007480:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007482:	2300      	movs	r3, #0
 8007484:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d10a      	bne.n	80074a2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800748c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007490:	f383 8811 	msr	BASEPRI, r3
 8007494:	f3bf 8f6f 	isb	sy
 8007498:	f3bf 8f4f 	dsb	sy
 800749c:	623b      	str	r3, [r7, #32]
}
 800749e:	bf00      	nop
 80074a0:	e7fe      	b.n	80074a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80074a2:	4b1a      	ldr	r3, [pc, #104]	; (800750c <xTimerGenericCommand+0x98>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d02a      	beq.n	8007500 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	2b05      	cmp	r3, #5
 80074ba:	dc18      	bgt.n	80074ee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80074bc:	f7ff fe22 	bl	8007104 <xTaskGetSchedulerState>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d109      	bne.n	80074da <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80074c6:	4b11      	ldr	r3, [pc, #68]	; (800750c <xTimerGenericCommand+0x98>)
 80074c8:	6818      	ldr	r0, [r3, #0]
 80074ca:	f107 0110 	add.w	r1, r7, #16
 80074ce:	2300      	movs	r3, #0
 80074d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074d2:	f7fe fc1d 	bl	8005d10 <xQueueGenericSend>
 80074d6:	6278      	str	r0, [r7, #36]	; 0x24
 80074d8:	e012      	b.n	8007500 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80074da:	4b0c      	ldr	r3, [pc, #48]	; (800750c <xTimerGenericCommand+0x98>)
 80074dc:	6818      	ldr	r0, [r3, #0]
 80074de:	f107 0110 	add.w	r1, r7, #16
 80074e2:	2300      	movs	r3, #0
 80074e4:	2200      	movs	r2, #0
 80074e6:	f7fe fc13 	bl	8005d10 <xQueueGenericSend>
 80074ea:	6278      	str	r0, [r7, #36]	; 0x24
 80074ec:	e008      	b.n	8007500 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80074ee:	4b07      	ldr	r3, [pc, #28]	; (800750c <xTimerGenericCommand+0x98>)
 80074f0:	6818      	ldr	r0, [r3, #0]
 80074f2:	f107 0110 	add.w	r1, r7, #16
 80074f6:	2300      	movs	r3, #0
 80074f8:	683a      	ldr	r2, [r7, #0]
 80074fa:	f7fe fd07 	bl	8005f0c <xQueueGenericSendFromISR>
 80074fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007502:	4618      	mov	r0, r3
 8007504:	3728      	adds	r7, #40	; 0x28
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	20001354 	.word	0x20001354

08007510 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b088      	sub	sp, #32
 8007514:	af02      	add	r7, sp, #8
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800751a:	4b1c      	ldr	r3, [pc, #112]	; (800758c <prvProcessExpiredTimer+0x7c>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	3304      	adds	r3, #4
 8007528:	4618      	mov	r0, r3
 800752a:	f7fe fac5 	bl	8005ab8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	69db      	ldr	r3, [r3, #28]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d122      	bne.n	800757c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	699a      	ldr	r2, [r3, #24]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	18d1      	adds	r1, r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	683a      	ldr	r2, [r7, #0]
 8007542:	6978      	ldr	r0, [r7, #20]
 8007544:	f000 f8c8 	bl	80076d8 <prvInsertTimerInActiveList>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d016      	beq.n	800757c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800754e:	2300      	movs	r3, #0
 8007550:	9300      	str	r3, [sp, #0]
 8007552:	2300      	movs	r3, #0
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	2100      	movs	r1, #0
 8007558:	6978      	ldr	r0, [r7, #20]
 800755a:	f7ff ff8b 	bl	8007474 <xTimerGenericCommand>
 800755e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d10a      	bne.n	800757c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8007566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756a:	f383 8811 	msr	BASEPRI, r3
 800756e:	f3bf 8f6f 	isb	sy
 8007572:	f3bf 8f4f 	dsb	sy
 8007576:	60fb      	str	r3, [r7, #12]
}
 8007578:	bf00      	nop
 800757a:	e7fe      	b.n	800757a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007580:	6978      	ldr	r0, [r7, #20]
 8007582:	4798      	blx	r3
}
 8007584:	bf00      	nop
 8007586:	3718      	adds	r7, #24
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	2000134c 	.word	0x2000134c

08007590 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007598:	f107 0308 	add.w	r3, r7, #8
 800759c:	4618      	mov	r0, r3
 800759e:	f000 f857 	bl	8007650 <prvGetNextExpireTime>
 80075a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	4619      	mov	r1, r3
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f000 f803 	bl	80075b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80075ae:	f000 f8d5 	bl	800775c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80075b2:	e7f1      	b.n	8007598 <prvTimerTask+0x8>

080075b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80075be:	f7ff f9bb 	bl	8006938 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80075c2:	f107 0308 	add.w	r3, r7, #8
 80075c6:	4618      	mov	r0, r3
 80075c8:	f000 f866 	bl	8007698 <prvSampleTimeNow>
 80075cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d130      	bne.n	8007636 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d10a      	bne.n	80075f0 <prvProcessTimerOrBlockTask+0x3c>
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d806      	bhi.n	80075f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80075e2:	f7ff f9b7 	bl	8006954 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80075e6:	68f9      	ldr	r1, [r7, #12]
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f7ff ff91 	bl	8007510 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80075ee:	e024      	b.n	800763a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d008      	beq.n	8007608 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80075f6:	4b13      	ldr	r3, [pc, #76]	; (8007644 <prvProcessTimerOrBlockTask+0x90>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	bf0c      	ite	eq
 8007600:	2301      	moveq	r3, #1
 8007602:	2300      	movne	r3, #0
 8007604:	b2db      	uxtb	r3, r3
 8007606:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007608:	4b0f      	ldr	r3, [pc, #60]	; (8007648 <prvProcessTimerOrBlockTask+0x94>)
 800760a:	6818      	ldr	r0, [r3, #0]
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	1ad3      	subs	r3, r2, r3
 8007612:	683a      	ldr	r2, [r7, #0]
 8007614:	4619      	mov	r1, r3
 8007616:	f7fe ff29 	bl	800646c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800761a:	f7ff f99b 	bl	8006954 <xTaskResumeAll>
 800761e:	4603      	mov	r3, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	d10a      	bne.n	800763a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007624:	4b09      	ldr	r3, [pc, #36]	; (800764c <prvProcessTimerOrBlockTask+0x98>)
 8007626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800762a:	601a      	str	r2, [r3, #0]
 800762c:	f3bf 8f4f 	dsb	sy
 8007630:	f3bf 8f6f 	isb	sy
}
 8007634:	e001      	b.n	800763a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007636:	f7ff f98d 	bl	8006954 <xTaskResumeAll>
}
 800763a:	bf00      	nop
 800763c:	3710      	adds	r7, #16
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	20001350 	.word	0x20001350
 8007648:	20001354 	.word	0x20001354
 800764c:	e000ed04 	.word	0xe000ed04

08007650 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007650:	b480      	push	{r7}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007658:	4b0e      	ldr	r3, [pc, #56]	; (8007694 <prvGetNextExpireTime+0x44>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	bf0c      	ite	eq
 8007662:	2301      	moveq	r3, #1
 8007664:	2300      	movne	r3, #0
 8007666:	b2db      	uxtb	r3, r3
 8007668:	461a      	mov	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d105      	bne.n	8007682 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007676:	4b07      	ldr	r3, [pc, #28]	; (8007694 <prvGetNextExpireTime+0x44>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	60fb      	str	r3, [r7, #12]
 8007680:	e001      	b.n	8007686 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007682:	2300      	movs	r3, #0
 8007684:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007686:	68fb      	ldr	r3, [r7, #12]
}
 8007688:	4618      	mov	r0, r3
 800768a:	3714      	adds	r7, #20
 800768c:	46bd      	mov	sp, r7
 800768e:	bc80      	pop	{r7}
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	2000134c 	.word	0x2000134c

08007698 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80076a0:	f7ff f9f6 	bl	8006a90 <xTaskGetTickCount>
 80076a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80076a6:	4b0b      	ldr	r3, [pc, #44]	; (80076d4 <prvSampleTimeNow+0x3c>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d205      	bcs.n	80076bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80076b0:	f000 f908 	bl	80078c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	601a      	str	r2, [r3, #0]
 80076ba:	e002      	b.n	80076c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80076c2:	4a04      	ldr	r2, [pc, #16]	; (80076d4 <prvSampleTimeNow+0x3c>)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80076c8:	68fb      	ldr	r3, [r7, #12]
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	2000135c 	.word	0x2000135c

080076d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b086      	sub	sp, #24
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]
 80076e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80076e6:	2300      	movs	r3, #0
 80076e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80076f6:	68ba      	ldr	r2, [r7, #8]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d812      	bhi.n	8007724 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	1ad2      	subs	r2, r2, r3
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	699b      	ldr	r3, [r3, #24]
 8007708:	429a      	cmp	r2, r3
 800770a:	d302      	bcc.n	8007712 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800770c:	2301      	movs	r3, #1
 800770e:	617b      	str	r3, [r7, #20]
 8007710:	e01b      	b.n	800774a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007712:	4b10      	ldr	r3, [pc, #64]	; (8007754 <prvInsertTimerInActiveList+0x7c>)
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	3304      	adds	r3, #4
 800771a:	4619      	mov	r1, r3
 800771c:	4610      	mov	r0, r2
 800771e:	f7fe f993 	bl	8005a48 <vListInsert>
 8007722:	e012      	b.n	800774a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	429a      	cmp	r2, r3
 800772a:	d206      	bcs.n	800773a <prvInsertTimerInActiveList+0x62>
 800772c:	68ba      	ldr	r2, [r7, #8]
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	429a      	cmp	r2, r3
 8007732:	d302      	bcc.n	800773a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007734:	2301      	movs	r3, #1
 8007736:	617b      	str	r3, [r7, #20]
 8007738:	e007      	b.n	800774a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800773a:	4b07      	ldr	r3, [pc, #28]	; (8007758 <prvInsertTimerInActiveList+0x80>)
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	3304      	adds	r3, #4
 8007742:	4619      	mov	r1, r3
 8007744:	4610      	mov	r0, r2
 8007746:	f7fe f97f 	bl	8005a48 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800774a:	697b      	ldr	r3, [r7, #20]
}
 800774c:	4618      	mov	r0, r3
 800774e:	3718      	adds	r7, #24
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	20001350 	.word	0x20001350
 8007758:	2000134c 	.word	0x2000134c

0800775c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b08e      	sub	sp, #56	; 0x38
 8007760:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007762:	e09d      	b.n	80078a0 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2b00      	cmp	r3, #0
 8007768:	da18      	bge.n	800779c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800776a:	1d3b      	adds	r3, r7, #4
 800776c:	3304      	adds	r3, #4
 800776e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007772:	2b00      	cmp	r3, #0
 8007774:	d10a      	bne.n	800778c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777a:	f383 8811 	msr	BASEPRI, r3
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	f3bf 8f4f 	dsb	sy
 8007786:	61fb      	str	r3, [r7, #28]
}
 8007788:	bf00      	nop
 800778a:	e7fe      	b.n	800778a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800778c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007792:	6850      	ldr	r0, [r2, #4]
 8007794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007796:	6892      	ldr	r2, [r2, #8]
 8007798:	4611      	mov	r1, r2
 800779a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	db7e      	blt.n	80078a0 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80077a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d004      	beq.n	80077b8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b0:	3304      	adds	r3, #4
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7fe f980 	bl	8005ab8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80077b8:	463b      	mov	r3, r7
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7ff ff6c 	bl	8007698 <prvSampleTimeNow>
 80077c0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2b09      	cmp	r3, #9
 80077c6:	d86a      	bhi.n	800789e <prvProcessReceivedCommands+0x142>
 80077c8:	a201      	add	r2, pc, #4	; (adr r2, 80077d0 <prvProcessReceivedCommands+0x74>)
 80077ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ce:	bf00      	nop
 80077d0:	080077f9 	.word	0x080077f9
 80077d4:	080077f9 	.word	0x080077f9
 80077d8:	080077f9 	.word	0x080077f9
 80077dc:	080078a1 	.word	0x080078a1
 80077e0:	08007855 	.word	0x08007855
 80077e4:	0800788d 	.word	0x0800788d
 80077e8:	080077f9 	.word	0x080077f9
 80077ec:	080077f9 	.word	0x080077f9
 80077f0:	080078a1 	.word	0x080078a1
 80077f4:	08007855 	.word	0x08007855
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80077f8:	68ba      	ldr	r2, [r7, #8]
 80077fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fc:	699b      	ldr	r3, [r3, #24]
 80077fe:	18d1      	adds	r1, r2, r3
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007806:	f7ff ff67 	bl	80076d8 <prvInsertTimerInActiveList>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d047      	beq.n	80078a0 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007816:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781a:	69db      	ldr	r3, [r3, #28]
 800781c:	2b01      	cmp	r3, #1
 800781e:	d13f      	bne.n	80078a0 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007820:	68ba      	ldr	r2, [r7, #8]
 8007822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007824:	699b      	ldr	r3, [r3, #24]
 8007826:	441a      	add	r2, r3
 8007828:	2300      	movs	r3, #0
 800782a:	9300      	str	r3, [sp, #0]
 800782c:	2300      	movs	r3, #0
 800782e:	2100      	movs	r1, #0
 8007830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007832:	f7ff fe1f 	bl	8007474 <xTimerGenericCommand>
 8007836:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007838:	6a3b      	ldr	r3, [r7, #32]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d130      	bne.n	80078a0 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800783e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007842:	f383 8811 	msr	BASEPRI, r3
 8007846:	f3bf 8f6f 	isb	sy
 800784a:	f3bf 8f4f 	dsb	sy
 800784e:	61bb      	str	r3, [r7, #24]
}
 8007850:	bf00      	nop
 8007852:	e7fe      	b.n	8007852 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007858:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800785a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d10a      	bne.n	8007878 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8007862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007866:	f383 8811 	msr	BASEPRI, r3
 800786a:	f3bf 8f6f 	isb	sy
 800786e:	f3bf 8f4f 	dsb	sy
 8007872:	617b      	str	r3, [r7, #20]
}
 8007874:	bf00      	nop
 8007876:	e7fe      	b.n	8007876 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787a:	699a      	ldr	r2, [r3, #24]
 800787c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787e:	18d1      	adds	r1, r2, r3
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007884:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007886:	f7ff ff27 	bl	80076d8 <prvInsertTimerInActiveList>
					break;
 800788a:	e009      	b.n	80078a0 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800788c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007892:	2b00      	cmp	r3, #0
 8007894:	d104      	bne.n	80078a0 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8007896:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007898:	f000 fb8c 	bl	8007fb4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800789c:	e000      	b.n	80078a0 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800789e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80078a0:	4b07      	ldr	r3, [pc, #28]	; (80078c0 <prvProcessReceivedCommands+0x164>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	1d39      	adds	r1, r7, #4
 80078a6:	2200      	movs	r2, #0
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7fe fbc7 	bl	800603c <xQueueReceive>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f47f af57 	bne.w	8007764 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80078b6:	bf00      	nop
 80078b8:	bf00      	nop
 80078ba:	3730      	adds	r7, #48	; 0x30
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	20001354 	.word	0x20001354

080078c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b088      	sub	sp, #32
 80078c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80078ca:	e045      	b.n	8007958 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80078cc:	4b2c      	ldr	r3, [pc, #176]	; (8007980 <prvSwitchTimerLists+0xbc>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80078d6:	4b2a      	ldr	r3, [pc, #168]	; (8007980 <prvSwitchTimerLists+0xbc>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	3304      	adds	r3, #4
 80078e4:	4618      	mov	r0, r3
 80078e6:	f7fe f8e7 	bl	8005ab8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	69db      	ldr	r3, [r3, #28]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d12e      	bne.n	8007958 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	699b      	ldr	r3, [r3, #24]
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	4413      	add	r3, r2
 8007902:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007904:	68ba      	ldr	r2, [r7, #8]
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	429a      	cmp	r2, r3
 800790a:	d90e      	bls.n	800792a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007918:	4b19      	ldr	r3, [pc, #100]	; (8007980 <prvSwitchTimerLists+0xbc>)
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	3304      	adds	r3, #4
 8007920:	4619      	mov	r1, r3
 8007922:	4610      	mov	r0, r2
 8007924:	f7fe f890 	bl	8005a48 <vListInsert>
 8007928:	e016      	b.n	8007958 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800792a:	2300      	movs	r3, #0
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	2300      	movs	r3, #0
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	2100      	movs	r1, #0
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f7ff fd9d 	bl	8007474 <xTimerGenericCommand>
 800793a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10a      	bne.n	8007958 <prvSwitchTimerLists+0x94>
	__asm volatile
 8007942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007946:	f383 8811 	msr	BASEPRI, r3
 800794a:	f3bf 8f6f 	isb	sy
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	603b      	str	r3, [r7, #0]
}
 8007954:	bf00      	nop
 8007956:	e7fe      	b.n	8007956 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007958:	4b09      	ldr	r3, [pc, #36]	; (8007980 <prvSwitchTimerLists+0xbc>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1b4      	bne.n	80078cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007962:	4b07      	ldr	r3, [pc, #28]	; (8007980 <prvSwitchTimerLists+0xbc>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007968:	4b06      	ldr	r3, [pc, #24]	; (8007984 <prvSwitchTimerLists+0xc0>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a04      	ldr	r2, [pc, #16]	; (8007980 <prvSwitchTimerLists+0xbc>)
 800796e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007970:	4a04      	ldr	r2, [pc, #16]	; (8007984 <prvSwitchTimerLists+0xc0>)
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	6013      	str	r3, [r2, #0]
}
 8007976:	bf00      	nop
 8007978:	3718      	adds	r7, #24
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	2000134c 	.word	0x2000134c
 8007984:	20001350 	.word	0x20001350

08007988 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800798e:	f000 f94d 	bl	8007c2c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007992:	4b15      	ldr	r3, [pc, #84]	; (80079e8 <prvCheckForValidListAndQueue+0x60>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d120      	bne.n	80079dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800799a:	4814      	ldr	r0, [pc, #80]	; (80079ec <prvCheckForValidListAndQueue+0x64>)
 800799c:	f7fe f806 	bl	80059ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80079a0:	4813      	ldr	r0, [pc, #76]	; (80079f0 <prvCheckForValidListAndQueue+0x68>)
 80079a2:	f7fe f803 	bl	80059ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80079a6:	4b13      	ldr	r3, [pc, #76]	; (80079f4 <prvCheckForValidListAndQueue+0x6c>)
 80079a8:	4a10      	ldr	r2, [pc, #64]	; (80079ec <prvCheckForValidListAndQueue+0x64>)
 80079aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80079ac:	4b12      	ldr	r3, [pc, #72]	; (80079f8 <prvCheckForValidListAndQueue+0x70>)
 80079ae:	4a10      	ldr	r2, [pc, #64]	; (80079f0 <prvCheckForValidListAndQueue+0x68>)
 80079b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80079b2:	2300      	movs	r3, #0
 80079b4:	9300      	str	r3, [sp, #0]
 80079b6:	4b11      	ldr	r3, [pc, #68]	; (80079fc <prvCheckForValidListAndQueue+0x74>)
 80079b8:	4a11      	ldr	r2, [pc, #68]	; (8007a00 <prvCheckForValidListAndQueue+0x78>)
 80079ba:	2110      	movs	r1, #16
 80079bc:	200a      	movs	r0, #10
 80079be:	f7fe f90d 	bl	8005bdc <xQueueGenericCreateStatic>
 80079c2:	4603      	mov	r3, r0
 80079c4:	4a08      	ldr	r2, [pc, #32]	; (80079e8 <prvCheckForValidListAndQueue+0x60>)
 80079c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80079c8:	4b07      	ldr	r3, [pc, #28]	; (80079e8 <prvCheckForValidListAndQueue+0x60>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d005      	beq.n	80079dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80079d0:	4b05      	ldr	r3, [pc, #20]	; (80079e8 <prvCheckForValidListAndQueue+0x60>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	490b      	ldr	r1, [pc, #44]	; (8007a04 <prvCheckForValidListAndQueue+0x7c>)
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7fe fd20 	bl	800641c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079dc:	f000 f956 	bl	8007c8c <vPortExitCritical>
}
 80079e0:	bf00      	nop
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	20001354 	.word	0x20001354
 80079ec:	20001324 	.word	0x20001324
 80079f0:	20001338 	.word	0x20001338
 80079f4:	2000134c 	.word	0x2000134c
 80079f8:	20001350 	.word	0x20001350
 80079fc:	20001400 	.word	0x20001400
 8007a00:	20001360 	.word	0x20001360
 8007a04:	080089e4 	.word	0x080089e4

08007a08 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b086      	sub	sp, #24
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d10a      	bne.n	8007a30 <pvTimerGetTimerID+0x28>
	__asm volatile
 8007a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1e:	f383 8811 	msr	BASEPRI, r3
 8007a22:	f3bf 8f6f 	isb	sy
 8007a26:	f3bf 8f4f 	dsb	sy
 8007a2a:	60fb      	str	r3, [r7, #12]
}
 8007a2c:	bf00      	nop
 8007a2e:	e7fe      	b.n	8007a2e <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8007a30:	f000 f8fc 	bl	8007c2c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	6a1b      	ldr	r3, [r3, #32]
 8007a38:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8007a3a:	f000 f927 	bl	8007c8c <vPortExitCritical>

	return pvReturn;
 8007a3e:	693b      	ldr	r3, [r7, #16]
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3718      	adds	r7, #24
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	3b04      	subs	r3, #4
 8007a58:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007a60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	3b04      	subs	r3, #4
 8007a66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	f023 0201 	bic.w	r2, r3, #1
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	3b04      	subs	r3, #4
 8007a76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007a78:	4a08      	ldr	r2, [pc, #32]	; (8007a9c <pxPortInitialiseStack+0x54>)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	3b14      	subs	r3, #20
 8007a82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	3b20      	subs	r3, #32
 8007a8e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007a90:	68fb      	ldr	r3, [r7, #12]
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3714      	adds	r7, #20
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bc80      	pop	{r7}
 8007a9a:	4770      	bx	lr
 8007a9c:	08007aa1 	.word	0x08007aa1

08007aa0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b085      	sub	sp, #20
 8007aa4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007aaa:	4b12      	ldr	r3, [pc, #72]	; (8007af4 <prvTaskExitError+0x54>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ab2:	d00a      	beq.n	8007aca <prvTaskExitError+0x2a>
	__asm volatile
 8007ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab8:	f383 8811 	msr	BASEPRI, r3
 8007abc:	f3bf 8f6f 	isb	sy
 8007ac0:	f3bf 8f4f 	dsb	sy
 8007ac4:	60fb      	str	r3, [r7, #12]
}
 8007ac6:	bf00      	nop
 8007ac8:	e7fe      	b.n	8007ac8 <prvTaskExitError+0x28>
	__asm volatile
 8007aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ace:	f383 8811 	msr	BASEPRI, r3
 8007ad2:	f3bf 8f6f 	isb	sy
 8007ad6:	f3bf 8f4f 	dsb	sy
 8007ada:	60bb      	str	r3, [r7, #8]
}
 8007adc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007ade:	bf00      	nop
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d0fc      	beq.n	8007ae0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007ae6:	bf00      	nop
 8007ae8:	bf00      	nop
 8007aea:	3714      	adds	r7, #20
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bc80      	pop	{r7}
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	2000000c 	.word	0x2000000c
	...

08007b00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b00:	4b07      	ldr	r3, [pc, #28]	; (8007b20 <pxCurrentTCBConst2>)
 8007b02:	6819      	ldr	r1, [r3, #0]
 8007b04:	6808      	ldr	r0, [r1, #0]
 8007b06:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007b0a:	f380 8809 	msr	PSP, r0
 8007b0e:	f3bf 8f6f 	isb	sy
 8007b12:	f04f 0000 	mov.w	r0, #0
 8007b16:	f380 8811 	msr	BASEPRI, r0
 8007b1a:	f04e 0e0d 	orr.w	lr, lr, #13
 8007b1e:	4770      	bx	lr

08007b20 <pxCurrentTCBConst2>:
 8007b20:	20000e24 	.word	0x20000e24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b24:	bf00      	nop
 8007b26:	bf00      	nop

08007b28 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007b28:	4806      	ldr	r0, [pc, #24]	; (8007b44 <prvPortStartFirstTask+0x1c>)
 8007b2a:	6800      	ldr	r0, [r0, #0]
 8007b2c:	6800      	ldr	r0, [r0, #0]
 8007b2e:	f380 8808 	msr	MSP, r0
 8007b32:	b662      	cpsie	i
 8007b34:	b661      	cpsie	f
 8007b36:	f3bf 8f4f 	dsb	sy
 8007b3a:	f3bf 8f6f 	isb	sy
 8007b3e:	df00      	svc	0
 8007b40:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007b42:	bf00      	nop
 8007b44:	e000ed08 	.word	0xe000ed08

08007b48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007b4e:	4b32      	ldr	r3, [pc, #200]	; (8007c18 <xPortStartScheduler+0xd0>)
 8007b50:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	22ff      	movs	r2, #255	; 0xff
 8007b5e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007b68:	78fb      	ldrb	r3, [r7, #3]
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007b70:	b2da      	uxtb	r2, r3
 8007b72:	4b2a      	ldr	r3, [pc, #168]	; (8007c1c <xPortStartScheduler+0xd4>)
 8007b74:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b76:	4b2a      	ldr	r3, [pc, #168]	; (8007c20 <xPortStartScheduler+0xd8>)
 8007b78:	2207      	movs	r2, #7
 8007b7a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b7c:	e009      	b.n	8007b92 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007b7e:	4b28      	ldr	r3, [pc, #160]	; (8007c20 <xPortStartScheduler+0xd8>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3b01      	subs	r3, #1
 8007b84:	4a26      	ldr	r2, [pc, #152]	; (8007c20 <xPortStartScheduler+0xd8>)
 8007b86:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007b88:	78fb      	ldrb	r3, [r7, #3]
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	005b      	lsls	r3, r3, #1
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b92:	78fb      	ldrb	r3, [r7, #3]
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b9a:	2b80      	cmp	r3, #128	; 0x80
 8007b9c:	d0ef      	beq.n	8007b7e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b9e:	4b20      	ldr	r3, [pc, #128]	; (8007c20 <xPortStartScheduler+0xd8>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f1c3 0307 	rsb	r3, r3, #7
 8007ba6:	2b04      	cmp	r3, #4
 8007ba8:	d00a      	beq.n	8007bc0 <xPortStartScheduler+0x78>
	__asm volatile
 8007baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bae:	f383 8811 	msr	BASEPRI, r3
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	60bb      	str	r3, [r7, #8]
}
 8007bbc:	bf00      	nop
 8007bbe:	e7fe      	b.n	8007bbe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007bc0:	4b17      	ldr	r3, [pc, #92]	; (8007c20 <xPortStartScheduler+0xd8>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	021b      	lsls	r3, r3, #8
 8007bc6:	4a16      	ldr	r2, [pc, #88]	; (8007c20 <xPortStartScheduler+0xd8>)
 8007bc8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007bca:	4b15      	ldr	r3, [pc, #84]	; (8007c20 <xPortStartScheduler+0xd8>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007bd2:	4a13      	ldr	r2, [pc, #76]	; (8007c20 <xPortStartScheduler+0xd8>)
 8007bd4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	b2da      	uxtb	r2, r3
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007bde:	4b11      	ldr	r3, [pc, #68]	; (8007c24 <xPortStartScheduler+0xdc>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a10      	ldr	r2, [pc, #64]	; (8007c24 <xPortStartScheduler+0xdc>)
 8007be4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007be8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007bea:	4b0e      	ldr	r3, [pc, #56]	; (8007c24 <xPortStartScheduler+0xdc>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a0d      	ldr	r2, [pc, #52]	; (8007c24 <xPortStartScheduler+0xdc>)
 8007bf0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007bf4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007bf6:	f000 f8b9 	bl	8007d6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007bfa:	4b0b      	ldr	r3, [pc, #44]	; (8007c28 <xPortStartScheduler+0xe0>)
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007c00:	f7ff ff92 	bl	8007b28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007c04:	f7ff f810 	bl	8006c28 <vTaskSwitchContext>
	prvTaskExitError();
 8007c08:	f7ff ff4a 	bl	8007aa0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	e000e400 	.word	0xe000e400
 8007c1c:	20001450 	.word	0x20001450
 8007c20:	20001454 	.word	0x20001454
 8007c24:	e000ed20 	.word	0xe000ed20
 8007c28:	2000000c 	.word	0x2000000c

08007c2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
	__asm volatile
 8007c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c36:	f383 8811 	msr	BASEPRI, r3
 8007c3a:	f3bf 8f6f 	isb	sy
 8007c3e:	f3bf 8f4f 	dsb	sy
 8007c42:	607b      	str	r3, [r7, #4]
}
 8007c44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007c46:	4b0f      	ldr	r3, [pc, #60]	; (8007c84 <vPortEnterCritical+0x58>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	4a0d      	ldr	r2, [pc, #52]	; (8007c84 <vPortEnterCritical+0x58>)
 8007c4e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007c50:	4b0c      	ldr	r3, [pc, #48]	; (8007c84 <vPortEnterCritical+0x58>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d10f      	bne.n	8007c78 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c58:	4b0b      	ldr	r3, [pc, #44]	; (8007c88 <vPortEnterCritical+0x5c>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00a      	beq.n	8007c78 <vPortEnterCritical+0x4c>
	__asm volatile
 8007c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c66:	f383 8811 	msr	BASEPRI, r3
 8007c6a:	f3bf 8f6f 	isb	sy
 8007c6e:	f3bf 8f4f 	dsb	sy
 8007c72:	603b      	str	r3, [r7, #0]
}
 8007c74:	bf00      	nop
 8007c76:	e7fe      	b.n	8007c76 <vPortEnterCritical+0x4a>
	}
}
 8007c78:	bf00      	nop
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bc80      	pop	{r7}
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	2000000c 	.word	0x2000000c
 8007c88:	e000ed04 	.word	0xe000ed04

08007c8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c92:	4b11      	ldr	r3, [pc, #68]	; (8007cd8 <vPortExitCritical+0x4c>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d10a      	bne.n	8007cb0 <vPortExitCritical+0x24>
	__asm volatile
 8007c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9e:	f383 8811 	msr	BASEPRI, r3
 8007ca2:	f3bf 8f6f 	isb	sy
 8007ca6:	f3bf 8f4f 	dsb	sy
 8007caa:	607b      	str	r3, [r7, #4]
}
 8007cac:	bf00      	nop
 8007cae:	e7fe      	b.n	8007cae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007cb0:	4b09      	ldr	r3, [pc, #36]	; (8007cd8 <vPortExitCritical+0x4c>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	4a08      	ldr	r2, [pc, #32]	; (8007cd8 <vPortExitCritical+0x4c>)
 8007cb8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007cba:	4b07      	ldr	r3, [pc, #28]	; (8007cd8 <vPortExitCritical+0x4c>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d105      	bne.n	8007cce <vPortExitCritical+0x42>
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	f383 8811 	msr	BASEPRI, r3
}
 8007ccc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007cce:	bf00      	nop
 8007cd0:	370c      	adds	r7, #12
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bc80      	pop	{r7}
 8007cd6:	4770      	bx	lr
 8007cd8:	2000000c 	.word	0x2000000c
 8007cdc:	00000000 	.word	0x00000000

08007ce0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ce0:	f3ef 8009 	mrs	r0, PSP
 8007ce4:	f3bf 8f6f 	isb	sy
 8007ce8:	4b0d      	ldr	r3, [pc, #52]	; (8007d20 <pxCurrentTCBConst>)
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007cf0:	6010      	str	r0, [r2, #0]
 8007cf2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007cf6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007cfa:	f380 8811 	msr	BASEPRI, r0
 8007cfe:	f7fe ff93 	bl	8006c28 <vTaskSwitchContext>
 8007d02:	f04f 0000 	mov.w	r0, #0
 8007d06:	f380 8811 	msr	BASEPRI, r0
 8007d0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007d0e:	6819      	ldr	r1, [r3, #0]
 8007d10:	6808      	ldr	r0, [r1, #0]
 8007d12:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007d16:	f380 8809 	msr	PSP, r0
 8007d1a:	f3bf 8f6f 	isb	sy
 8007d1e:	4770      	bx	lr

08007d20 <pxCurrentTCBConst>:
 8007d20:	20000e24 	.word	0x20000e24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d24:	bf00      	nop
 8007d26:	bf00      	nop

08007d28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d32:	f383 8811 	msr	BASEPRI, r3
 8007d36:	f3bf 8f6f 	isb	sy
 8007d3a:	f3bf 8f4f 	dsb	sy
 8007d3e:	607b      	str	r3, [r7, #4]
}
 8007d40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007d42:	f7fe feb3 	bl	8006aac <xTaskIncrementTick>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d003      	beq.n	8007d54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d4c:	4b06      	ldr	r3, [pc, #24]	; (8007d68 <SysTick_Handler+0x40>)
 8007d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d52:	601a      	str	r2, [r3, #0]
 8007d54:	2300      	movs	r3, #0
 8007d56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	f383 8811 	msr	BASEPRI, r3
}
 8007d5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d60:	bf00      	nop
 8007d62:	3708      	adds	r7, #8
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	e000ed04 	.word	0xe000ed04

08007d6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d70:	4b0a      	ldr	r3, [pc, #40]	; (8007d9c <vPortSetupTimerInterrupt+0x30>)
 8007d72:	2200      	movs	r2, #0
 8007d74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d76:	4b0a      	ldr	r3, [pc, #40]	; (8007da0 <vPortSetupTimerInterrupt+0x34>)
 8007d78:	2200      	movs	r2, #0
 8007d7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d7c:	4b09      	ldr	r3, [pc, #36]	; (8007da4 <vPortSetupTimerInterrupt+0x38>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a09      	ldr	r2, [pc, #36]	; (8007da8 <vPortSetupTimerInterrupt+0x3c>)
 8007d82:	fba2 2303 	umull	r2, r3, r2, r3
 8007d86:	099b      	lsrs	r3, r3, #6
 8007d88:	4a08      	ldr	r2, [pc, #32]	; (8007dac <vPortSetupTimerInterrupt+0x40>)
 8007d8a:	3b01      	subs	r3, #1
 8007d8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d8e:	4b03      	ldr	r3, [pc, #12]	; (8007d9c <vPortSetupTimerInterrupt+0x30>)
 8007d90:	2207      	movs	r2, #7
 8007d92:	601a      	str	r2, [r3, #0]
}
 8007d94:	bf00      	nop
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bc80      	pop	{r7}
 8007d9a:	4770      	bx	lr
 8007d9c:	e000e010 	.word	0xe000e010
 8007da0:	e000e018 	.word	0xe000e018
 8007da4:	20000000 	.word	0x20000000
 8007da8:	10624dd3 	.word	0x10624dd3
 8007dac:	e000e014 	.word	0xe000e014

08007db0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007db0:	b480      	push	{r7}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007db6:	f3ef 8305 	mrs	r3, IPSR
 8007dba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2b0f      	cmp	r3, #15
 8007dc0:	d914      	bls.n	8007dec <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007dc2:	4a16      	ldr	r2, [pc, #88]	; (8007e1c <vPortValidateInterruptPriority+0x6c>)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007dcc:	4b14      	ldr	r3, [pc, #80]	; (8007e20 <vPortValidateInterruptPriority+0x70>)
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	7afa      	ldrb	r2, [r7, #11]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d20a      	bcs.n	8007dec <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dda:	f383 8811 	msr	BASEPRI, r3
 8007dde:	f3bf 8f6f 	isb	sy
 8007de2:	f3bf 8f4f 	dsb	sy
 8007de6:	607b      	str	r3, [r7, #4]
}
 8007de8:	bf00      	nop
 8007dea:	e7fe      	b.n	8007dea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007dec:	4b0d      	ldr	r3, [pc, #52]	; (8007e24 <vPortValidateInterruptPriority+0x74>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007df4:	4b0c      	ldr	r3, [pc, #48]	; (8007e28 <vPortValidateInterruptPriority+0x78>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d90a      	bls.n	8007e12 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e00:	f383 8811 	msr	BASEPRI, r3
 8007e04:	f3bf 8f6f 	isb	sy
 8007e08:	f3bf 8f4f 	dsb	sy
 8007e0c:	603b      	str	r3, [r7, #0]
}
 8007e0e:	bf00      	nop
 8007e10:	e7fe      	b.n	8007e10 <vPortValidateInterruptPriority+0x60>
	}
 8007e12:	bf00      	nop
 8007e14:	3714      	adds	r7, #20
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bc80      	pop	{r7}
 8007e1a:	4770      	bx	lr
 8007e1c:	e000e3f0 	.word	0xe000e3f0
 8007e20:	20001450 	.word	0x20001450
 8007e24:	e000ed0c 	.word	0xe000ed0c
 8007e28:	20001454 	.word	0x20001454

08007e2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b08a      	sub	sp, #40	; 0x28
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007e34:	2300      	movs	r3, #0
 8007e36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007e38:	f7fe fd7e 	bl	8006938 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e3c:	4b58      	ldr	r3, [pc, #352]	; (8007fa0 <pvPortMalloc+0x174>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d101      	bne.n	8007e48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007e44:	f000 f910 	bl	8008068 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e48:	4b56      	ldr	r3, [pc, #344]	; (8007fa4 <pvPortMalloc+0x178>)
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4013      	ands	r3, r2
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	f040 808e 	bne.w	8007f72 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d01d      	beq.n	8007e98 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007e5c:	2208      	movs	r2, #8
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4413      	add	r3, r2
 8007e62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f003 0307 	and.w	r3, r3, #7
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d014      	beq.n	8007e98 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f023 0307 	bic.w	r3, r3, #7
 8007e74:	3308      	adds	r3, #8
 8007e76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f003 0307 	and.w	r3, r3, #7
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00a      	beq.n	8007e98 <pvPortMalloc+0x6c>
	__asm volatile
 8007e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e86:	f383 8811 	msr	BASEPRI, r3
 8007e8a:	f3bf 8f6f 	isb	sy
 8007e8e:	f3bf 8f4f 	dsb	sy
 8007e92:	617b      	str	r3, [r7, #20]
}
 8007e94:	bf00      	nop
 8007e96:	e7fe      	b.n	8007e96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d069      	beq.n	8007f72 <pvPortMalloc+0x146>
 8007e9e:	4b42      	ldr	r3, [pc, #264]	; (8007fa8 <pvPortMalloc+0x17c>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d864      	bhi.n	8007f72 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007ea8:	4b40      	ldr	r3, [pc, #256]	; (8007fac <pvPortMalloc+0x180>)
 8007eaa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007eac:	4b3f      	ldr	r3, [pc, #252]	; (8007fac <pvPortMalloc+0x180>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007eb2:	e004      	b.n	8007ebe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d903      	bls.n	8007ed0 <pvPortMalloc+0xa4>
 8007ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d1f1      	bne.n	8007eb4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007ed0:	4b33      	ldr	r3, [pc, #204]	; (8007fa0 <pvPortMalloc+0x174>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d04b      	beq.n	8007f72 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007eda:	6a3b      	ldr	r3, [r7, #32]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2208      	movs	r2, #8
 8007ee0:	4413      	add	r3, r2
 8007ee2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	6a3b      	ldr	r3, [r7, #32]
 8007eea:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eee:	685a      	ldr	r2, [r3, #4]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	1ad2      	subs	r2, r2, r3
 8007ef4:	2308      	movs	r3, #8
 8007ef6:	005b      	lsls	r3, r3, #1
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d91f      	bls.n	8007f3c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4413      	add	r3, r2
 8007f02:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	f003 0307 	and.w	r3, r3, #7
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d00a      	beq.n	8007f24 <pvPortMalloc+0xf8>
	__asm volatile
 8007f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f12:	f383 8811 	msr	BASEPRI, r3
 8007f16:	f3bf 8f6f 	isb	sy
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	613b      	str	r3, [r7, #16]
}
 8007f20:	bf00      	nop
 8007f22:	e7fe      	b.n	8007f22 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f26:	685a      	ldr	r2, [r3, #4]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	1ad2      	subs	r2, r2, r3
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f36:	69b8      	ldr	r0, [r7, #24]
 8007f38:	f000 f8f8 	bl	800812c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f3c:	4b1a      	ldr	r3, [pc, #104]	; (8007fa8 <pvPortMalloc+0x17c>)
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	1ad3      	subs	r3, r2, r3
 8007f46:	4a18      	ldr	r2, [pc, #96]	; (8007fa8 <pvPortMalloc+0x17c>)
 8007f48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f4a:	4b17      	ldr	r3, [pc, #92]	; (8007fa8 <pvPortMalloc+0x17c>)
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	4b18      	ldr	r3, [pc, #96]	; (8007fb0 <pvPortMalloc+0x184>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d203      	bcs.n	8007f5e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f56:	4b14      	ldr	r3, [pc, #80]	; (8007fa8 <pvPortMalloc+0x17c>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a15      	ldr	r2, [pc, #84]	; (8007fb0 <pvPortMalloc+0x184>)
 8007f5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f60:	685a      	ldr	r2, [r3, #4]
 8007f62:	4b10      	ldr	r3, [pc, #64]	; (8007fa4 <pvPortMalloc+0x178>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	431a      	orrs	r2, r3
 8007f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6e:	2200      	movs	r2, #0
 8007f70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007f72:	f7fe fcef 	bl	8006954 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	f003 0307 	and.w	r3, r3, #7
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d00a      	beq.n	8007f96 <pvPortMalloc+0x16a>
	__asm volatile
 8007f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	60fb      	str	r3, [r7, #12]
}
 8007f92:	bf00      	nop
 8007f94:	e7fe      	b.n	8007f94 <pvPortMalloc+0x168>
	return pvReturn;
 8007f96:	69fb      	ldr	r3, [r7, #28]
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3728      	adds	r7, #40	; 0x28
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	20002060 	.word	0x20002060
 8007fa4:	2000206c 	.word	0x2000206c
 8007fa8:	20002064 	.word	0x20002064
 8007fac:	20002058 	.word	0x20002058
 8007fb0:	20002068 	.word	0x20002068

08007fb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b086      	sub	sp, #24
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d048      	beq.n	8008058 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007fc6:	2308      	movs	r3, #8
 8007fc8:	425b      	negs	r3, r3
 8007fca:	697a      	ldr	r2, [r7, #20]
 8007fcc:	4413      	add	r3, r2
 8007fce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	685a      	ldr	r2, [r3, #4]
 8007fd8:	4b21      	ldr	r3, [pc, #132]	; (8008060 <vPortFree+0xac>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4013      	ands	r3, r2
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d10a      	bne.n	8007ff8 <vPortFree+0x44>
	__asm volatile
 8007fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe6:	f383 8811 	msr	BASEPRI, r3
 8007fea:	f3bf 8f6f 	isb	sy
 8007fee:	f3bf 8f4f 	dsb	sy
 8007ff2:	60fb      	str	r3, [r7, #12]
}
 8007ff4:	bf00      	nop
 8007ff6:	e7fe      	b.n	8007ff6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d00a      	beq.n	8008016 <vPortFree+0x62>
	__asm volatile
 8008000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008004:	f383 8811 	msr	BASEPRI, r3
 8008008:	f3bf 8f6f 	isb	sy
 800800c:	f3bf 8f4f 	dsb	sy
 8008010:	60bb      	str	r3, [r7, #8]
}
 8008012:	bf00      	nop
 8008014:	e7fe      	b.n	8008014 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	685a      	ldr	r2, [r3, #4]
 800801a:	4b11      	ldr	r3, [pc, #68]	; (8008060 <vPortFree+0xac>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4013      	ands	r3, r2
 8008020:	2b00      	cmp	r3, #0
 8008022:	d019      	beq.n	8008058 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d115      	bne.n	8008058 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	685a      	ldr	r2, [r3, #4]
 8008030:	4b0b      	ldr	r3, [pc, #44]	; (8008060 <vPortFree+0xac>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	43db      	mvns	r3, r3
 8008036:	401a      	ands	r2, r3
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800803c:	f7fe fc7c 	bl	8006938 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	685a      	ldr	r2, [r3, #4]
 8008044:	4b07      	ldr	r3, [pc, #28]	; (8008064 <vPortFree+0xb0>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4413      	add	r3, r2
 800804a:	4a06      	ldr	r2, [pc, #24]	; (8008064 <vPortFree+0xb0>)
 800804c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800804e:	6938      	ldr	r0, [r7, #16]
 8008050:	f000 f86c 	bl	800812c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008054:	f7fe fc7e 	bl	8006954 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008058:	bf00      	nop
 800805a:	3718      	adds	r7, #24
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}
 8008060:	2000206c 	.word	0x2000206c
 8008064:	20002064 	.word	0x20002064

08008068 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008068:	b480      	push	{r7}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800806e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008072:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008074:	4b27      	ldr	r3, [pc, #156]	; (8008114 <prvHeapInit+0xac>)
 8008076:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f003 0307 	and.w	r3, r3, #7
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00c      	beq.n	800809c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	3307      	adds	r3, #7
 8008086:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f023 0307 	bic.w	r3, r3, #7
 800808e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008090:	68ba      	ldr	r2, [r7, #8]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	4a1f      	ldr	r2, [pc, #124]	; (8008114 <prvHeapInit+0xac>)
 8008098:	4413      	add	r3, r2
 800809a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80080a0:	4a1d      	ldr	r2, [pc, #116]	; (8008118 <prvHeapInit+0xb0>)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80080a6:	4b1c      	ldr	r3, [pc, #112]	; (8008118 <prvHeapInit+0xb0>)
 80080a8:	2200      	movs	r2, #0
 80080aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	68ba      	ldr	r2, [r7, #8]
 80080b0:	4413      	add	r3, r2
 80080b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80080b4:	2208      	movs	r2, #8
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	1a9b      	subs	r3, r3, r2
 80080ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f023 0307 	bic.w	r3, r3, #7
 80080c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	4a15      	ldr	r2, [pc, #84]	; (800811c <prvHeapInit+0xb4>)
 80080c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80080ca:	4b14      	ldr	r3, [pc, #80]	; (800811c <prvHeapInit+0xb4>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2200      	movs	r2, #0
 80080d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80080d2:	4b12      	ldr	r3, [pc, #72]	; (800811c <prvHeapInit+0xb4>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	2200      	movs	r2, #0
 80080d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	1ad2      	subs	r2, r2, r3
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80080e8:	4b0c      	ldr	r3, [pc, #48]	; (800811c <prvHeapInit+0xb4>)
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	4a0a      	ldr	r2, [pc, #40]	; (8008120 <prvHeapInit+0xb8>)
 80080f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	4a09      	ldr	r2, [pc, #36]	; (8008124 <prvHeapInit+0xbc>)
 80080fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008100:	4b09      	ldr	r3, [pc, #36]	; (8008128 <prvHeapInit+0xc0>)
 8008102:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008106:	601a      	str	r2, [r3, #0]
}
 8008108:	bf00      	nop
 800810a:	3714      	adds	r7, #20
 800810c:	46bd      	mov	sp, r7
 800810e:	bc80      	pop	{r7}
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	20001458 	.word	0x20001458
 8008118:	20002058 	.word	0x20002058
 800811c:	20002060 	.word	0x20002060
 8008120:	20002068 	.word	0x20002068
 8008124:	20002064 	.word	0x20002064
 8008128:	2000206c 	.word	0x2000206c

0800812c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800812c:	b480      	push	{r7}
 800812e:	b085      	sub	sp, #20
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008134:	4b27      	ldr	r3, [pc, #156]	; (80081d4 <prvInsertBlockIntoFreeList+0xa8>)
 8008136:	60fb      	str	r3, [r7, #12]
 8008138:	e002      	b.n	8008140 <prvInsertBlockIntoFreeList+0x14>
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	60fb      	str	r3, [r7, #12]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	429a      	cmp	r2, r3
 8008148:	d8f7      	bhi.n	800813a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	4413      	add	r3, r2
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	429a      	cmp	r2, r3
 800815a:	d108      	bne.n	800816e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	685a      	ldr	r2, [r3, #4]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	441a      	add	r2, r3
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	68ba      	ldr	r2, [r7, #8]
 8008178:	441a      	add	r2, r3
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	429a      	cmp	r2, r3
 8008180:	d118      	bne.n	80081b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	4b14      	ldr	r3, [pc, #80]	; (80081d8 <prvInsertBlockIntoFreeList+0xac>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	429a      	cmp	r2, r3
 800818c:	d00d      	beq.n	80081aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	685a      	ldr	r2, [r3, #4]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	441a      	add	r2, r3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	601a      	str	r2, [r3, #0]
 80081a8:	e008      	b.n	80081bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80081aa:	4b0b      	ldr	r3, [pc, #44]	; (80081d8 <prvInsertBlockIntoFreeList+0xac>)
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	601a      	str	r2, [r3, #0]
 80081b2:	e003      	b.n	80081bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d002      	beq.n	80081ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081ca:	bf00      	nop
 80081cc:	3714      	adds	r7, #20
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bc80      	pop	{r7}
 80081d2:	4770      	bx	lr
 80081d4:	20002058 	.word	0x20002058
 80081d8:	20002060 	.word	0x20002060

080081dc <_ZdlPvj>:
 80081dc:	f000 b963 	b.w	80084a6 <_ZdlPv>

080081e0 <_Znwj>:
 80081e0:	2801      	cmp	r0, #1
 80081e2:	bf38      	it	cc
 80081e4:	2001      	movcc	r0, #1
 80081e6:	b510      	push	{r4, lr}
 80081e8:	4604      	mov	r4, r0
 80081ea:	4620      	mov	r0, r4
 80081ec:	f000 f9f0 	bl	80085d0 <malloc>
 80081f0:	b100      	cbz	r0, 80081f4 <_Znwj+0x14>
 80081f2:	bd10      	pop	{r4, pc}
 80081f4:	f000 f95a 	bl	80084ac <_ZSt15get_new_handlerv>
 80081f8:	b908      	cbnz	r0, 80081fe <_Znwj+0x1e>
 80081fa:	f000 f9e1 	bl	80085c0 <abort>
 80081fe:	4780      	blx	r0
 8008200:	e7f3      	b.n	80081ea <_Znwj+0xa>

08008202 <_ZSt17__throw_bad_allocv>:
 8008202:	b508      	push	{r3, lr}
 8008204:	f000 f9dc 	bl	80085c0 <abort>

08008208 <_ZSt28__throw_bad_array_new_lengthv>:
 8008208:	b508      	push	{r3, lr}
 800820a:	f000 f9d9 	bl	80085c0 <abort>

0800820e <_ZSt19__throw_logic_errorPKc>:
 800820e:	b508      	push	{r3, lr}
 8008210:	f000 f9d6 	bl	80085c0 <abort>

08008214 <_ZSt20__throw_length_errorPKc>:
 8008214:	b508      	push	{r3, lr}
 8008216:	f000 f9d3 	bl	80085c0 <abort>

0800821a <_ZSt24__throw_out_of_range_fmtPKcz>:
 800821a:	b40f      	push	{r0, r1, r2, r3}
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	f107 0410 	add.w	r4, r7, #16
 8008226:	f854 5b04 	ldr.w	r5, [r4], #4
 800822a:	4628      	mov	r0, r5
 800822c:	f7f7 ff90 	bl	8000150 <strlen>
 8008230:	f200 2307 	addw	r3, r0, #519	; 0x207
 8008234:	f023 0307 	bic.w	r3, r3, #7
 8008238:	ebad 0d03 	sub.w	sp, sp, r3
 800823c:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8008240:	4623      	mov	r3, r4
 8008242:	462a      	mov	r2, r5
 8008244:	4668      	mov	r0, sp
 8008246:	607c      	str	r4, [r7, #4]
 8008248:	f000 f8ec 	bl	8008424 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 800824c:	f000 f9b8 	bl	80085c0 <abort>

08008250 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>:
 8008250:	290d      	cmp	r1, #13
 8008252:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008254:	4605      	mov	r5, r0
 8008256:	d817      	bhi.n	8008288 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x38>
 8008258:	b389      	cbz	r1, 80082be <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x6e>
 800825a:	4b1a      	ldr	r3, [pc, #104]	; (80082c4 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x74>)
 800825c:	5c5c      	ldrb	r4, [r3, r1]
 800825e:	4620      	mov	r0, r4
 8008260:	f7f8 f8d0 	bl	8000404 <__aeabi_i2d>
 8008264:	4606      	mov	r6, r0
 8008266:	6828      	ldr	r0, [r5, #0]
 8008268:	460f      	mov	r7, r1
 800826a:	f7f8 f8dd 	bl	8000428 <__aeabi_f2d>
 800826e:	4602      	mov	r2, r0
 8008270:	460b      	mov	r3, r1
 8008272:	4630      	mov	r0, r6
 8008274:	4639      	mov	r1, r7
 8008276:	f7f8 f92f 	bl	80004d8 <__aeabi_dmul>
 800827a:	f000 f921 	bl	80084c0 <floor>
 800827e:	f7f8 fbc5 	bl	8000a0c <__aeabi_d2uiz>
 8008282:	6068      	str	r0, [r5, #4]
 8008284:	4620      	mov	r0, r4
 8008286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008288:	23f9      	movs	r3, #249	; 0xf9
 800828a:	4a0f      	ldr	r2, [pc, #60]	; (80082c8 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x78>)
 800828c:	1058      	asrs	r0, r3, #1
 800828e:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8008292:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 8008296:	428e      	cmp	r6, r1
 8008298:	bf2f      	iteee	cs
 800829a:	4603      	movcs	r3, r0
 800829c:	1a1b      	subcc	r3, r3, r0
 800829e:	f103 33ff 	addcc.w	r3, r3, #4294967295	; 0xffffffff
 80082a2:	1d22      	addcc	r2, r4, #4
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	dcf1      	bgt.n	800828c <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x3c>
 80082a8:	4b08      	ldr	r3, [pc, #32]	; (80082cc <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x7c>)
 80082aa:	6814      	ldr	r4, [r2, #0]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d003      	beq.n	80082b8 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x68>
 80082b0:	4620      	mov	r0, r4
 80082b2:	f7f8 f897 	bl	80003e4 <__aeabi_ui2d>
 80082b6:	e7d5      	b.n	8008264 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x14>
 80082b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082bc:	e7e1      	b.n	8008282 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x32>
 80082be:	2401      	movs	r4, #1
 80082c0:	e7e0      	b.n	8008284 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x34>
 80082c2:	bf00      	nop
 80082c4:	08008ea8 	.word	0x08008ea8
 80082c8:	08008abc 	.word	0x08008abc
 80082cc:	08008ea0 	.word	0x08008ea0

080082d0 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>:
 80082d0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80082d4:	4692      	mov	sl, r2
 80082d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082d8:	4604      	mov	r4, r0
 80082da:	eb03 0802 	add.w	r8, r3, r2
 80082de:	684b      	ldr	r3, [r1, #4]
 80082e0:	460d      	mov	r5, r1
 80082e2:	4598      	cmp	r8, r3
 80082e4:	d946      	bls.n	8008374 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0xa4>
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	6808      	ldr	r0, [r1, #0]
 80082ea:	bf14      	ite	ne
 80082ec:	f04f 0900 	movne.w	r9, #0
 80082f0:	f04f 090b 	moveq.w	r9, #11
 80082f4:	f7f8 f898 	bl	8000428 <__aeabi_f2d>
 80082f8:	4606      	mov	r6, r0
 80082fa:	460f      	mov	r7, r1
 80082fc:	45c8      	cmp	r8, r9
 80082fe:	4640      	mov	r0, r8
 8008300:	bf38      	it	cc
 8008302:	4648      	movcc	r0, r9
 8008304:	f7f8 f86e 	bl	80003e4 <__aeabi_ui2d>
 8008308:	4632      	mov	r2, r6
 800830a:	463b      	mov	r3, r7
 800830c:	f7f8 fa0e 	bl	800072c <__aeabi_ddiv>
 8008310:	4680      	mov	r8, r0
 8008312:	4650      	mov	r0, sl
 8008314:	4689      	mov	r9, r1
 8008316:	f7f8 f865 	bl	80003e4 <__aeabi_ui2d>
 800831a:	4602      	mov	r2, r0
 800831c:	460b      	mov	r3, r1
 800831e:	e9cd 2300 	strd	r2, r3, [sp]
 8008322:	4642      	mov	r2, r8
 8008324:	464b      	mov	r3, r9
 8008326:	f7f8 fb53 	bl	80009d0 <__aeabi_dcmple>
 800832a:	b1c0      	cbz	r0, 800835e <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x8e>
 800832c:	4640      	mov	r0, r8
 800832e:	4649      	mov	r1, r9
 8008330:	f000 f8c6 	bl	80084c0 <floor>
 8008334:	4b11      	ldr	r3, [pc, #68]	; (800837c <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0xac>)
 8008336:	2200      	movs	r2, #0
 8008338:	f7f7 ff18 	bl	800016c <__adddf3>
 800833c:	f7f8 fb66 	bl	8000a0c <__aeabi_d2uiz>
 8008340:	ea4f 014a 	mov.w	r1, sl, lsl #1
 8008344:	4281      	cmp	r1, r0
 8008346:	bf38      	it	cc
 8008348:	4601      	movcc	r1, r0
 800834a:	4628      	mov	r0, r5
 800834c:	f7ff ff80 	bl	8008250 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>
 8008350:	2301      	movs	r3, #1
 8008352:	6060      	str	r0, [r4, #4]
 8008354:	7023      	strb	r3, [r4, #0]
 8008356:	4620      	mov	r0, r4
 8008358:	b002      	add	sp, #8
 800835a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800835e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008362:	4630      	mov	r0, r6
 8008364:	4639      	mov	r1, r7
 8008366:	f7f8 f8b7 	bl	80004d8 <__aeabi_dmul>
 800836a:	f000 f8a9 	bl	80084c0 <floor>
 800836e:	f7f8 fb4d 	bl	8000a0c <__aeabi_d2uiz>
 8008372:	6068      	str	r0, [r5, #4]
 8008374:	2300      	movs	r3, #0
 8008376:	e9c4 3300 	strd	r3, r3, [r4]
 800837a:	e7ec      	b.n	8008356 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x86>
 800837c:	3ff00000 	.word	0x3ff00000

08008380 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8008380:	4606      	mov	r6, r0
 8008382:	460c      	mov	r4, r1
 8008384:	b580      	push	{r7, lr}
 8008386:	b09c      	sub	sp, #112	; 0x70
 8008388:	af00      	add	r7, sp, #0
 800838a:	1ba4      	subs	r4, r4, r6
 800838c:	2269      	movs	r2, #105	; 0x69
 800838e:	490e      	ldr	r1, [pc, #56]	; (80083c8 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8008390:	1d38      	adds	r0, r7, #4
 8008392:	f000 fa7b 	bl	800888c <memcpy>
 8008396:	f104 0370 	add.w	r3, r4, #112	; 0x70
 800839a:	f023 0307 	bic.w	r3, r3, #7
 800839e:	ebad 0d03 	sub.w	sp, sp, r3
 80083a2:	466d      	mov	r5, sp
 80083a4:	2268      	movs	r2, #104	; 0x68
 80083a6:	1d39      	adds	r1, r7, #4
 80083a8:	4628      	mov	r0, r5
 80083aa:	f000 fa6f 	bl	800888c <memcpy>
 80083ae:	4622      	mov	r2, r4
 80083b0:	4631      	mov	r1, r6
 80083b2:	f105 0068 	add.w	r0, r5, #104	; 0x68
 80083b6:	f000 fa69 	bl	800888c <memcpy>
 80083ba:	2300      	movs	r3, #0
 80083bc:	442c      	add	r4, r5
 80083be:	4628      	mov	r0, r5
 80083c0:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80083c4:	f7ff ff23 	bl	800820e <_ZSt19__throw_logic_errorPKc>
 80083c8:	08008eb6 	.word	0x08008eb6

080083cc <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 80083cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	b084      	sub	sp, #16
 80083d4:	466d      	mov	r5, sp
 80083d6:	f105 040c 	add.w	r4, r5, #12
 80083da:	4623      	mov	r3, r4
 80083dc:	f04f 0c0a 	mov.w	ip, #10
 80083e0:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8008420 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 80083e4:	fbb2 f6fc 	udiv	r6, r2, ip
 80083e8:	fb0c 2e16 	mls	lr, ip, r6, r2
 80083ec:	f818 e00e 	ldrb.w	lr, [r8, lr]
 80083f0:	f803 ed01 	strb.w	lr, [r3, #-1]!
 80083f4:	4696      	mov	lr, r2
 80083f6:	f1be 0f09 	cmp.w	lr, #9
 80083fa:	4632      	mov	r2, r6
 80083fc:	d8f2      	bhi.n	80083e4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 80083fe:	1ae4      	subs	r4, r4, r3
 8008400:	428c      	cmp	r4, r1
 8008402:	d809      	bhi.n	8008418 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8008404:	f1c4 010c 	rsb	r1, r4, #12
 8008408:	4622      	mov	r2, r4
 800840a:	4429      	add	r1, r5
 800840c:	f000 fa3e 	bl	800888c <memcpy>
 8008410:	4620      	mov	r0, r4
 8008412:	46bd      	mov	sp, r7
 8008414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008418:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800841c:	e7f8      	b.n	8008410 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 800841e:	bf00      	nop
 8008420:	08008f1f 	.word	0x08008f1f

08008424 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8008424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008428:	4607      	mov	r7, r0
 800842a:	4615      	mov	r5, r2
 800842c:	4604      	mov	r4, r0
 800842e:	3901      	subs	r1, #1
 8008430:	eb00 0801 	add.w	r8, r0, r1
 8008434:	782a      	ldrb	r2, [r5, #0]
 8008436:	b392      	cbz	r2, 800849e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 8008438:	4544      	cmp	r4, r8
 800843a:	d216      	bcs.n	800846a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x46>
 800843c:	2a25      	cmp	r2, #37	; 0x25
 800843e:	d107      	bne.n	8008450 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8008440:	786a      	ldrb	r2, [r5, #1]
 8008442:	2a73      	cmp	r2, #115	; 0x73
 8008444:	d009      	beq.n	800845a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 8008446:	2a7a      	cmp	r2, #122	; 0x7a
 8008448:	d016      	beq.n	8008478 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x54>
 800844a:	2a25      	cmp	r2, #37	; 0x25
 800844c:	d100      	bne.n	8008450 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800844e:	3501      	adds	r5, #1
 8008450:	f815 2b01 	ldrb.w	r2, [r5], #1
 8008454:	f804 2b01 	strb.w	r2, [r4], #1
 8008458:	e7ec      	b.n	8008434 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 800845a:	f853 2b04 	ldr.w	r2, [r3], #4
 800845e:	3a01      	subs	r2, #1
 8008460:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8008464:	b1c9      	cbz	r1, 800849a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 8008466:	4544      	cmp	r4, r8
 8008468:	d103      	bne.n	8008472 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4e>
 800846a:	4621      	mov	r1, r4
 800846c:	4638      	mov	r0, r7
 800846e:	f7ff ff87 	bl	8008380 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 8008472:	f804 1b01 	strb.w	r1, [r4], #1
 8008476:	e7f3      	b.n	8008460 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 8008478:	78aa      	ldrb	r2, [r5, #2]
 800847a:	2a75      	cmp	r2, #117	; 0x75
 800847c:	d1e8      	bne.n	8008450 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800847e:	461e      	mov	r6, r3
 8008480:	4620      	mov	r0, r4
 8008482:	f856 2b04 	ldr.w	r2, [r6], #4
 8008486:	eba8 0104 	sub.w	r1, r8, r4
 800848a:	f7ff ff9f 	bl	80083cc <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 800848e:	2800      	cmp	r0, #0
 8008490:	ddeb      	ble.n	800846a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x46>
 8008492:	4633      	mov	r3, r6
 8008494:	4404      	add	r4, r0
 8008496:	3503      	adds	r5, #3
 8008498:	e7cc      	b.n	8008434 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 800849a:	3502      	adds	r5, #2
 800849c:	e7ca      	b.n	8008434 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 800849e:	7022      	strb	r2, [r4, #0]
 80084a0:	1be0      	subs	r0, r4, r7
 80084a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080084a6 <_ZdlPv>:
 80084a6:	f000 b89b 	b.w	80085e0 <free>
	...

080084ac <_ZSt15get_new_handlerv>:
 80084ac:	4b02      	ldr	r3, [pc, #8]	; (80084b8 <_ZSt15get_new_handlerv+0xc>)
 80084ae:	6818      	ldr	r0, [r3, #0]
 80084b0:	f3bf 8f5b 	dmb	ish
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	20002070 	.word	0x20002070
 80084bc:	00000000 	.word	0x00000000

080084c0 <floor>:
 80084c0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80084c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084c8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80084cc:	2e13      	cmp	r6, #19
 80084ce:	460b      	mov	r3, r1
 80084d0:	4607      	mov	r7, r0
 80084d2:	460c      	mov	r4, r1
 80084d4:	4605      	mov	r5, r0
 80084d6:	dc32      	bgt.n	800853e <floor+0x7e>
 80084d8:	2e00      	cmp	r6, #0
 80084da:	da14      	bge.n	8008506 <floor+0x46>
 80084dc:	a334      	add	r3, pc, #208	; (adr r3, 80085b0 <floor+0xf0>)
 80084de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e2:	f7f7 fe43 	bl	800016c <__adddf3>
 80084e6:	2200      	movs	r2, #0
 80084e8:	2300      	movs	r3, #0
 80084ea:	f7f8 fa85 	bl	80009f8 <__aeabi_dcmpgt>
 80084ee:	b138      	cbz	r0, 8008500 <floor+0x40>
 80084f0:	2c00      	cmp	r4, #0
 80084f2:	da56      	bge.n	80085a2 <floor+0xe2>
 80084f4:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80084f8:	4325      	orrs	r5, r4
 80084fa:	d055      	beq.n	80085a8 <floor+0xe8>
 80084fc:	2500      	movs	r5, #0
 80084fe:	4c2e      	ldr	r4, [pc, #184]	; (80085b8 <floor+0xf8>)
 8008500:	4623      	mov	r3, r4
 8008502:	462f      	mov	r7, r5
 8008504:	e025      	b.n	8008552 <floor+0x92>
 8008506:	4a2d      	ldr	r2, [pc, #180]	; (80085bc <floor+0xfc>)
 8008508:	fa42 f806 	asr.w	r8, r2, r6
 800850c:	ea01 0208 	and.w	r2, r1, r8
 8008510:	4302      	orrs	r2, r0
 8008512:	d01e      	beq.n	8008552 <floor+0x92>
 8008514:	a326      	add	r3, pc, #152	; (adr r3, 80085b0 <floor+0xf0>)
 8008516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851a:	f7f7 fe27 	bl	800016c <__adddf3>
 800851e:	2200      	movs	r2, #0
 8008520:	2300      	movs	r3, #0
 8008522:	f7f8 fa69 	bl	80009f8 <__aeabi_dcmpgt>
 8008526:	2800      	cmp	r0, #0
 8008528:	d0ea      	beq.n	8008500 <floor+0x40>
 800852a:	2c00      	cmp	r4, #0
 800852c:	bfbe      	ittt	lt
 800852e:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008532:	4133      	asrlt	r3, r6
 8008534:	18e4      	addlt	r4, r4, r3
 8008536:	2500      	movs	r5, #0
 8008538:	ea24 0408 	bic.w	r4, r4, r8
 800853c:	e7e0      	b.n	8008500 <floor+0x40>
 800853e:	2e33      	cmp	r6, #51	; 0x33
 8008540:	dd0b      	ble.n	800855a <floor+0x9a>
 8008542:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008546:	d104      	bne.n	8008552 <floor+0x92>
 8008548:	4602      	mov	r2, r0
 800854a:	f7f7 fe0f 	bl	800016c <__adddf3>
 800854e:	4607      	mov	r7, r0
 8008550:	460b      	mov	r3, r1
 8008552:	4638      	mov	r0, r7
 8008554:	4619      	mov	r1, r3
 8008556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800855a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800855e:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8008562:	fa28 f802 	lsr.w	r8, r8, r2
 8008566:	ea10 0f08 	tst.w	r0, r8
 800856a:	d0f2      	beq.n	8008552 <floor+0x92>
 800856c:	a310      	add	r3, pc, #64	; (adr r3, 80085b0 <floor+0xf0>)
 800856e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008572:	f7f7 fdfb 	bl	800016c <__adddf3>
 8008576:	2200      	movs	r2, #0
 8008578:	2300      	movs	r3, #0
 800857a:	f7f8 fa3d 	bl	80009f8 <__aeabi_dcmpgt>
 800857e:	2800      	cmp	r0, #0
 8008580:	d0be      	beq.n	8008500 <floor+0x40>
 8008582:	2c00      	cmp	r4, #0
 8008584:	da0a      	bge.n	800859c <floor+0xdc>
 8008586:	2e14      	cmp	r6, #20
 8008588:	d101      	bne.n	800858e <floor+0xce>
 800858a:	3401      	adds	r4, #1
 800858c:	e006      	b.n	800859c <floor+0xdc>
 800858e:	2301      	movs	r3, #1
 8008590:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008594:	40b3      	lsls	r3, r6
 8008596:	441d      	add	r5, r3
 8008598:	42af      	cmp	r7, r5
 800859a:	d8f6      	bhi.n	800858a <floor+0xca>
 800859c:	ea25 0508 	bic.w	r5, r5, r8
 80085a0:	e7ae      	b.n	8008500 <floor+0x40>
 80085a2:	2500      	movs	r5, #0
 80085a4:	462c      	mov	r4, r5
 80085a6:	e7ab      	b.n	8008500 <floor+0x40>
 80085a8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80085ac:	e7a8      	b.n	8008500 <floor+0x40>
 80085ae:	bf00      	nop
 80085b0:	8800759c 	.word	0x8800759c
 80085b4:	7e37e43c 	.word	0x7e37e43c
 80085b8:	bff00000 	.word	0xbff00000
 80085bc:	000fffff 	.word	0x000fffff

080085c0 <abort>:
 80085c0:	2006      	movs	r0, #6
 80085c2:	b508      	push	{r3, lr}
 80085c4:	f000 f90a 	bl	80087dc <raise>
 80085c8:	2001      	movs	r0, #1
 80085ca:	f7fb fdfa 	bl	80041c2 <_exit>
	...

080085d0 <malloc>:
 80085d0:	4b02      	ldr	r3, [pc, #8]	; (80085dc <malloc+0xc>)
 80085d2:	4601      	mov	r1, r0
 80085d4:	6818      	ldr	r0, [r3, #0]
 80085d6:	f000 b82b 	b.w	8008630 <_malloc_r>
 80085da:	bf00      	nop
 80085dc:	2000005c 	.word	0x2000005c

080085e0 <free>:
 80085e0:	4b02      	ldr	r3, [pc, #8]	; (80085ec <free+0xc>)
 80085e2:	4601      	mov	r1, r0
 80085e4:	6818      	ldr	r0, [r3, #0]
 80085e6:	f000 b95f 	b.w	80088a8 <_free_r>
 80085ea:	bf00      	nop
 80085ec:	2000005c 	.word	0x2000005c

080085f0 <sbrk_aligned>:
 80085f0:	b570      	push	{r4, r5, r6, lr}
 80085f2:	4e0e      	ldr	r6, [pc, #56]	; (800862c <sbrk_aligned+0x3c>)
 80085f4:	460c      	mov	r4, r1
 80085f6:	6831      	ldr	r1, [r6, #0]
 80085f8:	4605      	mov	r5, r0
 80085fa:	b911      	cbnz	r1, 8008602 <sbrk_aligned+0x12>
 80085fc:	f000 f90a 	bl	8008814 <_sbrk_r>
 8008600:	6030      	str	r0, [r6, #0]
 8008602:	4621      	mov	r1, r4
 8008604:	4628      	mov	r0, r5
 8008606:	f000 f905 	bl	8008814 <_sbrk_r>
 800860a:	1c43      	adds	r3, r0, #1
 800860c:	d00a      	beq.n	8008624 <sbrk_aligned+0x34>
 800860e:	1cc4      	adds	r4, r0, #3
 8008610:	f024 0403 	bic.w	r4, r4, #3
 8008614:	42a0      	cmp	r0, r4
 8008616:	d007      	beq.n	8008628 <sbrk_aligned+0x38>
 8008618:	1a21      	subs	r1, r4, r0
 800861a:	4628      	mov	r0, r5
 800861c:	f000 f8fa 	bl	8008814 <_sbrk_r>
 8008620:	3001      	adds	r0, #1
 8008622:	d101      	bne.n	8008628 <sbrk_aligned+0x38>
 8008624:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008628:	4620      	mov	r0, r4
 800862a:	bd70      	pop	{r4, r5, r6, pc}
 800862c:	20002078 	.word	0x20002078

08008630 <_malloc_r>:
 8008630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008634:	1ccd      	adds	r5, r1, #3
 8008636:	f025 0503 	bic.w	r5, r5, #3
 800863a:	3508      	adds	r5, #8
 800863c:	2d0c      	cmp	r5, #12
 800863e:	bf38      	it	cc
 8008640:	250c      	movcc	r5, #12
 8008642:	2d00      	cmp	r5, #0
 8008644:	4607      	mov	r7, r0
 8008646:	db01      	blt.n	800864c <_malloc_r+0x1c>
 8008648:	42a9      	cmp	r1, r5
 800864a:	d905      	bls.n	8008658 <_malloc_r+0x28>
 800864c:	230c      	movs	r3, #12
 800864e:	2600      	movs	r6, #0
 8008650:	603b      	str	r3, [r7, #0]
 8008652:	4630      	mov	r0, r6
 8008654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008658:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800872c <_malloc_r+0xfc>
 800865c:	f000 f868 	bl	8008730 <__malloc_lock>
 8008660:	f8d8 3000 	ldr.w	r3, [r8]
 8008664:	461c      	mov	r4, r3
 8008666:	bb5c      	cbnz	r4, 80086c0 <_malloc_r+0x90>
 8008668:	4629      	mov	r1, r5
 800866a:	4638      	mov	r0, r7
 800866c:	f7ff ffc0 	bl	80085f0 <sbrk_aligned>
 8008670:	1c43      	adds	r3, r0, #1
 8008672:	4604      	mov	r4, r0
 8008674:	d155      	bne.n	8008722 <_malloc_r+0xf2>
 8008676:	f8d8 4000 	ldr.w	r4, [r8]
 800867a:	4626      	mov	r6, r4
 800867c:	2e00      	cmp	r6, #0
 800867e:	d145      	bne.n	800870c <_malloc_r+0xdc>
 8008680:	2c00      	cmp	r4, #0
 8008682:	d048      	beq.n	8008716 <_malloc_r+0xe6>
 8008684:	6823      	ldr	r3, [r4, #0]
 8008686:	4631      	mov	r1, r6
 8008688:	4638      	mov	r0, r7
 800868a:	eb04 0903 	add.w	r9, r4, r3
 800868e:	f000 f8c1 	bl	8008814 <_sbrk_r>
 8008692:	4581      	cmp	r9, r0
 8008694:	d13f      	bne.n	8008716 <_malloc_r+0xe6>
 8008696:	6821      	ldr	r1, [r4, #0]
 8008698:	4638      	mov	r0, r7
 800869a:	1a6d      	subs	r5, r5, r1
 800869c:	4629      	mov	r1, r5
 800869e:	f7ff ffa7 	bl	80085f0 <sbrk_aligned>
 80086a2:	3001      	adds	r0, #1
 80086a4:	d037      	beq.n	8008716 <_malloc_r+0xe6>
 80086a6:	6823      	ldr	r3, [r4, #0]
 80086a8:	442b      	add	r3, r5
 80086aa:	6023      	str	r3, [r4, #0]
 80086ac:	f8d8 3000 	ldr.w	r3, [r8]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d038      	beq.n	8008726 <_malloc_r+0xf6>
 80086b4:	685a      	ldr	r2, [r3, #4]
 80086b6:	42a2      	cmp	r2, r4
 80086b8:	d12b      	bne.n	8008712 <_malloc_r+0xe2>
 80086ba:	2200      	movs	r2, #0
 80086bc:	605a      	str	r2, [r3, #4]
 80086be:	e00f      	b.n	80086e0 <_malloc_r+0xb0>
 80086c0:	6822      	ldr	r2, [r4, #0]
 80086c2:	1b52      	subs	r2, r2, r5
 80086c4:	d41f      	bmi.n	8008706 <_malloc_r+0xd6>
 80086c6:	2a0b      	cmp	r2, #11
 80086c8:	d917      	bls.n	80086fa <_malloc_r+0xca>
 80086ca:	1961      	adds	r1, r4, r5
 80086cc:	42a3      	cmp	r3, r4
 80086ce:	6025      	str	r5, [r4, #0]
 80086d0:	bf18      	it	ne
 80086d2:	6059      	strne	r1, [r3, #4]
 80086d4:	6863      	ldr	r3, [r4, #4]
 80086d6:	bf08      	it	eq
 80086d8:	f8c8 1000 	streq.w	r1, [r8]
 80086dc:	5162      	str	r2, [r4, r5]
 80086de:	604b      	str	r3, [r1, #4]
 80086e0:	4638      	mov	r0, r7
 80086e2:	f104 060b 	add.w	r6, r4, #11
 80086e6:	f000 f829 	bl	800873c <__malloc_unlock>
 80086ea:	f026 0607 	bic.w	r6, r6, #7
 80086ee:	1d23      	adds	r3, r4, #4
 80086f0:	1af2      	subs	r2, r6, r3
 80086f2:	d0ae      	beq.n	8008652 <_malloc_r+0x22>
 80086f4:	1b9b      	subs	r3, r3, r6
 80086f6:	50a3      	str	r3, [r4, r2]
 80086f8:	e7ab      	b.n	8008652 <_malloc_r+0x22>
 80086fa:	42a3      	cmp	r3, r4
 80086fc:	6862      	ldr	r2, [r4, #4]
 80086fe:	d1dd      	bne.n	80086bc <_malloc_r+0x8c>
 8008700:	f8c8 2000 	str.w	r2, [r8]
 8008704:	e7ec      	b.n	80086e0 <_malloc_r+0xb0>
 8008706:	4623      	mov	r3, r4
 8008708:	6864      	ldr	r4, [r4, #4]
 800870a:	e7ac      	b.n	8008666 <_malloc_r+0x36>
 800870c:	4634      	mov	r4, r6
 800870e:	6876      	ldr	r6, [r6, #4]
 8008710:	e7b4      	b.n	800867c <_malloc_r+0x4c>
 8008712:	4613      	mov	r3, r2
 8008714:	e7cc      	b.n	80086b0 <_malloc_r+0x80>
 8008716:	230c      	movs	r3, #12
 8008718:	4638      	mov	r0, r7
 800871a:	603b      	str	r3, [r7, #0]
 800871c:	f000 f80e 	bl	800873c <__malloc_unlock>
 8008720:	e797      	b.n	8008652 <_malloc_r+0x22>
 8008722:	6025      	str	r5, [r4, #0]
 8008724:	e7dc      	b.n	80086e0 <_malloc_r+0xb0>
 8008726:	605b      	str	r3, [r3, #4]
 8008728:	deff      	udf	#255	; 0xff
 800872a:	bf00      	nop
 800872c:	20002074 	.word	0x20002074

08008730 <__malloc_lock>:
 8008730:	4801      	ldr	r0, [pc, #4]	; (8008738 <__malloc_lock+0x8>)
 8008732:	f000 b8a9 	b.w	8008888 <__retarget_lock_acquire_recursive>
 8008736:	bf00      	nop
 8008738:	200021b8 	.word	0x200021b8

0800873c <__malloc_unlock>:
 800873c:	4801      	ldr	r0, [pc, #4]	; (8008744 <__malloc_unlock+0x8>)
 800873e:	f000 b8a4 	b.w	800888a <__retarget_lock_release_recursive>
 8008742:	bf00      	nop
 8008744:	200021b8 	.word	0x200021b8

08008748 <memmove>:
 8008748:	4288      	cmp	r0, r1
 800874a:	b510      	push	{r4, lr}
 800874c:	eb01 0402 	add.w	r4, r1, r2
 8008750:	d902      	bls.n	8008758 <memmove+0x10>
 8008752:	4284      	cmp	r4, r0
 8008754:	4623      	mov	r3, r4
 8008756:	d807      	bhi.n	8008768 <memmove+0x20>
 8008758:	1e43      	subs	r3, r0, #1
 800875a:	42a1      	cmp	r1, r4
 800875c:	d008      	beq.n	8008770 <memmove+0x28>
 800875e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008762:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008766:	e7f8      	b.n	800875a <memmove+0x12>
 8008768:	4601      	mov	r1, r0
 800876a:	4402      	add	r2, r0
 800876c:	428a      	cmp	r2, r1
 800876e:	d100      	bne.n	8008772 <memmove+0x2a>
 8008770:	bd10      	pop	{r4, pc}
 8008772:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008776:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800877a:	e7f7      	b.n	800876c <memmove+0x24>

0800877c <memset>:
 800877c:	4603      	mov	r3, r0
 800877e:	4402      	add	r2, r0
 8008780:	4293      	cmp	r3, r2
 8008782:	d100      	bne.n	8008786 <memset+0xa>
 8008784:	4770      	bx	lr
 8008786:	f803 1b01 	strb.w	r1, [r3], #1
 800878a:	e7f9      	b.n	8008780 <memset+0x4>

0800878c <_raise_r>:
 800878c:	291f      	cmp	r1, #31
 800878e:	b538      	push	{r3, r4, r5, lr}
 8008790:	4604      	mov	r4, r0
 8008792:	460d      	mov	r5, r1
 8008794:	d904      	bls.n	80087a0 <_raise_r+0x14>
 8008796:	2316      	movs	r3, #22
 8008798:	6003      	str	r3, [r0, #0]
 800879a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800879e:	bd38      	pop	{r3, r4, r5, pc}
 80087a0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80087a2:	b112      	cbz	r2, 80087aa <_raise_r+0x1e>
 80087a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80087a8:	b94b      	cbnz	r3, 80087be <_raise_r+0x32>
 80087aa:	4620      	mov	r0, r4
 80087ac:	f000 f830 	bl	8008810 <_getpid_r>
 80087b0:	462a      	mov	r2, r5
 80087b2:	4601      	mov	r1, r0
 80087b4:	4620      	mov	r0, r4
 80087b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087ba:	f000 b817 	b.w	80087ec <_kill_r>
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d00a      	beq.n	80087d8 <_raise_r+0x4c>
 80087c2:	1c59      	adds	r1, r3, #1
 80087c4:	d103      	bne.n	80087ce <_raise_r+0x42>
 80087c6:	2316      	movs	r3, #22
 80087c8:	6003      	str	r3, [r0, #0]
 80087ca:	2001      	movs	r0, #1
 80087cc:	e7e7      	b.n	800879e <_raise_r+0x12>
 80087ce:	2400      	movs	r4, #0
 80087d0:	4628      	mov	r0, r5
 80087d2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80087d6:	4798      	blx	r3
 80087d8:	2000      	movs	r0, #0
 80087da:	e7e0      	b.n	800879e <_raise_r+0x12>

080087dc <raise>:
 80087dc:	4b02      	ldr	r3, [pc, #8]	; (80087e8 <raise+0xc>)
 80087de:	4601      	mov	r1, r0
 80087e0:	6818      	ldr	r0, [r3, #0]
 80087e2:	f7ff bfd3 	b.w	800878c <_raise_r>
 80087e6:	bf00      	nop
 80087e8:	2000005c 	.word	0x2000005c

080087ec <_kill_r>:
 80087ec:	b538      	push	{r3, r4, r5, lr}
 80087ee:	2300      	movs	r3, #0
 80087f0:	4d06      	ldr	r5, [pc, #24]	; (800880c <_kill_r+0x20>)
 80087f2:	4604      	mov	r4, r0
 80087f4:	4608      	mov	r0, r1
 80087f6:	4611      	mov	r1, r2
 80087f8:	602b      	str	r3, [r5, #0]
 80087fa:	f7fb fcd2 	bl	80041a2 <_kill>
 80087fe:	1c43      	adds	r3, r0, #1
 8008800:	d102      	bne.n	8008808 <_kill_r+0x1c>
 8008802:	682b      	ldr	r3, [r5, #0]
 8008804:	b103      	cbz	r3, 8008808 <_kill_r+0x1c>
 8008806:	6023      	str	r3, [r4, #0]
 8008808:	bd38      	pop	{r3, r4, r5, pc}
 800880a:	bf00      	nop
 800880c:	200021b4 	.word	0x200021b4

08008810 <_getpid_r>:
 8008810:	f7fb bcc0 	b.w	8004194 <_getpid>

08008814 <_sbrk_r>:
 8008814:	b538      	push	{r3, r4, r5, lr}
 8008816:	2300      	movs	r3, #0
 8008818:	4d05      	ldr	r5, [pc, #20]	; (8008830 <_sbrk_r+0x1c>)
 800881a:	4604      	mov	r4, r0
 800881c:	4608      	mov	r0, r1
 800881e:	602b      	str	r3, [r5, #0]
 8008820:	f7fb fcda 	bl	80041d8 <_sbrk>
 8008824:	1c43      	adds	r3, r0, #1
 8008826:	d102      	bne.n	800882e <_sbrk_r+0x1a>
 8008828:	682b      	ldr	r3, [r5, #0]
 800882a:	b103      	cbz	r3, 800882e <_sbrk_r+0x1a>
 800882c:	6023      	str	r3, [r4, #0]
 800882e:	bd38      	pop	{r3, r4, r5, pc}
 8008830:	200021b4 	.word	0x200021b4

08008834 <__errno>:
 8008834:	4b01      	ldr	r3, [pc, #4]	; (800883c <__errno+0x8>)
 8008836:	6818      	ldr	r0, [r3, #0]
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	2000005c 	.word	0x2000005c

08008840 <__libc_init_array>:
 8008840:	b570      	push	{r4, r5, r6, lr}
 8008842:	2600      	movs	r6, #0
 8008844:	4d0c      	ldr	r5, [pc, #48]	; (8008878 <__libc_init_array+0x38>)
 8008846:	4c0d      	ldr	r4, [pc, #52]	; (800887c <__libc_init_array+0x3c>)
 8008848:	1b64      	subs	r4, r4, r5
 800884a:	10a4      	asrs	r4, r4, #2
 800884c:	42a6      	cmp	r6, r4
 800884e:	d109      	bne.n	8008864 <__libc_init_array+0x24>
 8008850:	f000 f872 	bl	8008938 <_init>
 8008854:	2600      	movs	r6, #0
 8008856:	4d0a      	ldr	r5, [pc, #40]	; (8008880 <__libc_init_array+0x40>)
 8008858:	4c0a      	ldr	r4, [pc, #40]	; (8008884 <__libc_init_array+0x44>)
 800885a:	1b64      	subs	r4, r4, r5
 800885c:	10a4      	asrs	r4, r4, #2
 800885e:	42a6      	cmp	r6, r4
 8008860:	d105      	bne.n	800886e <__libc_init_array+0x2e>
 8008862:	bd70      	pop	{r4, r5, r6, pc}
 8008864:	f855 3b04 	ldr.w	r3, [r5], #4
 8008868:	4798      	blx	r3
 800886a:	3601      	adds	r6, #1
 800886c:	e7ee      	b.n	800884c <__libc_init_array+0xc>
 800886e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008872:	4798      	blx	r3
 8008874:	3601      	adds	r6, #1
 8008876:	e7f2      	b.n	800885e <__libc_init_array+0x1e>
 8008878:	08008f2c 	.word	0x08008f2c
 800887c:	08008f2c 	.word	0x08008f2c
 8008880:	08008f2c 	.word	0x08008f2c
 8008884:	08008f34 	.word	0x08008f34

08008888 <__retarget_lock_acquire_recursive>:
 8008888:	4770      	bx	lr

0800888a <__retarget_lock_release_recursive>:
 800888a:	4770      	bx	lr

0800888c <memcpy>:
 800888c:	440a      	add	r2, r1
 800888e:	4291      	cmp	r1, r2
 8008890:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008894:	d100      	bne.n	8008898 <memcpy+0xc>
 8008896:	4770      	bx	lr
 8008898:	b510      	push	{r4, lr}
 800889a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800889e:	4291      	cmp	r1, r2
 80088a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088a4:	d1f9      	bne.n	800889a <memcpy+0xe>
 80088a6:	bd10      	pop	{r4, pc}

080088a8 <_free_r>:
 80088a8:	b538      	push	{r3, r4, r5, lr}
 80088aa:	4605      	mov	r5, r0
 80088ac:	2900      	cmp	r1, #0
 80088ae:	d040      	beq.n	8008932 <_free_r+0x8a>
 80088b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088b4:	1f0c      	subs	r4, r1, #4
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	bfb8      	it	lt
 80088ba:	18e4      	addlt	r4, r4, r3
 80088bc:	f7ff ff38 	bl	8008730 <__malloc_lock>
 80088c0:	4a1c      	ldr	r2, [pc, #112]	; (8008934 <_free_r+0x8c>)
 80088c2:	6813      	ldr	r3, [r2, #0]
 80088c4:	b933      	cbnz	r3, 80088d4 <_free_r+0x2c>
 80088c6:	6063      	str	r3, [r4, #4]
 80088c8:	6014      	str	r4, [r2, #0]
 80088ca:	4628      	mov	r0, r5
 80088cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088d0:	f7ff bf34 	b.w	800873c <__malloc_unlock>
 80088d4:	42a3      	cmp	r3, r4
 80088d6:	d908      	bls.n	80088ea <_free_r+0x42>
 80088d8:	6820      	ldr	r0, [r4, #0]
 80088da:	1821      	adds	r1, r4, r0
 80088dc:	428b      	cmp	r3, r1
 80088de:	bf01      	itttt	eq
 80088e0:	6819      	ldreq	r1, [r3, #0]
 80088e2:	685b      	ldreq	r3, [r3, #4]
 80088e4:	1809      	addeq	r1, r1, r0
 80088e6:	6021      	streq	r1, [r4, #0]
 80088e8:	e7ed      	b.n	80088c6 <_free_r+0x1e>
 80088ea:	461a      	mov	r2, r3
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	b10b      	cbz	r3, 80088f4 <_free_r+0x4c>
 80088f0:	42a3      	cmp	r3, r4
 80088f2:	d9fa      	bls.n	80088ea <_free_r+0x42>
 80088f4:	6811      	ldr	r1, [r2, #0]
 80088f6:	1850      	adds	r0, r2, r1
 80088f8:	42a0      	cmp	r0, r4
 80088fa:	d10b      	bne.n	8008914 <_free_r+0x6c>
 80088fc:	6820      	ldr	r0, [r4, #0]
 80088fe:	4401      	add	r1, r0
 8008900:	1850      	adds	r0, r2, r1
 8008902:	4283      	cmp	r3, r0
 8008904:	6011      	str	r1, [r2, #0]
 8008906:	d1e0      	bne.n	80088ca <_free_r+0x22>
 8008908:	6818      	ldr	r0, [r3, #0]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	4408      	add	r0, r1
 800890e:	6010      	str	r0, [r2, #0]
 8008910:	6053      	str	r3, [r2, #4]
 8008912:	e7da      	b.n	80088ca <_free_r+0x22>
 8008914:	d902      	bls.n	800891c <_free_r+0x74>
 8008916:	230c      	movs	r3, #12
 8008918:	602b      	str	r3, [r5, #0]
 800891a:	e7d6      	b.n	80088ca <_free_r+0x22>
 800891c:	6820      	ldr	r0, [r4, #0]
 800891e:	1821      	adds	r1, r4, r0
 8008920:	428b      	cmp	r3, r1
 8008922:	bf01      	itttt	eq
 8008924:	6819      	ldreq	r1, [r3, #0]
 8008926:	685b      	ldreq	r3, [r3, #4]
 8008928:	1809      	addeq	r1, r1, r0
 800892a:	6021      	streq	r1, [r4, #0]
 800892c:	6063      	str	r3, [r4, #4]
 800892e:	6054      	str	r4, [r2, #4]
 8008930:	e7cb      	b.n	80088ca <_free_r+0x22>
 8008932:	bd38      	pop	{r3, r4, r5, pc}
 8008934:	20002074 	.word	0x20002074

08008938 <_init>:
 8008938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800893a:	bf00      	nop
 800893c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800893e:	bc08      	pop	{r3}
 8008940:	469e      	mov	lr, r3
 8008942:	4770      	bx	lr

08008944 <_fini>:
 8008944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008946:	bf00      	nop
 8008948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800894a:	bc08      	pop	{r3}
 800894c:	469e      	mov	lr, r3
 800894e:	4770      	bx	lr
